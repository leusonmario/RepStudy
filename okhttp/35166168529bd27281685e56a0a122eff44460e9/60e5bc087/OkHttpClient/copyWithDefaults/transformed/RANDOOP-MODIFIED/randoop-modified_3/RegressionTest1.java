import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(1, (long) (byte) 10);
        int int3 = connectionPool2.getSpdyConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory39);
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        java.net.Proxy proxy42 = okHttpClient40.proxy;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(proxy42);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ResponseCache responseCache14 = okHttpClient13.getResponseCache();
        java.net.ProxySelector proxySelector15 = null;
        okHttpClient13.proxySelector = proxySelector15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache18 = okHttpClient17.okResponseCache();
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setResponseCache(responseCache19);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        okHttpClient17.transports = strList23;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList23;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient13.setTransports((java.util.List<java.lang.String>) strList23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNull(okResponseCache18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector18 = okHttpClient0.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        java.net.CookieHandler cookieHandler27 = okHttpClient19.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache28 = okHttpClient19.okResponseCache();
        java.net.CookieHandler cookieHandler29 = okHttpClient19.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        java.net.Proxy proxy31 = java.net.Proxy.NO_PROXY;
        boolean boolean33 = proxy31.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type34 = proxy31.type();
        java.net.SocketAddress socketAddress35 = proxy31.address();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient19.setProxy(proxy31);
        java.lang.String[] strArray38 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        okHttpClient19.transports = strList39;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList39;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList39;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [DIRECT]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(okAuthenticator15);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(cookieHandler27);
        org.junit.Assert.assertNull(okResponseCache28);
        org.junit.Assert.assertNull(cookieHandler29);
        org.junit.Assert.assertNotNull(proxy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type34.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (-1L));
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient0.cookieHandler = cookieHandler5;
        java.net.Proxy proxy7 = java.net.Proxy.NO_PROXY;
        boolean boolean9 = proxy7.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        okHttpClient10.transports = strList16;
        boolean boolean19 = proxy7.equals((java.lang.Object) strList16);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setProxy(proxy7);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setHostnameVerifier(hostnameVerifier39);
        boolean boolean41 = proxy7.equals((java.lang.Object) okHttpClient40);
        java.net.SocketAddress socketAddress42 = proxy7.address();
        java.net.Proxy.Type type43 = proxy7.type();
        java.net.SocketAddress socketAddress44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy45 = new java.net.Proxy(type43, socketAddress44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type43.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection17 = okHttpClient0.open(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(cookieHandler14);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setResponseCache(responseCache22);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        okHttpClient20.transports = strList26;
        okHttpClient13.transports = strList26;
        java.net.Proxy proxy30 = okHttpClient13.getProxy();
        boolean boolean31 = okHttpClient13.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setConnectionPool(connectionPool41);
        java.net.Proxy proxy44 = okHttpClient43.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        int int48 = connectionPool46.getSpdyConnectionCount();
        okHttpClient43.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = okHttpClient50.hostnameVerifier;
        java.net.Proxy proxy56 = okHttpClient50.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool59 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient50.connectionPool = connectionPool59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient50.copyWithDefaults();
        java.net.ResponseCache responseCache62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient61.setResponseCache(responseCache62);
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient61.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient43.setAuthenticator(okAuthenticator64);
        okHttpClient13.authenticator = okAuthenticator64;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient12.setAuthenticator(okAuthenticator64);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient67.copyWithDefaults();
        boolean boolean69 = okHttpClient67.getFollowProtocolRedirects();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(hostnameVerifier55);
        org.junit.Assert.assertNull(proxy56);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(okAuthenticator64);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient4.proxySelector = proxySelector9;
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setConnectionPool(connectionPool13);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setFollowProtocolRedirects(true);
        java.net.ResponseCache responseCache17 = okHttpClient16.responseCache;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(responseCache17);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList16 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory65);
        java.net.Socket socket69 = sSLSocketFactory65.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory65);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket73 = sSLSocketFactory65.createSocket("", (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient70);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        java.net.CookieHandler cookieHandler12 = null;
        okHttpClient11.cookieHandler = cookieHandler12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient11.getSslSocketFactory();
        java.net.InetAddress inetAddress17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket19 = sSLSocketFactory14.createSocket("DIRECT", (int) (byte) 10, inetAddress17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(sSLSocketFactory14);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setProxySelector(proxySelector12);
        java.net.CookieHandler cookieHandler14 = okHttpClient13.cookieHandler;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(cookieHandler14);
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.InetAddress inetAddress38 = null;
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory33.createSocket(inetAddress38, (int) (byte) -1, inetAddress40, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory14);
        com.squareup.okhttp.ConnectionPool connectionPool16 = okHttpClient15.connectionPool;
        java.net.ProxySelector proxySelector17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setProxySelector(proxySelector17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setConnectionPool(connectionPool28);
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient30.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient30.connectionPool = connectionPool35;
        java.net.ResponseCache responseCache37 = okHttpClient30.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient30.sslSocketFactory;
        java.net.Proxy proxy39 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress40 = proxy39.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.setProxy(proxy39);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient30.setSSLSocketFactory(sSLSocketFactory42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient44.hostnameVerifier;
        java.net.Proxy proxy50 = okHttpClient44.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool53 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient44.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient44.copyWithDefaults();
        java.net.ResponseCache responseCache56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setResponseCache(responseCache56);
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = okHttpClient55.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient30.setAuthenticator(okAuthenticator58);
        java.net.Proxy proxy60 = okHttpClient59.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient59.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        java.util.List<java.lang.String> strList70 = okHttpClient65.transports;
        com.squareup.okhttp.ConnectionPool connectionPool71 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient65.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setConnectionPool(connectionPool71);
        java.net.Proxy proxy74 = okHttpClient73.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool76;
        int int78 = connectionPool76.getSpdyConnectionCount();
        okHttpClient73.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier81 = null;
        okHttpClient80.hostnameVerifier = hostnameVerifier81;
        java.net.ResponseCache responseCache83 = null;
        okHttpClient80.responseCache = responseCache83;
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = okHttpClient80.hostnameVerifier;
        java.net.Proxy proxy86 = okHttpClient80.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool89 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient80.connectionPool = connectionPool89;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient80.copyWithDefaults();
        java.net.ResponseCache responseCache92 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient91.setResponseCache(responseCache92);
        com.squareup.okhttp.OkAuthenticator okAuthenticator94 = okHttpClient91.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient73.setAuthenticator(okAuthenticator94);
        okHttpClient59.authenticator = okAuthenticator94;
        okHttpClient18.authenticator = okAuthenticator94;
        javax.net.ssl.HostnameVerifier hostnameVerifier98 = okHttpClient18.hostnameVerifier;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNull(okAuthenticator32);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(proxy39);
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(hostnameVerifier49);
        org.junit.Assert.assertNull(proxy50);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okAuthenticator58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertNotNull(okAuthenticator61);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(connectionPool71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(proxy74);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(hostnameVerifier85);
        org.junit.Assert.assertNull(proxy86);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okAuthenticator94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNull(hostnameVerifier98);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient16.authenticator;
        boolean boolean18 = okHttpClient16.followProtocolRedirects;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(okAuthenticator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray22 = sSLSocketFactory19.getDefaultCipherSuites();
        java.net.InetAddress inetAddress23 = null;
        java.net.InetAddress inetAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket27 = sSLSocketFactory19.createSocket(inetAddress23, (int) (short) 10, inetAddress25, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        okHttpClient7.sslSocketFactory = sSLSocketFactory8;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient7.authenticator;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = okAuthenticator10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator10);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient4.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = okHttpClient6.hostnameVerifier;
        java.net.Proxy proxy12 = okHttpClient6.getProxy();
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient6.cookieHandler = cookieHandler13;
        okHttpClient6.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient17.sslSocketFactory;
        java.net.CookieHandler cookieHandler24 = okHttpClient17.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient17.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool27;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = null;
        okHttpClient26.authenticator = okAuthenticator29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient26.responseCache = responseCache32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = okHttpClient34.hostnameVerifier;
        java.net.Proxy proxy40 = okHttpClient34.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient34.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient34.copyWithDefaults();
        java.net.Proxy proxy46 = okHttpClient45.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = okHttpClient45.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient26.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient17.setHostnameVerifier(hostnameVerifier47);
        okHttpClient6.hostnameVerifier = hostnameVerifier47;
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = okHttpClient6.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient4.setHostnameVerifier(hostnameVerifier51);
        com.squareup.okhttp.ConnectionPool connectionPool53 = okHttpClient52.connectionPool;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(hostnameVerifier11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(sSLSocketFactory23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(hostnameVerifier39);
        org.junit.Assert.assertNull(proxy40);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(hostnameVerifier47);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(hostnameVerifier51);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(connectionPool53);
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.net.Proxy.Type type18 = proxy14.type();
        okHttpClient11.proxy = proxy14;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient29.copyWithDefaults();
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient37.getSslSocketFactory();
        okHttpClient20.sslSocketFactory = sSLSocketFactory39;
        okHttpClient11.sslSocketFactory = sSLSocketFactory39;
        java.net.Socket socket42 = sSLSocketFactory39.createSocket();
        javax.net.SocketFactory socketFactory43 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket44 = socketFactory43.createSocket();
        java.io.InputStream inputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket47 = sSLSocketFactory39.createSocket(socket44, inputStream45, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(okHttpClient37);
// flaky:         org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNotNull(sSLSocketFactory39);
        org.junit.Assert.assertNotNull(socket42);
        org.junit.Assert.assertEquals(socket42.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(socket44);
        org.junit.Assert.assertEquals(socket44.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setResponseCache(responseCache10);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient0.hostnameVerifier;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier12);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient62.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient62.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient62.connectionPool = connectionPool67;
        java.net.ResponseCache responseCache69 = okHttpClient62.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient62.sslSocketFactory;
        java.net.Proxy proxy71 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress72 = proxy71.address();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setProxy(proxy71);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient(okHttpClient73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient73.setSSLSocketFactory(sSLSocketFactory85);
        java.lang.String[] strArray87 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory85);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket93 = sSLSocketFactory85.createSocket("DIRECT", 1);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(okAuthenticator64);
        org.junit.Assert.assertNull(responseCache69);
        org.junit.Assert.assertNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(proxy71);
        org.junit.Assert.assertNull(socketAddress72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(okHttpClient90);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(0, 0L);
        okHttpClient0.connectionPool = connectionPool14;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient0.getHostnameVerifier();
        java.util.List<java.lang.String> strList19 = okHttpClient0.getTransports();
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient0.failedRoutes;
        java.net.Proxy proxy21 = okHttpClient0.getProxy();
        java.net.ResponseCache responseCache22 = okHttpClient0.responseCache;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(sSLSocketFactory17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(routeSet20);
        org.junit.Assert.assertNull(proxy21);
        org.junit.Assert.assertNull(responseCache22);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getSupportedCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory61.getSupportedCipherSuites();
        java.net.Socket socket66 = sSLSocketFactory61.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket69 = sSLSocketFactory61.createSocket("hi!", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = null;
        okHttpClient24.sslSocketFactory = sSLSocketFactory25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setHostnameVerifier(hostnameVerifier40);
        java.net.CookieHandler cookieHandler42 = okHttpClient24.getCookieHandler();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient24.sslSocketFactory;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(cookieHandler42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ResponseCache responseCache14 = okHttpClient13.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.sslSocketFactory;
        java.lang.String[] strArray16 = sSLSocketFactory15.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket19 = sSLSocketFactory15.createSocket("DIRECT", 10);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(sSLSocketFactory15);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.net.InetAddress inetAddress38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket40 = sSLSocketFactory34.createSocket("", (int) (byte) 1, inetAddress38, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ProxySelector proxySelector15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.setProxySelector(proxySelector15);
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient12.hostnameVerifier;
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient12.setCookieHandler(cookieHandler18);
        java.net.ResponseCache responseCache20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setResponseCache(responseCache20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient22.copyWithDefaults();
        java.net.ProxySelector proxySelector31 = okHttpClient30.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient30.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory32);
        boolean boolean34 = proxy6.equals((java.lang.Object) sSLSocketFactory32);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool36 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.net.Proxy proxy40 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress41 = proxy40.address();
        java.net.SocketAddress socketAddress42 = proxy40.address();
        okHttpClient35.proxy = proxy40;
        com.squareup.okhttp.ConnectionPool connectionPool46 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address47 = null;
        com.squareup.okhttp.Connection connection48 = connectionPool46.get(address47);
        int int49 = connectionPool46.getSpdyConnectionCount();
        connectionPool46.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient35.setConnectionPool(connectionPool46);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ProxySelector proxySelector55 = okHttpClient52.proxySelector;
        java.net.ProxySelector proxySelector56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient52.setProxySelector(proxySelector56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient58.hostnameVerifier = hostnameVerifier59;
        java.net.ResponseCache responseCache61 = null;
        okHttpClient58.responseCache = responseCache61;
        java.util.List<java.lang.String> strList63 = okHttpClient58.transports;
        com.squareup.okhttp.ConnectionPool connectionPool64 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient58.copyWithDefaults();
        java.net.ProxySelector proxySelector67 = okHttpClient66.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient66.getSslSocketFactory();
        okHttpClient52.sslSocketFactory = sSLSocketFactory68;
        okHttpClient35.sslSocketFactory = sSLSocketFactory68;
        java.lang.String[] strArray71 = sSLSocketFactory68.getSupportedCipherSuites();
        java.lang.String[] strArray72 = sSLSocketFactory68.getDefaultCipherSuites();
        java.net.Socket socket73 = sSLSocketFactory68.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket77 = sSLSocketFactory32.createSocket(socket73, "", 10, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
// flaky:         org.junit.Assert.assertNull(proxySelector31);
        org.junit.Assert.assertNotNull(sSLSocketFactory32);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNotNull(proxy40);
        org.junit.Assert.assertNull(socketAddress41);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNull(connection48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(proxySelector55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(connectionPool64);
        org.junit.Assert.assertNotNull(okHttpClient66);
// flaky:         org.junit.Assert.assertNull(proxySelector67);
        org.junit.Assert.assertNotNull(sSLSocketFactory68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(socket73);
        org.junit.Assert.assertEquals(socket73.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector12 = okHttpClient0.getProxySelector();
        okHttpClient0.followProtocolRedirects = false;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient0.getSslSocketFactory();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(sSLSocketFactory15);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(0, (long) (short) 100);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.InetAddress inetAddress38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket40 = sSLSocketFactory33.createSocket(inetAddress38, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = okHttpClient0.connectionPool;
        java.net.CookieHandler cookieHandler2 = okHttpClient0.cookieHandler;
        org.junit.Assert.assertNull(connectionPool1);
        org.junit.Assert.assertNull(cookieHandler2);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) '#');
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        java.net.ProxySelector proxySelector14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setProxySelector(proxySelector14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        okHttpClient11.sslSocketFactory = sSLSocketFactory49;
        java.net.InetAddress inetAddress55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket57 = sSLSocketFactory49.createSocket("DIRECT", (int) (byte) 10, inetAddress55, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = okHttpClient0.authenticator;
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection5 = okHttpClient0.open(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(okAuthenticator3);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.lang.String[] strArray42 = sSLSocketFactory41.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket45 = sSLSocketFactory41.createSocket("hi!", 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.authenticator;
        java.net.ProxySelector proxySelector9 = okHttpClient7.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        okHttpClient10.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket31 = sSLSocketFactory29.createSocket();
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        okHttpClient7.sslSocketFactory = sSLSocketFactory29;
        java.net.InetAddress inetAddress34 = null;
        java.net.InetAddress inetAddress36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket38 = sSLSocketFactory29.createSocket(inetAddress34, (int) (byte) 1, inetAddress36, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(socket31);
        org.junit.Assert.assertEquals(socket31.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) '#');
        int int3 = connectionPool2.getConnectionCount();
        com.squareup.okhttp.Connection connection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        boolean boolean14 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.ConnectionPool connectionPool24 = okHttpClient16.connectionPool;
        boolean boolean25 = okHttpClient16.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient26.sslSocketFactory;
        java.net.CookieHandler cookieHandler33 = okHttpClient26.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient26.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool36 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool36;
        com.squareup.okhttp.OkAuthenticator okAuthenticator38 = null;
        okHttpClient35.authenticator = okAuthenticator38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient35.responseCache = responseCache41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient43.hostnameVerifier;
        java.net.Proxy proxy49 = okHttpClient43.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool52 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient43.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.copyWithDefaults();
        java.net.Proxy proxy55 = okHttpClient54.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient54.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient35.setHostnameVerifier(hostnameVerifier56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient26.setHostnameVerifier(hostnameVerifier56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient16.setHostnameVerifier(hostnameVerifier56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ProxySelector proxySelector63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient60.setProxySelector(proxySelector63);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient64.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray66 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet67 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet67, routeArray66);
        okHttpClient65.failedRoutes = routeSet67;
        okHttpClient16.failedRoutes = routeSet67;
        java.net.ResponseCache responseCache71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient16.setResponseCache(responseCache71);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ProxySelector proxySelector76 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient73.setProxySelector(proxySelector76);
        java.net.CookieHandler cookieHandler78 = okHttpClient73.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = null;
        okHttpClient79.hostnameVerifier = hostnameVerifier80;
        java.net.ResponseCache responseCache82 = null;
        okHttpClient79.responseCache = responseCache82;
        java.util.List<java.lang.String> strList84 = okHttpClient79.transports;
        com.squareup.okhttp.ConnectionPool connectionPool85 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient79.connectionPool = connectionPool85;
        java.net.Proxy proxy87 = null;
        okHttpClient79.proxy = proxy87;
        java.util.Set<com.squareup.okhttp.Route> routeSet89 = okHttpClient79.failedRoutes;
        okHttpClient73.failedRoutes = routeSet89;
        javax.net.ssl.HostnameVerifier hostnameVerifier91 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient73.setHostnameVerifier(hostnameVerifier91);
        java.net.ProxySelector proxySelector93 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient92.setProxySelector(proxySelector93);
        java.net.Proxy proxy95 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress96 = proxy95.address();
        com.squareup.okhttp.OkHttpClient okHttpClient97 = okHttpClient92.setProxy(proxy95);
        okHttpClient16.proxy = proxy95;
        okHttpClient0.proxy = proxy95;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(sSLSocketFactory32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(hostnameVerifier48);
        org.junit.Assert.assertNull(proxy49);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(hostnameVerifier56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(routeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(cookieHandler78);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNotNull(connectionPool85);
        org.junit.Assert.assertNotNull(routeSet89);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(proxy95);
        org.junit.Assert.assertNull(socketAddress96);
        org.junit.Assert.assertNotNull(okHttpClient97);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        int int5 = connectionPool2.getSpdyConnectionCount();
        int int6 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertNull(connection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = null;
        okHttpClient24.sslSocketFactory = sSLSocketFactory25;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient28.sslSocketFactory;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(sSLSocketFactory29);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getSupportedCipherSuites();
        java.lang.String[] strArray32 = sSLSocketFactory28.getDefaultCipherSuites();
        java.net.Socket socket33 = sSLSocketFactory28.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = okHttpClient34.hostnameVerifier;
        java.net.Proxy proxy40 = okHttpClient34.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient34.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient34.copyWithDefaults();
        java.net.ResponseCache responseCache46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setResponseCache(responseCache46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.net.Proxy proxy53 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress54 = proxy53.address();
        java.net.SocketAddress socketAddress55 = proxy53.address();
        okHttpClient48.proxy = proxy53;
        com.squareup.okhttp.ConnectionPool connectionPool59 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address60 = null;
        com.squareup.okhttp.Connection connection61 = connectionPool59.get(address60);
        int int62 = connectionPool59.getSpdyConnectionCount();
        connectionPool59.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient48.setConnectionPool(connectionPool59);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ProxySelector proxySelector68 = okHttpClient65.proxySelector;
        java.net.ProxySelector proxySelector69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient65.setProxySelector(proxySelector69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = null;
        okHttpClient71.hostnameVerifier = hostnameVerifier72;
        java.net.ResponseCache responseCache74 = null;
        okHttpClient71.responseCache = responseCache74;
        java.util.List<java.lang.String> strList76 = okHttpClient71.transports;
        com.squareup.okhttp.ConnectionPool connectionPool77 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient71.connectionPool = connectionPool77;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient71.copyWithDefaults();
        java.net.ProxySelector proxySelector80 = okHttpClient79.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory81 = okHttpClient79.getSslSocketFactory();
        okHttpClient65.sslSocketFactory = sSLSocketFactory81;
        okHttpClient48.sslSocketFactory = sSLSocketFactory81;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient47.setSSLSocketFactory(sSLSocketFactory81);
        java.net.Socket socket85 = sSLSocketFactory81.createSocket();
        java.io.InputStream inputStream86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket88 = sSLSocketFactory28.createSocket(socket85, inputStream86, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNull(hostnameVerifier39);
        org.junit.Assert.assertNull(proxy40);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(proxy53);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertNull(socketAddress55);
        org.junit.Assert.assertNull(connection61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(proxySelector68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(strList76);
        org.junit.Assert.assertNotNull(connectionPool77);
        org.junit.Assert.assertNotNull(okHttpClient79);
// flaky:         org.junit.Assert.assertNull(proxySelector80);
        org.junit.Assert.assertNotNull(sSLSocketFactory81);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(socket85);
        org.junit.Assert.assertEquals(socket85.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.net.Socket socket22 = sSLSocketFactory19.createSocket();
        java.net.InetAddress inetAddress23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket25 = sSLSocketFactory19.createSocket(inetAddress23, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket22);
        org.junit.Assert.assertEquals(socket22.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        javax.net.SocketFactory socketFactory64 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket65 = socketFactory64.createSocket();
        java.net.Socket socket66 = socketFactory64.createSocket();
        java.net.Socket socket67 = socketFactory64.createSocket();
        java.io.InputStream inputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket70 = sSLSocketFactory61.createSocket(socket67, inputStream68, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(socketFactory64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket67);
        org.junit.Assert.assertEquals(socket67.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        okHttpClient0.transports = strList6;
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setCookieHandler(cookieHandler10);
        boolean boolean12 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection16 = okHttpClient14.open(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) '#');
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.lang.String str4 = proxy0.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient5.getSslSocketFactory();
        boolean boolean9 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache15 = okHttpClient10.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory16);
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient10.setProxySelector(proxySelector18);
        boolean boolean20 = proxy0.equals((java.lang.Object) okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient21.getSslSocketFactory();
        java.net.CookieHandler cookieHandler30 = okHttpClient21.cookieHandler;
        java.net.ResponseCache responseCache31 = okHttpClient21.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient21.sslSocketFactory;
        boolean boolean33 = proxy0.equals((java.lang.Object) okHttpClient21);
        java.net.SocketAddress socketAddress34 = proxy0.address();
        java.net.Proxy.Type type35 = proxy0.type();
        java.net.SocketAddress socketAddress36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy37 = new java.net.Proxy(type35, socketAddress36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNull(sSLSocketFactory29);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(responseCache31);
        org.junit.Assert.assertNull(sSLSocketFactory32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type35.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient0.setProxySelector(proxySelector20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.lang.Class<?> wildcardClass23 = okHttpClient0.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setCookieHandler(cookieHandler12);
        java.net.CookieHandler cookieHandler14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setCookieHandler(cookieHandler14);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setResponseCache(responseCache22);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        okHttpClient20.transports = strList26;
        okHttpClient13.transports = strList26;
        java.net.Proxy proxy30 = okHttpClient13.getProxy();
        boolean boolean31 = okHttpClient13.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setConnectionPool(connectionPool41);
        java.net.Proxy proxy44 = okHttpClient43.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        int int48 = connectionPool46.getSpdyConnectionCount();
        okHttpClient43.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = okHttpClient50.hostnameVerifier;
        java.net.Proxy proxy56 = okHttpClient50.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool59 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient50.connectionPool = connectionPool59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient50.copyWithDefaults();
        java.net.ResponseCache responseCache62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient61.setResponseCache(responseCache62);
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient61.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient43.setAuthenticator(okAuthenticator64);
        okHttpClient13.authenticator = okAuthenticator64;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient12.setAuthenticator(okAuthenticator64);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient67.copyWithDefaults();
        java.net.ResponseCache responseCache69 = null;
        okHttpClient68.responseCache = responseCache69;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(hostnameVerifier55);
        org.junit.Assert.assertNull(proxy56);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(okAuthenticator64);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient68);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient11.connectionPool;
        boolean boolean15 = okHttpClient11.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        connectionPool9.evictAll();
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool9.get(address12);
        com.squareup.okhttp.Connection connection14 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool9.maybeShare(connection14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(connection13);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        okHttpClient11.followProtocolRedirects = false;
        java.net.ProxySelector proxySelector29 = null;
        okHttpClient11.proxySelector = proxySelector29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient31.setConnectionPool(connectionPool40);
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient42.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient42.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient42.connectionPool = connectionPool47;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient42.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator50 = okHttpClient42.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache52 = okHttpClient51.okResponseCache();
        java.net.ResponseCache responseCache53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setResponseCache(responseCache53);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        okHttpClient51.transports = strList57;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient51.setSSLSocketFactory(sSLSocketFactory60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache63 = okHttpClient62.okResponseCache();
        java.net.ResponseCache responseCache64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient62.setResponseCache(responseCache64);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        okHttpClient62.transports = strList68;
        okHttpClient51.transports = strList68;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList68;
        okHttpClient42.transports = strList68;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient11.setTransports((java.util.List<java.lang.String>) strList68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(okAuthenticator44);
        org.junit.Assert.assertNull(sSLSocketFactory49);
        org.junit.Assert.assertNull(okAuthenticator50);
        org.junit.Assert.assertNull(okResponseCache52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(okResponseCache63);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        java.util.List<java.lang.String> strList16 = okHttpClient13.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        java.net.Proxy proxy23 = java.net.Proxy.NO_PROXY;
        boolean boolean25 = proxy23.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type26 = proxy23.type();
        java.net.SocketAddress socketAddress27 = proxy23.address();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.setProxy(proxy23);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ProxySelector proxySelector32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.setProxySelector(proxySelector32);
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient29.hostnameVerifier;
        java.net.CookieHandler cookieHandler35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient29.setCookieHandler(cookieHandler35);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory49);
        boolean boolean51 = proxy23.equals((java.lang.Object) sSLSocketFactory49);
        java.lang.String[] strArray52 = sSLSocketFactory49.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory49);
        javax.net.SocketFactory socketFactory54 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket55 = socketFactory54.createSocket();
        java.net.Socket socket56 = socketFactory54.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket60 = sSLSocketFactory49.createSocket(socket56, "", 10, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(proxy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type26.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress27);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(socket55);
        org.junit.Assert.assertEquals(socket55.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket56);
        org.junit.Assert.assertEquals(socket56.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getSupportedCipherSuites();
        java.net.Socket socket32 = sSLSocketFactory28.createSocket();
        java.net.InetAddress inetAddress35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket37 = sSLSocketFactory28.createSocket("hi!", (int) (short) 0, inetAddress35, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ResponseCache responseCache14 = okHttpClient13.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.sslSocketFactory;
        java.lang.String[] strArray16 = sSLSocketFactory15.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket19 = sSLSocketFactory15.createSocket("DIRECT", 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(sSLSocketFactory15);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        okHttpClient14.authenticator = okAuthenticator17;
        java.net.CookieHandler cookieHandler19 = null;
        okHttpClient14.cookieHandler = cookieHandler19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient24.okResponseCache();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setResponseCache(responseCache26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        okHttpClient24.transports = strList30;
        boolean boolean33 = proxy21.equals((java.lang.Object) strList30);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient14.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setProxySelector(proxySelector38);
        java.net.CookieHandler cookieHandler40 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient41.failedRoutes;
        okHttpClient35.failedRoutes = routeSet51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient35.setHostnameVerifier(hostnameVerifier53);
        boolean boolean55 = proxy21.equals((java.lang.Object) okHttpClient54);
        okHttpClient0.proxy = proxy21;
        java.net.Proxy proxy57 = java.net.Proxy.NO_PROXY;
        boolean boolean59 = proxy57.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type60 = proxy57.type();
        java.lang.String str61 = proxy57.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient62.getSslSocketFactory();
        boolean boolean66 = proxy57.equals((java.lang.Object) okHttpClient62);
        java.lang.String str67 = proxy57.toString();
        java.net.Proxy.Type type68 = proxy57.type();
        okHttpClient0.proxy = proxy57;
        java.net.Proxy.Type type70 = proxy57.type();
        java.net.SocketAddress socketAddress71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy72 = new java.net.Proxy(type70, socketAddress71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(routeSet51);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type60.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DIRECT" + "'", str61, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DIRECT" + "'", str67, "DIRECT");
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type68.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type70.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient12.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.Proxy proxy22 = null;
        okHttpClient14.proxy = proxy22;
        boolean boolean24 = okHttpClient14.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        java.net.ProxySelector proxySelector26 = okHttpClient25.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy28 = java.net.Proxy.NO_PROXY;
        boolean boolean30 = proxy28.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type31 = proxy28.type();
        java.net.Proxy.Type type32 = proxy28.type();
        okHttpClient25.proxy = proxy28;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient43.copyWithDefaults();
        java.net.ProxySelector proxySelector52 = okHttpClient51.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory53 = okHttpClient51.getSslSocketFactory();
        okHttpClient34.sslSocketFactory = sSLSocketFactory53;
        okHttpClient25.sslSocketFactory = sSLSocketFactory53;
        java.net.Socket socket56 = sSLSocketFactory53.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket60 = sSLSocketFactory13.createSocket(socket56, "hi!", (int) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNotNull(proxy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type31.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type32.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
// flaky:         org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(sSLSocketFactory53);
        org.junit.Assert.assertNotNull(socket56);
        org.junit.Assert.assertEquals(socket56.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient16.hostnameVerifier;
        java.net.Proxy proxy22 = okHttpClient16.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache24 = okHttpClient23.okResponseCache();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setResponseCache(responseCache25);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        okHttpClient23.transports = strList29;
        okHttpClient16.transports = strList29;
        okHttpClient11.transports = strList29;
        java.net.ResponseCache responseCache34 = okHttpClient11.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        java.net.CookieHandler cookieHandler43 = okHttpClient35.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache44 = okHttpClient35.okResponseCache();
        java.net.CookieHandler cookieHandler45 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient(okHttpClient35);
        java.net.ResponseCache responseCache47 = okHttpClient35.responseCache;
        java.net.CookieHandler cookieHandler48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient35.setCookieHandler(cookieHandler48);
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        boolean boolean52 = proxy50.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache54 = okHttpClient53.okResponseCache();
        java.net.ResponseCache responseCache55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient53.setResponseCache(responseCache55);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        okHttpClient53.transports = strList59;
        boolean boolean62 = proxy50.equals((java.lang.Object) strList59);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList59;
        okHttpClient49.transports = strList59;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient11.setTransports((java.util.List<java.lang.String>) strList59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNull(okResponseCache24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(responseCache34);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNull(cookieHandler43);
        org.junit.Assert.assertNull(okResponseCache44);
        org.junit.Assert.assertNull(cookieHandler45);
        org.junit.Assert.assertNull(responseCache47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(okResponseCache54);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setResponseCache(responseCache25);
        okHttpClient26.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList29 = okHttpClient26.getTransports();
        okHttpClient11.transports = strList29;
        com.squareup.okhttp.ConnectionPool connectionPool33 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient11.connectionPool = connectionPool33;
        int int35 = connectionPool33.getConnectionCount();
        java.lang.Class<?> wildcardClass36 = connectionPool33.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient36.copyWithDefaults();
        java.net.ResponseCache responseCache42 = okHttpClient41.getResponseCache();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(responseCache42);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        java.net.CookieHandler cookieHandler15 = okHttpClient11.cookieHandler;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNull(cookieHandler15);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache13 = okHttpClient12.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient14.hostnameVerifier;
        java.net.Proxy proxy20 = okHttpClient14.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool23 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient14.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient14.copyWithDefaults();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setResponseCache(responseCache26);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient27.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList30 = okHttpClient27.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList30;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient12.setTransports(strList30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(responseCache13);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress3 = proxy0.address();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        java.lang.String str5 = proxy0.toString();
        java.net.Proxy.Type type6 = proxy0.type();
        java.net.SocketAddress socketAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy8 = new java.net.Proxy(type6, socketAddress7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(socketAddress3);
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DIRECT" + "'", str5, "DIRECT");
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type6.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        int int18 = connectionPool14.getSpdyConnectionCount();
        int int19 = connectionPool14.getHttpConnectionCount();
        com.squareup.okhttp.Connection connection20 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool14.maybeShare(connection20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.lang.String[] strArray11 = sSLSocketFactory10.getSupportedCipherSuites();
        java.net.Socket socket12 = null;
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket15 = sSLSocketFactory10.createSocket(socket12, inputStream13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: the existing socket cannot be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        okHttpClient14.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        java.net.Proxy proxy25 = null;
        okHttpClient17.proxy = proxy25;
        boolean boolean27 = okHttpClient17.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient17.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        java.util.List<java.lang.String> strList35 = okHttpClient30.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier36;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache38 = okHttpClient30.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient30.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient40.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.copyWithDefaults();
        java.net.Proxy proxy52 = okHttpClient51.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = okHttpClient51.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient30.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient29.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient14.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient(okHttpClient56);
        java.net.URL uRL58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection59 = okHttpClient57.open(uRL58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(okResponseCache38);
        org.junit.Assert.assertNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(proxy52);
        org.junit.Assert.assertNotNull(hostnameVerifier53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient56);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.net.ProxySelector proxySelector4 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator5 = okHttpClient0.getAuthenticator();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection7 = okHttpClient0.open(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(proxySelector4);
        org.junit.Assert.assertNull(okAuthenticator5);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        java.net.Proxy proxy10 = okHttpClient0.getProxy();
        java.net.ProxySelector proxySelector11 = null;
        okHttpClient0.proxySelector = proxySelector11;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache13 = okHttpClient0.okResponseCache();
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.lang.String str18 = proxy14.toString();
        java.net.Proxy.Type type19 = proxy14.type();
        java.net.Proxy.Type type20 = proxy14.type();
        okHttpClient0.proxy = proxy14;
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection23 = okHttpClient0.open(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(proxy10);
        org.junit.Assert.assertNull(okResponseCache13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DIRECT" + "'", str18, "DIRECT");
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type19.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type20.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector14 = okHttpClient13.proxySelector;
        java.net.ProxySelector proxySelector15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setProxySelector(proxySelector15);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(routeSet12);
        org.junit.Assert.assertNull(proxySelector14);
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList16 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient13.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setProxySelector(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        okHttpClient0.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient8.hostnameVerifier;
        java.net.Proxy proxy14 = okHttpClient8.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient15.okResponseCache();
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setResponseCache(responseCache17);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        okHttpClient15.transports = strList21;
        okHttpClient8.transports = strList21;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList21;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, 1L);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        java.net.CookieHandler cookieHandler12 = null;
        okHttpClient11.cookieHandler = cookieHandler12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient11.getSslSocketFactory();
        java.net.InetAddress inetAddress15 = null;
        java.net.InetAddress inetAddress17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket19 = sSLSocketFactory14.createSocket(inetAddress15, (int) (byte) 0, inetAddress17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(sSLSocketFactory14);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient32.copyWithDefaults();
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient40.getSslSocketFactory();
        okHttpClient23.sslSocketFactory = sSLSocketFactory42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory42);
        java.lang.String[] strArray45 = sSLSocketFactory42.getSupportedCipherSuites();
        java.net.InetAddress inetAddress48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket50 = sSLSocketFactory42.createSocket("hi!", 1, inetAddress48, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(okHttpClient40);
// flaky:         org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(sSLSocketFactory42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.util.List<java.lang.String> strList4 = okHttpClient0.transports;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList5;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setTransports(strList5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        java.net.CookieHandler cookieHandler12 = null;
        okHttpClient11.cookieHandler = cookieHandler12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient11.getSslSocketFactory();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket17 = sSLSocketFactory14.createSocket("hi!", (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(sSLSocketFactory14);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = null;
        okHttpClient7.proxy = proxy15;
        boolean boolean17 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.Proxy.Type type25 = proxy21.type();
        okHttpClient18.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory46;
        okHttpClient18.sslSocketFactory = sSLSocketFactory46;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.net.InetAddress inetAddress52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket54 = sSLSocketFactory46.createSocket("DIRECT", (int) 'a', inetAddress52, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient49);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient32.copyWithDefaults();
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient40.getSslSocketFactory();
        okHttpClient23.sslSocketFactory = sSLSocketFactory42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory42);
        java.lang.String[] strArray45 = sSLSocketFactory42.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        java.net.Proxy proxy54 = null;
        okHttpClient46.proxy = proxy54;
        boolean boolean56 = okHttpClient46.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        java.net.ProxySelector proxySelector58 = okHttpClient57.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = okHttpClient57.hostnameVerifier;
        java.net.Proxy proxy60 = java.net.Proxy.NO_PROXY;
        boolean boolean62 = proxy60.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type63 = proxy60.type();
        java.net.Proxy.Type type64 = proxy60.type();
        okHttpClient57.proxy = proxy60;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        okHttpClient66.hostnameVerifier = hostnameVerifier67;
        java.net.ResponseCache responseCache69 = null;
        okHttpClient66.responseCache = responseCache69;
        java.util.List<java.lang.String> strList71 = okHttpClient66.transports;
        com.squareup.okhttp.ConnectionPool connectionPool72 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient66.connectionPool = connectionPool72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient66.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient66.sslSocketFactory = sSLSocketFactory85;
        okHttpClient57.sslSocketFactory = sSLSocketFactory85;
        java.net.Socket socket88 = sSLSocketFactory85.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket92 = sSLSocketFactory42.createSocket(socket88, "hi!", 0, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(okHttpClient40);
// flaky:         org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(sSLSocketFactory42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(proxySelector58);
        org.junit.Assert.assertNull(hostnameVerifier59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type63.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type64.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNotNull(connectionPool72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(socket88);
        org.junit.Assert.assertEquals(socket88.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        java.net.SocketAddress socketAddress12 = proxy6.address();
        java.net.Proxy.Type type13 = proxy6.type();
        java.net.SocketAddress socketAddress14 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient15.hostnameVerifier;
        java.net.Proxy proxy21 = okHttpClient15.getProxy();
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient15.cookieHandler = cookieHandler22;
        okHttpClient15.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler26 = okHttpClient15.getCookieHandler();
        boolean boolean27 = proxy6.equals((java.lang.Object) okHttpClient15);
        java.lang.String str28 = proxy6.toString();
        java.lang.String str29 = proxy6.toString();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type13.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress14);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNull(proxy21);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DIRECT" + "'", str28, "DIRECT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DIRECT" + "'", str29, "DIRECT");
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler16 = okHttpClient15.cookieHandler;
        java.net.ResponseCache responseCache17 = okHttpClient15.responseCache;
        java.net.Proxy proxy18 = java.net.Proxy.NO_PROXY;
        boolean boolean20 = proxy18.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient15.setProxy(proxy18);
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection23 = okHttpClient21.open(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(cookieHandler16);
        org.junit.Assert.assertNull(responseCache17);
        org.junit.Assert.assertNotNull(proxy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(okHttpClient21);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.InetAddress inetAddress38 = null;
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory33.createSocket(inetAddress38, (-1), inetAddress40, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 100, (long) (byte) 100);
        int int3 = connectionPool2.getSpdyConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ProxySelector proxySelector14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setProxySelector(proxySelector14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient15.getSslSocketFactory();
        java.net.InetAddress inetAddress19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket21 = sSLSocketFactory16.createSocket("hi!", (int) '#', inetAddress19, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        com.squareup.okhttp.Connection connection24 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool22.recycle(connection24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setCookieHandler(cookieHandler12);
        java.net.ResponseCache responseCache14 = null;
        okHttpClient13.responseCache = responseCache14;
        java.net.ProxySelector proxySelector16 = null;
        okHttpClient13.proxySelector = proxySelector16;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, (long) (byte) 100);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient0.cookieHandler = cookieHandler22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setConnectionPool(connectionPool33);
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient35.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient35.connectionPool = connectionPool40;
        java.net.ResponseCache responseCache42 = okHttpClient35.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient35.sslSocketFactory;
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress45 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory58);
        java.lang.String[] strArray60 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray61 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory58.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory58;
        java.net.InetAddress inetAddress66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket68 = sSLSocketFactory58.createSocket("", (int) (short) -1, inetAddress66, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertNull(socketAddress45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        okHttpClient11.sslSocketFactory = sSLSocketFactory13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient15.connectionPool;
        int int24 = connectionPool23.getHttpConnectionCount();
        com.squareup.okhttp.Address address25 = null;
        com.squareup.okhttp.Connection connection26 = connectionPool23.get(address25);
        okHttpClient11.connectionPool = connectionPool23;
        java.net.ProxySelector proxySelector28 = okHttpClient11.proxySelector;
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient32.okResponseCache();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setResponseCache(responseCache34);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        okHttpClient32.transports = strList38;
        boolean boolean41 = proxy29.equals((java.lang.Object) strList38);
        okHttpClient11.proxy = proxy29;
        java.lang.String str43 = proxy29.toString();
        java.net.Proxy.Type type44 = proxy29.type();
        java.net.Proxy.Type type45 = proxy29.type();
        java.net.Proxy.Type type46 = proxy29.type();
        java.net.SocketAddress socketAddress47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy48 = new java.net.Proxy(type46, socketAddress47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(connection26);
        org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DIRECT" + "'", str43, "DIRECT");
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type44.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type45.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type46.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.ConnectionPool connectionPool14 = null;
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        java.net.CookieHandler cookieHandler24 = okHttpClient16.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient16.okResponseCache();
        java.net.CookieHandler cookieHandler26 = okHttpClient16.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient16);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.setProxySelector(proxySelector31);
        java.net.CookieHandler cookieHandler33 = okHttpClient28.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.Proxy proxy42 = null;
        okHttpClient34.proxy = proxy42;
        java.util.Set<com.squareup.okhttp.Route> routeSet44 = okHttpClient34.failedRoutes;
        okHttpClient28.failedRoutes = routeSet44;
        okHttpClient27.failedRoutes = routeSet44;
        java.util.List<java.lang.String> strList47 = okHttpClient27.getTransports();
        java.net.ResponseCache responseCache48 = null;
        okHttpClient27.responseCache = responseCache48;
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        boolean boolean52 = proxy50.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type53 = proxy50.type();
        java.net.Proxy.Type type54 = proxy50.type();
        okHttpClient27.proxy = proxy50;
        okHttpClient11.proxy = proxy50;
        java.net.CookieHandler cookieHandler57 = null;
        okHttpClient11.cookieHandler = cookieHandler57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient59.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        java.util.List<java.lang.String> strList73 = okHttpClient68.transports;
        com.squareup.okhttp.ConnectionPool connectionPool74 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient68.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient68.copyWithDefaults();
        java.net.ProxySelector proxySelector77 = okHttpClient76.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = okHttpClient76.getSslSocketFactory();
        okHttpClient59.sslSocketFactory = sSLSocketFactory78;
        java.net.Socket socket80 = sSLSocketFactory78.createSocket();
        okHttpClient11.sslSocketFactory = sSLSocketFactory78;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket84 = sSLSocketFactory78.createSocket("hi!", 10);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(routeSet44);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type53.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type54.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient76);
// flaky:         org.junit.Assert.assertNull(proxySelector77);
        org.junit.Assert.assertNotNull(sSLSocketFactory78);
        org.junit.Assert.assertNotNull(socket80);
        org.junit.Assert.assertEquals(socket80.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(10, (long) (byte) 100);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setResponseCache(responseCache27);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setFollowProtocolRedirects(true);
        java.net.CookieHandler cookieHandler31 = null;
        okHttpClient28.cookieHandler = cookieHandler31;
        java.net.URL uRL33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection34 = okHttpClient28.open(uRL33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) (byte) -1);
        java.lang.Class<?> wildcardClass3 = connectionPool2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.lang.String[] strArray11 = sSLSocketFactory10.getSupportedCipherSuites();
        java.net.InetAddress inetAddress14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket16 = sSLSocketFactory10.createSocket("", (int) (short) 100, inetAddress14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = null;
        okHttpClient7.proxy = proxy15;
        boolean boolean17 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.Proxy.Type type25 = proxy21.type();
        okHttpClient18.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory46;
        okHttpClient18.sslSocketFactory = sSLSocketFactory46;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.net.InetAddress inetAddress50 = null;
        java.net.InetAddress inetAddress52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket54 = sSLSocketFactory46.createSocket(inetAddress50, 1, inetAddress52, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient49);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory14);
        com.squareup.okhttp.ConnectionPool connectionPool16 = okHttpClient15.connectionPool;
        java.net.ProxySelector proxySelector17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setProxySelector(proxySelector17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setConnectionPool(connectionPool28);
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient30.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient30.connectionPool = connectionPool35;
        java.net.ResponseCache responseCache37 = okHttpClient30.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient30.sslSocketFactory;
        java.net.Proxy proxy39 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress40 = proxy39.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.setProxy(proxy39);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient30.setSSLSocketFactory(sSLSocketFactory42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient44.hostnameVerifier;
        java.net.Proxy proxy50 = okHttpClient44.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool53 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient44.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient44.copyWithDefaults();
        java.net.ResponseCache responseCache56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setResponseCache(responseCache56);
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = okHttpClient55.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient30.setAuthenticator(okAuthenticator58);
        java.net.Proxy proxy60 = okHttpClient59.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient59.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        java.util.List<java.lang.String> strList70 = okHttpClient65.transports;
        com.squareup.okhttp.ConnectionPool connectionPool71 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient65.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setConnectionPool(connectionPool71);
        java.net.Proxy proxy74 = okHttpClient73.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool76;
        int int78 = connectionPool76.getSpdyConnectionCount();
        okHttpClient73.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier81 = null;
        okHttpClient80.hostnameVerifier = hostnameVerifier81;
        java.net.ResponseCache responseCache83 = null;
        okHttpClient80.responseCache = responseCache83;
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = okHttpClient80.hostnameVerifier;
        java.net.Proxy proxy86 = okHttpClient80.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool89 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient80.connectionPool = connectionPool89;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient80.copyWithDefaults();
        java.net.ResponseCache responseCache92 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient91.setResponseCache(responseCache92);
        com.squareup.okhttp.OkAuthenticator okAuthenticator94 = okHttpClient91.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient73.setAuthenticator(okAuthenticator94);
        okHttpClient59.authenticator = okAuthenticator94;
        okHttpClient18.authenticator = okAuthenticator94;
        java.net.ProxySelector proxySelector98 = okHttpClient18.proxySelector;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNull(okAuthenticator32);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(proxy39);
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(hostnameVerifier49);
        org.junit.Assert.assertNull(proxy50);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okAuthenticator58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertNotNull(okAuthenticator61);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(connectionPool71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(proxy74);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(hostnameVerifier85);
        org.junit.Assert.assertNull(proxy86);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okAuthenticator94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNull(proxySelector98);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setCookieHandler(cookieHandler18);
        java.net.CookieHandler cookieHandler20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setCookieHandler(cookieHandler20);
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient17.connectionPool;
        com.squareup.okhttp.Connection connection23 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool22.recycle(connection23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(connectionPool22);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.util.List<java.lang.String> strList16 = okHttpClient15.transports;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(strList16);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.net.InetAddress inetAddress33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket35 = sSLSocketFactory28.createSocket("DIRECT", (int) (byte) 1, inetAddress33, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ResponseCache responseCache14 = okHttpClient13.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ProxySelector proxySelector19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.setProxySelector(proxySelector19);
        java.net.ResponseCache responseCache21 = null;
        okHttpClient20.responseCache = responseCache21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        java.net.CookieHandler cookieHandler31 = okHttpClient23.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient23.okResponseCache();
        java.net.CookieHandler cookieHandler33 = okHttpClient23.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient(okHttpClient23);
        java.net.Proxy proxy35 = java.net.Proxy.NO_PROXY;
        boolean boolean37 = proxy35.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type38 = proxy35.type();
        java.net.SocketAddress socketAddress39 = proxy35.address();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient23.setProxy(proxy35);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient41.copyWithDefaults();
        java.net.ProxySelector proxySelector50 = okHttpClient49.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory51 = okHttpClient49.getSslSocketFactory();
        okHttpClient40.sslSocketFactory = sSLSocketFactory51;
        java.lang.String[] strArray53 = sSLSocketFactory51.getDefaultCipherSuites();
        java.lang.String[] strArray54 = sSLSocketFactory51.getSupportedCipherSuites();
        java.net.Socket socket55 = sSLSocketFactory51.createSocket();
        okHttpClient20.sslSocketFactory = sSLSocketFactory51;
        java.lang.String[] strArray57 = sSLSocketFactory51.getSupportedCipherSuites();
        java.net.Socket socket58 = sSLSocketFactory51.createSocket();
        java.io.InputStream inputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket61 = sSLSocketFactory15.createSocket(socket58, inputStream59, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(sSLSocketFactory15);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNull(cookieHandler31);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNotNull(proxy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type38.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(okHttpClient49);
// flaky:         org.junit.Assert.assertNull(proxySelector50);
        org.junit.Assert.assertNotNull(sSLSocketFactory51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(socket55);
        org.junit.Assert.assertEquals(socket55.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(socket58);
        org.junit.Assert.assertEquals(socket58.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool5 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient4.connectionPool = connectionPool5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient4.setConnectionPool(connectionPool13);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = okHttpClient15.getAuthenticator();
        java.net.ProxySelector proxySelector17 = okHttpClient15.getProxySelector();
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setResponseCache(responseCache18);
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        boolean boolean22 = proxy20.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type23 = proxy20.type();
        java.net.SocketAddress socketAddress24 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setProxy(proxy20);
        java.net.Proxy proxy26 = java.net.Proxy.NO_PROXY;
        boolean boolean28 = proxy26.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type29 = proxy26.type();
        java.net.Proxy.Type type30 = proxy26.type();
        boolean boolean31 = proxy20.equals((java.lang.Object) proxy26);
        okHttpClient0.proxy = proxy20;
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient0.getConnectionPool();
        java.util.List<java.lang.String> strList34 = okHttpClient0.transports;
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(connectionPool5);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(okAuthenticator16);
        org.junit.Assert.assertNull(proxySelector17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type23.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress24);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(proxy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type29.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type30.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(connectionPool33);
        org.junit.Assert.assertNull(strList34);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler6 = null;
        okHttpClient4.cookieHandler = cookieHandler6;
        java.net.CookieHandler cookieHandler8 = okHttpClient4.getCookieHandler();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(cookieHandler8);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = null;
        okHttpClient7.proxy = proxy15;
        boolean boolean17 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.Proxy.Type type25 = proxy21.type();
        okHttpClient18.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory46;
        okHttpClient18.sslSocketFactory = sSLSocketFactory46;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.net.InetAddress inetAddress50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket52 = sSLSocketFactory46.createSocket(inetAddress50, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient49);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient0.proxySelector = proxySelector14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory49);
        java.lang.String[] strArray53 = sSLSocketFactory49.getDefaultCipherSuites();
        java.lang.String[] strArray54 = sSLSocketFactory49.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        java.net.CookieHandler cookieHandler63 = okHttpClient55.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache64 = okHttpClient55.okResponseCache();
        java.net.CookieHandler cookieHandler65 = okHttpClient55.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient(okHttpClient55);
        java.net.Proxy proxy67 = java.net.Proxy.NO_PROXY;
        boolean boolean69 = proxy67.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type70 = proxy67.type();
        java.net.SocketAddress socketAddress71 = proxy67.address();
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient55.setProxy(proxy67);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        java.util.List<java.lang.String> strList78 = okHttpClient73.transports;
        com.squareup.okhttp.ConnectionPool connectionPool79 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient73.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient73.copyWithDefaults();
        java.net.ProxySelector proxySelector82 = okHttpClient81.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory83 = okHttpClient81.getSslSocketFactory();
        okHttpClient72.sslSocketFactory = sSLSocketFactory83;
        java.lang.String[] strArray85 = sSLSocketFactory83.getDefaultCipherSuites();
        java.lang.String[] strArray86 = sSLSocketFactory83.getSupportedCipherSuites();
        java.lang.String[] strArray87 = sSLSocketFactory83.getDefaultCipherSuites();
        java.net.Socket socket88 = sSLSocketFactory83.createSocket();
        java.io.InputStream inputStream89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket91 = sSLSocketFactory49.createSocket(socket88, inputStream89, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNull(cookieHandler63);
        org.junit.Assert.assertNull(okResponseCache64);
        org.junit.Assert.assertNull(cookieHandler65);
        org.junit.Assert.assertNotNull(proxy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type70.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress71);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNotNull(connectionPool79);
        org.junit.Assert.assertNotNull(okHttpClient81);
// flaky:         org.junit.Assert.assertNull(proxySelector82);
        org.junit.Assert.assertNotNull(sSLSocketFactory83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(socket88);
        org.junit.Assert.assertEquals(socket88.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.ProxySelector proxySelector41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setProxySelector(proxySelector41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ProxySelector proxySelector46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.setProxySelector(proxySelector46);
        java.net.ResponseCache responseCache48 = null;
        okHttpClient47.responseCache = responseCache48;
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = okHttpClient47.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient47.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient52.setProxySelector(proxySelector53);
        java.net.ProxySelector proxySelector55 = okHttpClient54.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient56.responseCache = responseCache59;
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = okHttpClient56.hostnameVerifier;
        java.net.Proxy proxy62 = okHttpClient56.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool65 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient56.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient56.copyWithDefaults();
        java.net.ResponseCache responseCache68 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient67.setResponseCache(responseCache68);
        java.net.ProxySelector proxySelector70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient67.setProxySelector(proxySelector70);
        com.squareup.okhttp.OkAuthenticator okAuthenticator72 = okHttpClient71.getAuthenticator();
        okHttpClient54.authenticator = okAuthenticator72;
        okHttpClient42.authenticator = okAuthenticator72;
        java.util.List<java.lang.String> strList75 = okHttpClient42.getTransports();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(hostnameVerifier50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxySelector55);
        org.junit.Assert.assertNull(hostnameVerifier61);
        org.junit.Assert.assertNull(proxy62);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(okAuthenticator72);
        org.junit.Assert.assertNull(strList75);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.lang.String[] strArray42 = sSLSocketFactory41.getSupportedCipherSuites();
        java.net.InetAddress inetAddress43 = null;
        java.net.InetAddress inetAddress45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket47 = sSLSocketFactory41.createSocket(inetAddress43, (int) (short) -1, inetAddress45, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient40.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.setConnectionPool(connectionPool52);
        java.net.Proxy proxy55 = okHttpClient54.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool57;
        int int59 = connectionPool57.getSpdyConnectionCount();
        okHttpClient54.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setResponseCache(responseCache73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient72.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient54.setAuthenticator(okAuthenticator75);
        okHttpClient40.authenticator = okAuthenticator75;
        java.net.ResponseCache responseCache78 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient40.setResponseCache(responseCache78);
        java.util.List<java.lang.String> strList80 = okHttpClient40.transports;
        java.net.URL uRL81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection82 = okHttpClient40.open(uRL81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNotNull(okAuthenticator42);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okAuthenticator75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNull(strList80);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = okHttpClient0.connectionPool;
        java.net.Proxy proxy2 = okHttpClient0.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient3.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory9);
        java.net.Proxy proxy11 = okHttpClient3.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.setConnectionPool(connectionPool21);
        com.squareup.okhttp.ConnectionPool connectionPool24 = okHttpClient23.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient23.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient23.connectionPool = connectionPool28;
        java.net.ResponseCache responseCache30 = okHttpClient23.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient23.sslSocketFactory;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setProxy(proxy32);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient34.setSSLSocketFactory(sSLSocketFactory46);
        java.net.Socket socket48 = sSLSocketFactory46.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory46);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.net.InetAddress inetAddress53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket55 = sSLSocketFactory46.createSocket("", (int) (short) 10, inetAddress53, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connectionPool1);
        org.junit.Assert.assertNull(proxy2);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(okAuthenticator25);
        org.junit.Assert.assertNull(responseCache30);
        org.junit.Assert.assertNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(socket48);
        org.junit.Assert.assertEquals(socket48.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient50);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool12 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setConnectionPool(connectionPool12);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache15 = okHttpClient0.okResponseCache();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(sSLSocketFactory14);
        org.junit.Assert.assertNull(okResponseCache15);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        com.squareup.okhttp.ConnectionPool connectionPool28 = okHttpClient26.connectionPool;
        java.lang.Class<?> wildcardClass29 = okHttpClient26.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(1, (long) (byte) 10);
        int int3 = connectionPool2.getConnectionCount();
        com.squareup.okhttp.Connection connection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) '#');
        int int3 = connectionPool2.getSpdyConnectionCount();
        connectionPool2.evictAll();
        int int5 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.lang.String[] strArray11 = sSLSocketFactory10.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ProxySelector proxySelector15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.setProxySelector(proxySelector15);
        java.net.ResponseCache responseCache17 = null;
        okHttpClient16.responseCache = responseCache17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        java.net.CookieHandler cookieHandler27 = okHttpClient19.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache28 = okHttpClient19.okResponseCache();
        java.net.CookieHandler cookieHandler29 = okHttpClient19.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        java.net.Proxy proxy31 = java.net.Proxy.NO_PROXY;
        boolean boolean33 = proxy31.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type34 = proxy31.type();
        java.net.SocketAddress socketAddress35 = proxy31.address();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient19.setProxy(proxy31);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient36.sslSocketFactory = sSLSocketFactory47;
        java.lang.String[] strArray49 = sSLSocketFactory47.getDefaultCipherSuites();
        java.lang.String[] strArray50 = sSLSocketFactory47.getSupportedCipherSuites();
        java.net.Socket socket51 = sSLSocketFactory47.createSocket();
        okHttpClient16.sslSocketFactory = sSLSocketFactory47;
        java.lang.String[] strArray53 = sSLSocketFactory47.getSupportedCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory47.createSocket();
        java.io.InputStream inputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket57 = sSLSocketFactory10.createSocket(socket54, inputStream55, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(cookieHandler27);
        org.junit.Assert.assertNull(okResponseCache28);
        org.junit.Assert.assertNull(cookieHandler29);
        org.junit.Assert.assertNotNull(proxy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type34.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(socket51);
        org.junit.Assert.assertEquals(socket51.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        boolean boolean23 = okHttpClient22.getFollowProtocolRedirects();
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient22.getAuthenticator();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(okAuthenticator24);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.lang.String str4 = proxy0.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient5.getSslSocketFactory();
        boolean boolean9 = proxy0.equals((java.lang.Object) okHttpClient5);
        java.lang.String str10 = proxy0.toString();
        java.net.Proxy.Type type11 = proxy0.type();
        java.net.SocketAddress socketAddress12 = proxy0.address();
        java.net.Proxy.Type type13 = proxy0.type();
        java.net.SocketAddress socketAddress14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy15 = new java.net.Proxy(type13, socketAddress14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DIRECT" + "'", str10, "DIRECT");
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type11.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type13.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        okHttpClient11.sslSocketFactory = sSLSocketFactory13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient15.connectionPool;
        int int24 = connectionPool23.getHttpConnectionCount();
        com.squareup.okhttp.Address address25 = null;
        com.squareup.okhttp.Connection connection26 = connectionPool23.get(address25);
        okHttpClient11.connectionPool = connectionPool23;
        java.net.ProxySelector proxySelector28 = okHttpClient11.proxySelector;
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient32.okResponseCache();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setResponseCache(responseCache34);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        okHttpClient32.transports = strList38;
        boolean boolean41 = proxy29.equals((java.lang.Object) strList38);
        okHttpClient11.proxy = proxy29;
        java.lang.String str43 = proxy29.toString();
        java.net.Proxy.Type type44 = proxy29.type();
        java.net.Proxy.Type type45 = proxy29.type();
        java.net.SocketAddress socketAddress46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy47 = new java.net.Proxy(type45, socketAddress46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(connection26);
        org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DIRECT" + "'", str43, "DIRECT");
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type44.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type45.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient22.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.copyWithDefaults();
        java.util.List<java.lang.String> strList34 = okHttpClient22.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient36.setConnectionPool(connectionPool45);
        com.squareup.okhttp.ConnectionPool connectionPool48 = okHttpClient47.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = okHttpClient47.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool52 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient47.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        java.net.CookieHandler cookieHandler62 = okHttpClient54.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache63 = okHttpClient54.okResponseCache();
        java.net.CookieHandler cookieHandler64 = okHttpClient54.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient(okHttpClient54);
        java.net.Proxy proxy66 = java.net.Proxy.NO_PROXY;
        boolean boolean68 = proxy66.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type69 = proxy66.type();
        java.net.SocketAddress socketAddress70 = proxy66.address();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient54.setProxy(proxy66);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient47.setProxy(proxy66);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient22.setProxy(proxy66);
        com.squareup.okhttp.ConnectionPool connectionPool74 = okHttpClient22.connectionPool;
        okHttpClient0.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy77 = okHttpClient76.proxy;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNull(okAuthenticator49);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNull(cookieHandler62);
        org.junit.Assert.assertNull(okResponseCache63);
        org.junit.Assert.assertNull(cookieHandler64);
        org.junit.Assert.assertNotNull(proxy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type69.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNull(proxy77);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        okHttpClient11.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient19.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setProxySelector(proxySelector36);
        java.net.CookieHandler cookieHandler38 = okHttpClient33.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        java.net.Proxy proxy47 = null;
        okHttpClient39.proxy = proxy47;
        java.util.Set<com.squareup.okhttp.Route> routeSet49 = okHttpClient39.failedRoutes;
        okHttpClient33.failedRoutes = routeSet49;
        java.net.ProxySelector proxySelector51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setProxySelector(proxySelector51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient33.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = okHttpClient54.hostnameVerifier;
        java.net.Proxy proxy60 = okHttpClient54.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient54.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient54.copyWithDefaults();
        java.net.Proxy proxy66 = okHttpClient65.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = okHttpClient65.getHostnameVerifier();
        okHttpClient33.hostnameVerifier = hostnameVerifier67;
        okHttpClient32.hostnameVerifier = hostnameVerifier67;
        okHttpClient20.hostnameVerifier = hostnameVerifier67;
        okHttpClient11.hostnameVerifier = hostnameVerifier67;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        okHttpClient72.hostnameVerifier = hostnameVerifier73;
        java.net.ResponseCache responseCache75 = null;
        okHttpClient72.responseCache = responseCache75;
        javax.net.ssl.HostnameVerifier hostnameVerifier77 = okHttpClient72.hostnameVerifier;
        java.net.Proxy proxy78 = okHttpClient72.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache80 = okHttpClient79.okResponseCache();
        java.net.ResponseCache responseCache81 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient79.setResponseCache(responseCache81);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        okHttpClient79.transports = strList85;
        okHttpClient72.transports = strList85;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList85;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient11.setTransports((java.util.List<java.lang.String>) strList85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(cookieHandler38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(routeSet49);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(hostnameVerifier59);
        org.junit.Assert.assertNull(proxy60);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNull(proxy66);
        org.junit.Assert.assertNotNull(hostnameVerifier67);
        org.junit.Assert.assertNull(hostnameVerifier77);
        org.junit.Assert.assertNull(proxy78);
        org.junit.Assert.assertNull(okResponseCache80);
        org.junit.Assert.assertNotNull(okHttpClient82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.util.List<java.lang.String> strList4 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy7 = java.net.Proxy.NO_PROXY;
        boolean boolean9 = proxy7.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        okHttpClient10.transports = strList16;
        boolean boolean19 = proxy7.equals((java.lang.Object) strList16);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList16;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList16;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient6.setTransports((java.util.List<java.lang.String>) strList16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(connectionPool5);
        org.junit.Assert.assertNotNull(proxy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool7 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient6.setConnectionPool(connectionPool15);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setProxySelector(proxySelector21);
        java.net.CookieHandler cookieHandler23 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.Proxy proxy32 = null;
        okHttpClient24.proxy = proxy32;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient24.failedRoutes;
        okHttpClient18.failedRoutes = routeSet34;
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient18.setProxySelector(proxySelector36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.copyWithDefaults();
        java.net.Proxy proxy51 = okHttpClient50.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient50.getHostnameVerifier();
        okHttpClient18.hostnameVerifier = hostnameVerifier52;
        okHttpClient17.hostnameVerifier = hostnameVerifier52;
        okHttpClient5.hostnameVerifier = hostnameVerifier52;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache56 = okHttpClient5.okResponseCache();
        java.net.ProxySelector proxySelector57 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient5.setProxySelector(proxySelector57);
        okHttpClient5.followProtocolRedirects = true;
        java.net.Proxy proxy61 = java.net.Proxy.NO_PROXY;
        boolean boolean63 = proxy61.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache65 = okHttpClient64.okResponseCache();
        java.net.ResponseCache responseCache66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient64.setResponseCache(responseCache66);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        okHttpClient64.transports = strList70;
        boolean boolean73 = proxy61.equals((java.lang.Object) strList70);
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient5.setTransports((java.util.List<java.lang.String>) strList70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(connectionPool7);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNotNull(hostnameVerifier52);
        org.junit.Assert.assertNull(okResponseCache56);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(proxy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(okResponseCache65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        java.lang.String[] strArray30 = sSLSocketFactory29.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory29;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        java.net.CookieHandler cookieHandler40 = okHttpClient32.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache41 = okHttpClient32.okResponseCache();
        java.net.CookieHandler cookieHandler42 = okHttpClient32.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        boolean boolean46 = proxy44.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type47 = proxy44.type();
        java.net.SocketAddress socketAddress48 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient32.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient50.copyWithDefaults();
        java.net.ProxySelector proxySelector59 = okHttpClient58.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory60 = okHttpClient58.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory60;
        java.lang.String[] strArray62 = sSLSocketFactory60.getDefaultCipherSuites();
        java.lang.String[] strArray63 = sSLSocketFactory60.getSupportedCipherSuites();
        java.lang.String[] strArray64 = sSLSocketFactory60.getDefaultCipherSuites();
        java.net.Socket socket65 = sSLSocketFactory60.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket69 = sSLSocketFactory29.createSocket(socket65, "DIRECT", 0, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(okResponseCache41);
        org.junit.Assert.assertNull(cookieHandler42);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type47.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient58);
// flaky:         org.junit.Assert.assertNull(proxySelector59);
        org.junit.Assert.assertNotNull(sSLSocketFactory60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient0.cookieHandler = cookieHandler5;
        java.net.Proxy proxy7 = java.net.Proxy.NO_PROXY;
        boolean boolean9 = proxy7.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        okHttpClient10.transports = strList16;
        boolean boolean19 = proxy7.equals((java.lang.Object) strList16);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setProxy(proxy7);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setHostnameVerifier(hostnameVerifier39);
        boolean boolean41 = proxy7.equals((java.lang.Object) okHttpClient40);
        java.net.SocketAddress socketAddress42 = proxy7.address();
        java.net.SocketAddress socketAddress43 = proxy7.address();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        java.util.List<java.lang.String> strList49 = okHttpClient44.transports;
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient44.connectionPool = connectionPool50;
        java.net.CookieHandler cookieHandler52 = okHttpClient44.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache53 = okHttpClient44.okResponseCache();
        java.net.CookieHandler cookieHandler54 = okHttpClient44.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient(okHttpClient44);
        java.net.Proxy proxy56 = java.net.Proxy.NO_PROXY;
        boolean boolean58 = proxy56.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type59 = proxy56.type();
        java.net.SocketAddress socketAddress60 = proxy56.address();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient44.setProxy(proxy56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient62.copyWithDefaults();
        java.net.ProxySelector proxySelector71 = okHttpClient70.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient70.getSslSocketFactory();
        okHttpClient61.sslSocketFactory = sSLSocketFactory72;
        java.lang.String[] strArray74 = sSLSocketFactory72.getDefaultCipherSuites();
        java.lang.String[] strArray75 = sSLSocketFactory72.getSupportedCipherSuites();
        java.lang.String[] strArray76 = sSLSocketFactory72.getDefaultCipherSuites();
        java.net.Socket socket77 = sSLSocketFactory72.createSocket();
        boolean boolean78 = proxy7.equals((java.lang.Object) sSLSocketFactory72);
        java.net.InetAddress inetAddress81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket83 = sSLSocketFactory72.createSocket("", (int) (short) 10, inetAddress81, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNull(socketAddress43);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(cookieHandler52);
        org.junit.Assert.assertNull(okResponseCache53);
        org.junit.Assert.assertNull(cookieHandler54);
        org.junit.Assert.assertNotNull(proxy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type59.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress60);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(okHttpClient70);
// flaky:         org.junit.Assert.assertNull(proxySelector71);
        org.junit.Assert.assertNotNull(sSLSocketFactory72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(socket77);
        org.junit.Assert.assertEquals(socket77.toString(), "Socket[unconnected]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        int int12 = connectionPool9.getConnectionCount();
        int int13 = connectionPool9.getSpdyConnectionCount();
        int int14 = connectionPool9.getSpdyConnectionCount();
        com.squareup.okhttp.Connection connection15 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool9.recycle(connection15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setResponseCache(responseCache16);
        okHttpClient17.followProtocolRedirects = false;
        java.net.CookieHandler cookieHandler20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setCookieHandler(cookieHandler20);
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection23 = okHttpClient17.open(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, (long) (short) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.net.Proxy.Type type18 = proxy14.type();
        okHttpClient11.proxy = proxy14;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient29.copyWithDefaults();
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient37.getSslSocketFactory();
        okHttpClient20.sslSocketFactory = sSLSocketFactory39;
        okHttpClient11.sslSocketFactory = sSLSocketFactory39;
        javax.net.SocketFactory socketFactory42 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket43 = socketFactory42.createSocket();
        java.net.Socket socket44 = socketFactory42.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket48 = sSLSocketFactory39.createSocket(socket44, "hi!", 0, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(okHttpClient37);
// flaky:         org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNotNull(sSLSocketFactory39);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(socket43);
        org.junit.Assert.assertEquals(socket43.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket44);
        org.junit.Assert.assertEquals(socket44.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient4.okResponseCache();
        java.net.ResponseCache responseCache6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setResponseCache(responseCache6);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        okHttpClient4.transports = strList10;
        okHttpClient0.transports = strList10;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient14.hostnameVerifier;
        java.net.Proxy proxy20 = okHttpClient14.getProxy();
        java.net.CookieHandler cookieHandler21 = null;
        okHttpClient14.cookieHandler = cookieHandler21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        java.net.CookieHandler cookieHandler31 = okHttpClient23.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient23.okResponseCache();
        java.net.CookieHandler cookieHandler33 = okHttpClient23.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient(okHttpClient23);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setProxySelector(proxySelector38);
        java.net.CookieHandler cookieHandler40 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient41.failedRoutes;
        okHttpClient35.failedRoutes = routeSet51;
        okHttpClient34.failedRoutes = routeSet51;
        okHttpClient14.failedRoutes = routeSet51;
        okHttpClient0.failedRoutes = routeSet51;
        java.net.URL uRL56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection57 = okHttpClient0.open(uRL56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNull(cookieHandler31);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(routeSet51);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 100);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setResponseCache(responseCache8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache15 = okHttpClient14.okResponseCache();
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setResponseCache(responseCache16);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient14.transports = strList20;
        okHttpClient10.transports = strList20;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(okResponseCache15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.copyWithDefaults();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        okHttpClient20.transports = strList24;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient20.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setTransports(strList29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient28);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection15 = okHttpClient11.open(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.net.InetAddress inetAddress39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory33.createSocket("", 0, inetAddress39, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.lang.Class<?> wildcardClass16 = okHttpClient0.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool11 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.setConnectionPool(connectionPool19);
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient21.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient21.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient21.connectionPool = connectionPool26;
        java.net.ResponseCache responseCache28 = okHttpClient21.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient21.sslSocketFactory;
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress31 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        boolean boolean37 = okHttpClient34.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler38 = okHttpClient34.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.copyWithDefaults();
        java.net.ResponseCache responseCache51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient50.setResponseCache(responseCache51);
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient50.authenticator;
        okHttpClient34.authenticator = okAuthenticator53;
        okHttpClient33.authenticator = okAuthenticator53;
        okHttpClient9.authenticator = okAuthenticator53;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache57 = okHttpClient9.okResponseCache();
        java.net.Proxy proxy58 = okHttpClient9.proxy;
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(connectionPool11);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(okAuthenticator23);
        org.junit.Assert.assertNull(responseCache28);
        org.junit.Assert.assertNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertNull(socketAddress31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(cookieHandler38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okAuthenticator53);
        org.junit.Assert.assertNull(okResponseCache57);
        org.junit.Assert.assertNull(proxy58);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient32.failedRoutes;
        boolean boolean35 = okHttpClient32.followProtocolRedirects;
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache40 = okHttpClient39.okResponseCache();
        java.net.ResponseCache responseCache41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setResponseCache(responseCache41);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        okHttpClient39.transports = strList45;
        boolean boolean48 = proxy36.equals((java.lang.Object) strList45);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList45;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient32.setTransports((java.util.List<java.lang.String>) strList45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(okResponseCache40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        int int18 = connectionPool14.getSpdyConnectionCount();
        int int19 = connectionPool14.getSpdyConnectionCount();
        com.squareup.okhttp.Connection connection20 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool14.recycle(connection20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) 100);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory20;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache23 = okHttpClient0.getResponseCache();
        java.lang.Class<?> wildcardClass24 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNull(responseCache23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, 1L);
        connectionPool2.evictAll();
        int int4 = connectionPool2.getConnectionCount();
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.Socket socket38 = sSLSocketFactory33.createSocket();
        java.net.InetAddress inetAddress41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory33.createSocket("", (int) ' ', inetAddress41, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool10);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient14.hostnameVerifier;
        java.net.Proxy proxy20 = okHttpClient14.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool23 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient14.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient14.copyWithDefaults();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setResponseCache(responseCache26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress34 = proxy33.address();
        java.net.SocketAddress socketAddress35 = proxy33.address();
        okHttpClient28.proxy = proxy33;
        com.squareup.okhttp.ConnectionPool connectionPool39 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address40 = null;
        com.squareup.okhttp.Connection connection41 = connectionPool39.get(address40);
        int int42 = connectionPool39.getSpdyConnectionCount();
        connectionPool39.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient28.setConnectionPool(connectionPool39);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ProxySelector proxySelector48 = okHttpClient45.proxySelector;
        java.net.ProxySelector proxySelector49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient45.setProxySelector(proxySelector49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient45.sslSocketFactory = sSLSocketFactory61;
        okHttpClient28.sslSocketFactory = sSLSocketFactory61;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient27.setSSLSocketFactory(sSLSocketFactory61);
        java.net.Socket socket65 = sSLSocketFactory61.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.net.InetAddress inetAddress69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket71 = sSLSocketFactory61.createSocket("", (int) (short) 10, inetAddress69, 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNull(socketAddress35);
        org.junit.Assert.assertNull(connection41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray22 = sSLSocketFactory19.getDefaultCipherSuites();
        java.net.InetAddress inetAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket27 = sSLSocketFactory19.createSocket("DIRECT", 1, inetAddress25, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        java.net.ProxySelector proxySelector9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setProxySelector(proxySelector9);
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address14 = null;
        com.squareup.okhttp.Connection connection15 = connectionPool13.get(address14);
        int int16 = connectionPool13.getSpdyConnectionCount();
        connectionPool13.evictAll();
        okHttpClient0.connectionPool = connectionPool13;
        connectionPool13.evictAll();
        int int20 = connectionPool13.getHttpConnectionCount();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(connection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        okHttpClient14.followProtocolRedirects = false;
        java.net.ProxySelector proxySelector17 = okHttpClient14.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.Proxy proxy30 = okHttpClient29.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient31.hostnameVerifier;
        java.net.Proxy proxy37 = okHttpClient31.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient31.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient31.copyWithDefaults();
        java.net.ResponseCache responseCache43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setResponseCache(responseCache43);
        okHttpClient44.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList47 = okHttpClient44.getTransports();
        okHttpClient29.transports = strList47;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList47;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient14.setTransports(strList47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient14);
// flaky:         org.junit.Assert.assertNull(proxySelector17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(proxy30);
        org.junit.Assert.assertNull(hostnameVerifier36);
        org.junit.Assert.assertNull(proxy37);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(strList47);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = null;
        okHttpClient24.sslSocketFactory = sSLSocketFactory25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setHostnameVerifier(hostnameVerifier40);
        java.net.ProxySelector proxySelector42 = okHttpClient41.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient41.sslSocketFactory;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
// flaky:         org.junit.Assert.assertNull(proxySelector42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool10);
        int int12 = connectionPool10.getConnectionCount();
        java.lang.Class<?> wildcardClass13 = connectionPool10.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getSupportedCipherSuites();
        java.lang.String[] strArray32 = sSLSocketFactory28.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        boolean boolean36 = okHttpClient33.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setCookieHandler(cookieHandler37);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache39 = okHttpClient33.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient(okHttpClient33);
        com.squareup.okhttp.OkAuthenticator okAuthenticator41 = okHttpClient40.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        java.net.ProxySelector proxySelector51 = okHttpClient50.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory52 = okHttpClient50.getSslSocketFactory();
        okHttpClient40.sslSocketFactory = sSLSocketFactory52;
        java.net.Socket socket54 = sSLSocketFactory52.createSocket();
        java.io.InputStream inputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket57 = sSLSocketFactory28.createSocket(socket54, inputStream55, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(okResponseCache39);
        org.junit.Assert.assertNull(okAuthenticator41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
// flaky:         org.junit.Assert.assertNull(proxySelector51);
        org.junit.Assert.assertNotNull(sSLSocketFactory52);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        boolean boolean18 = okHttpClient17.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setFollowProtocolRedirects(false);
        okHttpClient20.followProtocolRedirects = true;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.SocketAddress socketAddress38 = proxy34.address();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient22.setProxy(proxy34);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray52 = sSLSocketFactory50.getDefaultCipherSuites();
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient21.setSSLSocketFactory(sSLSocketFactory50);
        java.lang.String[] strArray56 = sSLSocketFactory50.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        java.util.List<java.lang.String> strList62 = okHttpClient57.transports;
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool63;
        java.net.CookieHandler cookieHandler65 = okHttpClient57.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache66 = okHttpClient57.okResponseCache();
        java.net.CookieHandler cookieHandler67 = okHttpClient57.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient(okHttpClient57);
        java.net.Proxy proxy69 = java.net.Proxy.NO_PROXY;
        boolean boolean71 = proxy69.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type72 = proxy69.type();
        java.net.SocketAddress socketAddress73 = proxy69.address();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient57.setProxy(proxy69);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient74.sslSocketFactory = sSLSocketFactory85;
        java.lang.String[] strArray87 = sSLSocketFactory85.getDefaultCipherSuites();
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.net.Socket socket89 = sSLSocketFactory85.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket93 = sSLSocketFactory50.createSocket(socket89, "DIRECT", (int) (byte) 0, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(cookieHandler65);
        org.junit.Assert.assertNull(okResponseCache66);
        org.junit.Assert.assertNull(cookieHandler67);
        org.junit.Assert.assertNotNull(proxy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type72.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress73);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(socket89);
        org.junit.Assert.assertEquals(socket89.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.net.ProxySelector proxySelector4 = null;
        okHttpClient0.proxySelector = proxySelector4;
        java.lang.Class<?> wildcardClass6 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        java.net.ResponseCache responseCache15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setResponseCache(responseCache15);
        java.lang.Class<?> wildcardClass17 = okHttpClient16.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setConnectionPool(connectionPool33);
        java.net.Proxy proxy36 = okHttpClient35.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool38;
        int int40 = connectionPool38.getSpdyConnectionCount();
        okHttpClient35.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = okHttpClient42.hostnameVerifier;
        java.net.Proxy proxy48 = okHttpClient42.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool51 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient42.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.copyWithDefaults();
        java.net.ResponseCache responseCache54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient53.setResponseCache(responseCache54);
        com.squareup.okhttp.OkAuthenticator okAuthenticator56 = okHttpClient53.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient35.setAuthenticator(okAuthenticator56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient19.setAuthenticator(okAuthenticator56);
        java.util.Set<com.squareup.okhttp.Route> routeSet59 = null;
        okHttpClient58.failedRoutes = routeSet59;
        java.net.ResponseCache responseCache61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.setResponseCache(responseCache61);
        java.net.Proxy proxy63 = java.net.Proxy.NO_PROXY;
        boolean boolean65 = proxy63.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type66 = proxy63.type();
        java.net.SocketAddress socketAddress67 = proxy63.address();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache73 = okHttpClient68.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory74 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient68.setSSLSocketFactory(sSLSocketFactory74);
        boolean boolean76 = proxy63.equals((java.lang.Object) okHttpClient68);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool78 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient77.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier81 = null;
        okHttpClient80.hostnameVerifier = hostnameVerifier81;
        java.net.ResponseCache responseCache83 = null;
        okHttpClient80.responseCache = responseCache83;
        java.util.List<java.lang.String> strList85 = okHttpClient80.transports;
        com.squareup.okhttp.ConnectionPool connectionPool86 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient80.connectionPool = connectionPool86;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient77.setConnectionPool(connectionPool86);
        java.net.ResponseCache responseCache89 = okHttpClient77.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory90 = okHttpClient77.sslSocketFactory;
        java.net.ResponseCache responseCache91 = okHttpClient77.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool92 = okHttpClient77.connectionPool;
        boolean boolean93 = proxy63.equals((java.lang.Object) connectionPool92);
        okHttpClient58.connectionPool = connectionPool92;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(proxy36);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(hostnameVerifier47);
        org.junit.Assert.assertNull(proxy48);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okAuthenticator56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(proxy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type66.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress67);
        org.junit.Assert.assertNull(okResponseCache73);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(connectionPool78);
        org.junit.Assert.assertNull(strList85);
        org.junit.Assert.assertNotNull(connectionPool86);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNull(responseCache89);
        org.junit.Assert.assertNull(sSLSocketFactory90);
        org.junit.Assert.assertNull(responseCache91);
        org.junit.Assert.assertNotNull(connectionPool92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) 0);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = okHttpClient0.getHostnameVerifier();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection8 = okHttpClient0.open(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(hostnameVerifier6);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, (long) 0);
        int int3 = connectionPool2.getSpdyConnectionCount();
        com.squareup.okhttp.Connection connection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.net.ResponseCache responseCache18 = okHttpClient17.responseCache;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(responseCache18);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient11.okResponseCache();
        java.net.ResponseCache responseCache13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setResponseCache(responseCache13);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        okHttpClient11.transports = strList17;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        java.net.CookieHandler cookieHandler29 = null;
        okHttpClient22.cookieHandler = cookieHandler29;
        okHttpClient22.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient33.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient33.sslSocketFactory;
        java.net.CookieHandler cookieHandler40 = okHttpClient33.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient33.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool43;
        com.squareup.okhttp.OkAuthenticator okAuthenticator45 = null;
        okHttpClient42.authenticator = okAuthenticator45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient42.responseCache = responseCache48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = okHttpClient50.hostnameVerifier;
        java.net.Proxy proxy56 = okHttpClient50.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool59 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient50.connectionPool = connectionPool59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient50.copyWithDefaults();
        java.net.Proxy proxy62 = okHttpClient61.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = okHttpClient61.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient42.setHostnameVerifier(hostnameVerifier63);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient33.setHostnameVerifier(hostnameVerifier63);
        okHttpClient22.hostnameVerifier = hostnameVerifier63;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient11.setHostnameVerifier(hostnameVerifier63);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient0.setHostnameVerifier(hostnameVerifier63);
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = okHttpClient0.getHostnameVerifier();
        com.squareup.okhttp.ConnectionPool connectionPool70 = okHttpClient0.connectionPool;
        com.squareup.okhttp.Connection connection71 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool70.maybeShare(connection71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(okResponseCache12);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNull(hostnameVerifier38);
        org.junit.Assert.assertNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(hostnameVerifier41);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(hostnameVerifier55);
        org.junit.Assert.assertNull(proxy56);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(proxy62);
        org.junit.Assert.assertNotNull(hostnameVerifier63);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(hostnameVerifier69);
        org.junit.Assert.assertNotNull(connectionPool70);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.authenticator;
        java.net.ProxySelector proxySelector9 = okHttpClient7.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        okHttpClient10.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket31 = sSLSocketFactory29.createSocket();
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        okHttpClient7.sslSocketFactory = sSLSocketFactory29;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.net.Proxy proxy39 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress40 = proxy39.address();
        java.net.SocketAddress socketAddress41 = proxy39.address();
        okHttpClient34.proxy = proxy39;
        com.squareup.okhttp.ConnectionPool connectionPool45 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address46 = null;
        com.squareup.okhttp.Connection connection47 = connectionPool45.get(address46);
        int int48 = connectionPool45.getSpdyConnectionCount();
        connectionPool45.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient34.setConnectionPool(connectionPool45);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ProxySelector proxySelector54 = okHttpClient51.proxySelector;
        java.net.ProxySelector proxySelector55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient51.setProxySelector(proxySelector55);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        java.util.List<java.lang.String> strList62 = okHttpClient57.transports;
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient57.copyWithDefaults();
        java.net.ProxySelector proxySelector66 = okHttpClient65.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory67 = okHttpClient65.getSslSocketFactory();
        okHttpClient51.sslSocketFactory = sSLSocketFactory67;
        okHttpClient34.sslSocketFactory = sSLSocketFactory67;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ResponseCache responseCache73 = null;
        okHttpClient70.responseCache = responseCache73;
        java.util.List<java.lang.String> strList75 = okHttpClient70.transports;
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient70.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient70.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = null;
        okHttpClient79.hostnameVerifier = hostnameVerifier80;
        java.net.ResponseCache responseCache82 = null;
        okHttpClient79.responseCache = responseCache82;
        java.util.List<java.lang.String> strList84 = okHttpClient79.transports;
        com.squareup.okhttp.ConnectionPool connectionPool85 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient79.connectionPool = connectionPool85;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient79.copyWithDefaults();
        java.net.ProxySelector proxySelector88 = okHttpClient87.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory89 = okHttpClient87.getSslSocketFactory();
        okHttpClient70.sslSocketFactory = sSLSocketFactory89;
        java.net.Socket socket91 = sSLSocketFactory89.createSocket();
        okHttpClient34.sslSocketFactory = sSLSocketFactory89;
        java.net.Socket socket93 = sSLSocketFactory89.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket97 = sSLSocketFactory29.createSocket(socket93, "DIRECT", (int) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(socket31);
        org.junit.Assert.assertEquals(socket31.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(proxy39);
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNull(socketAddress41);
        org.junit.Assert.assertNull(connection47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNotNull(okHttpClient65);
// flaky:         org.junit.Assert.assertNull(proxySelector66);
        org.junit.Assert.assertNotNull(sSLSocketFactory67);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNotNull(connectionPool85);
        org.junit.Assert.assertNotNull(okHttpClient87);
// flaky:         org.junit.Assert.assertNull(proxySelector88);
        org.junit.Assert.assertNotNull(sSLSocketFactory89);
        org.junit.Assert.assertNotNull(socket91);
        org.junit.Assert.assertEquals(socket91.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket93);
        org.junit.Assert.assertEquals(socket93.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        java.util.List<java.lang.String> strList23 = okHttpClient11.transports;
        java.util.List<java.lang.String> strList24 = okHttpClient11.transports;
        okHttpClient11.followProtocolRedirects = true;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(strList24);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient32.copyWithDefaults();
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient40.getSslSocketFactory();
        okHttpClient23.sslSocketFactory = sSLSocketFactory42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory42);
        java.lang.String[] strArray45 = sSLSocketFactory42.getSupportedCipherSuites();
        java.net.InetAddress inetAddress46 = null;
        java.net.InetAddress inetAddress48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket50 = sSLSocketFactory42.createSocket(inetAddress46, (int) '4', inetAddress48, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(okHttpClient40);
// flaky:         org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(sSLSocketFactory42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setResponseCache(responseCache10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient12.hostnameVerifier;
        java.net.Proxy proxy18 = okHttpClient12.getProxy();
        java.net.CookieHandler cookieHandler19 = null;
        okHttpClient12.cookieHandler = cookieHandler19;
        okHttpClient12.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient23.sslSocketFactory;
        java.net.CookieHandler cookieHandler30 = okHttpClient23.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient23.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = null;
        okHttpClient32.authenticator = okAuthenticator35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient32.responseCache = responseCache38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient40.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.copyWithDefaults();
        java.net.Proxy proxy52 = okHttpClient51.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = okHttpClient51.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient32.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient23.setHostnameVerifier(hostnameVerifier53);
        okHttpClient12.hostnameVerifier = hostnameVerifier53;
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = okHttpClient12.getHostnameVerifier();
        okHttpClient11.hostnameVerifier = hostnameVerifier57;
        java.net.URL uRL59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection60 = okHttpClient11.open(uRL59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(sSLSocketFactory29);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(proxy52);
        org.junit.Assert.assertNotNull(hostnameVerifier53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(hostnameVerifier57);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        java.net.ResponseCache responseCache10 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient21.copyWithDefaults();
        java.net.ProxySelector proxySelector30 = okHttpClient29.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient29.getSslSocketFactory();
        okHttpClient12.sslSocketFactory = sSLSocketFactory31;
        java.net.Socket socket33 = sSLSocketFactory31.createSocket();
        java.net.Socket socket34 = sSLSocketFactory31.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory31;
        java.lang.String[] strArray36 = sSLSocketFactory31.getSupportedCipherSuites();
        java.net.InetAddress inetAddress37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket39 = sSLSocketFactory31.createSocket(inetAddress37, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertNull(connectionPool11);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
// flaky:         org.junit.Assert.assertNull(proxySelector30);
        org.junit.Assert.assertNotNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket34);
        org.junit.Assert.assertEquals(socket34.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient31.hostnameVerifier;
        okHttpClient17.hostnameVerifier = hostnameVerifier32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy35 = okHttpClient17.proxy;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(okAuthenticator15);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(proxy35);
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(1, (long) (byte) 0);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool10);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient14.hostnameVerifier;
        java.net.Proxy proxy20 = okHttpClient14.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool23 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient14.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient14.copyWithDefaults();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setResponseCache(responseCache26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress34 = proxy33.address();
        java.net.SocketAddress socketAddress35 = proxy33.address();
        okHttpClient28.proxy = proxy33;
        com.squareup.okhttp.ConnectionPool connectionPool39 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address40 = null;
        com.squareup.okhttp.Connection connection41 = connectionPool39.get(address40);
        int int42 = connectionPool39.getSpdyConnectionCount();
        connectionPool39.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient28.setConnectionPool(connectionPool39);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ProxySelector proxySelector48 = okHttpClient45.proxySelector;
        java.net.ProxySelector proxySelector49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient45.setProxySelector(proxySelector49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient45.sslSocketFactory = sSLSocketFactory61;
        okHttpClient28.sslSocketFactory = sSLSocketFactory61;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient27.setSSLSocketFactory(sSLSocketFactory61);
        java.net.Socket socket65 = sSLSocketFactory61.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.net.InetAddress inetAddress67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket69 = sSLSocketFactory61.createSocket(inetAddress67, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNull(socketAddress35);
        org.junit.Assert.assertNull(connection41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.SocketAddress socketAddress38 = proxy34.address();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient22.setProxy(proxy34);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray52 = sSLSocketFactory50.getDefaultCipherSuites();
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient21.setSSLSocketFactory(sSLSocketFactory50);
        java.net.ResponseCache responseCache56 = okHttpClient21.getResponseCache();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(responseCache56);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient20.hostnameVerifier;
        java.net.Proxy proxy26 = okHttpClient20.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool29 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient20.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient20.copyWithDefaults();
        java.net.ResponseCache responseCache32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setResponseCache(responseCache32);
        java.net.CookieHandler cookieHandler34 = null;
        okHttpClient33.cookieHandler = cookieHandler34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        okHttpClient36.sslSocketFactory = sSLSocketFactory55;
        java.net.Socket socket57 = sSLSocketFactory55.createSocket();
        java.net.Socket socket58 = sSLSocketFactory55.createSocket();
        okHttpClient33.sslSocketFactory = sSLSocketFactory55;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory55);
        java.net.InetAddress inetAddress61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket63 = sSLSocketFactory55.createSocket(inetAddress61, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(proxy26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(socket57);
        org.junit.Assert.assertEquals(socket57.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket58);
        org.junit.Assert.assertEquals(socket58.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient60);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setProxySelector(proxySelector39);
        java.net.ResponseCache responseCache41 = null;
        okHttpClient40.responseCache = responseCache41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        java.net.CookieHandler cookieHandler51 = okHttpClient43.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache52 = okHttpClient43.okResponseCache();
        java.net.CookieHandler cookieHandler53 = okHttpClient43.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient(okHttpClient43);
        java.net.Proxy proxy55 = java.net.Proxy.NO_PROXY;
        boolean boolean57 = proxy55.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type58 = proxy55.type();
        java.net.SocketAddress socketAddress59 = proxy55.address();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient43.setProxy(proxy55);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        java.util.List<java.lang.String> strList66 = okHttpClient61.transports;
        com.squareup.okhttp.ConnectionPool connectionPool67 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient61.connectionPool = connectionPool67;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient61.copyWithDefaults();
        java.net.ProxySelector proxySelector70 = okHttpClient69.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory71 = okHttpClient69.getSslSocketFactory();
        okHttpClient60.sslSocketFactory = sSLSocketFactory71;
        java.lang.String[] strArray73 = sSLSocketFactory71.getDefaultCipherSuites();
        java.lang.String[] strArray74 = sSLSocketFactory71.getSupportedCipherSuites();
        java.net.Socket socket75 = sSLSocketFactory71.createSocket();
        okHttpClient40.sslSocketFactory = sSLSocketFactory71;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory77 = okHttpClient40.sslSocketFactory;
        java.net.Socket socket78 = sSLSocketFactory77.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket82 = sSLSocketFactory34.createSocket(socket78, "hi!", (int) (short) 1, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNull(okResponseCache52);
        org.junit.Assert.assertNull(cookieHandler53);
        org.junit.Assert.assertNotNull(proxy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type58.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress59);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(connectionPool67);
        org.junit.Assert.assertNotNull(okHttpClient69);
// flaky:         org.junit.Assert.assertNull(proxySelector70);
        org.junit.Assert.assertNotNull(sSLSocketFactory71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(socket75);
        org.junit.Assert.assertEquals(socket75.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory77);
        org.junit.Assert.assertNotNull(socket78);
        org.junit.Assert.assertEquals(socket78.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.setCookieHandler(cookieHandler19);
        java.util.Set<com.squareup.okhttp.Route> routeSet21 = okHttpClient20.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient22.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.copyWithDefaults();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setResponseCache(responseCache34);
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setProxySelector(proxySelector36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient37.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory38);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory38.createSocket("hi!", (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(routeSet21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(okHttpClient39);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (byte) 10);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient7.sslSocketFactory = sSLSocketFactory19;
        java.lang.String[] strArray21 = sSLSocketFactory19.getDefaultCipherSuites();
        java.lang.String[] strArray22 = sSLSocketFactory19.getDefaultCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket25 = sSLSocketFactory19.createSocket("", (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        int int12 = connectionPool9.getSpdyConnectionCount();
        connectionPool9.evictAll();
        int int14 = connectionPool9.getSpdyConnectionCount();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.util.List<java.lang.String> strList4 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient0.getConnectionPool();
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        java.net.CookieHandler cookieHandler8 = okHttpClient7.getCookieHandler();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(connectionPool5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(cookieHandler8);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.SocketAddress socketAddress38 = proxy34.address();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient22.setProxy(proxy34);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray52 = sSLSocketFactory50.getDefaultCipherSuites();
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient21.setSSLSocketFactory(sSLSocketFactory50);
        java.lang.String[] strArray56 = sSLSocketFactory50.getDefaultCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket59 = sSLSocketFactory50.createSocket("", 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        int int12 = connectionPool9.getConnectionCount();
        int int13 = connectionPool9.getSpdyConnectionCount();
        int int14 = connectionPool9.getSpdyConnectionCount();
        int int15 = connectionPool9.getHttpConnectionCount();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient0.cookieHandler = cookieHandler22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setConnectionPool(connectionPool33);
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient35.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient35.connectionPool = connectionPool40;
        java.net.ResponseCache responseCache42 = okHttpClient35.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient35.sslSocketFactory;
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress45 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory58);
        java.lang.String[] strArray60 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray61 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory58.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory58;
        java.net.URL uRL64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection65 = okHttpClient0.open(uRL64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertNull(socketAddress45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient15.hostnameVerifier;
        java.net.Proxy proxy21 = okHttpClient15.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient15.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.copyWithDefaults();
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setResponseCache(responseCache27);
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = okHttpClient28.hostnameVerifier;
        okHttpClient13.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = okHttpClient13.responseCache;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNull(proxy21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(hostnameVerifier29);
        org.junit.Assert.assertNull(responseCache31);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient36.connectionPool;
        connectionPool39.evictAll();
        com.squareup.okhttp.Address address41 = null;
        com.squareup.okhttp.Connection connection42 = connectionPool39.get(address41);
        int int43 = connectionPool39.getSpdyConnectionCount();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNull(connection42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient5.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ProxySelector proxySelector10 = okHttpClient7.proxySelector;
        java.net.Proxy proxy11 = okHttpClient7.proxy;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        boolean boolean13 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient7.setProxy(proxy19);
        okHttpClient5.proxy = proxy19;
        java.net.Proxy.Type type25 = proxy19.type();
        java.lang.String str26 = proxy19.toString();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient6);
        org.junit.Assert.assertNull(proxySelector10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DIRECT" + "'", str26, "DIRECT");
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient5.sslSocketFactory = sSLSocketFactory6;
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setResponseCache(responseCache8);
        java.net.ProxySelector proxySelector10 = okHttpClient9.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.CookieHandler cookieHandler19 = okHttpClient11.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient11.okResponseCache();
        java.net.CookieHandler cookieHandler21 = okHttpClient11.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.Proxy proxy23 = java.net.Proxy.NO_PROXY;
        boolean boolean25 = proxy23.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type26 = proxy23.type();
        java.net.SocketAddress socketAddress27 = proxy23.address();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient28.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory34);
        boolean boolean36 = proxy23.equals((java.lang.Object) okHttpClient28);
        java.net.SocketAddress socketAddress37 = proxy23.address();
        okHttpClient22.proxy = proxy23;
        okHttpClient9.proxy = proxy23;
        java.net.Proxy.Type type40 = proxy23.type();
        java.net.SocketAddress socketAddress41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy42 = new java.net.Proxy(type40, socketAddress41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(proxySelector10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(proxy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type26.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress27);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(socketAddress37);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type40.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList21 = okHttpClient0.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool24 = okHttpClient0.getConnectionPool();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNull(okAuthenticator23);
        org.junit.Assert.assertNull(connectionPool24);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient13.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket37 = sSLSocketFactory35.createSocket();
        java.net.Socket socket38 = sSLSocketFactory35.createSocket();
        okHttpClient13.sslSocketFactory = sSLSocketFactory35;
        java.lang.Class<?> wildcardClass40 = okHttpClient13.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool8 = new com.squareup.okhttp.ConnectionPool(10, (long) 10);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setConnectionPool(connectionPool8);
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        boolean boolean15 = okHttpClient12.getFollowProtocolRedirects();
        java.net.Proxy proxy16 = okHttpClient12.proxy;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        java.util.List<java.lang.String> strList18 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient12.transports = strList18;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList18;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList18;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setTransports(strList18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(proxy16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.net.InetAddress inetAddress64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket66 = sSLSocketFactory61.createSocket(inetAddress64, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getSupportedCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory61.getSupportedCipherSuites();
        javax.net.SocketFactory socketFactory66 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket67 = socketFactory66.createSocket();
        java.net.Socket socket68 = socketFactory66.createSocket();
        java.io.InputStream inputStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket71 = sSLSocketFactory61.createSocket(socket68, inputStream69, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(socketFactory66);
        org.junit.Assert.assertNotNull(socket67);
        org.junit.Assert.assertEquals(socket67.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket68);
        org.junit.Assert.assertEquals(socket68.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        java.net.CookieHandler cookieHandler18 = null;
        okHttpClient0.cookieHandler = cookieHandler18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setResponseCache(responseCache22);
        java.net.CookieHandler cookieHandler24 = okHttpClient20.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        java.net.CookieHandler cookieHandler32 = null;
        okHttpClient25.cookieHandler = cookieHandler32;
        okHttpClient25.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient36.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient36.sslSocketFactory;
        java.net.CookieHandler cookieHandler43 = okHttpClient36.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient36.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = null;
        okHttpClient45.authenticator = okAuthenticator48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient45.responseCache = responseCache51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = okHttpClient53.hostnameVerifier;
        java.net.Proxy proxy59 = okHttpClient53.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool62 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient53.connectionPool = connectionPool62;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient53.copyWithDefaults();
        java.net.Proxy proxy65 = okHttpClient64.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient64.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient45.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient36.setHostnameVerifier(hostnameVerifier66);
        okHttpClient25.hostnameVerifier = hostnameVerifier66;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient20.setHostnameVerifier(hostnameVerifier66);
        okHttpClient0.hostnameVerifier = hostnameVerifier66;
        java.net.Proxy proxy72 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache74 = okHttpClient73.okResponseCache();
        java.net.ResponseCache responseCache75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient73.setResponseCache(responseCache75);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        okHttpClient73.transports = strList79;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory82 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient73.setSSLSocketFactory(sSLSocketFactory82);
        java.net.Proxy proxy84 = okHttpClient83.proxy;
        java.util.List<java.lang.String> strList85 = okHttpClient83.transports;
        okHttpClient0.transports = strList85;
        boolean boolean87 = okHttpClient0.followProtocolRedirects;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNull(hostnameVerifier41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(cookieHandler43);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(hostnameVerifier58);
        org.junit.Assert.assertNull(proxy59);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(proxy65);
        org.junit.Assert.assertNotNull(hostnameVerifier66);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(proxy72);
        org.junit.Assert.assertNull(okResponseCache74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNull(proxy84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setResponseCache(responseCache25);
        okHttpClient26.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList29 = okHttpClient26.getTransports();
        okHttpClient11.transports = strList29;
        com.squareup.okhttp.ConnectionPool connectionPool33 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient11.connectionPool = connectionPool33;
        boolean boolean35 = okHttpClient11.followProtocolRedirects;
        boolean boolean36 = okHttpClient11.getFollowProtocolRedirects();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient11.okResponseCache();
        java.net.Proxy proxy15 = okHttpClient11.getProxy();
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection17 = okHttpClient11.open(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(proxy15);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.util.List<java.lang.String> strList6 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient7.getSslSocketFactory();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection10 = okHttpClient7.open(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(sSLSocketFactory8);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ResponseCache responseCache11 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.util.List<java.lang.String> strList13 = okHttpClient12.getTransports();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNull(responseCache11);
        org.junit.Assert.assertNull(strList13);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.net.Socket socket42 = sSLSocketFactory41.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ProxySelector proxySelector46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.setProxySelector(proxySelector46);
        java.net.ResponseCache responseCache48 = null;
        okHttpClient47.responseCache = responseCache48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        java.net.CookieHandler cookieHandler58 = okHttpClient50.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache59 = okHttpClient50.okResponseCache();
        java.net.CookieHandler cookieHandler60 = okHttpClient50.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient(okHttpClient50);
        java.net.Proxy proxy62 = java.net.Proxy.NO_PROXY;
        boolean boolean64 = proxy62.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type65 = proxy62.type();
        java.net.SocketAddress socketAddress66 = proxy62.address();
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient50.setProxy(proxy62);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        java.util.List<java.lang.String> strList73 = okHttpClient68.transports;
        com.squareup.okhttp.ConnectionPool connectionPool74 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient68.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient68.copyWithDefaults();
        java.net.ProxySelector proxySelector77 = okHttpClient76.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = okHttpClient76.getSslSocketFactory();
        okHttpClient67.sslSocketFactory = sSLSocketFactory78;
        java.lang.String[] strArray80 = sSLSocketFactory78.getDefaultCipherSuites();
        java.lang.String[] strArray81 = sSLSocketFactory78.getSupportedCipherSuites();
        java.net.Socket socket82 = sSLSocketFactory78.createSocket();
        okHttpClient47.sslSocketFactory = sSLSocketFactory78;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory84 = okHttpClient47.sslSocketFactory;
        java.net.Socket socket85 = sSLSocketFactory84.createSocket();
        java.io.InputStream inputStream86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket88 = sSLSocketFactory41.createSocket(socket85, inputStream86, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(socket42);
        org.junit.Assert.assertEquals(socket42.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNull(cookieHandler58);
        org.junit.Assert.assertNull(okResponseCache59);
        org.junit.Assert.assertNull(cookieHandler60);
        org.junit.Assert.assertNotNull(proxy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type65.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress66);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient76);
// flaky:         org.junit.Assert.assertNull(proxySelector77);
        org.junit.Assert.assertNotNull(sSLSocketFactory78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(socket82);
        org.junit.Assert.assertEquals(socket82.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory84);
        org.junit.Assert.assertNotNull(socket85);
        org.junit.Assert.assertEquals(socket85.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        boolean boolean8 = okHttpClient7.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient7.proxySelector = proxySelector9;
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.net.Socket socket64 = sSLSocketFactory61.createSocket();
        java.net.InetAddress inetAddress65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket67 = sSLSocketFactory61.createSocket(inetAddress65, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(socket64);
        org.junit.Assert.assertEquals(socket64.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.net.InetAddress inetAddress30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket32 = sSLSocketFactory28.createSocket(inetAddress30, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setResponseCache(responseCache21);
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setAuthenticator(okAuthenticator23);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setFollowProtocolRedirects(false);
        java.net.URL uRL27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection28 = okHttpClient26.open(uRL27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList16 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory65);
        java.net.Socket socket69 = sSLSocketFactory65.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory65);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket73 = sSLSocketFactory65.createSocket("", (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient70);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.lang.Class<?> wildcardClass20 = okHttpClient11.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient8.okResponseCache();
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setResponseCache(responseCache10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache13 = okHttpClient12.okResponseCache();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setResponseCache(responseCache14);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        okHttpClient12.transports = strList18;
        okHttpClient8.transports = strList18;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        java.net.CookieHandler cookieHandler29 = null;
        okHttpClient22.cookieHandler = cookieHandler29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        java.util.List<java.lang.String> strList36 = okHttpClient31.transports;
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool37;
        java.net.CookieHandler cookieHandler39 = okHttpClient31.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache40 = okHttpClient31.okResponseCache();
        java.net.CookieHandler cookieHandler41 = okHttpClient31.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient(okHttpClient31);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ProxySelector proxySelector46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.setProxySelector(proxySelector46);
        java.net.CookieHandler cookieHandler48 = okHttpClient43.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        java.net.Proxy proxy57 = null;
        okHttpClient49.proxy = proxy57;
        java.util.Set<com.squareup.okhttp.Route> routeSet59 = okHttpClient49.failedRoutes;
        okHttpClient43.failedRoutes = routeSet59;
        okHttpClient42.failedRoutes = routeSet59;
        okHttpClient22.failedRoutes = routeSet59;
        okHttpClient8.failedRoutes = routeSet59;
        okHttpClient0.failedRoutes = routeSet59;
        java.net.CookieHandler cookieHandler65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient0.setCookieHandler(cookieHandler65);
        java.net.CookieHandler cookieHandler67 = okHttpClient0.getCookieHandler();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okResponseCache13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNull(cookieHandler39);
        org.junit.Assert.assertNull(okResponseCache40);
        org.junit.Assert.assertNull(cookieHandler41);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(routeSet59);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(cookieHandler67);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.setCookieHandler(cookieHandler19);
        java.util.Set<com.squareup.okhttp.Route> routeSet21 = okHttpClient20.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient22.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.copyWithDefaults();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setResponseCache(responseCache34);
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setProxySelector(proxySelector36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient37.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory38);
        java.net.Socket socket40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket44 = sSLSocketFactory38.createSocket(socket40, "hi!", (int) ' ', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(routeSet21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(okHttpClient39);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = okHttpClient0.proxySelector;
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setProxySelector(proxySelector4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient6.copyWithDefaults();
        java.net.ProxySelector proxySelector15 = okHttpClient14.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient14.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory16;
        java.net.Socket socket18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket22 = sSLSocketFactory16.createSocket(socket18, "hi!", (int) (byte) 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(proxySelector3);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(okHttpClient14);
// flaky:         org.junit.Assert.assertNull(proxySelector15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient10.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient10.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient10.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = null;
        okHttpClient19.authenticator = okAuthenticator22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient19.responseCache = responseCache25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient19.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient10.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ProxySelector proxySelector47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.setProxySelector(proxySelector47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient48.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray50 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet51 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet51, routeArray50);
        okHttpClient49.failedRoutes = routeSet51;
        okHttpClient0.failedRoutes = routeSet51;
        java.util.List<java.lang.String> strList55 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier56;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(routeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strList55);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(1, (long) (byte) 1);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient15.sslSocketFactory;
        java.net.InetAddress inetAddress17 = null;
        java.net.InetAddress inetAddress19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket21 = sSLSocketFactory16.createSocket(inetAddress17, (int) 'a', inetAddress19, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        boolean boolean27 = okHttpClient24.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler28 = okHttpClient24.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient29.hostnameVerifier;
        java.net.Proxy proxy35 = okHttpClient29.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool38 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient29.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient29.copyWithDefaults();
        java.net.ResponseCache responseCache41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setResponseCache(responseCache41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = okHttpClient40.authenticator;
        okHttpClient24.authenticator = okAuthenticator43;
        okHttpClient23.authenticator = okAuthenticator43;
        java.net.Proxy proxy46 = okHttpClient23.getProxy();
        boolean boolean47 = okHttpClient23.followProtocolRedirects;
        java.util.List<java.lang.String> strList48 = okHttpClient23.getTransports();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okAuthenticator43);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(strList48);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        int int18 = connectionPool14.getSpdyConnectionCount();
        int int19 = connectionPool14.getConnectionCount();
        com.squareup.okhttp.Address address20 = null;
        com.squareup.okhttp.Connection connection21 = connectionPool14.get(address20);
        int int22 = connectionPool14.getSpdyConnectionCount();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(connection21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.net.Socket socket22 = sSLSocketFactory19.createSocket();
        java.net.InetAddress inetAddress23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket25 = sSLSocketFactory19.createSocket(inetAddress23, 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket22);
        org.junit.Assert.assertEquals(socket22.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory34.getSupportedCipherSuites();
        java.net.InetAddress inetAddress39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory34.createSocket(inetAddress39, 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, 0L);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        int int5 = connectionPool2.getSpdyConnectionCount();
        int int6 = connectionPool2.getHttpConnectionCount();
        com.squareup.okhttp.Connection connection7 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.authenticator;
        java.net.ProxySelector proxySelector9 = okHttpClient7.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        okHttpClient10.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket31 = sSLSocketFactory29.createSocket();
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        okHttpClient7.sslSocketFactory = sSLSocketFactory29;
        java.lang.String[] strArray34 = sSLSocketFactory29.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient35.hostnameVerifier;
        java.net.Proxy proxy41 = okHttpClient35.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool44 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient35.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.copyWithDefaults();
        java.net.ResponseCache responseCache47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setResponseCache(responseCache47);
        java.net.CookieHandler cookieHandler49 = null;
        okHttpClient48.cookieHandler = cookieHandler49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        java.util.List<java.lang.String> strList65 = okHttpClient60.transports;
        com.squareup.okhttp.ConnectionPool connectionPool66 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient60.copyWithDefaults();
        java.net.ProxySelector proxySelector69 = okHttpClient68.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient68.getSslSocketFactory();
        okHttpClient51.sslSocketFactory = sSLSocketFactory70;
        java.net.Socket socket72 = sSLSocketFactory70.createSocket();
        java.net.Socket socket73 = sSLSocketFactory70.createSocket();
        okHttpClient48.sslSocketFactory = sSLSocketFactory70;
        java.net.Socket socket75 = sSLSocketFactory70.createSocket();
        java.io.InputStream inputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket78 = sSLSocketFactory29.createSocket(socket75, inputStream76, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(socket31);
        org.junit.Assert.assertEquals(socket31.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNull(hostnameVerifier40);
        org.junit.Assert.assertNull(proxy41);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(connectionPool66);
        org.junit.Assert.assertNotNull(okHttpClient68);
// flaky:         org.junit.Assert.assertNull(proxySelector69);
        org.junit.Assert.assertNotNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(socket72);
        org.junit.Assert.assertEquals(socket72.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket73);
        org.junit.Assert.assertEquals(socket73.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket75);
        org.junit.Assert.assertEquals(socket75.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setResponseCache(responseCache12);
        java.lang.Class<?> wildcardClass14 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray41 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.InetAddress inetAddress44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket46 = sSLSocketFactory35.createSocket("", (int) (byte) 100, inetAddress44, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray41);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient62.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient62.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient62.connectionPool = connectionPool67;
        java.net.ResponseCache responseCache69 = okHttpClient62.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient62.sslSocketFactory;
        java.net.Proxy proxy71 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress72 = proxy71.address();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setProxy(proxy71);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient(okHttpClient73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient73.setSSLSocketFactory(sSLSocketFactory85);
        java.lang.String[] strArray87 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory85);
        java.net.ResponseCache responseCache91 = okHttpClient13.responseCache;
        java.net.URL uRL92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection93 = okHttpClient13.open(uRL92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(okAuthenticator64);
        org.junit.Assert.assertNull(responseCache69);
        org.junit.Assert.assertNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(proxy71);
        org.junit.Assert.assertNull(socketAddress72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNull(responseCache91);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.util.Set<com.squareup.okhttp.Route> routeSet30 = okHttpClient17.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient31.hostnameVerifier;
        java.net.Proxy proxy37 = okHttpClient31.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache39 = okHttpClient38.okResponseCache();
        java.net.ResponseCache responseCache40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setResponseCache(responseCache40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        okHttpClient38.transports = strList44;
        okHttpClient31.transports = strList44;
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient(okHttpClient31);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory51 = okHttpClient31.sslSocketFactory;
        java.net.CookieHandler cookieHandler52 = okHttpClient31.cookieHandler;
        java.net.CookieHandler cookieHandler53 = null;
        okHttpClient31.cookieHandler = cookieHandler53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient58.hostnameVerifier = hostnameVerifier59;
        java.net.ResponseCache responseCache61 = null;
        okHttpClient58.responseCache = responseCache61;
        java.util.List<java.lang.String> strList63 = okHttpClient58.transports;
        com.squareup.okhttp.ConnectionPool connectionPool64 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient55.setConnectionPool(connectionPool64);
        com.squareup.okhttp.ConnectionPool connectionPool67 = okHttpClient66.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator68 = okHttpClient66.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool71 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient66.connectionPool = connectionPool71;
        java.net.ResponseCache responseCache73 = okHttpClient66.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory74 = okHttpClient66.sslSocketFactory;
        java.net.Proxy proxy75 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress76 = proxy75.address();
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient66.setProxy(proxy75);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = new com.squareup.okhttp.OkHttpClient(okHttpClient77);
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = null;
        okHttpClient79.hostnameVerifier = hostnameVerifier80;
        java.net.ResponseCache responseCache82 = null;
        okHttpClient79.responseCache = responseCache82;
        java.util.List<java.lang.String> strList84 = okHttpClient79.transports;
        com.squareup.okhttp.ConnectionPool connectionPool85 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient79.connectionPool = connectionPool85;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient79.copyWithDefaults();
        java.net.ProxySelector proxySelector88 = okHttpClient87.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory89 = okHttpClient87.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient77.setSSLSocketFactory(sSLSocketFactory89);
        java.lang.String[] strArray91 = sSLSocketFactory89.getSupportedCipherSuites();
        java.lang.String[] strArray92 = sSLSocketFactory89.getSupportedCipherSuites();
        java.lang.String[] strArray93 = sSLSocketFactory89.getSupportedCipherSuites();
        okHttpClient31.sslSocketFactory = sSLSocketFactory89;
        java.util.List<java.lang.String> strList95 = okHttpClient31.getTransports();
        okHttpClient17.transports = strList95;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(routeSet30);
        org.junit.Assert.assertNull(hostnameVerifier36);
        org.junit.Assert.assertNull(proxy37);
        org.junit.Assert.assertNull(okResponseCache39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(sSLSocketFactory51);
        org.junit.Assert.assertNull(cookieHandler52);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(connectionPool64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNotNull(connectionPool67);
        org.junit.Assert.assertNull(okAuthenticator68);
        org.junit.Assert.assertNull(responseCache73);
        org.junit.Assert.assertNull(sSLSocketFactory74);
        org.junit.Assert.assertNotNull(proxy75);
        org.junit.Assert.assertNull(socketAddress76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNotNull(connectionPool85);
        org.junit.Assert.assertNotNull(okHttpClient87);
// flaky:         org.junit.Assert.assertNull(proxySelector88);
        org.junit.Assert.assertNotNull(sSLSocketFactory89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = okHttpClient0.proxySelector;
        java.net.Proxy proxy4 = okHttpClient0.proxy;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        boolean boolean6 = okHttpClient0.followProtocolRedirects;
        boolean boolean7 = okHttpClient0.followProtocolRedirects;
        java.net.CookieHandler cookieHandler8 = null;
        okHttpClient0.cookieHandler = cookieHandler8;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache11 = okHttpClient10.responseCache;
        org.junit.Assert.assertNull(proxySelector3);
        org.junit.Assert.assertNull(proxy4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(responseCache11);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        okHttpClient36.sslSocketFactory = sSLSocketFactory55;
        java.net.Socket socket57 = sSLSocketFactory55.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory55;
        java.net.Socket socket59 = sSLSocketFactory55.createSocket();
        java.net.InetAddress inetAddress60 = null;
        java.net.InetAddress inetAddress62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket64 = sSLSocketFactory55.createSocket(inetAddress60, (int) (byte) 1, inetAddress62, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(socket57);
        org.junit.Assert.assertEquals(socket57.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket59);
        org.junit.Assert.assertEquals(socket59.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = okHttpClient0.connectionPool;
        java.net.Proxy proxy2 = okHttpClient0.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient3.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory9);
        java.net.Proxy proxy11 = okHttpClient3.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.setConnectionPool(connectionPool21);
        com.squareup.okhttp.ConnectionPool connectionPool24 = okHttpClient23.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient23.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient23.connectionPool = connectionPool28;
        java.net.ResponseCache responseCache30 = okHttpClient23.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient23.sslSocketFactory;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setProxy(proxy32);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient34.setSSLSocketFactory(sSLSocketFactory46);
        java.net.Socket socket48 = sSLSocketFactory46.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory46);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket53 = sSLSocketFactory46.createSocket("hi!", (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connectionPool1);
        org.junit.Assert.assertNull(proxy2);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(okAuthenticator25);
        org.junit.Assert.assertNull(responseCache30);
        org.junit.Assert.assertNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(socket48);
        org.junit.Assert.assertEquals(socket48.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient50);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        java.net.CookieHandler cookieHandler17 = okHttpClient9.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache18 = okHttpClient9.okResponseCache();
        java.net.CookieHandler cookieHandler19 = okHttpClient9.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        okHttpClient20.failedRoutes = routeSet37;
        okHttpClient0.failedRoutes = routeSet37;
        boolean boolean41 = okHttpClient0.followProtocolRedirects;
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = okHttpClient0.getHostnameVerifier();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(okResponseCache18);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(hostnameVerifier42);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        java.lang.Class<?> wildcardClass23 = connectionPool21.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, 100L);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.ResponseCache responseCache14 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient0.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient16.setConnectionPool(connectionPool25);
        com.squareup.okhttp.ConnectionPool connectionPool28 = okHttpClient27.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = okHttpClient27.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient27.connectionPool = connectionPool32;
        java.net.ResponseCache responseCache34 = okHttpClient27.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient27.sslSocketFactory;
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress37 = proxy36.address();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.setProxy(proxy36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient27.setSSLSocketFactory(sSLSocketFactory39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient41.hostnameVerifier;
        java.net.Proxy proxy47 = okHttpClient41.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool50 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient41.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient41.copyWithDefaults();
        java.net.ResponseCache responseCache53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient52.setResponseCache(responseCache53);
        com.squareup.okhttp.OkAuthenticator okAuthenticator55 = okHttpClient52.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient27.setAuthenticator(okAuthenticator55);
        java.net.Proxy proxy57 = okHttpClient56.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = okHttpClient56.getAuthenticator();
        okHttpClient0.authenticator = okAuthenticator58;
        java.net.URL uRL60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection61 = okHttpClient0.open(uRL60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(okAuthenticator29);
        org.junit.Assert.assertNull(responseCache34);
        org.junit.Assert.assertNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertNull(socketAddress37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(hostnameVerifier46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNotNull(okAuthenticator55);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertNotNull(okAuthenticator58);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.net.InetAddress inetAddress22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket24 = sSLSocketFactory19.createSocket(inetAddress22, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, (long) 10);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient36.setConnectionPool(connectionPool45);
        java.net.Proxy proxy48 = okHttpClient47.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool50;
        int int52 = connectionPool50.getSpdyConnectionCount();
        okHttpClient47.connectionPool = connectionPool50;
        int int54 = connectionPool50.getSpdyConnectionCount();
        int int55 = connectionPool50.getConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient35.setConnectionPool(connectionPool50);
        com.squareup.okhttp.ConnectionPool connectionPool59 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, 0L);
        okHttpClient35.connectionPool = connectionPool59;
        com.squareup.okhttp.Connection connection61 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool59.recycle(connection61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(proxy48);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(okHttpClient56);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        java.net.ResponseCache responseCache13 = okHttpClient0.getResponseCache();
        java.net.ResponseCache responseCache14 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient15.okResponseCache();
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setResponseCache(responseCache17);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient15.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient15.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        boolean boolean24 = okHttpClient21.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler25 = okHttpClient21.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy32 = okHttpClient26.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient26.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient26.copyWithDefaults();
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.setResponseCache(responseCache38);
        com.squareup.okhttp.OkAuthenticator okAuthenticator40 = okHttpClient37.authenticator;
        okHttpClient21.authenticator = okAuthenticator40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient15.setAuthenticator(okAuthenticator40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setAuthenticator(okAuthenticator40);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient44.hostnameVerifier;
        java.net.Proxy proxy50 = okHttpClient44.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool53 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient44.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient44.copyWithDefaults();
        java.net.CookieHandler cookieHandler56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setCookieHandler(cookieHandler56);
        java.util.List<java.lang.String> strList58 = okHttpClient55.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList58;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient43.setTransports(strList58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(responseCache13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(cookieHandler25);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(proxy32);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(okAuthenticator40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(hostnameVerifier49);
        org.junit.Assert.assertNull(proxy50);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(strList58);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', (long) (byte) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient17.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory23);
        boolean boolean25 = proxy12.equals((java.lang.Object) okHttpClient17);
        java.net.SocketAddress socketAddress26 = proxy12.address();
        okHttpClient11.proxy = proxy12;
        java.net.Proxy.Type type28 = proxy12.type();
        java.lang.Object obj29 = null;
        boolean boolean30 = proxy12.equals(obj29);
        java.net.Proxy.Type type31 = proxy12.type();
        java.net.SocketAddress socketAddress32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy33 = new java.net.Proxy(type31, socketAddress32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(socketAddress26);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type28.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type31.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setResponseCache(responseCache27);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setFollowProtocolRedirects(true);
        okHttpClient30.followProtocolRedirects = false;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient18.connectionPool;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(connectionPool20);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getSupportedCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory61.getSupportedCipherSuites();
        java.net.InetAddress inetAddress66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket68 = sSLSocketFactory61.createSocket(inetAddress66, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient11.sslSocketFactory;
        java.net.CookieHandler cookieHandler18 = okHttpClient11.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient11.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool21;
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = null;
        okHttpClient20.authenticator = okAuthenticator23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient20.responseCache = responseCache26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient28.hostnameVerifier;
        java.net.Proxy proxy34 = okHttpClient28.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient28.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient28.copyWithDefaults();
        java.net.Proxy proxy40 = okHttpClient39.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient39.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient20.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient11.setHostnameVerifier(hostnameVerifier41);
        okHttpClient0.hostnameVerifier = hostnameVerifier41;
        java.util.List<java.lang.String> strList45 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList45;
        java.lang.Class<?> wildcardClass47 = strList45.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(sSLSocketFactory17);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNull(proxy34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(proxy40);
        org.junit.Assert.assertNotNull(hostnameVerifier41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.net.Proxy proxy27 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress28 = proxy27.address();
        java.net.SocketAddress socketAddress29 = proxy27.address();
        okHttpClient22.proxy = proxy27;
        com.squareup.okhttp.ConnectionPool connectionPool33 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address34 = null;
        com.squareup.okhttp.Connection connection35 = connectionPool33.get(address34);
        int int36 = connectionPool33.getSpdyConnectionCount();
        connectionPool33.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient22.setConnectionPool(connectionPool33);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ProxySelector proxySelector42 = okHttpClient39.proxySelector;
        java.net.ProxySelector proxySelector43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient39.setProxySelector(proxySelector43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory55;
        okHttpClient22.sslSocketFactory = sSLSocketFactory55;
        java.lang.String[] strArray58 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray59 = sSLSocketFactory55.getDefaultCipherSuites();
        java.net.Socket socket60 = sSLSocketFactory55.createSocket();
        java.io.InputStream inputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket63 = sSLSocketFactory19.createSocket(socket60, inputStream61, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(proxy27);
        org.junit.Assert.assertNull(socketAddress28);
        org.junit.Assert.assertNull(socketAddress29);
        org.junit.Assert.assertNull(connection35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxySelector42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(socket60);
        org.junit.Assert.assertEquals(socket60.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setResponseCache(responseCache16);
        java.net.Proxy proxy18 = okHttpClient17.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient19.hostnameVerifier;
        java.net.Proxy proxy25 = okHttpClient19.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient19.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.copyWithDefaults();
        java.util.List<java.lang.String> strList31 = okHttpClient19.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient19.copyWithDefaults();
        java.util.List<java.lang.String> strList33 = okHttpClient32.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient17.setTransports(strList33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [DIRECT]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        boolean boolean18 = okHttpClient17.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient20.copyWithDefaults();
        java.net.Proxy proxy22 = okHttpClient20.getProxy();
        java.net.Proxy.Type type23 = proxy22.type();
        java.net.SocketAddress socketAddress24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy25 = new java.net.Proxy(type23, socketAddress24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type23.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier7;
        java.net.CookieHandler cookieHandler9 = null;
        okHttpClient0.cookieHandler = cookieHandler9;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = okHttpClient0.getAuthenticator();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okAuthenticator11);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.authenticator;
        java.net.ProxySelector proxySelector9 = okHttpClient7.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        okHttpClient10.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket31 = sSLSocketFactory29.createSocket();
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        okHttpClient7.sslSocketFactory = sSLSocketFactory29;
        java.lang.String[] strArray34 = sSLSocketFactory29.getDefaultCipherSuites();
        java.net.InetAddress inetAddress35 = null;
        java.net.InetAddress inetAddress37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket39 = sSLSocketFactory29.createSocket(inetAddress35, 10, inetAddress37, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(socket31);
        org.junit.Assert.assertEquals(socket31.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        java.net.CookieHandler cookieHandler18 = null;
        okHttpClient0.cookieHandler = cookieHandler18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setResponseCache(responseCache22);
        java.net.CookieHandler cookieHandler24 = okHttpClient20.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        java.net.CookieHandler cookieHandler32 = null;
        okHttpClient25.cookieHandler = cookieHandler32;
        okHttpClient25.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient36.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient36.sslSocketFactory;
        java.net.CookieHandler cookieHandler43 = okHttpClient36.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient36.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = null;
        okHttpClient45.authenticator = okAuthenticator48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient45.responseCache = responseCache51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = okHttpClient53.hostnameVerifier;
        java.net.Proxy proxy59 = okHttpClient53.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool62 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient53.connectionPool = connectionPool62;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient53.copyWithDefaults();
        java.net.Proxy proxy65 = okHttpClient64.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient64.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient45.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient36.setHostnameVerifier(hostnameVerifier66);
        okHttpClient25.hostnameVerifier = hostnameVerifier66;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient20.setHostnameVerifier(hostnameVerifier66);
        okHttpClient0.hostnameVerifier = hostnameVerifier66;
        java.net.Proxy proxy72 = okHttpClient0.getProxy();
        okHttpClient0.followProtocolRedirects = false;
        java.net.URL uRL75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection76 = okHttpClient0.open(uRL75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNull(hostnameVerifier41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(cookieHandler43);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(hostnameVerifier58);
        org.junit.Assert.assertNull(proxy59);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(proxy65);
        org.junit.Assert.assertNotNull(hostnameVerifier66);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(proxy72);
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ResponseCache responseCache20 = okHttpClient0.responseCache;
        boolean boolean21 = okHttpClient0.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(responseCache20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.connectionPool;
        connectionPool12.evictAll();
        com.squareup.okhttp.Address address14 = null;
        com.squareup.okhttp.Connection connection15 = connectionPool12.get(address14);
        int int16 = connectionPool12.getSpdyConnectionCount();
        com.squareup.okhttp.Connection connection17 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool12.recycle(connection17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(connection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        java.net.ResponseCache responseCache10 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient21.copyWithDefaults();
        java.net.ProxySelector proxySelector30 = okHttpClient29.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient29.getSslSocketFactory();
        okHttpClient12.sslSocketFactory = sSLSocketFactory31;
        java.net.Socket socket33 = sSLSocketFactory31.createSocket();
        java.net.Socket socket34 = sSLSocketFactory31.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory31;
        java.lang.String[] strArray36 = sSLSocketFactory31.getSupportedCipherSuites();
        java.net.Socket socket37 = sSLSocketFactory31.createSocket();
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory31.createSocket("DIRECT", (int) (byte) 0, inetAddress40, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertNull(connectionPool11);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
// flaky:         org.junit.Assert.assertNull(proxySelector30);
        org.junit.Assert.assertNotNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket34);
        org.junit.Assert.assertEquals(socket34.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient9.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient9.getSslSocketFactory();
        okHttpClient9.followProtocolRedirects = false;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okResponseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        int int3 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler12 = okHttpClient0.getCookieHandler();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(cookieHandler12);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient11.connectionPool;
        java.net.Proxy proxy14 = okHttpClient11.proxy;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(connectionPool13);
        org.junit.Assert.assertNull(proxy14);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setCookieHandler(cookieHandler12);
        boolean boolean14 = okHttpClient11.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.setConnectionPool(connectionPool24);
        java.net.Proxy proxy27 = okHttpClient26.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool29;
        int int31 = connectionPool29.getSpdyConnectionCount();
        okHttpClient26.connectionPool = connectionPool29;
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient26.getConnectionPool();
        com.squareup.okhttp.Address address34 = null;
        com.squareup.okhttp.Connection connection35 = connectionPool33.get(address34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setConnectionPool(connectionPool33);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache37 = okHttpClient36.okResponseCache();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(connection35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(okResponseCache37);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient16.setResponseCache(responseCache17);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient18);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient12.hostnameVerifier;
        java.net.Proxy proxy18 = okHttpClient12.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient12.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient23.getHostnameVerifier();
        okHttpClient5.hostnameVerifier = hostnameVerifier24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.setProxySelector(proxySelector29);
        java.net.CookieHandler cookieHandler31 = okHttpClient26.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        java.net.Proxy proxy40 = null;
        okHttpClient32.proxy = proxy40;
        java.util.Set<com.squareup.okhttp.Route> routeSet42 = okHttpClient32.failedRoutes;
        okHttpClient26.failedRoutes = routeSet42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient26.setHostnameVerifier(hostnameVerifier44);
        java.net.ResponseCache responseCache46 = okHttpClient26.responseCache;
        com.squareup.okhttp.OkAuthenticator okAuthenticator47 = okHttpClient26.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        java.util.List<java.lang.String> strList49 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList49;
        okHttpClient26.transports = strList49;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient5.setTransports(strList49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [DIRECT]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(hostnameVerifier24);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(cookieHandler31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(routeSet42);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNull(responseCache46);
        org.junit.Assert.assertNull(okAuthenticator47);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.setCookieHandler(cookieHandler19);
        java.util.Set<com.squareup.okhttp.Route> routeSet21 = okHttpClient20.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ProxySelector proxySelector25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient22.setProxySelector(proxySelector25);
        java.net.ResponseCache responseCache27 = null;
        okHttpClient26.responseCache = responseCache27;
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = okHttpClient26.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient26.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setProxySelector(proxySelector32);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache34 = okHttpClient31.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool36 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.util.List<java.lang.String> strList43 = okHttpClient38.transports;
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.setConnectionPool(connectionPool44);
        com.squareup.okhttp.ConnectionPool connectionPool47 = okHttpClient46.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = okHttpClient46.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool51 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient46.connectionPool = connectionPool51;
        java.net.ResponseCache responseCache53 = okHttpClient46.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory54 = okHttpClient46.sslSocketFactory;
        java.net.Proxy proxy55 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress56 = proxy55.address();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient46.setProxy(proxy55);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory58);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient60.hostnameVerifier;
        java.net.Proxy proxy66 = okHttpClient60.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool69 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient60.connectionPool = connectionPool69;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.copyWithDefaults();
        java.net.ResponseCache responseCache72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient71.setResponseCache(responseCache72);
        com.squareup.okhttp.OkAuthenticator okAuthenticator74 = okHttpClient71.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient46.setAuthenticator(okAuthenticator74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient31.setAuthenticator(okAuthenticator74);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient20.setAuthenticator(okAuthenticator74);
        boolean boolean78 = okHttpClient20.followProtocolRedirects;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(routeSet21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(hostnameVerifier29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(okResponseCache34);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(okAuthenticator48);
        org.junit.Assert.assertNull(responseCache53);
        org.junit.Assert.assertNull(sSLSocketFactory54);
        org.junit.Assert.assertNotNull(proxy55);
        org.junit.Assert.assertNull(socketAddress56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(hostnameVerifier65);
        org.junit.Assert.assertNull(proxy66);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(okAuthenticator74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.SocketAddress socketAddress38 = proxy34.address();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient22.setProxy(proxy34);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray52 = sSLSocketFactory50.getDefaultCipherSuites();
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient21.setSSLSocketFactory(sSLSocketFactory50);
        java.lang.String[] strArray56 = sSLSocketFactory50.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket59 = sSLSocketFactory50.createSocket("", 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 100, (long) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient14.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient14.sslSocketFactory = sSLSocketFactory33;
        okHttpClient13.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.InetAddress inetAddress39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory33.createSocket("", (int) (short) 1, inetAddress39, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.util.List<java.lang.String> strList6 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient7.getSslSocketFactory();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = sSLSocketFactory8.createSocket(inetAddress9, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(sSLSocketFactory8);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory39);
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        java.net.Proxy proxy42 = okHttpClient40.proxy;
        java.lang.Class<?> wildcardClass43 = okHttpClient40.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(proxy42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        java.net.Proxy proxy10 = okHttpClient0.getProxy();
        java.net.ProxySelector proxySelector11 = null;
        okHttpClient0.proxySelector = proxySelector11;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache13 = okHttpClient0.okResponseCache();
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.lang.String str18 = proxy14.toString();
        java.net.Proxy.Type type19 = proxy14.type();
        java.net.Proxy.Type type20 = proxy14.type();
        okHttpClient0.proxy = proxy14;
        java.net.SocketAddress socketAddress22 = proxy14.address();
        java.net.Proxy.Type type23 = proxy14.type();
        java.net.SocketAddress socketAddress24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy25 = new java.net.Proxy(type23, socketAddress24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(proxy10);
        org.junit.Assert.assertNull(okResponseCache13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DIRECT" + "'", str18, "DIRECT");
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type19.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type20.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type23.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient9.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = okHttpClient24.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool29 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient24.connectionPool = connectionPool29;
        java.net.ResponseCache responseCache31 = okHttpClient24.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient24.sslSocketFactory;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress34 = proxy33.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setProxy(proxy33);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy44 = okHttpClient38.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient38.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.copyWithDefaults();
        java.net.ResponseCache responseCache50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setResponseCache(responseCache50);
        com.squareup.okhttp.OkAuthenticator okAuthenticator52 = okHttpClient49.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient24.setAuthenticator(okAuthenticator52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient9.setAuthenticator(okAuthenticator52);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient9.getSslSocketFactory();
        java.util.List<java.lang.String> strList56 = okHttpClient9.getTransports();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okResponseCache12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(okAuthenticator26);
        org.junit.Assert.assertNull(responseCache31);
        org.junit.Assert.assertNull(sSLSocketFactory32);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okAuthenticator52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(sSLSocketFactory55);
        org.junit.Assert.assertNull(strList56);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress3 = proxy0.address();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        java.util.List<java.lang.String> strList16 = okHttpClient5.transports;
        boolean boolean17 = proxy0.equals((java.lang.Object) okHttpClient5);
        java.net.Proxy.Type type18 = proxy0.type();
        java.net.SocketAddress socketAddress19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy20 = new java.net.Proxy(type18, socketAddress19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(socketAddress3);
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        java.net.Proxy.Type type42 = proxy41.type();
        java.net.SocketAddress socketAddress43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy44 = new java.net.Proxy(type42, socketAddress43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type42.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient0.cookieHandler = cookieHandler5;
        java.net.Proxy proxy7 = java.net.Proxy.NO_PROXY;
        boolean boolean9 = proxy7.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        okHttpClient10.transports = strList16;
        boolean boolean19 = proxy7.equals((java.lang.Object) strList16);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setProxy(proxy7);
        java.lang.String str21 = proxy7.toString();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DIRECT" + "'", str21, "DIRECT");
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory34.getSupportedCipherSuites();
        java.net.InetAddress inetAddress39 = null;
        java.net.InetAddress inetAddress41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory34.createSocket(inetAddress39, (int) (byte) 1, inetAddress41, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (short) 0);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setConnectionPool(connectionPool19);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = okHttpClient15.getSslSocketFactory();
        java.net.InetAddress inetAddress22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket24 = sSLSocketFactory21.createSocket(inetAddress22, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(sSLSocketFactory21);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient0.responseCache = responseCache6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient8.hostnameVerifier;
        java.net.Proxy proxy14 = okHttpClient8.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool17 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient8.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient8.copyWithDefaults();
        java.net.Proxy proxy20 = okHttpClient19.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient19.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setHostnameVerifier(hostnameVerifier21);
        java.net.CookieHandler cookieHandler23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setCookieHandler(cookieHandler23);
        java.net.ResponseCache responseCache25 = okHttpClient24.getResponseCache();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNotNull(hostnameVerifier21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(responseCache25);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress3 = proxy0.address();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        java.lang.String str5 = proxy0.toString();
        java.lang.String str6 = proxy0.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool8 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool8;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient7.setConnectionPool(connectionPool16);
        com.squareup.okhttp.ConnectionPool connectionPool19 = okHttpClient18.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient18.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool23 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient18.connectionPool = connectionPool23;
        java.net.ResponseCache responseCache25 = okHttpClient18.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient18.connectionPool = connectionPool28;
        java.util.List<java.lang.String> strList30 = okHttpClient18.transports;
        java.util.List<java.lang.String> strList31 = okHttpClient18.transports;
        boolean boolean32 = proxy0.equals((java.lang.Object) okHttpClient18);
        java.net.CookieHandler cookieHandler33 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient34.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkAuthenticator okAuthenticator46 = okHttpClient45.getAuthenticator();
        java.net.ProxySelector proxySelector47 = okHttpClient45.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient48.setConnectionPool(connectionPool57);
        java.net.ResponseCache responseCache60 = okHttpClient48.responseCache;
        java.net.ResponseCache responseCache61 = okHttpClient48.getResponseCache();
        java.net.ResponseCache responseCache62 = okHttpClient48.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache64 = okHttpClient63.okResponseCache();
        java.net.ResponseCache responseCache65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setResponseCache(responseCache65);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory67 = okHttpClient63.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient63.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        boolean boolean72 = okHttpClient69.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler73 = okHttpClient69.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        java.net.ResponseCache responseCache77 = null;
        okHttpClient74.responseCache = responseCache77;
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = okHttpClient74.hostnameVerifier;
        java.net.Proxy proxy80 = okHttpClient74.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool83 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient74.connectionPool = connectionPool83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient74.copyWithDefaults();
        java.net.ResponseCache responseCache86 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient85.setResponseCache(responseCache86);
        com.squareup.okhttp.OkAuthenticator okAuthenticator88 = okHttpClient85.authenticator;
        okHttpClient69.authenticator = okAuthenticator88;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient63.setAuthenticator(okAuthenticator88);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient48.setAuthenticator(okAuthenticator88);
        okHttpClient45.authenticator = okAuthenticator88;
        com.squareup.okhttp.ConnectionPool connectionPool93 = okHttpClient45.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient18.setConnectionPool(connectionPool93);
        java.net.URL uRL95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection96 = okHttpClient94.open(uRL95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(socketAddress3);
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DIRECT" + "'", str5, "DIRECT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DIRECT" + "'", str6, "DIRECT");
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(okAuthenticator20);
        org.junit.Assert.assertNull(responseCache25);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNull(okAuthenticator46);
        org.junit.Assert.assertNull(proxySelector47);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(responseCache60);
        org.junit.Assert.assertNull(responseCache61);
        org.junit.Assert.assertNull(responseCache62);
        org.junit.Assert.assertNull(okResponseCache64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(sSLSocketFactory67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(cookieHandler73);
        org.junit.Assert.assertNull(hostnameVerifier79);
        org.junit.Assert.assertNull(proxy80);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNotNull(okHttpClient87);
        org.junit.Assert.assertNotNull(okAuthenticator88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(connectionPool93);
        org.junit.Assert.assertNotNull(okHttpClient94);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.Proxy proxy37 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient11.setFollowProtocolRedirects(true);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNotNull(okHttpClient39);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, 0L);
        connectionPool2.evictAll();
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.SocketAddress socketAddress38 = proxy34.address();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient22.setProxy(proxy34);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray52 = sSLSocketFactory50.getDefaultCipherSuites();
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient21.setSSLSocketFactory(sSLSocketFactory50);
        java.lang.String[] strArray56 = sSLSocketFactory50.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        java.util.List<java.lang.String> strList65 = okHttpClient60.transports;
        com.squareup.okhttp.ConnectionPool connectionPool66 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.setConnectionPool(connectionPool66);
        com.squareup.okhttp.ConnectionPool connectionPool69 = okHttpClient68.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator70 = okHttpClient68.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool73 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient68.connectionPool = connectionPool73;
        java.net.ResponseCache responseCache75 = okHttpClient68.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory76 = okHttpClient68.sslSocketFactory;
        java.net.Proxy proxy77 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress78 = proxy77.address();
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient68.setProxy(proxy77);
        com.squareup.okhttp.OkHttpClient okHttpClient80 = new com.squareup.okhttp.OkHttpClient(okHttpClient79);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier82 = null;
        okHttpClient81.hostnameVerifier = hostnameVerifier82;
        java.net.ResponseCache responseCache84 = null;
        okHttpClient81.responseCache = responseCache84;
        java.util.List<java.lang.String> strList86 = okHttpClient81.transports;
        com.squareup.okhttp.ConnectionPool connectionPool87 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient81.connectionPool = connectionPool87;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient81.copyWithDefaults();
        java.net.ProxySelector proxySelector90 = okHttpClient89.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory91 = okHttpClient89.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient79.setSSLSocketFactory(sSLSocketFactory91);
        java.net.Socket socket93 = sSLSocketFactory91.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket97 = sSLSocketFactory50.createSocket(socket93, "", (int) (short) 10, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(connectionPool66);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(connectionPool69);
        org.junit.Assert.assertNull(okAuthenticator70);
        org.junit.Assert.assertNull(responseCache75);
        org.junit.Assert.assertNull(sSLSocketFactory76);
        org.junit.Assert.assertNotNull(proxy77);
        org.junit.Assert.assertNull(socketAddress78);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNull(strList86);
        org.junit.Assert.assertNotNull(connectionPool87);
        org.junit.Assert.assertNotNull(okHttpClient89);
// flaky:         org.junit.Assert.assertNull(proxySelector90);
        org.junit.Assert.assertNotNull(sSLSocketFactory91);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(socket93);
        org.junit.Assert.assertEquals(socket93.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList12 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        java.net.CookieHandler cookieHandler15 = okHttpClient13.getCookieHandler();
        java.net.CookieHandler cookieHandler16 = okHttpClient13.getCookieHandler();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(cookieHandler16);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache10 = okHttpClient5.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setSSLSocketFactory(sSLSocketFactory11);
        boolean boolean13 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient5.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient5.sslSocketFactory;
        java.lang.Class<?> wildcardClass17 = okHttpClient5.getClass();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertNull(okResponseCache10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory34.getSupportedCipherSuites();
        java.net.InetAddress inetAddress39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory34.createSocket(inetAddress39, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ProxySelector proxySelector30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.setProxySelector(proxySelector30);
        java.net.ResponseCache responseCache32 = null;
        okHttpClient31.responseCache = responseCache32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.CookieHandler cookieHandler42 = okHttpClient34.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache43 = okHttpClient34.okResponseCache();
        java.net.CookieHandler cookieHandler44 = okHttpClient34.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        java.net.Proxy proxy46 = java.net.Proxy.NO_PROXY;
        boolean boolean48 = proxy46.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type49 = proxy46.type();
        java.net.SocketAddress socketAddress50 = proxy46.address();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient34.setProxy(proxy46);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient52.copyWithDefaults();
        java.net.ProxySelector proxySelector61 = okHttpClient60.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory62 = okHttpClient60.getSslSocketFactory();
        okHttpClient51.sslSocketFactory = sSLSocketFactory62;
        java.lang.String[] strArray64 = sSLSocketFactory62.getDefaultCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory62.getSupportedCipherSuites();
        java.net.Socket socket66 = sSLSocketFactory62.createSocket();
        okHttpClient31.sslSocketFactory = sSLSocketFactory62;
        okHttpClient11.sslSocketFactory = sSLSocketFactory62;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket71 = sSLSocketFactory62.createSocket("hi!", (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNull(cookieHandler42);
        org.junit.Assert.assertNull(okResponseCache43);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNotNull(proxy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type49.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
// flaky:         org.junit.Assert.assertNull(proxySelector61);
        org.junit.Assert.assertNotNull(sSLSocketFactory62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 100, (long) 10);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool8 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool8;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient7.setConnectionPool(connectionPool16);
        com.squareup.okhttp.ConnectionPool connectionPool19 = okHttpClient18.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient18.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool23 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient18.connectionPool = connectionPool23;
        java.net.ResponseCache responseCache25 = okHttpClient18.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory26 = okHttpClient18.sslSocketFactory;
        java.net.Proxy proxy27 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress28 = proxy27.address();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.setProxy(proxy27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient18.setSSLSocketFactory(sSLSocketFactory30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = okHttpClient32.hostnameVerifier;
        java.net.Proxy proxy38 = okHttpClient32.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool41 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient32.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.copyWithDefaults();
        java.net.ResponseCache responseCache44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setResponseCache(responseCache44);
        com.squareup.okhttp.OkAuthenticator okAuthenticator46 = okHttpClient43.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient18.setAuthenticator(okAuthenticator46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient0.setAuthenticator(okAuthenticator46);
        java.net.Proxy proxy49 = okHttpClient48.getProxy();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(okAuthenticator20);
        org.junit.Assert.assertNull(responseCache25);
        org.junit.Assert.assertNull(sSLSocketFactory26);
        org.junit.Assert.assertNotNull(proxy27);
        org.junit.Assert.assertNull(socketAddress28);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(hostnameVerifier37);
        org.junit.Assert.assertNull(proxy38);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(okAuthenticator46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxy49);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        okHttpClient32.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient36.setConnectionPool(connectionPool45);
        com.squareup.okhttp.ConnectionPool connectionPool48 = okHttpClient47.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = okHttpClient47.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool52 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient47.connectionPool = connectionPool52;
        java.net.ResponseCache responseCache54 = okHttpClient47.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient47.sslSocketFactory;
        java.net.Proxy proxy56 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress57 = proxy56.address();
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient47.setProxy(proxy56);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient47.setSSLSocketFactory(sSLSocketFactory59);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setResponseCache(responseCache73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient72.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient47.setAuthenticator(okAuthenticator75);
        java.net.Proxy proxy77 = okHttpClient76.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator78 = okHttpClient76.getAuthenticator();
        okHttpClient32.authenticator = okAuthenticator78;
        okHttpClient0.authenticator = okAuthenticator78;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient82 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = null;
        okHttpClient82.hostnameVerifier = hostnameVerifier83;
        java.net.ResponseCache responseCache85 = null;
        okHttpClient82.responseCache = responseCache85;
        java.util.List<java.lang.String> strList87 = okHttpClient82.transports;
        com.squareup.okhttp.ConnectionPool connectionPool88 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient82.connectionPool = connectionPool88;
        java.net.Proxy proxy90 = null;
        okHttpClient82.proxy = proxy90;
        boolean boolean92 = okHttpClient82.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient82.copyWithDefaults();
        java.net.CookieHandler cookieHandler94 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient93.setCookieHandler(cookieHandler94);
        java.util.List<java.lang.String> strList96 = okHttpClient95.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList96;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient98 = okHttpClient81.setTransports(strList96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNull(okAuthenticator49);
        org.junit.Assert.assertNull(responseCache54);
        org.junit.Assert.assertNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(proxy56);
        org.junit.Assert.assertNull(socketAddress57);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okAuthenticator75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(proxy77);
        org.junit.Assert.assertNotNull(okAuthenticator78);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNull(strList87);
        org.junit.Assert.assertNotNull(connectionPool88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(strList96);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient11.sslSocketFactory;
        java.net.CookieHandler cookieHandler18 = okHttpClient11.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient11.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool21;
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = null;
        okHttpClient20.authenticator = okAuthenticator23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient20.responseCache = responseCache26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient28.hostnameVerifier;
        java.net.Proxy proxy34 = okHttpClient28.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient28.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient28.copyWithDefaults();
        java.net.Proxy proxy40 = okHttpClient39.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient39.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient20.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient11.setHostnameVerifier(hostnameVerifier41);
        okHttpClient0.hostnameVerifier = hostnameVerifier41;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient0.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient0.followProtocolRedirects = false;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(sSLSocketFactory17);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNull(proxy34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(proxy40);
        org.junit.Assert.assertNotNull(hostnameVerifier41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(hostnameVerifier45);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = sSLSocketFactory10.createSocket(inetAddress11, 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', (long) '#');
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.copyWithDefaults();
        java.net.ResponseCache responseCache9 = okHttpClient8.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = okHttpClient8.getSslSocketFactory();
        javax.net.SocketFactory socketFactory12 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket13 = socketFactory12.createSocket();
        java.net.Socket socket14 = socketFactory12.createSocket();
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket17 = sSLSocketFactory11.createSocket(socket14, inputStream15, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(responseCache9);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(socket13);
        org.junit.Assert.assertEquals(socket13.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket14);
        org.junit.Assert.assertEquals(socket14.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy17 = okHttpClient11.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient11.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setResponseCache(responseCache23);
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient22.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.setProxySelector(proxySelector29);
        java.net.CookieHandler cookieHandler31 = okHttpClient26.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        java.net.Proxy proxy40 = null;
        okHttpClient32.proxy = proxy40;
        java.util.Set<com.squareup.okhttp.Route> routeSet42 = okHttpClient32.failedRoutes;
        okHttpClient26.failedRoutes = routeSet42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient26.setHostnameVerifier(hostnameVerifier44);
        java.net.ProxySelector proxySelector46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setProxySelector(proxySelector46);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        com.squareup.okhttp.ConnectionPool connectionPool59 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient50.setConnectionPool(connectionPool59);
        java.net.Proxy proxy62 = okHttpClient61.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool64 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient63.connectionPool = connectionPool64;
        int int66 = connectionPool64.getSpdyConnectionCount();
        okHttpClient61.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = okHttpClient68.hostnameVerifier;
        java.net.Proxy proxy74 = okHttpClient68.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool77 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient68.connectionPool = connectionPool77;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient68.copyWithDefaults();
        java.net.ResponseCache responseCache80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient79.setResponseCache(responseCache80);
        com.squareup.okhttp.OkAuthenticator okAuthenticator82 = okHttpClient79.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient61.setAuthenticator(okAuthenticator82);
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient45.setAuthenticator(okAuthenticator82);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient22.setAuthenticator(okAuthenticator82);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient0.setAuthenticator(okAuthenticator82);
        com.squareup.okhttp.OkAuthenticator okAuthenticator87 = okHttpClient0.authenticator;
        java.util.List<java.lang.String> strList88 = okHttpClient0.transports;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(routeSet10);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(proxy17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okAuthenticator25);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(cookieHandler31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(routeSet42);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(connectionPool59);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(proxy62);
        org.junit.Assert.assertNotNull(connectionPool64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(hostnameVerifier73);
        org.junit.Assert.assertNull(proxy74);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(okAuthenticator82);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okAuthenticator87);
        org.junit.Assert.assertNull(strList88);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool5 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient4.connectionPool = connectionPool5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient4.setConnectionPool(connectionPool13);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = okHttpClient15.getAuthenticator();
        java.net.ProxySelector proxySelector17 = okHttpClient15.getProxySelector();
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setResponseCache(responseCache18);
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        boolean boolean22 = proxy20.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type23 = proxy20.type();
        java.net.SocketAddress socketAddress24 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setProxy(proxy20);
        java.net.Proxy proxy26 = java.net.Proxy.NO_PROXY;
        boolean boolean28 = proxy26.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type29 = proxy26.type();
        java.net.Proxy.Type type30 = proxy26.type();
        boolean boolean31 = proxy20.equals((java.lang.Object) proxy26);
        okHttpClient0.proxy = proxy20;
        java.net.CookieHandler cookieHandler33 = okHttpClient0.cookieHandler;
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(connectionPool5);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(okAuthenticator16);
        org.junit.Assert.assertNull(proxySelector17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type23.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress24);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(proxy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type29.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type30.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(cookieHandler33);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setResponseCache(responseCache23);
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient24.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient26.copyWithDefaults();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = okHttpClient34.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory36);
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory36.createSocket("hi!", (int) (short) 100, inetAddress40, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory36);
        org.junit.Assert.assertNotNull(okHttpClient37);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler23 = null;
        okHttpClient22.cookieHandler = cookieHandler23;
        java.net.URL uRL25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection26 = okHttpClient22.open(uRL25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient22);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.Socket socket38 = sSLSocketFactory33.createSocket();
        java.net.InetAddress inetAddress41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory33.createSocket("DIRECT", 0, inetAddress41, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket(inetAddress3, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient10.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient10.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient10.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = null;
        okHttpClient19.authenticator = okAuthenticator22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient19.responseCache = responseCache25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient19.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient10.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ProxySelector proxySelector47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.setProxySelector(proxySelector47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient48.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray50 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet51 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet51, routeArray50);
        okHttpClient49.failedRoutes = routeSet51;
        okHttpClient0.failedRoutes = routeSet51;
        java.net.ResponseCache responseCache55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient0.setResponseCache(responseCache55);
        com.squareup.okhttp.OkAuthenticator okAuthenticator57 = okHttpClient56.getAuthenticator();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(routeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNull(okAuthenticator57);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient13.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket37 = sSLSocketFactory35.createSocket();
        java.net.Socket socket38 = sSLSocketFactory35.createSocket();
        okHttpClient13.sslSocketFactory = sSLSocketFactory35;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        java.net.Proxy proxy48 = null;
        okHttpClient40.proxy = proxy48;
        boolean boolean50 = okHttpClient40.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient40.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        com.squareup.okhttp.ConnectionPool connectionPool59 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool59;
        com.squareup.okhttp.ConnectionPool connectionPool61 = okHttpClient53.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient40.setConnectionPool(connectionPool61);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ResponseCache responseCache66 = null;
        okHttpClient63.responseCache = responseCache66;
        java.util.List<java.lang.String> strList68 = okHttpClient63.transports;
        com.squareup.okhttp.ConnectionPool connectionPool69 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient63.connectionPool = connectionPool69;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient63.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        okHttpClient72.hostnameVerifier = hostnameVerifier73;
        java.net.ResponseCache responseCache75 = null;
        okHttpClient72.responseCache = responseCache75;
        java.util.List<java.lang.String> strList77 = okHttpClient72.transports;
        com.squareup.okhttp.ConnectionPool connectionPool78 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient72.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient72.copyWithDefaults();
        java.net.ProxySelector proxySelector81 = okHttpClient80.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory82 = okHttpClient80.getSslSocketFactory();
        okHttpClient63.sslSocketFactory = sSLSocketFactory82;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient62.setSSLSocketFactory(sSLSocketFactory82);
        java.lang.String[] strArray85 = sSLSocketFactory82.getSupportedCipherSuites();
        java.net.Socket socket86 = sSLSocketFactory82.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket90 = sSLSocketFactory35.createSocket(socket86, "", (-1), false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(connectionPool59);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNotNull(connectionPool69);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNotNull(connectionPool78);
        org.junit.Assert.assertNotNull(okHttpClient80);
// flaky:         org.junit.Assert.assertNull(proxySelector81);
        org.junit.Assert.assertNotNull(sSLSocketFactory82);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(socket86);
        org.junit.Assert.assertEquals(socket86.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient13.getConnectionPool();
        int int15 = connectionPool14.getSpdyConnectionCount();
        java.lang.Class<?> wildcardClass16 = connectionPool14.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(hostnameVerifier14);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient11.okResponseCache();
        java.net.Proxy proxy15 = okHttpClient11.getProxy();
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setResponseCache(responseCache16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.setConnectionPool(connectionPool27);
        com.squareup.okhttp.ConnectionPool connectionPool30 = okHttpClient29.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient29.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient29.connectionPool = connectionPool34;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = okHttpClient29.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient29.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache39 = okHttpClient38.okResponseCache();
        java.net.ResponseCache responseCache40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setResponseCache(responseCache40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        okHttpClient38.transports = strList44;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient38.setSSLSocketFactory(sSLSocketFactory47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache50 = okHttpClient49.okResponseCache();
        java.net.ResponseCache responseCache51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient49.setResponseCache(responseCache51);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        okHttpClient49.transports = strList55;
        okHttpClient38.transports = strList55;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList55;
        okHttpClient29.transports = strList55;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList55;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient11.setTransports((java.util.List<java.lang.String>) strList55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(proxy15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNull(okAuthenticator31);
        org.junit.Assert.assertNull(sSLSocketFactory36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(okResponseCache39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(okResponseCache50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (short) 0);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setConnectionPool(connectionPool19);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = okHttpClient15.getSslSocketFactory();
        java.net.Socket socket22 = null;
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket25 = sSLSocketFactory21.createSocket(socket22, inputStream23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: the existing socket cannot be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(sSLSocketFactory21);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        java.net.Proxy proxy44 = null;
        okHttpClient36.proxy = proxy44;
        boolean boolean46 = okHttpClient36.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient36.copyWithDefaults();
        java.net.CookieHandler cookieHandler48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient47.setCookieHandler(cookieHandler48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = okHttpClient50.hostnameVerifier;
        java.net.Proxy proxy56 = okHttpClient50.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool59 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient50.connectionPool = connectionPool59;
        boolean boolean61 = okHttpClient50.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = okHttpClient62.hostnameVerifier;
        java.net.Proxy proxy68 = okHttpClient62.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool71 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient62.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.copyWithDefaults();
        java.net.Proxy proxy74 = okHttpClient73.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = okHttpClient73.getHostnameVerifier();
        okHttpClient50.hostnameVerifier = hostnameVerifier75;
        okHttpClient47.hostnameVerifier = hostnameVerifier75;
        java.util.List<java.lang.String> strList78 = okHttpClient47.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList78;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient0.setTransports(strList78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(hostnameVerifier55);
        org.junit.Assert.assertNull(proxy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(hostnameVerifier67);
        org.junit.Assert.assertNull(proxy68);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(proxy74);
        org.junit.Assert.assertNotNull(hostnameVerifier75);
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient21.authenticator = okAuthenticator24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.CookieHandler cookieHandler35 = okHttpClient27.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache36 = okHttpClient27.okResponseCache();
        java.net.CookieHandler cookieHandler37 = okHttpClient27.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient38.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator40 = okHttpClient38.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.CookieHandler cookieHandler49 = okHttpClient41.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache50 = okHttpClient41.okResponseCache();
        java.net.CookieHandler cookieHandler51 = okHttpClient41.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient41);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ProxySelector proxySelector56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.setProxySelector(proxySelector56);
        java.net.CookieHandler cookieHandler58 = okHttpClient53.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        java.net.Proxy proxy67 = null;
        okHttpClient59.proxy = proxy67;
        java.util.Set<com.squareup.okhttp.Route> routeSet69 = okHttpClient59.failedRoutes;
        okHttpClient53.failedRoutes = routeSet69;
        okHttpClient52.failedRoutes = routeSet69;
        okHttpClient38.failedRoutes = routeSet69;
        okHttpClient21.failedRoutes = routeSet69;
        okHttpClient19.failedRoutes = routeSet69;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = null;
        okHttpClient84.hostnameVerifier = hostnameVerifier85;
        java.net.ResponseCache responseCache87 = null;
        okHttpClient84.responseCache = responseCache87;
        java.util.List<java.lang.String> strList89 = okHttpClient84.transports;
        com.squareup.okhttp.ConnectionPool connectionPool90 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient84.connectionPool = connectionPool90;
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient84.copyWithDefaults();
        java.net.ProxySelector proxySelector93 = okHttpClient92.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory94 = okHttpClient92.getSslSocketFactory();
        okHttpClient75.sslSocketFactory = sSLSocketFactory94;
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory94);
        java.util.List<java.lang.String> strList97 = okHttpClient96.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient98 = okHttpClient96.copyWithDefaults();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(cookieHandler35);
        org.junit.Assert.assertNull(okResponseCache36);
        org.junit.Assert.assertNull(cookieHandler37);
        org.junit.Assert.assertNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(okAuthenticator40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(cookieHandler49);
        org.junit.Assert.assertNull(okResponseCache50);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(cookieHandler58);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(routeSet69);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNull(strList89);
        org.junit.Assert.assertNotNull(connectionPool90);
        org.junit.Assert.assertNotNull(okHttpClient92);
// flaky:         org.junit.Assert.assertNull(proxySelector93);
        org.junit.Assert.assertNotNull(sSLSocketFactory94);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNull(strList97);
        org.junit.Assert.assertNotNull(okHttpClient98);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient0.hostnameVerifier;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(hostnameVerifier22);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        com.squareup.okhttp.ConnectionPool connectionPool15 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address16 = null;
        com.squareup.okhttp.Connection connection17 = connectionPool15.get(address16);
        okHttpClient11.connectionPool = connectionPool15;
        com.squareup.okhttp.Connection connection19 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool15.recycle(connection19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(connection17);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (byte) -1);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) -1, (long) (short) 1);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket("", (int) (short) 1, inetAddress3, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', (long) 0);
        connectionPool2.evictAll();
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.ConnectionPool connectionPool22 = null;
        okHttpClient21.connectionPool = connectionPool22;
        java.net.CookieHandler cookieHandler24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setCookieHandler(cookieHandler24);
        java.net.ResponseCache responseCache26 = okHttpClient25.getResponseCache();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(responseCache26);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        java.util.List<java.lang.String> strList16 = okHttpClient13.getTransports();
        java.lang.Class<?> wildcardClass17 = okHttpClient13.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        java.net.CookieHandler cookieHandler18 = null;
        okHttpClient0.cookieHandler = cookieHandler18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient32.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient32.connectionPool = connectionPool37;
        java.net.ResponseCache responseCache39 = okHttpClient32.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = okHttpClient32.sslSocketFactory;
        java.net.Proxy proxy41 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress42 = proxy41.address();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setProxy(proxy41);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient(okHttpClient43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient43.setSSLSocketFactory(sSLSocketFactory55);
        java.lang.String[] strArray57 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray58 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray59 = sSLSocketFactory55.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory55);
        java.net.InetAddress inetAddress63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket65 = sSLSocketFactory55.createSocket("DIRECT", (-1), inetAddress63, 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(okAuthenticator34);
        org.junit.Assert.assertNull(responseCache39);
        org.junit.Assert.assertNull(sSLSocketFactory40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(okHttpClient60);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ProxySelector proxySelector14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setProxySelector(proxySelector14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient15.getSslSocketFactory();
        java.net.InetAddress inetAddress17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket19 = sSLSocketFactory16.createSocket(inetAddress17, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = okHttpClient0.proxySelector;
        java.net.Proxy proxy4 = okHttpClient0.proxy;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        boolean boolean6 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool8 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress13 = proxy12.address();
        java.net.SocketAddress socketAddress14 = proxy12.address();
        okHttpClient7.proxy = proxy12;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setProxySelector(proxySelector21);
        java.net.CookieHandler cookieHandler23 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.Proxy proxy32 = null;
        okHttpClient24.proxy = proxy32;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient24.failedRoutes;
        okHttpClient18.failedRoutes = routeSet34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient18.setHostnameVerifier(hostnameVerifier36);
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.setProxySelector(proxySelector38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache41 = okHttpClient40.okResponseCache();
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setResponseCache(responseCache42);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient40.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory45 = okHttpClient40.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        boolean boolean49 = okHttpClient46.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler50 = okHttpClient46.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient51.hostnameVerifier;
        java.net.Proxy proxy57 = okHttpClient51.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool60 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient51.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.copyWithDefaults();
        java.net.ResponseCache responseCache63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.setResponseCache(responseCache63);
        com.squareup.okhttp.OkAuthenticator okAuthenticator65 = okHttpClient62.authenticator;
        okHttpClient46.authenticator = okAuthenticator65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient40.setAuthenticator(okAuthenticator65);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient39.setAuthenticator(okAuthenticator65);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool70 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient69.connectionPool = connectionPool70;
        java.net.ResponseCache responseCache72 = null;
        okHttpClient69.responseCache = responseCache72;
        java.net.Proxy proxy74 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress75 = proxy74.address();
        java.net.SocketAddress socketAddress76 = proxy74.address();
        okHttpClient69.proxy = proxy74;
        java.util.Set<com.squareup.okhttp.Route> routeSet78 = okHttpClient69.failedRoutes;
        okHttpClient68.failedRoutes = routeSet78;
        okHttpClient17.failedRoutes = routeSet78;
        org.junit.Assert.assertNull(proxySelector3);
        org.junit.Assert.assertNull(proxy4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertNull(socketAddress13);
        org.junit.Assert.assertNull(socketAddress14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(okResponseCache41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(sSLSocketFactory44);
        org.junit.Assert.assertNull(sSLSocketFactory45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(cookieHandler50);
        org.junit.Assert.assertNull(hostnameVerifier56);
        org.junit.Assert.assertNull(proxy57);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okAuthenticator65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(connectionPool70);
        org.junit.Assert.assertNotNull(proxy74);
        org.junit.Assert.assertNull(socketAddress75);
        org.junit.Assert.assertNull(socketAddress76);
        org.junit.Assert.assertNotNull(routeSet78);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection10 = okHttpClient8.open(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket39 = sSLSocketFactory34.createSocket("DIRECT", (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler11 = okHttpClient0.getCookieHandler();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        java.net.ProxySelector proxySelector14 = okHttpClient13.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient15.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient15.hostnameVerifier;
        java.net.Proxy proxy18 = okHttpClient15.proxy;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(cookieHandler11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(proxySelector14);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNull(proxy18);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.sslSocketFactory;
        java.util.List<java.lang.String> strList35 = okHttpClient32.getTransports();
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type39 = proxy36.type();
        java.net.SocketAddress socketAddress40 = proxy36.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache46 = okHttpClient41.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient41.setSSLSocketFactory(sSLSocketFactory47);
        boolean boolean49 = proxy36.equals((java.lang.Object) okHttpClient41);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient32.setProxy(proxy36);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        java.net.CookieHandler cookieHandler59 = okHttpClient51.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache60 = okHttpClient51.okResponseCache();
        java.net.CookieHandler cookieHandler61 = okHttpClient51.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient(okHttpClient51);
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = okHttpClient62.hostnameVerifier;
        java.util.List<java.lang.String> strList64 = okHttpClient62.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient62.setSSLSocketFactory(sSLSocketFactory65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache68 = okHttpClient67.okResponseCache();
        java.net.ResponseCache responseCache69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient67.setResponseCache(responseCache69);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        okHttpClient67.transports = strList73;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory76 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient67.setSSLSocketFactory(sSLSocketFactory76);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache79 = okHttpClient78.okResponseCache();
        java.net.ResponseCache responseCache80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient78.setResponseCache(responseCache80);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        okHttpClient78.transports = strList84;
        okHttpClient67.transports = strList84;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList84;
        okHttpClient62.transports = strList84;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient32.setTransports((java.util.List<java.lang.String>) strList84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNull(okResponseCache46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNull(cookieHandler59);
        org.junit.Assert.assertNull(okResponseCache60);
        org.junit.Assert.assertNull(cookieHandler61);
        org.junit.Assert.assertNull(hostnameVerifier63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(okResponseCache68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(okResponseCache79);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setResponseCache(responseCache8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient18.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory20);
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        okHttpClient21.proxy = proxy22;
        java.util.List<java.lang.String> strList24 = okHttpClient21.transports;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
// flaky:         org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNotNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertNull(strList24);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler13 = okHttpClient11.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.CookieHandler cookieHandler15 = okHttpClient11.cookieHandler;
        java.util.List<java.lang.String> strList16 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList16;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.setTransports(strList16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(cookieHandler13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient4.proxySelector = proxySelector9;
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setConnectionPool(connectionPool13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.setConnectionPool(connectionPool24);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient26.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient26.connectionPool = connectionPool31;
        java.net.ResponseCache responseCache33 = okHttpClient26.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient26.sslSocketFactory;
        java.net.Proxy proxy35 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress36 = proxy35.address();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient26.setProxy(proxy35);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient26.setSSLSocketFactory(sSLSocketFactory38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient40.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.copyWithDefaults();
        java.net.ResponseCache responseCache52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setResponseCache(responseCache52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient51.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient26.setAuthenticator(okAuthenticator54);
        java.net.Proxy proxy56 = okHttpClient55.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient14.setProxy(proxy56);
        boolean boolean58 = okHttpClient14.followProtocolRedirects;
        java.util.List<java.lang.String> strList59 = okHttpClient14.getTransports();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNull(okAuthenticator28);
        org.junit.Assert.assertNull(responseCache33);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(proxy35);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okAuthenticator54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(proxy56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(strList59);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        java.lang.String[] strArray30 = sSLSocketFactory29.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory29;
        java.net.URL uRL32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection33 = okHttpClient0.open(uRL32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(strArray30);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress1 = proxy0.address();
        java.net.SocketAddress socketAddress2 = proxy0.address();
        java.lang.Object obj3 = null;
        boolean boolean4 = proxy0.equals(obj3);
        java.net.Proxy.Type type5 = proxy0.type();
        java.net.SocketAddress socketAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy7 = new java.net.Proxy(type5, socketAddress6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertNull(socketAddress1);
        org.junit.Assert.assertNull(socketAddress2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type5.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        boolean boolean16 = okHttpClient6.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient17.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient17.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient21.authenticator = okAuthenticator24;
        java.net.CookieHandler cookieHandler26 = null;
        okHttpClient21.cookieHandler = cookieHandler26;
        java.net.Proxy proxy28 = java.net.Proxy.NO_PROXY;
        boolean boolean30 = proxy28.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient31.okResponseCache();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setResponseCache(responseCache33);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        okHttpClient31.transports = strList37;
        boolean boolean40 = proxy28.equals((java.lang.Object) strList37);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient21.setProxy(proxy28);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient17.setProxy(proxy28);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory43);
        java.net.Proxy proxy45 = java.net.Proxy.NO_PROXY;
        boolean boolean47 = proxy45.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type48 = proxy45.type();
        java.net.SocketAddress socketAddress49 = proxy45.address();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache55 = okHttpClient50.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient50.setSSLSocketFactory(sSLSocketFactory56);
        boolean boolean58 = proxy45.equals((java.lang.Object) okHttpClient50);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient59.setConnectionPool(connectionPool68);
        java.net.ResponseCache responseCache71 = okHttpClient59.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient59.sslSocketFactory;
        java.net.ResponseCache responseCache73 = okHttpClient59.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool74 = okHttpClient59.connectionPool;
        boolean boolean75 = proxy45.equals((java.lang.Object) connectionPool74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient44.setProxy(proxy45);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient0.setProxy(proxy45);
        java.lang.String str78 = proxy45.toString();
        java.net.SocketAddress socketAddress79 = proxy45.address();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(proxy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(proxy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type48.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress49);
        org.junit.Assert.assertNull(okResponseCache55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(responseCache71);
        org.junit.Assert.assertNull(sSLSocketFactory72);
        org.junit.Assert.assertNull(responseCache73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DIRECT" + "'", str78, "DIRECT");
        org.junit.Assert.assertNull(socketAddress79);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setResponseCache(responseCache22);
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient23.getSslSocketFactory();
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress32 = proxy29.address();
        java.net.SocketAddress socketAddress33 = proxy29.address();
        boolean boolean35 = proxy29.equals((java.lang.Object) (short) 1);
        java.net.SocketAddress socketAddress36 = proxy29.address();
        okHttpClient23.proxy = proxy29;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy44 = okHttpClient38.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient38.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.copyWithDefaults();
        java.net.ResponseCache responseCache50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setResponseCache(responseCache50);
        com.squareup.okhttp.ConnectionPool connectionPool52 = okHttpClient49.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier59;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache61 = okHttpClient53.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory62 = okHttpClient53.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ResponseCache responseCache66 = null;
        okHttpClient63.responseCache = responseCache66;
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = okHttpClient63.hostnameVerifier;
        java.net.Proxy proxy69 = okHttpClient63.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool72 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient63.connectionPool = connectionPool72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient63.copyWithDefaults();
        java.net.Proxy proxy75 = okHttpClient74.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = okHttpClient74.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient53.setHostnameVerifier(hostnameVerifier76);
        okHttpClient49.hostnameVerifier = hostnameVerifier76;
        okHttpClient23.hostnameVerifier = hostnameVerifier76;
        java.util.List<java.lang.String> strList80 = okHttpClient23.transports;
        java.util.List<java.lang.String> strList81 = okHttpClient23.getTransports();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(routeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(socketAddress32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(okResponseCache61);
        org.junit.Assert.assertNull(sSLSocketFactory62);
        org.junit.Assert.assertNull(hostnameVerifier68);
        org.junit.Assert.assertNull(proxy69);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(proxy75);
        org.junit.Assert.assertNotNull(hostnameVerifier76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNull(strList81);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        java.lang.String[] strArray51 = sSLSocketFactory47.getDefaultCipherSuites();
        java.net.InetAddress inetAddress52 = null;
        java.net.InetAddress inetAddress54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket56 = sSLSocketFactory47.createSocket(inetAddress52, (int) (byte) 10, inetAddress54, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        okHttpClient14.sslSocketFactory = sSLSocketFactory20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient33.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = okHttpClient33.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        java.net.CookieHandler cookieHandler44 = okHttpClient36.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache45 = okHttpClient36.okResponseCache();
        java.net.CookieHandler cookieHandler46 = okHttpClient36.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ProxySelector proxySelector51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient48.setProxySelector(proxySelector51);
        java.net.CookieHandler cookieHandler53 = okHttpClient48.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        java.net.Proxy proxy62 = null;
        okHttpClient54.proxy = proxy62;
        java.util.Set<com.squareup.okhttp.Route> routeSet64 = okHttpClient54.failedRoutes;
        okHttpClient48.failedRoutes = routeSet64;
        okHttpClient47.failedRoutes = routeSet64;
        okHttpClient33.failedRoutes = routeSet64;
        okHttpClient14.failedRoutes = routeSet64;
        okHttpClient11.failedRoutes = routeSet64;
        java.util.Set<com.squareup.okhttp.Route> routeSet70 = okHttpClient11.failedRoutes;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNull(okAuthenticator35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNull(okResponseCache45);
        org.junit.Assert.assertNull(cookieHandler46);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(cookieHandler53);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(routeSet64);
        org.junit.Assert.assertNotNull(routeSet70);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler15 = okHttpClient14.cookieHandler;
        java.net.CookieHandler cookieHandler16 = okHttpClient14.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient19.hostnameVerifier;
        java.net.Proxy proxy25 = okHttpClient19.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient19.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.copyWithDefaults();
        java.net.CookieHandler cookieHandler31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setCookieHandler(cookieHandler31);
        java.util.List<java.lang.String> strList33 = okHttpClient30.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList33;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setTransports(strList33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(cookieHandler16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getSupportedCipherSuites();
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory33.createSocket("DIRECT", (int) '#', inetAddress40, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setConnectionPool(connectionPool27);
        java.net.CookieHandler cookieHandler29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setCookieHandler(cookieHandler29);
        java.net.ResponseCache responseCache31 = okHttpClient30.responseCache;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.setProxy(proxy32);
        java.net.Proxy.Type type35 = proxy32.type();
        java.net.SocketAddress socketAddress36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy37 = new java.net.Proxy(type35, socketAddress36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(responseCache31);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type35.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient11.setFollowProtocolRedirects(true);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection12 = okHttpClient0.open(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNull(okResponseCache9);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        java.util.Set<com.squareup.okhttp.Route> routeSet13 = okHttpClient11.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setCookieHandler(cookieHandler15);
        java.net.CookieHandler cookieHandler17 = null;
        okHttpClient14.cookieHandler = cookieHandler17;
        java.net.ResponseCache responseCache19 = okHttpClient14.responseCache;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(routeSet13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(responseCache19);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector12 = okHttpClient0.getProxySelector();
        okHttpClient0.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(responseCache16);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        java.net.ResponseCache responseCache24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setResponseCache(responseCache24);
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection27 = okHttpClient25.open(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient25);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool11 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.setConnectionPool(connectionPool19);
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient21.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient21.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient21.connectionPool = connectionPool26;
        java.net.ResponseCache responseCache28 = okHttpClient21.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient21.sslSocketFactory;
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress31 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        boolean boolean37 = okHttpClient34.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler38 = okHttpClient34.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.copyWithDefaults();
        java.net.ResponseCache responseCache51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient50.setResponseCache(responseCache51);
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient50.authenticator;
        okHttpClient34.authenticator = okAuthenticator53;
        okHttpClient33.authenticator = okAuthenticator53;
        okHttpClient9.authenticator = okAuthenticator53;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache57 = okHttpClient9.okResponseCache();
        boolean boolean58 = okHttpClient9.getFollowProtocolRedirects();
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(connectionPool11);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(okAuthenticator23);
        org.junit.Assert.assertNull(responseCache28);
        org.junit.Assert.assertNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertNull(socketAddress31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(cookieHandler38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okAuthenticator53);
        org.junit.Assert.assertNull(okResponseCache57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        okHttpClient14.authenticator = okAuthenticator17;
        java.net.CookieHandler cookieHandler19 = null;
        okHttpClient14.cookieHandler = cookieHandler19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient24.okResponseCache();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setResponseCache(responseCache26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        okHttpClient24.transports = strList30;
        boolean boolean33 = proxy21.equals((java.lang.Object) strList30);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient14.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setProxySelector(proxySelector38);
        java.net.CookieHandler cookieHandler40 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient41.failedRoutes;
        okHttpClient35.failedRoutes = routeSet51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient35.setHostnameVerifier(hostnameVerifier53);
        boolean boolean55 = proxy21.equals((java.lang.Object) okHttpClient54);
        okHttpClient0.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        java.util.List<java.lang.String> strList62 = okHttpClient57.transports;
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool63;
        java.net.CookieHandler cookieHandler65 = okHttpClient57.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache66 = okHttpClient57.okResponseCache();
        java.net.CookieHandler cookieHandler67 = okHttpClient57.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient(okHttpClient57);
        java.net.Proxy proxy69 = java.net.Proxy.NO_PROXY;
        boolean boolean71 = proxy69.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type72 = proxy69.type();
        java.net.SocketAddress socketAddress73 = proxy69.address();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient57.setProxy(proxy69);
        java.lang.String[] strArray76 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        okHttpClient57.transports = strList77;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient57.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool84 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient81.setConnectionPool(connectionPool84);
        java.net.CookieHandler cookieHandler86 = okHttpClient81.cookieHandler;
        java.util.Set<com.squareup.okhttp.Route> routeSet87 = okHttpClient81.failedRoutes;
        boolean boolean88 = proxy21.equals((java.lang.Object) routeSet87);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(routeSet51);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(cookieHandler65);
        org.junit.Assert.assertNull(okResponseCache66);
        org.junit.Assert.assertNull(cookieHandler67);
        org.junit.Assert.assertNotNull(proxy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type72.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress73);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNull(cookieHandler86);
        org.junit.Assert.assertNotNull(routeSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy8 = okHttpClient0.getProxy();
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy10 = okHttpClient0.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setConnectionPool(connectionPool20);
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient22.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient22.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient22.connectionPool = connectionPool27;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient22.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = okHttpClient22.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient31.okResponseCache();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setResponseCache(responseCache33);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        okHttpClient31.transports = strList37;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache43 = okHttpClient42.okResponseCache();
        java.net.ResponseCache responseCache44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setResponseCache(responseCache44);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        okHttpClient42.transports = strList48;
        okHttpClient31.transports = strList48;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList48;
        okHttpClient22.transports = strList48;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(proxy10);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNull(okAuthenticator24);
        org.junit.Assert.assertNull(sSLSocketFactory29);
        org.junit.Assert.assertNull(okAuthenticator30);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(okResponseCache43);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.Socket socket38 = sSLSocketFactory33.createSocket();
        java.net.InetAddress inetAddress41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory33.createSocket("DIRECT", 10, inetAddress41, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = okHttpClient0.proxySelector;
        java.net.Proxy proxy4 = okHttpClient0.proxy;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        boolean boolean6 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool8 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress13 = proxy12.address();
        java.net.SocketAddress socketAddress14 = proxy12.address();
        okHttpClient7.proxy = proxy12;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.Proxy proxy30 = okHttpClient29.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient31.hostnameVerifier;
        java.net.Proxy proxy37 = okHttpClient31.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient31.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient31.copyWithDefaults();
        java.net.ResponseCache responseCache43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setResponseCache(responseCache43);
        okHttpClient44.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList47 = okHttpClient44.getTransports();
        okHttpClient29.transports = strList47;
        okHttpClient0.transports = strList47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient50.connectionPool;
        int int59 = connectionPool58.getHttpConnectionCount();
        int int60 = connectionPool58.getSpdyConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient0.setConnectionPool(connectionPool58);
        com.squareup.okhttp.Address address62 = null;
        com.squareup.okhttp.Connection connection63 = connectionPool58.get(address62);
        org.junit.Assert.assertNull(proxySelector3);
        org.junit.Assert.assertNull(proxy4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertNull(socketAddress13);
        org.junit.Assert.assertNull(socketAddress14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(connectionPool17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(proxy30);
        org.junit.Assert.assertNull(hostnameVerifier36);
        org.junit.Assert.assertNull(proxy37);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(connection63);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient20.authenticator;
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setProxySelector(proxySelector22);
        java.net.Proxy proxy24 = okHttpClient20.getProxy();
        java.net.Proxy proxy25 = okHttpClient20.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = okHttpClient20.hostnameVerifier;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNull(hostnameVerifier26);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList21 = okHttpClient0.transports;
        java.net.CookieHandler cookieHandler22 = okHttpClient0.cookieHandler;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(cookieHandler22);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setProxySelector(proxySelector16);
        java.net.ResponseCache responseCache18 = null;
        okHttpClient17.responseCache = responseCache18;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory20);
        java.net.ProxySelector proxySelector22 = null;
        okHttpClient17.proxySelector = proxySelector22;
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient17.setConnectionPool(connectionPool26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.setProxySelector(proxySelector31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient32.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray34 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet35 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet35, routeArray34);
        okHttpClient33.failedRoutes = routeSet35;
        java.net.CookieHandler cookieHandler38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient33.setCookieHandler(cookieHandler38);
        java.util.List<java.lang.String> strList40 = okHttpClient33.getTransports();
        okHttpClient17.transports = strList40;
        okHttpClient12.transports = strList40;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList40;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(routeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler11 = okHttpClient0.getCookieHandler();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        java.net.ProxySelector proxySelector14 = okHttpClient13.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient15.hostnameVerifier;
        java.net.URL uRL17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection18 = okHttpClient15.open(uRL17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(cookieHandler11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(proxySelector14);
        org.junit.Assert.assertNull(hostnameVerifier16);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setResponseCache(responseCache21);
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setAuthenticator(okAuthenticator23);
        java.net.CookieHandler cookieHandler25 = okHttpClient24.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.setProxySelector(proxySelector29);
        java.net.ResponseCache responseCache31 = null;
        okHttpClient30.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient30.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient30.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.setProxySelector(proxySelector36);
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient37.authenticator;
        java.net.ProxySelector proxySelector40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient37.setProxySelector(proxySelector40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        boolean boolean45 = okHttpClient42.getFollowProtocolRedirects();
        java.net.Proxy proxy46 = okHttpClient42.proxy;
        java.util.Set<com.squareup.okhttp.Route> routeSet47 = okHttpClient42.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient(okHttpClient42);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.setConnectionPool(connectionPool58);
        java.net.ResponseCache responseCache61 = okHttpClient49.responseCache;
        java.net.ResponseCache responseCache62 = okHttpClient49.getResponseCache();
        java.net.ResponseCache responseCache63 = okHttpClient49.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache65 = okHttpClient64.okResponseCache();
        java.net.ResponseCache responseCache66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient64.setResponseCache(responseCache66);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient64.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory69 = okHttpClient64.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        boolean boolean73 = okHttpClient70.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler74 = okHttpClient70.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = okHttpClient75.hostnameVerifier;
        java.net.Proxy proxy81 = okHttpClient75.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool84 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient75.connectionPool = connectionPool84;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient75.copyWithDefaults();
        java.net.ResponseCache responseCache87 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient86.setResponseCache(responseCache87);
        com.squareup.okhttp.OkAuthenticator okAuthenticator89 = okHttpClient86.authenticator;
        okHttpClient70.authenticator = okAuthenticator89;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient64.setAuthenticator(okAuthenticator89);
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient49.setAuthenticator(okAuthenticator89);
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient48.setAuthenticator(okAuthenticator89);
        okHttpClient37.authenticator = okAuthenticator89;
        okHttpClient24.authenticator = okAuthenticator89;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(cookieHandler25);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(routeSet47);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(responseCache61);
        org.junit.Assert.assertNull(responseCache62);
        org.junit.Assert.assertNull(responseCache63);
        org.junit.Assert.assertNull(okResponseCache65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertNull(sSLSocketFactory69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(cookieHandler74);
        org.junit.Assert.assertNull(hostnameVerifier80);
        org.junit.Assert.assertNull(proxy81);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okAuthenticator89);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(okHttpClient93);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient20.authenticator;
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setProxySelector(proxySelector22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient23.copyWithDefaults();
        java.net.Proxy proxy25 = okHttpClient23.getProxy();
        java.net.ResponseCache responseCache26 = okHttpClient23.getResponseCache();
        java.net.CookieHandler cookieHandler27 = okHttpClient23.cookieHandler;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNull(responseCache26);
        org.junit.Assert.assertNull(cookieHandler27);
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory34.getDefaultCipherSuites();
        javax.net.SocketFactory socketFactory39 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket40 = socketFactory39.createSocket();
        java.io.InputStream inputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory34.createSocket(socket40, inputStream41, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(socket40);
        org.junit.Assert.assertEquals(socket40.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient32.copyWithDefaults();
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient40.getSslSocketFactory();
        okHttpClient23.sslSocketFactory = sSLSocketFactory42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory42);
        java.lang.String[] strArray45 = sSLSocketFactory42.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket48 = sSLSocketFactory42.createSocket("", (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(okHttpClient40);
// flaky:         org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(sSLSocketFactory42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory14);
        com.squareup.okhttp.ConnectionPool connectionPool16 = okHttpClient15.connectionPool;
        java.net.ProxySelector proxySelector17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setProxySelector(proxySelector17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setConnectionPool(connectionPool28);
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient30.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient30.connectionPool = connectionPool35;
        java.net.ResponseCache responseCache37 = okHttpClient30.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient30.sslSocketFactory;
        java.net.Proxy proxy39 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress40 = proxy39.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.setProxy(proxy39);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient30.setSSLSocketFactory(sSLSocketFactory42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient44.hostnameVerifier;
        java.net.Proxy proxy50 = okHttpClient44.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool53 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient44.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient44.copyWithDefaults();
        java.net.ResponseCache responseCache56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setResponseCache(responseCache56);
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = okHttpClient55.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient30.setAuthenticator(okAuthenticator58);
        java.net.Proxy proxy60 = okHttpClient59.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient59.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        java.util.List<java.lang.String> strList70 = okHttpClient65.transports;
        com.squareup.okhttp.ConnectionPool connectionPool71 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient65.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setConnectionPool(connectionPool71);
        java.net.Proxy proxy74 = okHttpClient73.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool76;
        int int78 = connectionPool76.getSpdyConnectionCount();
        okHttpClient73.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier81 = null;
        okHttpClient80.hostnameVerifier = hostnameVerifier81;
        java.net.ResponseCache responseCache83 = null;
        okHttpClient80.responseCache = responseCache83;
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = okHttpClient80.hostnameVerifier;
        java.net.Proxy proxy86 = okHttpClient80.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool89 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient80.connectionPool = connectionPool89;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient80.copyWithDefaults();
        java.net.ResponseCache responseCache92 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient91.setResponseCache(responseCache92);
        com.squareup.okhttp.OkAuthenticator okAuthenticator94 = okHttpClient91.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient73.setAuthenticator(okAuthenticator94);
        okHttpClient59.authenticator = okAuthenticator94;
        okHttpClient18.authenticator = okAuthenticator94;
        java.lang.Class<?> wildcardClass98 = okAuthenticator94.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNull(okAuthenticator32);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(proxy39);
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(hostnameVerifier49);
        org.junit.Assert.assertNull(proxy50);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okAuthenticator58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertNotNull(okAuthenticator61);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(connectionPool71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(proxy74);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(hostnameVerifier85);
        org.junit.Assert.assertNull(proxy86);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okAuthenticator94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ProxySelector proxySelector26 = okHttpClient23.proxySelector;
        java.net.Proxy proxy27 = okHttpClient23.proxy;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        boolean boolean29 = okHttpClient23.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient30.connectionPool = connectionPool31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        java.net.Proxy proxy35 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress36 = proxy35.address();
        java.net.SocketAddress socketAddress37 = proxy35.address();
        okHttpClient30.proxy = proxy35;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient23.setProxy(proxy35);
        com.squareup.okhttp.ConnectionPool connectionPool40 = okHttpClient23.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient41.hostnameVerifier;
        java.net.Proxy proxy47 = okHttpClient41.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool50 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient41.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient41.copyWithDefaults();
        java.net.Proxy proxy53 = okHttpClient52.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = okHttpClient54.hostnameVerifier;
        java.net.Proxy proxy60 = okHttpClient54.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient54.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient54.copyWithDefaults();
        java.net.ResponseCache responseCache66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient65.setResponseCache(responseCache66);
        okHttpClient67.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList70 = okHttpClient67.getTransports();
        okHttpClient52.transports = strList70;
        okHttpClient23.transports = strList70;
        okHttpClient22.transports = strList70;
        java.net.URL uRL74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection75 = okHttpClient22.open(uRL74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(proxy35);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNull(socketAddress37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(connectionPool40);
        org.junit.Assert.assertNull(hostnameVerifier46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(proxy53);
        org.junit.Assert.assertNull(hostnameVerifier59);
        org.junit.Assert.assertNull(proxy60);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(strList70);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        java.net.SocketAddress socketAddress12 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setProxySelector(proxySelector16);
        java.net.ResponseCache responseCache18 = null;
        okHttpClient17.responseCache = responseCache18;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient17.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setProxySelector(proxySelector23);
        java.net.ProxySelector proxySelector25 = okHttpClient24.proxySelector;
        okHttpClient24.followProtocolRedirects = true;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient24.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient29.hostnameVerifier;
        java.net.Proxy proxy35 = okHttpClient29.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool38 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient29.connectionPool = connectionPool38;
        java.util.List<java.lang.String> strList40 = okHttpClient29.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient29.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient42.copyWithDefaults();
        okHttpClient43.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        java.net.Proxy proxy54 = null;
        okHttpClient46.proxy = proxy54;
        boolean boolean56 = okHttpClient46.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient46.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier65;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache67 = okHttpClient59.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient59.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ResponseCache responseCache72 = null;
        okHttpClient69.responseCache = responseCache72;
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = okHttpClient69.hostnameVerifier;
        java.net.Proxy proxy75 = okHttpClient69.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool78 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient69.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient69.copyWithDefaults();
        java.net.Proxy proxy81 = okHttpClient80.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier82 = okHttpClient80.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient59.setHostnameVerifier(hostnameVerifier82);
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient58.setHostnameVerifier(hostnameVerifier82);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient43.setHostnameVerifier(hostnameVerifier82);
        okHttpClient24.hostnameVerifier = hostnameVerifier82;
        boolean boolean87 = proxy6.equals((java.lang.Object) okHttpClient24);
        boolean boolean88 = okHttpClient24.followProtocolRedirects;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(proxySelector25);
        org.junit.Assert.assertNull(okAuthenticator28);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(okResponseCache67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertNull(hostnameVerifier74);
        org.junit.Assert.assertNull(proxy75);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNull(proxy81);
        org.junit.Assert.assertNotNull(hostnameVerifier82);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient4.okResponseCache();
        java.net.ResponseCache responseCache6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setResponseCache(responseCache6);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        okHttpClient4.transports = strList10;
        okHttpClient0.transports = strList10;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.CookieHandler cookieHandler22 = okHttpClient14.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache23 = okHttpClient14.okResponseCache();
        java.net.CookieHandler cookieHandler24 = okHttpClient14.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        java.net.ResponseCache responseCache26 = okHttpClient14.responseCache;
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient14.setCookieHandler(cookieHandler27);
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient32.okResponseCache();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setResponseCache(responseCache34);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        okHttpClient32.transports = strList38;
        boolean boolean41 = proxy29.equals((java.lang.Object) strList38);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList38;
        okHttpClient28.transports = strList38;
        okHttpClient0.transports = strList38;
        java.net.ProxySelector proxySelector45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient0.setProxySelector(proxySelector45);
        java.net.CookieHandler cookieHandler47 = null;
        okHttpClient0.cookieHandler = cookieHandler47;
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(cookieHandler22);
        org.junit.Assert.assertNull(okResponseCache23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(responseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(okHttpClient46);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(10, (long) 100);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        okHttpClient14.authenticator = okAuthenticator17;
        java.net.CookieHandler cookieHandler19 = null;
        okHttpClient14.cookieHandler = cookieHandler19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient24.okResponseCache();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setResponseCache(responseCache26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        okHttpClient24.transports = strList30;
        boolean boolean33 = proxy21.equals((java.lang.Object) strList30);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient14.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setProxySelector(proxySelector38);
        java.net.CookieHandler cookieHandler40 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient41.failedRoutes;
        okHttpClient35.failedRoutes = routeSet51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient35.setHostnameVerifier(hostnameVerifier53);
        boolean boolean55 = proxy21.equals((java.lang.Object) okHttpClient54);
        okHttpClient0.proxy = proxy21;
        java.net.Proxy.Type type57 = proxy21.type();
        java.net.SocketAddress socketAddress58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy59 = new java.net.Proxy(type57, socketAddress58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(routeSet51);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type57.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.lang.String str16 = proxy12.toString();
        java.net.Proxy.Type type17 = proxy12.type();
        okHttpClient0.proxy = proxy12;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient19.okResponseCache();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setResponseCache(responseCache21);
        java.net.ProxySelector proxySelector23 = okHttpClient19.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient19.getAuthenticator();
        boolean boolean25 = proxy12.equals((java.lang.Object) okHttpClient19);
        java.net.Proxy.Type type26 = proxy12.type();
        java.net.SocketAddress socketAddress27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy28 = new java.net.Proxy(type26, socketAddress27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DIRECT" + "'", str16, "DIRECT");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(proxySelector23);
        org.junit.Assert.assertNull(okAuthenticator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type26.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) ' ');
        int int3 = connectionPool2.getHttpConnectionCount();
        int int4 = connectionPool2.getConnectionCount();
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.util.Set<com.squareup.okhttp.Route> routeSet3 = okHttpClient0.failedRoutes;
        java.net.CookieHandler cookieHandler4 = okHttpClient0.getCookieHandler();
        org.junit.Assert.assertNotNull(routeSet3);
        org.junit.Assert.assertNull(cookieHandler4);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.sslSocketFactory;
        java.lang.String[] strArray11 = sSLSocketFactory10.getSupportedCipherSuites();
        java.net.InetAddress inetAddress14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket16 = sSLSocketFactory10.createSocket("DIRECT", 0, inetAddress14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 100, (long) (byte) 0);
        int int3 = connectionPool2.getConnectionCount();
        com.squareup.okhttp.Connection connection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        okHttpClient36.sslSocketFactory = sSLSocketFactory55;
        java.net.Socket socket57 = sSLSocketFactory55.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory55;
        java.net.InetAddress inetAddress59 = null;
        java.net.InetAddress inetAddress61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket63 = sSLSocketFactory55.createSocket(inetAddress59, 0, inetAddress61, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(socket57);
        org.junit.Assert.assertEquals(socket57.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient19.cookieHandler = cookieHandler20;
        java.lang.Class<?> wildcardClass22 = okHttpClient19.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient11.responseCache = responseCache16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory65);
        okHttpClient11.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ProxySelector proxySelector73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient70.setProxySelector(proxySelector73);
        java.net.ResponseCache responseCache75 = null;
        okHttpClient74.responseCache = responseCache75;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient74.setSSLSocketFactory(sSLSocketFactory77);
        java.net.ProxySelector proxySelector79 = null;
        okHttpClient74.proxySelector = proxySelector79;
        com.squareup.okhttp.ConnectionPool connectionPool83 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient74.setConnectionPool(connectionPool83);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier86 = null;
        okHttpClient85.hostnameVerifier = hostnameVerifier86;
        java.net.ProxySelector proxySelector88 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient85.setProxySelector(proxySelector88);
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient89.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray91 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet92 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet92, routeArray91);
        okHttpClient90.failedRoutes = routeSet92;
        java.net.CookieHandler cookieHandler95 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient90.setCookieHandler(cookieHandler95);
        java.util.List<java.lang.String> strList97 = okHttpClient90.getTransports();
        okHttpClient74.transports = strList97;
        okHttpClient11.transports = strList97;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(routeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNotNull(strList97);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.CookieHandler cookieHandler22 = okHttpClient14.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache23 = okHttpClient14.okResponseCache();
        java.net.CookieHandler cookieHandler24 = okHttpClient14.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.setProxySelector(proxySelector29);
        java.net.CookieHandler cookieHandler31 = okHttpClient26.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        java.net.Proxy proxy40 = null;
        okHttpClient32.proxy = proxy40;
        java.util.Set<com.squareup.okhttp.Route> routeSet42 = okHttpClient32.failedRoutes;
        okHttpClient26.failedRoutes = routeSet42;
        okHttpClient25.failedRoutes = routeSet42;
        okHttpClient11.failedRoutes = routeSet42;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient46.setConnectionPool(connectionPool55);
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = okHttpClient57.getAuthenticator();
        java.net.ProxySelector proxySelector59 = okHttpClient57.getProxySelector();
        java.net.ResponseCache responseCache60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient57.setResponseCache(responseCache60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = okHttpClient62.hostnameVerifier;
        java.net.Proxy proxy68 = okHttpClient62.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache70 = okHttpClient69.okResponseCache();
        java.net.ResponseCache responseCache71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient69.setResponseCache(responseCache71);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        okHttpClient69.transports = strList75;
        okHttpClient62.transports = strList75;
        okHttpClient57.transports = strList75;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList75;
        okHttpClient11.transports = strList75;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(cookieHandler22);
        org.junit.Assert.assertNull(okResponseCache23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(cookieHandler31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(routeSet42);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(okAuthenticator58);
        org.junit.Assert.assertNull(proxySelector59);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(hostnameVerifier67);
        org.junit.Assert.assertNull(proxy68);
        org.junit.Assert.assertNull(okResponseCache70);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList12 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList14 = okHttpClient13.getTransports();
        java.net.Proxy proxy15 = okHttpClient13.getProxy();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(proxy15);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket40 = sSLSocketFactory34.createSocket("hi!", 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        java.net.Proxy proxy10 = okHttpClient0.getProxy();
        java.net.ProxySelector proxySelector11 = null;
        okHttpClient0.proxySelector = proxySelector11;
        java.net.Proxy proxy13 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient14.sslSocketFactory;
        okHttpClient14.followProtocolRedirects = true;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(proxy10);
        org.junit.Assert.assertNull(proxy13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(sSLSocketFactory15);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(0, (long) (byte) 0);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient13.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket37 = sSLSocketFactory35.createSocket();
        java.net.Socket socket38 = sSLSocketFactory35.createSocket();
        okHttpClient13.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket40 = sSLSocketFactory35.createSocket();
        java.net.InetAddress inetAddress41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory35.createSocket(inetAddress41, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket40);
        org.junit.Assert.assertEquals(socket40.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ProxySelector proxySelector14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setProxySelector(proxySelector14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = okHttpClient15.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress23 = proxy22.address();
        java.net.SocketAddress socketAddress24 = proxy22.address();
        okHttpClient17.proxy = proxy22;
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address29 = null;
        com.squareup.okhttp.Connection connection30 = connectionPool28.get(address29);
        int int31 = connectionPool28.getSpdyConnectionCount();
        connectionPool28.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient17.setConnectionPool(connectionPool28);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ProxySelector proxySelector37 = okHttpClient34.proxySelector;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient34.setProxySelector(proxySelector38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient34.sslSocketFactory = sSLSocketFactory50;
        okHttpClient17.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.lang.String[] strArray54 = sSLSocketFactory50.getDefaultCipherSuites();
        java.net.Socket socket55 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient15.setSSLSocketFactory(sSLSocketFactory50);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        java.util.List<java.lang.String> strList62 = okHttpClient57.transports;
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool63;
        java.net.CookieHandler cookieHandler65 = okHttpClient57.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache66 = okHttpClient57.okResponseCache();
        java.net.CookieHandler cookieHandler67 = okHttpClient57.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient(okHttpClient57);
        java.net.Proxy proxy69 = java.net.Proxy.NO_PROXY;
        boolean boolean71 = proxy69.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type72 = proxy69.type();
        java.net.SocketAddress socketAddress73 = proxy69.address();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient57.setProxy(proxy69);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient74.sslSocketFactory = sSLSocketFactory85;
        java.lang.String[] strArray87 = sSLSocketFactory85.getDefaultCipherSuites();
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.net.Socket socket89 = sSLSocketFactory85.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket93 = sSLSocketFactory50.createSocket(socket89, "hi!", (-1), false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okAuthenticator16);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(socketAddress24);
        org.junit.Assert.assertNull(connection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(proxySelector37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(socket55);
        org.junit.Assert.assertEquals(socket55.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(cookieHandler65);
        org.junit.Assert.assertNull(okResponseCache66);
        org.junit.Assert.assertNull(cookieHandler67);
        org.junit.Assert.assertNotNull(proxy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type72.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress73);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(socket89);
        org.junit.Assert.assertEquals(socket89.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, (long) (short) 10);
        int int3 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory14);
        com.squareup.okhttp.ConnectionPool connectionPool16 = okHttpClient11.connectionPool;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = connectionPool16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(connectionPool16);
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.lang.String[] strArray42 = sSLSocketFactory41.getSupportedCipherSuites();
        java.lang.String[] strArray43 = sSLSocketFactory41.getSupportedCipherSuites();
        javax.net.SocketFactory socketFactory44 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket45 = socketFactory44.createSocket();
        java.net.Socket socket46 = socketFactory44.createSocket();
        java.net.Socket socket47 = socketFactory44.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket51 = sSLSocketFactory41.createSocket(socket47, "", (-1), true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(socket45);
        org.junit.Assert.assertEquals(socket45.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket46);
        org.junit.Assert.assertEquals(socket46.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket47);
        org.junit.Assert.assertEquals(socket47.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool11 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.setConnectionPool(connectionPool19);
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient21.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient21.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient21.connectionPool = connectionPool26;
        java.net.ResponseCache responseCache28 = okHttpClient21.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient21.sslSocketFactory;
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress31 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        boolean boolean37 = okHttpClient34.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler38 = okHttpClient34.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.copyWithDefaults();
        java.net.ResponseCache responseCache51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient50.setResponseCache(responseCache51);
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient50.authenticator;
        okHttpClient34.authenticator = okAuthenticator53;
        okHttpClient33.authenticator = okAuthenticator53;
        okHttpClient9.authenticator = okAuthenticator53;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache57 = okHttpClient9.okResponseCache();
        java.net.CookieHandler cookieHandler58 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient9.setCookieHandler(cookieHandler58);
        java.net.ResponseCache responseCache60 = okHttpClient59.responseCache;
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(connectionPool11);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(okAuthenticator23);
        org.junit.Assert.assertNull(responseCache28);
        org.junit.Assert.assertNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertNull(socketAddress31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(cookieHandler38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okAuthenticator53);
        org.junit.Assert.assertNull(okResponseCache57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(responseCache60);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ProxySelector proxySelector30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.setProxySelector(proxySelector30);
        java.net.ResponseCache responseCache32 = null;
        okHttpClient31.responseCache = responseCache32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.CookieHandler cookieHandler42 = okHttpClient34.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache43 = okHttpClient34.okResponseCache();
        java.net.CookieHandler cookieHandler44 = okHttpClient34.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        java.net.Proxy proxy46 = java.net.Proxy.NO_PROXY;
        boolean boolean48 = proxy46.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type49 = proxy46.type();
        java.net.SocketAddress socketAddress50 = proxy46.address();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient34.setProxy(proxy46);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient52.copyWithDefaults();
        java.net.ProxySelector proxySelector61 = okHttpClient60.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory62 = okHttpClient60.getSslSocketFactory();
        okHttpClient51.sslSocketFactory = sSLSocketFactory62;
        java.lang.String[] strArray64 = sSLSocketFactory62.getDefaultCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory62.getSupportedCipherSuites();
        java.net.Socket socket66 = sSLSocketFactory62.createSocket();
        okHttpClient31.sslSocketFactory = sSLSocketFactory62;
        okHttpClient11.sslSocketFactory = sSLSocketFactory62;
        java.net.Socket socket69 = sSLSocketFactory62.createSocket();
        java.lang.String[] strArray70 = sSLSocketFactory62.getDefaultCipherSuites();
        java.net.InetAddress inetAddress71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket73 = sSLSocketFactory62.createSocket(inetAddress71, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNull(cookieHandler42);
        org.junit.Assert.assertNull(okResponseCache43);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNotNull(proxy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type49.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
// flaky:         org.junit.Assert.assertNull(proxySelector61);
        org.junit.Assert.assertNotNull(sSLSocketFactory62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray70);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.util.List<java.lang.String> strList6 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient7.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        java.net.CookieHandler cookieHandler17 = okHttpClient9.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache18 = okHttpClient9.okResponseCache();
        java.net.CookieHandler cookieHandler19 = okHttpClient9.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.SocketAddress socketAddress25 = proxy21.address();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient9.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        java.net.ProxySelector proxySelector36 = okHttpClient35.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory37 = okHttpClient35.getSslSocketFactory();
        okHttpClient26.sslSocketFactory = sSLSocketFactory37;
        java.lang.String[] strArray39 = sSLSocketFactory37.getDefaultCipherSuites();
        java.lang.String[] strArray40 = sSLSocketFactory37.getSupportedCipherSuites();
        java.lang.String[] strArray41 = sSLSocketFactory37.getDefaultCipherSuites();
        java.net.Socket socket42 = sSLSocketFactory37.createSocket();
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket45 = sSLSocketFactory8.createSocket(socket42, inputStream43, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(okResponseCache18);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
// flaky:         org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(sSLSocketFactory37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(socket42);
        org.junit.Assert.assertEquals(socket42.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient7.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray22 = sSLSocketFactory19.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ProxySelector proxySelector26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.setProxySelector(proxySelector26);
        java.net.CookieHandler cookieHandler28 = okHttpClient23.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        java.net.Proxy proxy37 = null;
        okHttpClient29.proxy = proxy37;
        java.util.Set<com.squareup.okhttp.Route> routeSet39 = okHttpClient29.failedRoutes;
        okHttpClient23.failedRoutes = routeSet39;
        java.net.ProxySelector proxySelector41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient23.setProxySelector(proxySelector41);
        java.net.CookieHandler cookieHandler43 = okHttpClient23.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient44.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient44.setConnectionPool(connectionPool53);
        java.net.Proxy proxy56 = okHttpClient55.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool58;
        int int60 = connectionPool58.getSpdyConnectionCount();
        okHttpClient55.connectionPool = connectionPool58;
        int int62 = connectionPool58.getSpdyConnectionCount();
        int int63 = connectionPool58.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient23.setConnectionPool(connectionPool58);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        java.util.List<java.lang.String> strList70 = okHttpClient65.transports;
        com.squareup.okhttp.ConnectionPool connectionPool71 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient65.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient65.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        java.net.ResponseCache responseCache77 = null;
        okHttpClient74.responseCache = responseCache77;
        java.util.List<java.lang.String> strList79 = okHttpClient74.transports;
        com.squareup.okhttp.ConnectionPool connectionPool80 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient74.connectionPool = connectionPool80;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient74.copyWithDefaults();
        java.net.ProxySelector proxySelector83 = okHttpClient82.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory84 = okHttpClient82.getSslSocketFactory();
        okHttpClient65.sslSocketFactory = sSLSocketFactory84;
        okHttpClient23.sslSocketFactory = sSLSocketFactory84;
        java.net.Socket socket87 = sSLSocketFactory84.createSocket();
        java.io.InputStream inputStream88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket90 = sSLSocketFactory19.createSocket(socket87, inputStream88, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(routeSet39);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNull(cookieHandler43);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(proxy56);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(connectionPool71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList79);
        org.junit.Assert.assertNotNull(connectionPool80);
        org.junit.Assert.assertNotNull(okHttpClient82);
// flaky:         org.junit.Assert.assertNull(proxySelector83);
        org.junit.Assert.assertNotNull(sSLSocketFactory84);
        org.junit.Assert.assertNotNull(socket87);
        org.junit.Assert.assertEquals(socket87.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache13 = okHttpClient8.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory14);
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient8.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.setConnectionPool(connectionPool27);
        com.squareup.okhttp.ConnectionPool connectionPool30 = okHttpClient29.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient29.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient29.connectionPool = connectionPool34;
        java.net.ResponseCache responseCache36 = okHttpClient29.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory37 = okHttpClient29.sslSocketFactory;
        java.net.Proxy proxy38 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress39 = proxy38.address();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient29.setProxy(proxy38);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        boolean boolean45 = okHttpClient42.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler46 = okHttpClient42.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient47.hostnameVerifier;
        java.net.Proxy proxy53 = okHttpClient47.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient47.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient47.copyWithDefaults();
        java.net.ResponseCache responseCache59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient58.setResponseCache(responseCache59);
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient58.authenticator;
        okHttpClient42.authenticator = okAuthenticator61;
        okHttpClient41.authenticator = okAuthenticator61;
        okHttpClient17.authenticator = okAuthenticator61;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient7.setAuthenticator(okAuthenticator61);
        java.net.ResponseCache responseCache66 = null;
        okHttpClient7.responseCache = responseCache66;
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okResponseCache13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNull(okAuthenticator31);
        org.junit.Assert.assertNull(responseCache36);
        org.junit.Assert.assertNull(sSLSocketFactory37);
        org.junit.Assert.assertNotNull(proxy38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(cookieHandler46);
        org.junit.Assert.assertNull(hostnameVerifier52);
        org.junit.Assert.assertNull(proxy53);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(okAuthenticator61);
        org.junit.Assert.assertNotNull(okHttpClient65);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (byte) -1);
        connectionPool2.evictAll();
        connectionPool2.evictAll();
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ResponseCache responseCache10 = okHttpClient9.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool(0, (long) (short) 10);
        connectionPool13.evictAll();
        com.squareup.okhttp.Address address15 = null;
        com.squareup.okhttp.Connection connection16 = connectionPool13.get(address15);
        okHttpClient9.connectionPool = connectionPool13;
        com.squareup.okhttp.ConnectionPool connectionPool18 = okHttpClient9.getConnectionPool();
        com.squareup.okhttp.Connection connection19 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool18.recycle(connection19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertNull(connection16);
        org.junit.Assert.assertNotNull(connectionPool18);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ProxySelector proxySelector15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.setProxySelector(proxySelector15);
        java.net.CookieHandler cookieHandler17 = okHttpClient12.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.Proxy proxy26 = null;
        okHttpClient18.proxy = proxy26;
        java.util.Set<com.squareup.okhttp.Route> routeSet28 = okHttpClient18.failedRoutes;
        okHttpClient12.failedRoutes = routeSet28;
        okHttpClient11.failedRoutes = routeSet28;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.setProxySelector(proxySelector37);
        java.net.ResponseCache responseCache39 = null;
        okHttpClient38.responseCache = responseCache39;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient38.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient38.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setProxySelector(proxySelector44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        boolean boolean49 = okHttpClient46.getFollowProtocolRedirects();
        java.net.Proxy proxy50 = okHttpClient46.proxy;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient46.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient56.responseCache = responseCache59;
        java.util.List<java.lang.String> strList61 = okHttpClient56.transports;
        com.squareup.okhttp.ConnectionPool connectionPool62 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool62;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient53.setConnectionPool(connectionPool62);
        java.net.ResponseCache responseCache65 = okHttpClient53.responseCache;
        java.net.ResponseCache responseCache66 = okHttpClient53.getResponseCache();
        java.net.ResponseCache responseCache67 = okHttpClient53.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache69 = okHttpClient68.okResponseCache();
        java.net.ResponseCache responseCache70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient68.setResponseCache(responseCache70);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient68.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory73 = okHttpClient68.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        boolean boolean77 = okHttpClient74.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler78 = okHttpClient74.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = null;
        okHttpClient79.hostnameVerifier = hostnameVerifier80;
        java.net.ResponseCache responseCache82 = null;
        okHttpClient79.responseCache = responseCache82;
        javax.net.ssl.HostnameVerifier hostnameVerifier84 = okHttpClient79.hostnameVerifier;
        java.net.Proxy proxy85 = okHttpClient79.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool88 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient79.connectionPool = connectionPool88;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient79.copyWithDefaults();
        java.net.ResponseCache responseCache91 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient90.setResponseCache(responseCache91);
        com.squareup.okhttp.OkAuthenticator okAuthenticator93 = okHttpClient90.authenticator;
        okHttpClient74.authenticator = okAuthenticator93;
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient68.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient53.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient97 = okHttpClient52.setAuthenticator(okAuthenticator93);
        okHttpClient45.authenticator = okAuthenticator93;
        okHttpClient11.authenticator = okAuthenticator93;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(routeSet28);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(hostnameVerifier41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(proxy50);
        org.junit.Assert.assertNotNull(routeSet51);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(connectionPool62);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(responseCache65);
        org.junit.Assert.assertNull(responseCache66);
        org.junit.Assert.assertNull(responseCache67);
        org.junit.Assert.assertNull(okResponseCache69);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(sSLSocketFactory72);
        org.junit.Assert.assertNull(sSLSocketFactory73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(cookieHandler78);
        org.junit.Assert.assertNull(hostnameVerifier84);
        org.junit.Assert.assertNull(proxy85);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(okAuthenticator93);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNotNull(okHttpClient97);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.net.ResponseCache responseCache18 = null;
        okHttpClient0.responseCache = responseCache18;
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(0, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient0.setConnectionPool(connectionPool22);
        int int24 = connectionPool22.getConnectionCount();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setConnectionPool(connectionPool28);
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient30.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient30.connectionPool = connectionPool35;
        java.net.ResponseCache responseCache37 = okHttpClient30.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient30.sslSocketFactory;
        java.net.Proxy proxy39 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress40 = proxy39.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.setProxy(proxy39);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient(okHttpClient41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient43.copyWithDefaults();
        java.net.ProxySelector proxySelector52 = okHttpClient51.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory53 = okHttpClient51.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient41.setSSLSocketFactory(sSLSocketFactory53);
        java.lang.String[] strArray55 = sSLSocketFactory53.getSupportedCipherSuites();
        java.lang.String[] strArray56 = sSLSocketFactory53.getSupportedCipherSuites();
        okHttpClient11.sslSocketFactory = sSLSocketFactory53;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket60 = sSLSocketFactory53.createSocket("", (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNull(okAuthenticator32);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(proxy39);
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
// flaky:         org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(sSLSocketFactory53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.util.Set<com.squareup.okhttp.Route> routeSet30 = okHttpClient17.failedRoutes;
        java.net.ProxySelector proxySelector31 = null;
        okHttpClient17.proxySelector = proxySelector31;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(routeSet30);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        okHttpClient15.authenticator = okAuthenticator18;
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient15.cookieHandler = cookieHandler20;
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache26 = okHttpClient25.okResponseCache();
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setResponseCache(responseCache27);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        okHttpClient25.transports = strList31;
        boolean boolean34 = proxy22.equals((java.lang.Object) strList31);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient15.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.util.Set<com.squareup.okhttp.Route> routeSet42 = okHttpClient39.failedRoutes;
        okHttpClient38.failedRoutes = routeSet42;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient38.sslSocketFactory;
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection46 = okHttpClient38.open(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(okResponseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(routeSet42);
        org.junit.Assert.assertNull(sSLSocketFactory44);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache10 = okHttpClient5.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setSSLSocketFactory(sSLSocketFactory11);
        boolean boolean13 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient5.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient5.sslSocketFactory;
        java.net.Proxy proxy17 = okHttpClient5.getProxy();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertNull(okResponseCache10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(proxy17);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient0.getHostnameVerifier();
        java.net.ProxySelector proxySelector21 = null;
        okHttpClient0.proxySelector = proxySelector21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(hostnameVerifier20);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = null;
        okHttpClient7.proxy = proxy15;
        boolean boolean17 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.Proxy.Type type25 = proxy21.type();
        okHttpClient18.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory46;
        okHttpClient18.sslSocketFactory = sSLSocketFactory46;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.net.InetAddress inetAddress50 = null;
        java.net.InetAddress inetAddress52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket54 = sSLSocketFactory46.createSocket(inetAddress50, (int) (short) 10, inetAddress52, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient49);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy13 = okHttpClient11.proxy;
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient11.getConnectionPool();
        java.net.ProxySelector proxySelector15 = okHttpClient11.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        java.net.Proxy proxy24 = null;
        okHttpClient16.proxy = proxy24;
        boolean boolean26 = okHttpClient16.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache28 = okHttpClient27.okResponseCache();
        java.net.ResponseCache responseCache29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setResponseCache(responseCache29);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        okHttpClient27.transports = strList33;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient27.setSSLSocketFactory(sSLSocketFactory36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy44 = okHttpClient38.getProxy();
        java.net.CookieHandler cookieHandler45 = null;
        okHttpClient38.cookieHandler = cookieHandler45;
        okHttpClient38.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = okHttpClient49.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient49.sslSocketFactory;
        java.net.CookieHandler cookieHandler56 = okHttpClient49.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = okHttpClient49.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool59 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool59;
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = null;
        okHttpClient58.authenticator = okAuthenticator61;
        java.util.List<java.lang.String> strList63 = okHttpClient58.transports;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient58.responseCache = responseCache64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        okHttpClient66.hostnameVerifier = hostnameVerifier67;
        java.net.ResponseCache responseCache69 = null;
        okHttpClient66.responseCache = responseCache69;
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = okHttpClient66.hostnameVerifier;
        java.net.Proxy proxy72 = okHttpClient66.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool75 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient66.connectionPool = connectionPool75;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient66.copyWithDefaults();
        java.net.Proxy proxy78 = okHttpClient77.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = okHttpClient77.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient58.setHostnameVerifier(hostnameVerifier79);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient49.setHostnameVerifier(hostnameVerifier79);
        okHttpClient38.hostnameVerifier = hostnameVerifier79;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient27.setHostnameVerifier(hostnameVerifier79);
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient16.setHostnameVerifier(hostnameVerifier79);
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = okHttpClient84.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient11.setHostnameVerifier(hostnameVerifier85);
        java.net.URL uRL87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection88 = okHttpClient86.open(uRL87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(proxy13);
        org.junit.Assert.assertNull(connectionPool14);
        org.junit.Assert.assertNull(proxySelector15);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(okResponseCache28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNull(hostnameVerifier54);
        org.junit.Assert.assertNull(sSLSocketFactory55);
        org.junit.Assert.assertNull(cookieHandler56);
        org.junit.Assert.assertNull(hostnameVerifier57);
        org.junit.Assert.assertNotNull(connectionPool59);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(hostnameVerifier71);
        org.junit.Assert.assertNull(proxy72);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(proxy78);
        org.junit.Assert.assertNotNull(hostnameVerifier79);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(hostnameVerifier85);
        org.junit.Assert.assertNotNull(okHttpClient86);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setResponseCache(responseCache25);
        okHttpClient26.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList29 = okHttpClient26.getTransports();
        okHttpClient11.transports = strList29;
        com.squareup.okhttp.ConnectionPool connectionPool33 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient11.connectionPool = connectionPool33;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient11.sslSocketFactory;
        java.net.Socket socket36 = sSLSocketFactory35.createSocket();
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.util.List<java.lang.String> strList43 = okHttpClient38.transports;
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool44;
        java.net.CookieHandler cookieHandler46 = okHttpClient38.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache47 = okHttpClient38.okResponseCache();
        java.net.CookieHandler cookieHandler48 = okHttpClient38.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        boolean boolean52 = proxy50.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type53 = proxy50.type();
        java.net.SocketAddress socketAddress54 = proxy50.address();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient38.setProxy(proxy50);
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient56.responseCache = responseCache59;
        java.util.List<java.lang.String> strList61 = okHttpClient56.transports;
        com.squareup.okhttp.ConnectionPool connectionPool62 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool62;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient56.copyWithDefaults();
        java.net.ProxySelector proxySelector65 = okHttpClient64.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory66 = okHttpClient64.getSslSocketFactory();
        okHttpClient55.sslSocketFactory = sSLSocketFactory66;
        java.lang.String[] strArray68 = sSLSocketFactory66.getDefaultCipherSuites();
        java.lang.String[] strArray69 = sSLSocketFactory66.getSupportedCipherSuites();
        java.lang.String[] strArray70 = sSLSocketFactory66.getDefaultCipherSuites();
        java.net.Socket socket71 = sSLSocketFactory66.createSocket();
        java.io.InputStream inputStream72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket74 = sSLSocketFactory35.createSocket(socket71, inputStream72, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket36);
        org.junit.Assert.assertEquals(socket36.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNull(cookieHandler46);
        org.junit.Assert.assertNull(okResponseCache47);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type53.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(connectionPool62);
        org.junit.Assert.assertNotNull(okHttpClient64);
// flaky:         org.junit.Assert.assertNull(proxySelector65);
        org.junit.Assert.assertNotNull(sSLSocketFactory66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(socket71);
        org.junit.Assert.assertEquals(socket71.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setHostnameVerifier(hostnameVerifier17);
        java.net.ProxySelector proxySelector19 = okHttpClient18.getProxySelector();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(proxySelector19);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        java.net.ProxySelector proxySelector8 = okHttpClient4.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        java.net.Proxy proxy17 = null;
        okHttpClient9.proxy = proxy17;
        boolean boolean19 = okHttpClient9.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.copyWithDefaults();
        java.net.CookieHandler cookieHandler21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setCookieHandler(cookieHandler21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        java.net.Proxy proxy29 = okHttpClient23.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient23.connectionPool = connectionPool32;
        boolean boolean34 = okHttpClient23.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient35.hostnameVerifier;
        java.net.Proxy proxy41 = okHttpClient35.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool44 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient35.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.copyWithDefaults();
        java.net.Proxy proxy47 = okHttpClient46.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient46.getHostnameVerifier();
        okHttpClient23.hostnameVerifier = hostnameVerifier48;
        okHttpClient20.hostnameVerifier = hostnameVerifier48;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient4.setHostnameVerifier(hostnameVerifier48);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNull(proxySelector8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(hostnameVerifier40);
        org.junit.Assert.assertNull(proxy41);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(hostnameVerifier48);
        org.junit.Assert.assertNotNull(okHttpClient51);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient12.hostnameVerifier;
        java.net.Proxy proxy18 = okHttpClient12.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient19.okResponseCache();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setResponseCache(responseCache21);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        okHttpClient19.transports = strList25;
        okHttpClient12.transports = strList25;
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = okHttpClient32.hostnameVerifier;
        java.net.Proxy proxy38 = okHttpClient32.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool41 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient32.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.copyWithDefaults();
        java.net.ResponseCache responseCache44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setResponseCache(responseCache44);
        java.net.CookieHandler cookieHandler46 = null;
        okHttpClient45.cookieHandler = cookieHandler46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        java.util.List<java.lang.String> strList62 = okHttpClient57.transports;
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient57.copyWithDefaults();
        java.net.ProxySelector proxySelector66 = okHttpClient65.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory67 = okHttpClient65.getSslSocketFactory();
        okHttpClient48.sslSocketFactory = sSLSocketFactory67;
        java.net.Socket socket69 = sSLSocketFactory67.createSocket();
        java.net.Socket socket70 = sSLSocketFactory67.createSocket();
        okHttpClient45.sslSocketFactory = sSLSocketFactory67;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient12.setSSLSocketFactory(sSLSocketFactory67);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory67);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket76 = sSLSocketFactory67.createSocket("DIRECT", (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(hostnameVerifier37);
        org.junit.Assert.assertNull(proxy38);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNotNull(okHttpClient65);
// flaky:         org.junit.Assert.assertNull(proxySelector66);
        org.junit.Assert.assertNotNull(sSLSocketFactory67);
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket70);
        org.junit.Assert.assertEquals(socket70.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient73);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier19;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient13.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient13.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        java.net.Proxy proxy29 = okHttpClient23.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient23.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.copyWithDefaults();
        java.net.Proxy proxy35 = okHttpClient34.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient34.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient13.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient12.setHostnameVerifier(hostnameVerifier36);
        boolean boolean39 = okHttpClient38.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.setConnectionPool(connectionPool49);
        com.squareup.okhttp.ConnectionPool connectionPool52 = okHttpClient51.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient51.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient51.connectionPool = connectionPool56;
        java.net.ResponseCache responseCache58 = okHttpClient51.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = okHttpClient51.sslSocketFactory;
        java.net.Proxy proxy60 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress61 = proxy60.address();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setProxy(proxy60);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient38.setProxy(proxy60);
        java.net.Proxy proxy64 = java.net.Proxy.NO_PROXY;
        boolean boolean66 = proxy64.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type67 = proxy64.type();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient38.setProxy(proxy64);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient(okHttpClient68);
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = okHttpClient68.getHostnameVerifier();
        java.net.URL uRL71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection72 = okHttpClient68.open(uRL71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNull(sSLSocketFactory22);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(hostnameVerifier36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(okAuthenticator53);
        org.junit.Assert.assertNull(responseCache58);
        org.junit.Assert.assertNull(sSLSocketFactory59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertNull(socketAddress61);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(proxy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type67.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(hostnameVerifier70);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.connectionPool;
        java.util.List<java.lang.String> strList13 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.Proxy proxy22 = null;
        okHttpClient14.proxy = proxy22;
        boolean boolean24 = okHttpClient14.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        java.net.ProxySelector proxySelector26 = okHttpClient25.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient25.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient25.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool30;
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = null;
        okHttpClient29.authenticator = okAuthenticator32;
        java.net.CookieHandler cookieHandler34 = null;
        okHttpClient29.cookieHandler = cookieHandler34;
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache40 = okHttpClient39.okResponseCache();
        java.net.ResponseCache responseCache41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setResponseCache(responseCache41);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        okHttpClient39.transports = strList45;
        boolean boolean48 = proxy36.equals((java.lang.Object) strList45);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient29.setProxy(proxy36);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient25.setProxy(proxy36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient25.setSSLSocketFactory(sSLSocketFactory51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.util.Set<com.squareup.okhttp.Route> routeSet56 = okHttpClient53.failedRoutes;
        okHttpClient52.failedRoutes = routeSet56;
        okHttpClient0.failedRoutes = routeSet56;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(okResponseCache40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(routeSet56);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        connectionPool9.evictAll();
        connectionPool9.evictAll();
        int int13 = connectionPool9.getHttpConnectionCount();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient19.copyWithDefaults();
        java.net.Proxy proxy27 = okHttpClient26.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        java.net.Proxy proxy36 = null;
        okHttpClient28.proxy = proxy36;
        boolean boolean38 = okHttpClient28.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient28.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier47;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache49 = okHttpClient41.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient41.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient51.hostnameVerifier;
        java.net.Proxy proxy57 = okHttpClient51.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool60 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient51.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.copyWithDefaults();
        java.net.Proxy proxy63 = okHttpClient62.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = okHttpClient62.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient41.setHostnameVerifier(hostnameVerifier64);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient40.setHostnameVerifier(hostnameVerifier64);
        boolean boolean67 = okHttpClient66.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool69 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient68.connectionPool = connectionPool69;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = null;
        okHttpClient71.hostnameVerifier = hostnameVerifier72;
        java.net.ResponseCache responseCache74 = null;
        okHttpClient71.responseCache = responseCache74;
        java.util.List<java.lang.String> strList76 = okHttpClient71.transports;
        com.squareup.okhttp.ConnectionPool connectionPool77 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient71.connectionPool = connectionPool77;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient68.setConnectionPool(connectionPool77);
        com.squareup.okhttp.ConnectionPool connectionPool80 = okHttpClient79.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator81 = okHttpClient79.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool84 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient79.connectionPool = connectionPool84;
        java.net.ResponseCache responseCache86 = okHttpClient79.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory87 = okHttpClient79.sslSocketFactory;
        java.net.Proxy proxy88 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress89 = proxy88.address();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient79.setProxy(proxy88);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient66.setProxy(proxy88);
        java.net.Proxy proxy92 = java.net.Proxy.NO_PROXY;
        boolean boolean94 = proxy92.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type95 = proxy92.type();
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient66.setProxy(proxy92);
        com.squareup.okhttp.OkHttpClient okHttpClient97 = new com.squareup.okhttp.OkHttpClient(okHttpClient96);
        javax.net.ssl.HostnameVerifier hostnameVerifier98 = okHttpClient96.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient99 = okHttpClient26.setHostnameVerifier(hostnameVerifier98);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(okResponseCache49);
        org.junit.Assert.assertNull(sSLSocketFactory50);
        org.junit.Assert.assertNull(hostnameVerifier56);
        org.junit.Assert.assertNull(proxy57);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNotNull(hostnameVerifier64);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(connectionPool69);
        org.junit.Assert.assertNull(strList76);
        org.junit.Assert.assertNotNull(connectionPool77);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(connectionPool80);
        org.junit.Assert.assertNull(okAuthenticator81);
        org.junit.Assert.assertNull(responseCache86);
        org.junit.Assert.assertNull(sSLSocketFactory87);
        org.junit.Assert.assertNotNull(proxy88);
        org.junit.Assert.assertNull(socketAddress89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(proxy92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + type95 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type95.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNotNull(hostnameVerifier98);
        org.junit.Assert.assertNotNull(okHttpClient99);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool10);
        java.lang.Class<?> wildcardClass12 = connectionPool10.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setCookieHandler(cookieHandler18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.copyWithDefaults();
        boolean boolean21 = okHttpClient20.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.InetAddress inetAddress39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory33.createSocket("", (int) (byte) 100, inetAddress39, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        boolean boolean16 = okHttpClient6.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient17.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient17.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient21.authenticator = okAuthenticator24;
        java.net.CookieHandler cookieHandler26 = null;
        okHttpClient21.cookieHandler = cookieHandler26;
        java.net.Proxy proxy28 = java.net.Proxy.NO_PROXY;
        boolean boolean30 = proxy28.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient31.okResponseCache();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setResponseCache(responseCache33);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        okHttpClient31.transports = strList37;
        boolean boolean40 = proxy28.equals((java.lang.Object) strList37);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient21.setProxy(proxy28);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient17.setProxy(proxy28);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory43);
        java.net.Proxy proxy45 = java.net.Proxy.NO_PROXY;
        boolean boolean47 = proxy45.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type48 = proxy45.type();
        java.net.SocketAddress socketAddress49 = proxy45.address();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache55 = okHttpClient50.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient50.setSSLSocketFactory(sSLSocketFactory56);
        boolean boolean58 = proxy45.equals((java.lang.Object) okHttpClient50);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient59.setConnectionPool(connectionPool68);
        java.net.ResponseCache responseCache71 = okHttpClient59.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient59.sslSocketFactory;
        java.net.ResponseCache responseCache73 = okHttpClient59.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool74 = okHttpClient59.connectionPool;
        boolean boolean75 = proxy45.equals((java.lang.Object) connectionPool74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient44.setProxy(proxy45);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient0.setProxy(proxy45);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = okHttpClient77.getSslSocketFactory();
        java.net.CookieHandler cookieHandler79 = okHttpClient77.getCookieHandler();
        java.net.ProxySelector proxySelector80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient77.setProxySelector(proxySelector80);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(proxy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(proxy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type48.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress49);
        org.junit.Assert.assertNull(okResponseCache55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(responseCache71);
        org.junit.Assert.assertNull(sSLSocketFactory72);
        org.junit.Assert.assertNull(responseCache73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(sSLSocketFactory78);
        org.junit.Assert.assertNull(cookieHandler79);
        org.junit.Assert.assertNotNull(okHttpClient81);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient0.cookieHandler = cookieHandler5;
        java.net.Proxy proxy7 = java.net.Proxy.NO_PROXY;
        boolean boolean9 = proxy7.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        okHttpClient10.transports = strList16;
        boolean boolean19 = proxy7.equals((java.lang.Object) strList16);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setProxy(proxy7);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setHostnameVerifier(hostnameVerifier39);
        boolean boolean41 = proxy7.equals((java.lang.Object) okHttpClient40);
        java.net.SocketAddress socketAddress42 = proxy7.address();
        java.net.SocketAddress socketAddress43 = proxy7.address();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        java.util.List<java.lang.String> strList49 = okHttpClient44.transports;
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient44.connectionPool = connectionPool50;
        java.net.CookieHandler cookieHandler52 = okHttpClient44.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache53 = okHttpClient44.okResponseCache();
        java.net.CookieHandler cookieHandler54 = okHttpClient44.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient(okHttpClient44);
        java.net.Proxy proxy56 = java.net.Proxy.NO_PROXY;
        boolean boolean58 = proxy56.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type59 = proxy56.type();
        java.net.SocketAddress socketAddress60 = proxy56.address();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient44.setProxy(proxy56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient62.copyWithDefaults();
        java.net.ProxySelector proxySelector71 = okHttpClient70.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient70.getSslSocketFactory();
        okHttpClient61.sslSocketFactory = sSLSocketFactory72;
        java.lang.String[] strArray74 = sSLSocketFactory72.getDefaultCipherSuites();
        java.lang.String[] strArray75 = sSLSocketFactory72.getSupportedCipherSuites();
        java.lang.String[] strArray76 = sSLSocketFactory72.getDefaultCipherSuites();
        java.net.Socket socket77 = sSLSocketFactory72.createSocket();
        boolean boolean78 = proxy7.equals((java.lang.Object) sSLSocketFactory72);
        java.net.Proxy.Type type79 = proxy7.type();
        java.net.SocketAddress socketAddress80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy81 = new java.net.Proxy(type79, socketAddress80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNull(socketAddress43);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(cookieHandler52);
        org.junit.Assert.assertNull(okResponseCache53);
        org.junit.Assert.assertNull(cookieHandler54);
        org.junit.Assert.assertNotNull(proxy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type59.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress60);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(okHttpClient70);
// flaky:         org.junit.Assert.assertNull(proxySelector71);
        org.junit.Assert.assertNotNull(sSLSocketFactory72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(socket77);
        org.junit.Assert.assertEquals(socket77.toString(), "Socket[unconnected]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type79.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.ConnectionPool connectionPool18 = okHttpClient10.connectionPool;
        int int19 = connectionPool18.getHttpConnectionCount();
        okHttpClient4.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient4);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setProxy(proxy30);
        java.util.Set<com.squareup.okhttp.Route> routeSet36 = okHttpClient24.failedRoutes;
        okHttpClient23.failedRoutes = routeSet36;
        okHttpClient21.failedRoutes = routeSet36;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(routeSet36);
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache10 = okHttpClient5.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setSSLSocketFactory(sSLSocketFactory11);
        boolean boolean13 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient14.setConnectionPool(connectionPool23);
        java.net.ResponseCache responseCache26 = okHttpClient14.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient14.sslSocketFactory;
        java.net.ResponseCache responseCache28 = okHttpClient14.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool29 = okHttpClient14.connectionPool;
        boolean boolean30 = proxy0.equals((java.lang.Object) connectionPool29);
        com.squareup.okhttp.Address address31 = null;
        com.squareup.okhttp.Connection connection32 = connectionPool29.get(address31);
        com.squareup.okhttp.Connection connection33 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool29.recycle(connection33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertNull(okResponseCache10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(responseCache26);
        org.junit.Assert.assertNull(sSLSocketFactory27);
        org.junit.Assert.assertNull(responseCache28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(connection32);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory20;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient23.copyWithDefaults();
        java.net.URL uRL25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection26 = okHttpClient23.open(uRL25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNotNull(okHttpClient24);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache4 = okHttpClient3.okResponseCache();
        java.net.ResponseCache responseCache5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient3.setResponseCache(responseCache5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient3.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient3.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient3.setConnectionPool(connectionPool17);
        okHttpClient0.connectionPool = connectionPool17;
        java.lang.Class<?> wildcardClass21 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(okResponseCache4);
        org.junit.Assert.assertNotNull(okHttpClient6);
        org.junit.Assert.assertNull(sSLSocketFactory7);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        okHttpClient14.authenticator = okAuthenticator17;
        java.net.CookieHandler cookieHandler19 = null;
        okHttpClient14.cookieHandler = cookieHandler19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient24.okResponseCache();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setResponseCache(responseCache26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        okHttpClient24.transports = strList30;
        boolean boolean33 = proxy21.equals((java.lang.Object) strList30);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient14.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setProxySelector(proxySelector38);
        java.net.CookieHandler cookieHandler40 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient41.failedRoutes;
        okHttpClient35.failedRoutes = routeSet51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient35.setHostnameVerifier(hostnameVerifier53);
        boolean boolean55 = proxy21.equals((java.lang.Object) okHttpClient54);
        okHttpClient0.proxy = proxy21;
        java.net.CookieHandler cookieHandler57 = null;
        okHttpClient0.cookieHandler = cookieHandler57;
        java.net.CookieHandler cookieHandler59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient0.setCookieHandler(cookieHandler59);
        java.net.CookieHandler cookieHandler61 = okHttpClient60.cookieHandler;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(routeSet51);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(cookieHandler61);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) -1, (long) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ProxySelector proxySelector15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.setProxySelector(proxySelector15);
        java.net.CookieHandler cookieHandler17 = okHttpClient12.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.Proxy proxy26 = null;
        okHttpClient18.proxy = proxy26;
        java.util.Set<com.squareup.okhttp.Route> routeSet28 = okHttpClient18.failedRoutes;
        okHttpClient12.failedRoutes = routeSet28;
        okHttpClient11.failedRoutes = routeSet28;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ResponseCache responseCache32 = okHttpClient11.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        java.util.List<java.lang.String> strList38 = okHttpClient33.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier39;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache41 = okHttpClient33.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient33.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient43.hostnameVerifier;
        java.net.Proxy proxy49 = okHttpClient43.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool52 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient43.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.copyWithDefaults();
        java.net.Proxy proxy55 = okHttpClient54.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient54.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient33.setHostnameVerifier(hostnameVerifier56);
        okHttpClient11.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient11.responseCache = responseCache59;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(routeSet28);
        org.junit.Assert.assertNull(responseCache32);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(okResponseCache41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(hostnameVerifier48);
        org.junit.Assert.assertNull(proxy49);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(hostnameVerifier56);
        org.junit.Assert.assertNotNull(okHttpClient57);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        boolean boolean16 = okHttpClient15.followProtocolRedirects;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient15.getSslSocketFactory();
        javax.net.SocketFactory socketFactory18 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket19 = socketFactory18.createSocket();
        java.net.Socket socket20 = socketFactory18.createSocket();
        java.net.Socket socket21 = socketFactory18.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket25 = sSLSocketFactory17.createSocket(socket21, "hi!", (int) '#', false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(socket19);
        org.junit.Assert.assertEquals(socket19.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket20);
        org.junit.Assert.assertEquals(socket20.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setResponseCache(responseCache21);
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient22.connectionPool;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(connectionPool23);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        okHttpClient15.authenticator = okAuthenticator18;
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient15.cookieHandler = cookieHandler20;
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache26 = okHttpClient25.okResponseCache();
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setResponseCache(responseCache27);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        okHttpClient25.transports = strList31;
        boolean boolean34 = proxy22.equals((java.lang.Object) strList31);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient15.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy44 = okHttpClient38.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient38.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = okHttpClient49.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient36.setHostnameVerifier(hostnameVerifier50);
        java.net.ProxySelector proxySelector52 = null;
        okHttpClient51.proxySelector = proxySelector52;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(okResponseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(hostnameVerifier50);
        org.junit.Assert.assertNotNull(okHttpClient51);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy15 = okHttpClient13.proxy;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNull(proxy15);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 100, (long) '#');
        connectionPool2.evictAll();
        com.squareup.okhttp.Address address4 = null;
        com.squareup.okhttp.Connection connection5 = connectionPool2.get(address4);
        org.junit.Assert.assertNull(connection5);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.util.List<java.lang.String> strList4 = okHttpClient0.getTransports();
        java.net.ProxySelector proxySelector5 = null;
        okHttpClient0.proxySelector = proxySelector5;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient9.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient9.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache17 = okHttpClient16.okResponseCache();
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setResponseCache(responseCache18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setResponseCache(responseCache22);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        okHttpClient20.transports = strList26;
        okHttpClient16.transports = strList26;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        java.util.List<java.lang.String> strList35 = okHttpClient30.transports;
        com.squareup.okhttp.ConnectionPool connectionPool36 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient30.connectionPool = connectionPool36;
        java.net.CookieHandler cookieHandler38 = okHttpClient30.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache39 = okHttpClient30.okResponseCache();
        java.net.CookieHandler cookieHandler40 = okHttpClient30.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        java.net.ResponseCache responseCache42 = okHttpClient30.responseCache;
        java.net.CookieHandler cookieHandler43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient30.setCookieHandler(cookieHandler43);
        java.net.Proxy proxy45 = java.net.Proxy.NO_PROXY;
        boolean boolean47 = proxy45.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache49 = okHttpClient48.okResponseCache();
        java.net.ResponseCache responseCache50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient48.setResponseCache(responseCache50);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        okHttpClient48.transports = strList54;
        boolean boolean57 = proxy45.equals((java.lang.Object) strList54);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList54;
        okHttpClient44.transports = strList54;
        okHttpClient16.transports = strList54;
        okHttpClient9.transports = strList54;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList54;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList54;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(okResponseCache17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(cookieHandler38);
        org.junit.Assert.assertNull(okResponseCache39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(proxy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(okResponseCache49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray32 = sSLSocketFactory28.getSupportedCipherSuites();
        java.net.Socket socket33 = sSLSocketFactory28.createSocket();
        java.net.InetAddress inetAddress34 = null;
        java.net.InetAddress inetAddress36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket38 = sSLSocketFactory28.createSocket(inetAddress34, (int) (short) 0, inetAddress36, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient11.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setResponseCache(responseCache22);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        okHttpClient20.transports = strList26;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient31.okResponseCache();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setResponseCache(responseCache33);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        okHttpClient31.transports = strList37;
        okHttpClient20.transports = strList37;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList37;
        okHttpClient11.transports = strList37;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient11.sslSocketFactory;
        java.net.ResponseCache responseCache44 = okHttpClient11.getResponseCache();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(okAuthenticator19);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNull(responseCache44);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getSupportedCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory61.getSupportedCipherSuites();
        java.net.Socket socket66 = sSLSocketFactory61.createSocket();
        java.net.InetAddress inetAddress67 = null;
        java.net.InetAddress inetAddress69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket71 = sSLSocketFactory61.createSocket(inetAddress67, (int) (byte) 1, inetAddress69, 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ResponseCache responseCache14 = okHttpClient13.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.sslSocketFactory;
        java.lang.String[] strArray16 = sSLSocketFactory15.getSupportedCipherSuites();
        java.net.InetAddress inetAddress19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket21 = sSLSocketFactory15.createSocket("hi!", (int) ' ', inetAddress19, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(sSLSocketFactory15);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setResponseCache(responseCache25);
        okHttpClient26.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList29 = okHttpClient26.getTransports();
        okHttpClient11.transports = strList29;
        com.squareup.okhttp.ConnectionPool connectionPool33 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient11.connectionPool = connectionPool33;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient11.sslSocketFactory;
        java.net.InetAddress inetAddress36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket38 = sSLSocketFactory35.createSocket(inetAddress36, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient11.okResponseCache();
        java.net.Proxy proxy15 = okHttpClient11.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache17 = okHttpClient16.okResponseCache();
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setResponseCache(responseCache18);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        okHttpClient16.transports = strList22;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient16.setSSLSocketFactory(sSLSocketFactory25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        java.net.CookieHandler cookieHandler34 = null;
        okHttpClient27.cookieHandler = cookieHandler34;
        okHttpClient27.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient38.sslSocketFactory;
        java.net.CookieHandler cookieHandler45 = okHttpClient38.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient38.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool48;
        com.squareup.okhttp.OkAuthenticator okAuthenticator50 = null;
        okHttpClient47.authenticator = okAuthenticator50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient47.responseCache = responseCache53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = okHttpClient55.hostnameVerifier;
        java.net.Proxy proxy61 = okHttpClient55.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool64 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient55.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient55.copyWithDefaults();
        java.net.Proxy proxy67 = okHttpClient66.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = okHttpClient66.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient47.setHostnameVerifier(hostnameVerifier68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient38.setHostnameVerifier(hostnameVerifier68);
        okHttpClient27.hostnameVerifier = hostnameVerifier68;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient16.setHostnameVerifier(hostnameVerifier68);
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = okHttpClient16.getHostnameVerifier();
        okHttpClient11.hostnameVerifier = hostnameVerifier73;
        java.net.ResponseCache responseCache75 = okHttpClient11.getResponseCache();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(proxy15);
        org.junit.Assert.assertNull(okResponseCache17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(sSLSocketFactory44);
        org.junit.Assert.assertNull(cookieHandler45);
        org.junit.Assert.assertNull(hostnameVerifier46);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNull(hostnameVerifier60);
        org.junit.Assert.assertNull(proxy61);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(hostnameVerifier68);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(hostnameVerifier73);
        org.junit.Assert.assertNull(responseCache75);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) ' ');
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient0.setProxySelector(proxySelector20);
        boolean boolean22 = okHttpClient0.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        boolean boolean9 = okHttpClient6.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler10 = okHttpClient6.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy17 = okHttpClient11.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient11.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setResponseCache(responseCache23);
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient22.authenticator;
        okHttpClient6.authenticator = okAuthenticator25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient0.setAuthenticator(okAuthenticator25);
        java.net.ResponseCache responseCache28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient27.setResponseCache(responseCache28);
        com.squareup.okhttp.ConnectionPool connectionPool30 = okHttpClient27.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient31.setConnectionPool(connectionPool40);
        java.net.Proxy proxy43 = okHttpClient42.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = null;
        okHttpClient42.sslSocketFactory = sSLSocketFactory44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        com.squareup.okhttp.ConnectionPool connectionPool54 = okHttpClient46.connectionPool;
        int int55 = connectionPool54.getHttpConnectionCount();
        com.squareup.okhttp.Address address56 = null;
        com.squareup.okhttp.Connection connection57 = connectionPool54.get(address56);
        okHttpClient42.connectionPool = connectionPool54;
        java.net.ProxySelector proxySelector59 = okHttpClient42.proxySelector;
        java.net.Proxy proxy60 = java.net.Proxy.NO_PROXY;
        boolean boolean62 = proxy60.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache64 = okHttpClient63.okResponseCache();
        java.net.ResponseCache responseCache65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setResponseCache(responseCache65);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        okHttpClient63.transports = strList69;
        boolean boolean72 = proxy60.equals((java.lang.Object) strList69);
        okHttpClient42.proxy = proxy60;
        java.lang.String str74 = proxy60.toString();
        okHttpClient27.proxy = proxy60;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = new com.squareup.okhttp.OkHttpClient(okHttpClient27);
        java.net.ProxySelector proxySelector77 = okHttpClient76.getProxySelector();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(proxy17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okAuthenticator25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(connectionPool30);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNull(proxy43);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(connection57);
        org.junit.Assert.assertNull(proxySelector59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(okResponseCache64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DIRECT" + "'", str74, "DIRECT");
        org.junit.Assert.assertNull(proxySelector77);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        java.net.ResponseCache responseCache6 = null;
        okHttpClient0.responseCache = responseCache6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.setProxySelector(proxySelector11);
        java.net.ResponseCache responseCache13 = null;
        okHttpClient12.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient12.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient12.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setProxySelector(proxySelector18);
        okHttpClient19.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.copyWithDefaults();
        java.util.List<java.lang.String> strList23 = okHttpClient22.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList23;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setTransports(strList23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.Proxy proxy19 = null;
        okHttpClient11.proxy = proxy19;
        boolean boolean21 = okHttpClient11.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ProxySelector proxySelector23 = okHttpClient22.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient22.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient22.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool27;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = null;
        okHttpClient26.authenticator = okAuthenticator29;
        java.net.CookieHandler cookieHandler31 = null;
        okHttpClient26.cookieHandler = cookieHandler31;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        boolean boolean35 = proxy33.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache37 = okHttpClient36.okResponseCache();
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setResponseCache(responseCache38);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        okHttpClient36.transports = strList42;
        boolean boolean45 = proxy33.equals((java.lang.Object) strList42);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient26.setProxy(proxy33);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient22.setProxy(proxy33);
        java.lang.String str48 = proxy33.toString();
        java.net.Proxy.Type type49 = proxy33.type();
        java.net.SocketAddress socketAddress50 = proxy33.address();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient0.setProxy(proxy33);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.net.Proxy proxy57 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress58 = proxy57.address();
        java.net.SocketAddress socketAddress59 = proxy57.address();
        okHttpClient52.proxy = proxy57;
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address64 = null;
        com.squareup.okhttp.Connection connection65 = connectionPool63.get(address64);
        int int66 = connectionPool63.getSpdyConnectionCount();
        connectionPool63.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient52.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = okHttpClient69.proxySelector;
        java.net.ProxySelector proxySelector73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient69.setProxySelector(proxySelector73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient69.sslSocketFactory = sSLSocketFactory85;
        okHttpClient52.sslSocketFactory = sSLSocketFactory85;
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        java.net.Socket socket90 = sSLSocketFactory85.createSocket();
        java.net.Socket socket91 = sSLSocketFactory85.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory85;
        java.lang.String[] strArray93 = sSLSocketFactory85.getSupportedCipherSuites();
        java.net.InetAddress inetAddress94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket96 = sSLSocketFactory85.createSocket(inetAddress94, 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(proxySelector23);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(okResponseCache37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DIRECT" + "'", str48, "DIRECT");
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type49.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertNull(socketAddress58);
        org.junit.Assert.assertNull(socketAddress59);
        org.junit.Assert.assertNull(connection65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(proxySelector72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(socket90);
        org.junit.Assert.assertEquals(socket90.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket91);
        org.junit.Assert.assertEquals(socket91.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler11 = okHttpClient0.getCookieHandler();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        java.net.ProxySelector proxySelector14 = okHttpClient13.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient15.hostnameVerifier;
        java.net.Proxy proxy17 = okHttpClient15.getProxy();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(cookieHandler11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(proxySelector14);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(proxy17);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ProxySelector proxySelector13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.setProxySelector(proxySelector13);
        java.net.CookieHandler cookieHandler15 = okHttpClient10.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        java.net.Proxy proxy24 = null;
        okHttpClient16.proxy = proxy24;
        java.util.Set<com.squareup.okhttp.Route> routeSet26 = okHttpClient16.failedRoutes;
        okHttpClient10.failedRoutes = routeSet26;
        java.net.ProxySelector proxySelector28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient10.setProxySelector(proxySelector28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient(okHttpClient29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient30.authenticator;
        java.net.ProxySelector proxySelector32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setProxySelector(proxySelector32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient33.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient34.sslSocketFactory;
        okHttpClient5.sslSocketFactory = sSLSocketFactory35;
        java.net.InetAddress inetAddress39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory35.createSocket("", (int) (short) 0, inetAddress39, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(routeSet26);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(okAuthenticator31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray41 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket42 = sSLSocketFactory35.createSocket();
        java.lang.String[] strArray43 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.InetAddress inetAddress46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket48 = sSLSocketFactory35.createSocket("", (int) '4', inetAddress46, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(socket42);
        org.junit.Assert.assertEquals(socket42.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) -1);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        java.net.CookieHandler cookieHandler8 = okHttpClient0.getCookieHandler();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(cookieHandler8);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        okHttpClient0.transports = strList6;
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.copyWithDefaults();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = okHttpClient19.sslSocketFactory;
        okHttpClient0.sslSocketFactory = sSLSocketFactory21;
        java.net.InetAddress inetAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket27 = sSLSocketFactory21.createSocket("", 10, inetAddress25, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory21);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.net.Proxy proxy17 = okHttpClient0.getProxy();
        boolean boolean18 = okHttpClient0.followProtocolRedirects;
        java.net.CookieHandler cookieHandler19 = okHttpClient0.cookieHandler;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(proxy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(cookieHandler19);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, 10L);
        int int3 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory24);
        java.net.ProxySelector proxySelector26 = okHttpClient0.getProxySelector();
        java.util.List<java.lang.String> strList27 = okHttpClient0.transports;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNull(strList27);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        okHttpClient7.sslSocketFactory = sSLSocketFactory8;
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection11 = okHttpClient7.open(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setResponseCache(responseCache8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient18.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory20);
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        okHttpClient21.proxy = proxy22;
        java.net.Proxy.Type type24 = proxy22.type();
        java.net.SocketAddress socketAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy26 = new java.net.Proxy(type24, socketAddress25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
// flaky:         org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNotNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) ' ', 100L);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getDefaultCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.InetAddress inetAddress38 = null;
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory33.createSocket(inetAddress38, (int) (byte) -1, inetAddress40, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.util.List<java.lang.String> strList4 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        okHttpClient0.cookieHandler = cookieHandler6;
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient0.getAuthenticator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(okAuthenticator8);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (short) 1);
        int int3 = connectionPool2.getSpdyConnectionCount();
        connectionPool2.evictAll();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.Proxy proxy16 = okHttpClient10.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient10.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.copyWithDefaults();
        java.net.Proxy proxy22 = okHttpClient21.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient21.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = okHttpClient24.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        java.net.CookieHandler cookieHandler34 = okHttpClient26.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache35 = okHttpClient26.okResponseCache();
        java.net.CookieHandler cookieHandler36 = okHttpClient26.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        java.net.Proxy proxy38 = java.net.Proxy.NO_PROXY;
        boolean boolean40 = proxy38.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type41 = proxy38.type();
        java.net.SocketAddress socketAddress42 = proxy38.address();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient26.setProxy(proxy38);
        java.lang.String[] strArray45 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        okHttpClient26.transports = strList46;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient26.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient62.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient62.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient62.connectionPool = connectionPool67;
        java.net.ResponseCache responseCache69 = okHttpClient62.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient62.sslSocketFactory;
        java.net.Proxy proxy71 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress72 = proxy71.address();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setProxy(proxy71);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient(okHttpClient73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient73.setSSLSocketFactory(sSLSocketFactory85);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier88 = null;
        okHttpClient87.hostnameVerifier = hostnameVerifier88;
        java.net.ProxySelector proxySelector90 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient87.setProxySelector(proxySelector90);
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient91.copyWithDefaults();
        java.net.ProxySelector proxySelector93 = null;
        okHttpClient92.proxySelector = proxySelector93;
        com.squareup.okhttp.OkAuthenticator okAuthenticator95 = okHttpClient92.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient73.setAuthenticator(okAuthenticator95);
        com.squareup.okhttp.OkHttpClient okHttpClient97 = okHttpClient26.setAuthenticator(okAuthenticator95);
        com.squareup.okhttp.OkHttpClient okHttpClient98 = okHttpClient24.setAuthenticator(okAuthenticator95);
        java.net.ProxySelector proxySelector99 = okHttpClient98.proxySelector;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNull(sSLSocketFactory9);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(proxy16);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNotNull(hostnameVerifier23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNull(cookieHandler34);
        org.junit.Assert.assertNull(okResponseCache35);
        org.junit.Assert.assertNull(cookieHandler36);
        org.junit.Assert.assertNotNull(proxy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type41.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(okAuthenticator64);
        org.junit.Assert.assertNull(responseCache69);
        org.junit.Assert.assertNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(proxy71);
        org.junit.Assert.assertNull(socketAddress72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(okAuthenticator95);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNotNull(okHttpClient97);
        org.junit.Assert.assertNotNull(okHttpClient98);
        org.junit.Assert.assertNull(proxySelector99);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.sslSocketFactory;
        java.lang.String[] strArray11 = sSLSocketFactory10.getDefaultCipherSuites();
        java.net.InetAddress inetAddress12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket14 = sSLSocketFactory10.createSocket(inetAddress12, 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        java.util.List<java.lang.String> strList19 = okHttpClient11.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient20.hostnameVerifier;
        java.net.Proxy proxy26 = okHttpClient20.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool29 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient20.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient20.copyWithDefaults();
        java.net.ResponseCache responseCache32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setResponseCache(responseCache32);
        java.net.CookieHandler cookieHandler34 = null;
        okHttpClient33.cookieHandler = cookieHandler34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        okHttpClient36.sslSocketFactory = sSLSocketFactory55;
        java.net.Socket socket57 = sSLSocketFactory55.createSocket();
        java.net.Socket socket58 = sSLSocketFactory55.createSocket();
        okHttpClient33.sslSocketFactory = sSLSocketFactory55;
        okHttpClient11.sslSocketFactory = sSLSocketFactory55;
        java.lang.String[] strArray61 = sSLSocketFactory55.getSupportedCipherSuites();
        java.net.InetAddress inetAddress62 = null;
        java.net.InetAddress inetAddress64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket66 = sSLSocketFactory55.createSocket(inetAddress62, (int) ' ', inetAddress64, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(proxy26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(socket57);
        org.junit.Assert.assertEquals(socket57.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket58);
        org.junit.Assert.assertEquals(socket58.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient5.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ProxySelector proxySelector10 = okHttpClient7.proxySelector;
        java.net.Proxy proxy11 = okHttpClient7.proxy;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        boolean boolean13 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient7.setProxy(proxy19);
        okHttpClient5.proxy = proxy19;
        java.net.ProxySelector proxySelector25 = okHttpClient5.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        java.net.Proxy proxy34 = null;
        okHttpClient26.proxy = proxy34;
        boolean boolean36 = okHttpClient26.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = okHttpClient37.hostnameVerifier;
        java.net.Proxy proxy40 = java.net.Proxy.NO_PROXY;
        boolean boolean42 = proxy40.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type43 = proxy40.type();
        java.net.Proxy.Type type44 = proxy40.type();
        okHttpClient37.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient5.setProxy(proxy40);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient46.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient46.setFollowProtocolRedirects(true);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient6);
        org.junit.Assert.assertNull(proxySelector10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient23);
// flaky:         org.junit.Assert.assertNull(proxySelector25);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNull(hostnameVerifier39);
        org.junit.Assert.assertNotNull(proxy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type43.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type44.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient49);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.setCookieHandler(cookieHandler19);
        java.util.Set<com.squareup.okhttp.Route> routeSet21 = okHttpClient20.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient22.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.copyWithDefaults();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setResponseCache(responseCache34);
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setProxySelector(proxySelector36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient37.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient40.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.copyWithDefaults();
        java.net.ResponseCache responseCache52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setResponseCache(responseCache52);
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = okHttpClient53.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient53.copyWithDefaults();
        java.util.List<java.lang.String> strList56 = okHttpClient53.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        java.util.List<java.lang.String> strList62 = okHttpClient57.transports;
        java.net.Proxy proxy63 = java.net.Proxy.NO_PROXY;
        boolean boolean65 = proxy63.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type66 = proxy63.type();
        java.net.SocketAddress socketAddress67 = proxy63.address();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.setProxy(proxy63);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient69.setProxySelector(proxySelector72);
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = okHttpClient69.hostnameVerifier;
        java.net.CookieHandler cookieHandler75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient69.setCookieHandler(cookieHandler75);
        java.net.ResponseCache responseCache77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient76.setResponseCache(responseCache77);
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = null;
        okHttpClient79.hostnameVerifier = hostnameVerifier80;
        java.net.ResponseCache responseCache82 = null;
        okHttpClient79.responseCache = responseCache82;
        java.util.List<java.lang.String> strList84 = okHttpClient79.transports;
        com.squareup.okhttp.ConnectionPool connectionPool85 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient79.connectionPool = connectionPool85;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient79.copyWithDefaults();
        java.net.ProxySelector proxySelector88 = okHttpClient87.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory89 = okHttpClient87.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient76.setSSLSocketFactory(sSLSocketFactory89);
        boolean boolean91 = proxy63.equals((java.lang.Object) sSLSocketFactory89);
        java.lang.String[] strArray92 = sSLSocketFactory89.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient53.setSSLSocketFactory(sSLSocketFactory89);
        okHttpClient20.sslSocketFactory = sSLSocketFactory89;
        java.lang.String[] strArray95 = sSLSocketFactory89.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket98 = sSLSocketFactory89.createSocket("hi!", (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(routeSet21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(hostnameVerifier54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(proxy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type66.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(hostnameVerifier74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNotNull(connectionPool85);
        org.junit.Assert.assertNotNull(okHttpClient87);
// flaky:         org.junit.Assert.assertNull(proxySelector88);
        org.junit.Assert.assertNotNull(sSLSocketFactory89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient9.okResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient9.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache15 = okHttpClient14.okResponseCache();
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setResponseCache(responseCache16);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient14.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient14.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        boolean boolean23 = okHttpClient20.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler24 = okHttpClient20.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        okHttpClient20.authenticator = okAuthenticator39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient14.setAuthenticator(okAuthenticator39);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient9.setAuthenticator(okAuthenticator39);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ProxySelector proxySelector46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.setProxySelector(proxySelector46);
        java.net.CookieHandler cookieHandler48 = okHttpClient43.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        java.net.Proxy proxy57 = null;
        okHttpClient49.proxy = proxy57;
        java.util.Set<com.squareup.okhttp.Route> routeSet59 = okHttpClient49.failedRoutes;
        okHttpClient43.failedRoutes = routeSet59;
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient43.setHostnameVerifier(hostnameVerifier61);
        java.net.ProxySelector proxySelector63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.setProxySelector(proxySelector63);
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient62.connectionPool = connectionPool67;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient62.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient69.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient9.setSSLSocketFactory(sSLSocketFactory70);
        java.net.InetAddress inetAddress74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket76 = sSLSocketFactory70.createSocket("DIRECT", (int) (byte) 10, inetAddress74, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okResponseCache12);
        org.junit.Assert.assertNull(connectionPool13);
        org.junit.Assert.assertNull(okResponseCache15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(routeSet59);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertNotNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(okHttpClient71);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector12 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient14.setConnectionPool(connectionPool23);
        java.net.Proxy proxy26 = okHttpClient25.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        okHttpClient25.sslSocketFactory = sSLSocketFactory27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient29.connectionPool;
        int int38 = connectionPool37.getHttpConnectionCount();
        com.squareup.okhttp.Address address39 = null;
        com.squareup.okhttp.Connection connection40 = connectionPool37.get(address39);
        okHttpClient25.connectionPool = connectionPool37;
        java.net.ProxySelector proxySelector42 = okHttpClient25.proxySelector;
        java.net.Proxy proxy43 = java.net.Proxy.NO_PROXY;
        boolean boolean45 = proxy43.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache47 = okHttpClient46.okResponseCache();
        java.net.ResponseCache responseCache48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient46.setResponseCache(responseCache48);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        okHttpClient46.transports = strList52;
        boolean boolean55 = proxy43.equals((java.lang.Object) strList52);
        okHttpClient25.proxy = proxy43;
        java.lang.String str57 = proxy43.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient0.setProxy(proxy43);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler60 = okHttpClient59.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient(okHttpClient59);
        java.lang.Class<?> wildcardClass62 = okHttpClient59.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(proxy26);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(connection40);
        org.junit.Assert.assertNull(proxySelector42);
        org.junit.Assert.assertNotNull(proxy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(okResponseCache47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DIRECT" + "'", str57, "DIRECT");
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNull(cookieHandler60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ProxySelector proxySelector30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.setProxySelector(proxySelector30);
        java.net.ResponseCache responseCache32 = null;
        okHttpClient31.responseCache = responseCache32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.CookieHandler cookieHandler42 = okHttpClient34.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache43 = okHttpClient34.okResponseCache();
        java.net.CookieHandler cookieHandler44 = okHttpClient34.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        java.net.Proxy proxy46 = java.net.Proxy.NO_PROXY;
        boolean boolean48 = proxy46.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type49 = proxy46.type();
        java.net.SocketAddress socketAddress50 = proxy46.address();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient34.setProxy(proxy46);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient52.copyWithDefaults();
        java.net.ProxySelector proxySelector61 = okHttpClient60.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory62 = okHttpClient60.getSslSocketFactory();
        okHttpClient51.sslSocketFactory = sSLSocketFactory62;
        java.lang.String[] strArray64 = sSLSocketFactory62.getDefaultCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory62.getSupportedCipherSuites();
        java.net.Socket socket66 = sSLSocketFactory62.createSocket();
        okHttpClient31.sslSocketFactory = sSLSocketFactory62;
        okHttpClient11.sslSocketFactory = sSLSocketFactory62;
        java.net.InetAddress inetAddress69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket71 = sSLSocketFactory62.createSocket(inetAddress69, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNull(cookieHandler42);
        org.junit.Assert.assertNull(okResponseCache43);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNotNull(proxy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type49.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
// flaky:         org.junit.Assert.assertNull(proxySelector61);
        org.junit.Assert.assertNotNull(sSLSocketFactory62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = okHttpClient30.hostnameVerifier;
        java.net.Proxy proxy36 = okHttpClient30.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool39 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient30.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.copyWithDefaults();
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.setResponseCache(responseCache42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient44.connectionPool = connectionPool45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        java.net.Proxy proxy49 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress50 = proxy49.address();
        java.net.SocketAddress socketAddress51 = proxy49.address();
        okHttpClient44.proxy = proxy49;
        com.squareup.okhttp.ConnectionPool connectionPool55 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address56 = null;
        com.squareup.okhttp.Connection connection57 = connectionPool55.get(address56);
        int int58 = connectionPool55.getSpdyConnectionCount();
        connectionPool55.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient44.setConnectionPool(connectionPool55);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ProxySelector proxySelector64 = okHttpClient61.proxySelector;
        java.net.ProxySelector proxySelector65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient61.setProxySelector(proxySelector65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        okHttpClient67.hostnameVerifier = hostnameVerifier68;
        java.net.ResponseCache responseCache70 = null;
        okHttpClient67.responseCache = responseCache70;
        java.util.List<java.lang.String> strList72 = okHttpClient67.transports;
        com.squareup.okhttp.ConnectionPool connectionPool73 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient67.connectionPool = connectionPool73;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient67.copyWithDefaults();
        java.net.ProxySelector proxySelector76 = okHttpClient75.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory77 = okHttpClient75.getSslSocketFactory();
        okHttpClient61.sslSocketFactory = sSLSocketFactory77;
        okHttpClient44.sslSocketFactory = sSLSocketFactory77;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient43.setSSLSocketFactory(sSLSocketFactory77);
        okHttpClient24.sslSocketFactory = sSLSocketFactory77;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket84 = sSLSocketFactory77.createSocket("hi!", (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(hostnameVerifier35);
        org.junit.Assert.assertNull(proxy36);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(proxy49);
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNull(socketAddress51);
        org.junit.Assert.assertNull(connection57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertNotNull(okHttpClient75);
// flaky:         org.junit.Assert.assertNull(proxySelector76);
        org.junit.Assert.assertNotNull(sSLSocketFactory77);
        org.junit.Assert.assertNotNull(okHttpClient80);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient4.proxySelector = proxySelector9;
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setConnectionPool(connectionPool13);
        java.net.ProxySelector proxySelector15 = okHttpClient14.getProxySelector();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(proxySelector15);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        boolean boolean16 = okHttpClient15.followProtocolRedirects;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient15.getSslSocketFactory();
        java.net.InetAddress inetAddress18 = null;
        java.net.InetAddress inetAddress20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket22 = sSLSocketFactory17.createSocket(inetAddress18, (int) '#', inetAddress20, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory17);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.ConnectionPool connectionPool4 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, (long) '#');
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient1.setConnectionPool(connectionPool4);
        com.squareup.okhttp.Connection connection6 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool4.recycle(connection6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient5);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 100, 10L);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        java.net.CookieHandler cookieHandler18 = okHttpClient10.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient10.okResponseCache();
        java.net.CookieHandler cookieHandler20 = okHttpClient10.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        java.net.ResponseCache responseCache22 = okHttpClient10.responseCache;
        java.net.CookieHandler cookieHandler23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient10.setCookieHandler(cookieHandler23);
        java.net.Proxy proxy25 = java.net.Proxy.NO_PROXY;
        boolean boolean27 = proxy25.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache29 = okHttpClient28.okResponseCache();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setResponseCache(responseCache30);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        okHttpClient28.transports = strList34;
        boolean boolean37 = proxy25.equals((java.lang.Object) strList34);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList34;
        okHttpClient24.transports = strList34;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList34;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient5.setTransports((java.util.List<java.lang.String>) strList34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNull(responseCache22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(proxy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(okResponseCache29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient11.authenticator;
        java.net.ResponseCache responseCache20 = okHttpClient11.getResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient11.authenticator;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(okAuthenticator19);
        org.junit.Assert.assertNull(responseCache20);
        org.junit.Assert.assertNull(okAuthenticator21);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory6;
        java.net.ProxySelector proxySelector8 = okHttpClient0.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient9.cookieHandler = cookieHandler14;
        java.net.Proxy proxy16 = java.net.Proxy.NO_PROXY;
        boolean boolean18 = proxy16.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient19.okResponseCache();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setResponseCache(responseCache21);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        okHttpClient19.transports = strList25;
        boolean boolean28 = proxy16.equals((java.lang.Object) strList25);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient9.setProxy(proxy16);
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(0, 100L);
        int int33 = connectionPool32.getHttpConnectionCount();
        okHttpClient9.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient0.setConnectionPool(connectionPool32);
        java.net.CookieHandler cookieHandler36 = okHttpClient35.getCookieHandler();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(proxySelector8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(proxy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(cookieHandler36);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(10, (long) (byte) -1);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler13 = okHttpClient11.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.CookieHandler cookieHandler15 = okHttpClient11.cookieHandler;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient11.sslSocketFactory;
        java.net.InetAddress inetAddress19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket21 = sSLSocketFactory16.createSocket("", (int) ' ', inetAddress19, 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(cookieHandler13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', (long) (byte) 100);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = okHttpClient5.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.copyWithDefaults();
        java.net.ProxySelector proxySelector20 = okHttpClient19.proxySelector;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient19.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient19.failedRoutes;
        okHttpClient5.failedRoutes = routeSet22;
        java.lang.Class<?> wildcardClass24 = okHttpClient5.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(okHttpClient19);
// flaky:         org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(routeSet22);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(0, 0L);
        okHttpClient0.connectionPool = connectionPool14;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient19.hostnameVerifier;
        java.net.Proxy proxy25 = okHttpClient19.getProxy();
        java.net.CookieHandler cookieHandler26 = null;
        okHttpClient19.cookieHandler = cookieHandler26;
        okHttpClient19.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler30 = okHttpClient19.getCookieHandler();
        java.net.CookieHandler cookieHandler31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient19.setCookieHandler(cookieHandler31);
        java.net.ProxySelector proxySelector33 = okHttpClient32.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = okHttpClient34.hostnameVerifier;
        java.net.Proxy proxy40 = okHttpClient34.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient34.connectionPool = connectionPool43;
        java.util.List<java.lang.String> strList45 = okHttpClient34.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient34.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        java.util.List<java.lang.String> strList49 = okHttpClient34.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        com.squareup.okhttp.ConnectionPool connectionPool59 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient50.setConnectionPool(connectionPool59);
        com.squareup.okhttp.ConnectionPool connectionPool62 = okHttpClient61.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator63 = okHttpClient61.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool66 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient61.connectionPool = connectionPool66;
        java.net.ResponseCache responseCache68 = okHttpClient61.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory69 = okHttpClient61.sslSocketFactory;
        java.net.Proxy proxy70 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress71 = proxy70.address();
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.setProxy(proxy70);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient61.setSSLSocketFactory(sSLSocketFactory73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = okHttpClient75.hostnameVerifier;
        java.net.Proxy proxy81 = okHttpClient75.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool84 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient75.connectionPool = connectionPool84;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient75.copyWithDefaults();
        java.net.ResponseCache responseCache87 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient86.setResponseCache(responseCache87);
        com.squareup.okhttp.OkAuthenticator okAuthenticator89 = okHttpClient86.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient61.setAuthenticator(okAuthenticator89);
        java.net.Proxy proxy91 = okHttpClient90.getProxy();
        java.net.ResponseCache responseCache92 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient90.setResponseCache(responseCache92);
        com.squareup.okhttp.OkAuthenticator okAuthenticator94 = okHttpClient90.getAuthenticator();
        okHttpClient34.authenticator = okAuthenticator94;
        okHttpClient32.authenticator = okAuthenticator94;
        com.squareup.okhttp.OkHttpClient okHttpClient97 = okHttpClient0.setAuthenticator(okAuthenticator94);
        java.net.ResponseCache responseCache98 = okHttpClient0.responseCache;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNull(hostnameVerifier39);
        org.junit.Assert.assertNull(proxy40);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(connectionPool59);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNotNull(connectionPool62);
        org.junit.Assert.assertNull(okAuthenticator63);
        org.junit.Assert.assertNull(responseCache68);
        org.junit.Assert.assertNull(sSLSocketFactory69);
        org.junit.Assert.assertNotNull(proxy70);
        org.junit.Assert.assertNull(socketAddress71);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(hostnameVerifier80);
        org.junit.Assert.assertNull(proxy81);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okAuthenticator89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(proxy91);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okAuthenticator94);
        org.junit.Assert.assertNotNull(okHttpClient97);
        org.junit.Assert.assertNull(responseCache98);
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy8 = okHttpClient0.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = okHttpClient0.getHostnameVerifier();
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        okHttpClient0.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        java.net.Proxy proxy21 = null;
        okHttpClient13.proxy = proxy21;
        boolean boolean23 = okHttpClient13.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.Proxy proxy25 = java.net.Proxy.NO_PROXY;
        boolean boolean27 = proxy25.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type28 = proxy25.type();
        java.lang.String str29 = proxy25.toString();
        java.net.Proxy.Type type30 = proxy25.type();
        okHttpClient13.proxy = proxy25;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient32.okResponseCache();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setResponseCache(responseCache34);
        java.net.ProxySelector proxySelector36 = okHttpClient32.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient32.getAuthenticator();
        boolean boolean38 = proxy25.equals((java.lang.Object) okHttpClient32);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient0.setProxy(proxy25);
        java.net.Proxy proxy40 = okHttpClient39.getProxy();
        java.net.Proxy.Type type41 = proxy40.type();
        java.net.SocketAddress socketAddress42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy43 = new java.net.Proxy(type41, socketAddress42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertNull(hostnameVerifier9);
        org.junit.Assert.assertNotNull(routeSet10);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(proxy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type28.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DIRECT" + "'", str29, "DIRECT");
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type30.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(proxy40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type41.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.ProxySelector proxySelector41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setProxySelector(proxySelector41);
        com.squareup.okhttp.ConnectionPool connectionPool45 = new com.squareup.okhttp.ConnectionPool((int) (short) 1, (long) (byte) -1);
        int int46 = connectionPool45.getHttpConnectionCount();
        okHttpClient40.connectionPool = connectionPool45;
        java.lang.Class<?> wildcardClass48 = connectionPool45.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient0.proxySelector = proxySelector14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory49);
        java.lang.String[] strArray53 = sSLSocketFactory49.getDefaultCipherSuites();
        java.net.InetAddress inetAddress54 = null;
        java.net.InetAddress inetAddress56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket58 = sSLSocketFactory49.createSocket(inetAddress54, (int) (byte) 100, inetAddress56, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = null;
        okHttpClient7.proxy = proxy15;
        boolean boolean17 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.Proxy.Type type25 = proxy21.type();
        okHttpClient18.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory46;
        okHttpClient18.sslSocketFactory = sSLSocketFactory46;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.lang.String[] strArray50 = sSLSocketFactory46.getDefaultCipherSuites();
        java.net.InetAddress inetAddress51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket53 = sSLSocketFactory46.createSocket(inetAddress51, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 1, (long) (short) 100);
        int int3 = connectionPool2.getHttpConnectionCount();
        int int4 = connectionPool2.getHttpConnectionCount();
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.lang.String str4 = proxy0.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient5.getSslSocketFactory();
        boolean boolean9 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache15 = okHttpClient10.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory16);
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient10.setProxySelector(proxySelector18);
        boolean boolean20 = proxy0.equals((java.lang.Object) okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setProxySelector(proxySelector39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool43;
        com.squareup.okhttp.OkAuthenticator okAuthenticator45 = null;
        okHttpClient42.authenticator = okAuthenticator45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        java.net.CookieHandler cookieHandler56 = okHttpClient48.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache57 = okHttpClient48.okResponseCache();
        java.net.CookieHandler cookieHandler58 = okHttpClient48.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient(okHttpClient48);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory60 = okHttpClient59.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient59.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        java.net.CookieHandler cookieHandler70 = okHttpClient62.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache71 = okHttpClient62.okResponseCache();
        java.net.CookieHandler cookieHandler72 = okHttpClient62.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient(okHttpClient62);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        java.net.ProxySelector proxySelector77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient74.setProxySelector(proxySelector77);
        java.net.CookieHandler cookieHandler79 = okHttpClient74.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient80 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier81 = null;
        okHttpClient80.hostnameVerifier = hostnameVerifier81;
        java.net.ResponseCache responseCache83 = null;
        okHttpClient80.responseCache = responseCache83;
        java.util.List<java.lang.String> strList85 = okHttpClient80.transports;
        com.squareup.okhttp.ConnectionPool connectionPool86 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient80.connectionPool = connectionPool86;
        java.net.Proxy proxy88 = null;
        okHttpClient80.proxy = proxy88;
        java.util.Set<com.squareup.okhttp.Route> routeSet90 = okHttpClient80.failedRoutes;
        okHttpClient74.failedRoutes = routeSet90;
        okHttpClient73.failedRoutes = routeSet90;
        okHttpClient59.failedRoutes = routeSet90;
        okHttpClient42.failedRoutes = routeSet90;
        okHttpClient40.failedRoutes = routeSet90;
        boolean boolean96 = proxy0.equals((java.lang.Object) okHttpClient40);
        java.net.CookieHandler cookieHandler97 = null;
        okHttpClient40.cookieHandler = cookieHandler97;
        java.util.Set<com.squareup.okhttp.Route> routeSet99 = okHttpClient40.failedRoutes;
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNull(cookieHandler56);
        org.junit.Assert.assertNull(okResponseCache57);
        org.junit.Assert.assertNull(cookieHandler58);
        org.junit.Assert.assertNull(sSLSocketFactory60);
        org.junit.Assert.assertNull(okAuthenticator61);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNull(cookieHandler70);
        org.junit.Assert.assertNull(okResponseCache71);
        org.junit.Assert.assertNull(cookieHandler72);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNull(cookieHandler79);
        org.junit.Assert.assertNull(strList85);
        org.junit.Assert.assertNotNull(connectionPool86);
        org.junit.Assert.assertNotNull(routeSet90);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(routeSet99);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool7 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient6.setConnectionPool(connectionPool15);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setProxySelector(proxySelector21);
        java.net.CookieHandler cookieHandler23 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.Proxy proxy32 = null;
        okHttpClient24.proxy = proxy32;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient24.failedRoutes;
        okHttpClient18.failedRoutes = routeSet34;
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient18.setProxySelector(proxySelector36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.copyWithDefaults();
        java.net.Proxy proxy51 = okHttpClient50.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient50.getHostnameVerifier();
        okHttpClient18.hostnameVerifier = hostnameVerifier52;
        okHttpClient17.hostnameVerifier = hostnameVerifier52;
        okHttpClient5.hostnameVerifier = hostnameVerifier52;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache56 = okHttpClient5.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient5.sslSocketFactory;
        java.net.InetAddress inetAddress58 = null;
        java.net.InetAddress inetAddress60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket62 = sSLSocketFactory57.createSocket(inetAddress58, (int) (byte) 10, inetAddress60, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(connectionPool7);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNotNull(hostnameVerifier52);
        org.junit.Assert.assertNull(okResponseCache56);
        org.junit.Assert.assertNotNull(sSLSocketFactory57);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.CookieHandler cookieHandler22 = okHttpClient14.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache23 = okHttpClient14.okResponseCache();
        java.net.CookieHandler cookieHandler24 = okHttpClient14.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.setProxySelector(proxySelector29);
        java.net.CookieHandler cookieHandler31 = okHttpClient26.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        java.net.Proxy proxy40 = null;
        okHttpClient32.proxy = proxy40;
        java.util.Set<com.squareup.okhttp.Route> routeSet42 = okHttpClient32.failedRoutes;
        okHttpClient26.failedRoutes = routeSet42;
        okHttpClient25.failedRoutes = routeSet42;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient25);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        boolean boolean49 = okHttpClient46.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient46.setCookieHandler(cookieHandler50);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.Address address60 = null;
        com.squareup.okhttp.Connection connection61 = connectionPool58.get(address60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool58);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory63 = okHttpClient51.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory64 = okHttpClient51.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = okHttpClient65.hostnameVerifier;
        java.net.Proxy proxy71 = okHttpClient65.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool74 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient65.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient65.copyWithDefaults();
        java.net.Proxy proxy77 = okHttpClient76.getProxy();
        java.net.CookieHandler cookieHandler78 = null;
        okHttpClient76.cookieHandler = cookieHandler78;
        com.squareup.okhttp.OkAuthenticator okAuthenticator80 = okHttpClient76.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient51.setAuthenticator(okAuthenticator80);
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient45.setAuthenticator(okAuthenticator80);
        okHttpClient11.authenticator = okAuthenticator80;
        javax.net.ssl.HostnameVerifier hostnameVerifier84 = okHttpClient11.getHostnameVerifier();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(cookieHandler22);
        org.junit.Assert.assertNull(okResponseCache23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(cookieHandler31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(routeSet42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNull(connection61);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(sSLSocketFactory63);
        org.junit.Assert.assertNull(sSLSocketFactory64);
        org.junit.Assert.assertNull(hostnameVerifier70);
        org.junit.Assert.assertNull(proxy71);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNull(proxy77);
        org.junit.Assert.assertNotNull(okAuthenticator80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(okHttpClient82);
        org.junit.Assert.assertNull(hostnameVerifier84);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(10, (long) ' ');
        connectionPool2.evictAll();
        int int4 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler11 = null;
        okHttpClient0.cookieHandler = cookieHandler11;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, (long) ' ');
        int int3 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient0.connectionPool;
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(connectionPool5);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        boolean boolean27 = okHttpClient24.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler28 = okHttpClient24.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient29.hostnameVerifier;
        java.net.Proxy proxy35 = okHttpClient29.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool38 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient29.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient29.copyWithDefaults();
        java.net.ResponseCache responseCache41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setResponseCache(responseCache41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = okHttpClient40.authenticator;
        okHttpClient24.authenticator = okAuthenticator43;
        okHttpClient23.authenticator = okAuthenticator43;
        java.net.Proxy proxy46 = okHttpClient23.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (byte) 10);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient23.setConnectionPool(connectionPool49);
        java.net.CookieHandler cookieHandler51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient50.setCookieHandler(cookieHandler51);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okAuthenticator43);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okHttpClient52);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient20.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setConnectionPool(connectionPool32);
        java.net.Proxy proxy35 = okHttpClient34.proxy;
        okHttpClient34.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool39 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.setConnectionPool(connectionPool47);
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = okHttpClient49.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool54 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient49.connectionPool = connectionPool54;
        java.net.ResponseCache responseCache56 = okHttpClient49.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient49.sslSocketFactory;
        java.net.Proxy proxy58 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress59 = proxy58.address();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.setProxy(proxy58);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient49.setSSLSocketFactory(sSLSocketFactory61);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ResponseCache responseCache66 = null;
        okHttpClient63.responseCache = responseCache66;
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = okHttpClient63.hostnameVerifier;
        java.net.Proxy proxy69 = okHttpClient63.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool72 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient63.connectionPool = connectionPool72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient63.copyWithDefaults();
        java.net.ResponseCache responseCache75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient74.setResponseCache(responseCache75);
        com.squareup.okhttp.OkAuthenticator okAuthenticator77 = okHttpClient74.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient49.setAuthenticator(okAuthenticator77);
        java.net.Proxy proxy79 = okHttpClient78.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator80 = okHttpClient78.getAuthenticator();
        okHttpClient34.authenticator = okAuthenticator80;
        okHttpClient22.authenticator = okAuthenticator80;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(okAuthenticator51);
        org.junit.Assert.assertNull(responseCache56);
        org.junit.Assert.assertNull(sSLSocketFactory57);
        org.junit.Assert.assertNotNull(proxy58);
        org.junit.Assert.assertNull(socketAddress59);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(hostnameVerifier68);
        org.junit.Assert.assertNull(proxy69);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okAuthenticator77);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(proxy79);
        org.junit.Assert.assertNotNull(okAuthenticator80);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient19.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        boolean boolean37 = okHttpClient27.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient27.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache48 = okHttpClient47.okResponseCache();
        java.net.ResponseCache responseCache49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setResponseCache(responseCache49);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        okHttpClient47.transports = strList53;
        okHttpClient40.transports = strList53;
        java.net.Proxy proxy57 = okHttpClient40.getProxy();
        boolean boolean58 = okHttpClient40.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient59.setConnectionPool(connectionPool68);
        java.net.Proxy proxy71 = okHttpClient70.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool73 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient72.connectionPool = connectionPool73;
        int int75 = connectionPool73.getSpdyConnectionCount();
        okHttpClient70.connectionPool = connectionPool73;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = null;
        okHttpClient77.hostnameVerifier = hostnameVerifier78;
        java.net.ResponseCache responseCache80 = null;
        okHttpClient77.responseCache = responseCache80;
        javax.net.ssl.HostnameVerifier hostnameVerifier82 = okHttpClient77.hostnameVerifier;
        java.net.Proxy proxy83 = okHttpClient77.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool86 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient77.connectionPool = connectionPool86;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient77.copyWithDefaults();
        java.net.ResponseCache responseCache89 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient88.setResponseCache(responseCache89);
        com.squareup.okhttp.OkAuthenticator okAuthenticator91 = okHttpClient88.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient70.setAuthenticator(okAuthenticator91);
        okHttpClient40.authenticator = okAuthenticator91;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient39.setAuthenticator(okAuthenticator91);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient19.setAuthenticator(okAuthenticator91);
        java.lang.Class<?> wildcardClass96 = okHttpClient95.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNull(okResponseCache48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(proxy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(proxy71);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(hostnameVerifier82);
        org.junit.Assert.assertNull(proxy83);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator91);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) 10);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient40.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.setConnectionPool(connectionPool52);
        java.net.Proxy proxy55 = okHttpClient54.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool57;
        int int59 = connectionPool57.getSpdyConnectionCount();
        okHttpClient54.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setResponseCache(responseCache73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient72.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient54.setAuthenticator(okAuthenticator75);
        okHttpClient40.authenticator = okAuthenticator75;
        java.net.ResponseCache responseCache78 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient40.setResponseCache(responseCache78);
        java.util.List<java.lang.String> strList80 = okHttpClient40.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache81 = okHttpClient40.okResponseCache();
        java.lang.Class<?> wildcardClass82 = okHttpClient40.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNotNull(okAuthenticator42);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okAuthenticator75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNull(okResponseCache81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory20;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setCookieHandler(cookieHandler24);
        java.lang.Class<?> wildcardClass26 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setResponseCache(responseCache10);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setFollowProtocolRedirects(false);
        java.net.ResponseCache responseCache14 = okHttpClient11.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.Proxy proxy23 = null;
        okHttpClient15.proxy = proxy23;
        boolean boolean25 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.copyWithDefaults();
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setCookieHandler(cookieHandler27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient29.hostnameVerifier;
        java.net.Proxy proxy35 = okHttpClient29.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool38 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient29.connectionPool = connectionPool38;
        boolean boolean40 = okHttpClient29.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient41.hostnameVerifier;
        java.net.Proxy proxy47 = okHttpClient41.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool50 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient41.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient41.copyWithDefaults();
        java.net.Proxy proxy53 = okHttpClient52.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = okHttpClient52.getHostnameVerifier();
        okHttpClient29.hostnameVerifier = hostnameVerifier54;
        okHttpClient26.hostnameVerifier = hostnameVerifier54;
        java.util.List<java.lang.String> strList57 = okHttpClient26.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList57;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient11.setTransports(strList57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(hostnameVerifier46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(proxy53);
        org.junit.Assert.assertNotNull(hostnameVerifier54);
        org.junit.Assert.assertNotNull(strList57);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        java.net.CookieHandler cookieHandler12 = null;
        okHttpClient11.cookieHandler = cookieHandler12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient11.getSslSocketFactory();
        java.net.InetAddress inetAddress15 = null;
        java.net.InetAddress inetAddress17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket19 = sSLSocketFactory14.createSocket(inetAddress15, (-1), inetAddress17, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(sSLSocketFactory14);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.authenticator;
        java.net.ProxySelector proxySelector9 = okHttpClient7.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        okHttpClient10.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket31 = sSLSocketFactory29.createSocket();
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        okHttpClient7.sslSocketFactory = sSLSocketFactory29;
        java.net.InetAddress inetAddress34 = null;
        java.net.InetAddress inetAddress36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket38 = sSLSocketFactory29.createSocket(inetAddress34, 10, inetAddress36, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(socket31);
        org.junit.Assert.assertEquals(socket31.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient12.sslSocketFactory;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket16 = sSLSocketFactory13.createSocket("DIRECT", (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(sSLSocketFactory13);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient15.cookieHandler = cookieHandler16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient15.getHostnameVerifier();
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setResponseCache(responseCache19);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setConnectionPool(connectionPool22);
        java.net.Proxy proxy24 = okHttpClient23.getProxy();
        java.net.Proxy proxy25 = okHttpClient23.getProxy();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNull(proxy25);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient22.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient23.copyWithDefaults();
        java.util.Set<com.squareup.okhttp.Route> routeSet25 = okHttpClient24.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy32 = okHttpClient26.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient26.connectionPool = connectionPool35;
        java.util.List<java.lang.String> strList37 = okHttpClient26.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient26.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        java.util.List<java.lang.String> strList41 = okHttpClient26.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.setConnectionPool(connectionPool51);
        com.squareup.okhttp.ConnectionPool connectionPool54 = okHttpClient53.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator55 = okHttpClient53.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool58 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient53.connectionPool = connectionPool58;
        java.net.ResponseCache responseCache60 = okHttpClient53.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient53.sslSocketFactory;
        java.net.Proxy proxy62 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress63 = proxy62.address();
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient53.setProxy(proxy62);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient53.setSSLSocketFactory(sSLSocketFactory65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        okHttpClient67.hostnameVerifier = hostnameVerifier68;
        java.net.ResponseCache responseCache70 = null;
        okHttpClient67.responseCache = responseCache70;
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = okHttpClient67.hostnameVerifier;
        java.net.Proxy proxy73 = okHttpClient67.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool76 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient67.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient67.copyWithDefaults();
        java.net.ResponseCache responseCache79 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient78.setResponseCache(responseCache79);
        com.squareup.okhttp.OkAuthenticator okAuthenticator81 = okHttpClient78.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient53.setAuthenticator(okAuthenticator81);
        java.net.Proxy proxy83 = okHttpClient82.getProxy();
        java.net.ResponseCache responseCache84 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient82.setResponseCache(responseCache84);
        com.squareup.okhttp.OkAuthenticator okAuthenticator86 = okHttpClient82.getAuthenticator();
        okHttpClient26.authenticator = okAuthenticator86;
        okHttpClient24.authenticator = okAuthenticator86;
        okHttpClient11.authenticator = okAuthenticator86;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(routeSet25);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(proxy32);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNull(okAuthenticator55);
        org.junit.Assert.assertNull(responseCache60);
        org.junit.Assert.assertNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(proxy62);
        org.junit.Assert.assertNull(socketAddress63);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(hostnameVerifier72);
        org.junit.Assert.assertNull(proxy73);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNotNull(okAuthenticator81);
        org.junit.Assert.assertNotNull(okHttpClient82);
        org.junit.Assert.assertNotNull(proxy83);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNotNull(okAuthenticator86);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        java.net.ProxySelector proxySelector14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setProxySelector(proxySelector14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        okHttpClient11.sslSocketFactory = sSLSocketFactory49;
        java.lang.String[] strArray53 = sSLSocketFactory49.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket56 = sSLSocketFactory49.createSocket("", (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient18.sslSocketFactory;
        java.lang.String[] strArray21 = sSLSocketFactory20.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setConnectionPool(connectionPool32);
        com.squareup.okhttp.ConnectionPool connectionPool35 = okHttpClient34.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator36 = okHttpClient34.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool39 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient34.connectionPool = connectionPool39;
        java.net.ResponseCache responseCache41 = okHttpClient34.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient34.sslSocketFactory;
        java.net.Proxy proxy43 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress44 = proxy43.address();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient34.setProxy(proxy43);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient(okHttpClient45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = null;
        okHttpClient47.sslSocketFactory = sSLSocketFactory48;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient47.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList52 = okHttpClient51.transports;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient22.setTransports(strList52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNull(okAuthenticator36);
        org.junit.Assert.assertNull(responseCache41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNotNull(proxy43);
        org.junit.Assert.assertNull(socketAddress44);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(strList52);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient11.authenticator;
        java.net.ResponseCache responseCache20 = okHttpClient11.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.Address address22 = null;
        com.squareup.okhttp.Connection connection23 = connectionPool21.get(address22);
        int int24 = connectionPool21.getConnectionCount();
        com.squareup.okhttp.Connection connection25 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool21.maybeShare(connection25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(okAuthenticator19);
        org.junit.Assert.assertNull(responseCache20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(connection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 100, (long) 1);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient31.hostnameVerifier;
        okHttpClient17.hostnameVerifier = hostnameVerifier32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient17.copyWithDefaults();
        java.net.ResponseCache responseCache35 = null;
        okHttpClient34.responseCache = responseCache35;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(okAuthenticator15);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        org.junit.Assert.assertNotNull(okHttpClient34);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler16 = okHttpClient15.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = okHttpClient17.getSslSocketFactory();
        java.net.CookieHandler cookieHandler26 = okHttpClient17.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.setConnectionPool(connectionPool27);
        java.net.ProxySelector proxySelector29 = null;
        okHttpClient17.proxySelector = proxySelector29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient31.hostnameVerifier;
        java.net.Proxy proxy37 = okHttpClient31.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient31.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient31.copyWithDefaults();
        java.net.ResponseCache responseCache43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setResponseCache(responseCache43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress51 = proxy50.address();
        java.net.SocketAddress socketAddress52 = proxy50.address();
        okHttpClient45.proxy = proxy50;
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address57 = null;
        com.squareup.okhttp.Connection connection58 = connectionPool56.get(address57);
        int int59 = connectionPool56.getSpdyConnectionCount();
        connectionPool56.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient45.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ProxySelector proxySelector65 = okHttpClient62.proxySelector;
        java.net.ProxySelector proxySelector66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient62.setProxySelector(proxySelector66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        java.util.List<java.lang.String> strList73 = okHttpClient68.transports;
        com.squareup.okhttp.ConnectionPool connectionPool74 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient68.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient68.copyWithDefaults();
        java.net.ProxySelector proxySelector77 = okHttpClient76.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = okHttpClient76.getSslSocketFactory();
        okHttpClient62.sslSocketFactory = sSLSocketFactory78;
        okHttpClient45.sslSocketFactory = sSLSocketFactory78;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient44.setSSLSocketFactory(sSLSocketFactory78);
        java.net.Socket socket82 = sSLSocketFactory78.createSocket();
        okHttpClient17.sslSocketFactory = sSLSocketFactory78;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient15.setSSLSocketFactory(sSLSocketFactory78);
        java.net.InetAddress inetAddress87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket89 = sSLSocketFactory78.createSocket("hi!", (int) (short) 100, inetAddress87, 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(cookieHandler16);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNull(sSLSocketFactory25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(hostnameVerifier36);
        org.junit.Assert.assertNull(proxy37);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertNull(socketAddress51);
        org.junit.Assert.assertNull(socketAddress52);
        org.junit.Assert.assertNull(connection58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(proxySelector65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient76);
// flaky:         org.junit.Assert.assertNull(proxySelector77);
        org.junit.Assert.assertNotNull(sSLSocketFactory78);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(socket82);
        org.junit.Assert.assertEquals(socket82.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient84);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        java.net.ProxySelector proxySelector14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setProxySelector(proxySelector14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        boolean boolean19 = okHttpClient16.getFollowProtocolRedirects();
        java.net.Proxy proxy20 = okHttpClient16.proxy;
        java.util.Set<com.squareup.okhttp.Route> routeSet21 = okHttpClient16.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient16);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setConnectionPool(connectionPool32);
        java.net.ResponseCache responseCache35 = okHttpClient23.responseCache;
        java.net.ResponseCache responseCache36 = okHttpClient23.getResponseCache();
        java.net.ResponseCache responseCache37 = okHttpClient23.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache39 = okHttpClient38.okResponseCache();
        java.net.ResponseCache responseCache40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setResponseCache(responseCache40);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient38.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient38.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        boolean boolean47 = okHttpClient44.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler48 = okHttpClient44.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = okHttpClient49.hostnameVerifier;
        java.net.Proxy proxy55 = okHttpClient49.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool58 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient49.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.copyWithDefaults();
        java.net.ResponseCache responseCache61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient60.setResponseCache(responseCache61);
        com.squareup.okhttp.OkAuthenticator okAuthenticator63 = okHttpClient60.authenticator;
        okHttpClient44.authenticator = okAuthenticator63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient38.setAuthenticator(okAuthenticator63);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient23.setAuthenticator(okAuthenticator63);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient22.setAuthenticator(okAuthenticator63);
        okHttpClient11.authenticator = okAuthenticator63;
        java.net.Proxy proxy69 = okHttpClient11.proxy;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNotNull(routeSet21);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(responseCache35);
        org.junit.Assert.assertNull(responseCache36);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(okResponseCache39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNull(hostnameVerifier54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okAuthenticator63);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(proxy69);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        java.net.CookieHandler cookieHandler18 = null;
        okHttpClient0.cookieHandler = cookieHandler18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient32.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient32.connectionPool = connectionPool37;
        java.net.ResponseCache responseCache39 = okHttpClient32.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = okHttpClient32.sslSocketFactory;
        java.net.Proxy proxy41 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress42 = proxy41.address();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setProxy(proxy41);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient(okHttpClient43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient43.setSSLSocketFactory(sSLSocketFactory55);
        java.lang.String[] strArray57 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray58 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray59 = sSLSocketFactory55.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory55);
        java.net.InetAddress inetAddress61 = null;
        java.net.InetAddress inetAddress63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket65 = sSLSocketFactory55.createSocket(inetAddress61, (int) (byte) -1, inetAddress63, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(okAuthenticator34);
        org.junit.Assert.assertNull(responseCache39);
        org.junit.Assert.assertNull(sSLSocketFactory40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(okHttpClient60);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        boolean boolean27 = okHttpClient24.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler28 = okHttpClient24.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient29.hostnameVerifier;
        java.net.Proxy proxy35 = okHttpClient29.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool38 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient29.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient29.copyWithDefaults();
        java.net.ResponseCache responseCache41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setResponseCache(responseCache41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = okHttpClient40.authenticator;
        okHttpClient24.authenticator = okAuthenticator43;
        okHttpClient23.authenticator = okAuthenticator43;
        okHttpClient23.followProtocolRedirects = true;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = okHttpClient23.getSslSocketFactory();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okAuthenticator43);
        org.junit.Assert.assertNull(sSLSocketFactory48);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ProxySelector proxySelector26 = okHttpClient23.proxySelector;
        java.net.Proxy proxy27 = okHttpClient23.proxy;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        boolean boolean29 = okHttpClient23.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient30.connectionPool = connectionPool31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        java.net.Proxy proxy35 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress36 = proxy35.address();
        java.net.SocketAddress socketAddress37 = proxy35.address();
        okHttpClient30.proxy = proxy35;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient23.setProxy(proxy35);
        com.squareup.okhttp.ConnectionPool connectionPool40 = okHttpClient23.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient41.hostnameVerifier;
        java.net.Proxy proxy47 = okHttpClient41.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool50 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient41.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient41.copyWithDefaults();
        java.net.Proxy proxy53 = okHttpClient52.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = okHttpClient54.hostnameVerifier;
        java.net.Proxy proxy60 = okHttpClient54.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient54.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient54.copyWithDefaults();
        java.net.ResponseCache responseCache66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient65.setResponseCache(responseCache66);
        okHttpClient67.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList70 = okHttpClient67.getTransports();
        okHttpClient52.transports = strList70;
        okHttpClient23.transports = strList70;
        okHttpClient22.transports = strList70;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory74 = okHttpClient22.sslSocketFactory;
        boolean boolean75 = okHttpClient22.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = okHttpClient22.hostnameVerifier;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(proxy35);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNull(socketAddress37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(connectionPool40);
        org.junit.Assert.assertNull(hostnameVerifier46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(proxy53);
        org.junit.Assert.assertNull(hostnameVerifier59);
        org.junit.Assert.assertNull(proxy60);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNull(sSLSocketFactory74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(hostnameVerifier76);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        java.net.CookieHandler cookieHandler17 = okHttpClient9.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache18 = okHttpClient9.okResponseCache();
        java.net.CookieHandler cookieHandler19 = okHttpClient9.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        okHttpClient20.failedRoutes = routeSet37;
        okHttpClient0.failedRoutes = routeSet37;
        boolean boolean41 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy42 = okHttpClient0.getProxy();
        java.util.List<java.lang.String> strList43 = okHttpClient0.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache44 = okHttpClient0.okResponseCache();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(okResponseCache18);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(proxy42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(okResponseCache44);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 100, (long) '4');
        okHttpClient22.connectionPool = connectionPool25;
        com.squareup.okhttp.Connection connection27 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool25.maybeShare(connection27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        okHttpClient14.authenticator = okAuthenticator17;
        java.net.CookieHandler cookieHandler19 = null;
        okHttpClient14.cookieHandler = cookieHandler19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient24.okResponseCache();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setResponseCache(responseCache26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        okHttpClient24.transports = strList30;
        boolean boolean33 = proxy21.equals((java.lang.Object) strList30);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient14.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setProxySelector(proxySelector38);
        java.net.CookieHandler cookieHandler40 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient41.failedRoutes;
        okHttpClient35.failedRoutes = routeSet51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient35.setHostnameVerifier(hostnameVerifier53);
        boolean boolean55 = proxy21.equals((java.lang.Object) okHttpClient54);
        okHttpClient0.proxy = proxy21;
        java.net.Proxy proxy57 = java.net.Proxy.NO_PROXY;
        boolean boolean59 = proxy57.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type60 = proxy57.type();
        java.lang.String str61 = proxy57.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient62.getSslSocketFactory();
        boolean boolean66 = proxy57.equals((java.lang.Object) okHttpClient62);
        java.lang.String str67 = proxy57.toString();
        java.net.Proxy.Type type68 = proxy57.type();
        okHttpClient0.proxy = proxy57;
        java.lang.String str70 = proxy57.toString();
        java.net.Proxy.Type type71 = proxy57.type();
        java.net.SocketAddress socketAddress72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy73 = new java.net.Proxy(type71, socketAddress72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(routeSet51);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type60.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DIRECT" + "'", str61, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DIRECT" + "'", str67, "DIRECT");
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type68.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DIRECT" + "'", str70, "DIRECT");
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type71.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.lang.String str16 = proxy12.toString();
        java.net.Proxy.Type type17 = proxy12.type();
        okHttpClient0.proxy = proxy12;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient19.okResponseCache();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setResponseCache(responseCache21);
        java.net.ProxySelector proxySelector23 = okHttpClient19.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient19.getAuthenticator();
        boolean boolean25 = proxy12.equals((java.lang.Object) okHttpClient19);
        java.net.SocketAddress socketAddress26 = proxy12.address();
        java.net.Proxy.Type type27 = proxy12.type();
        java.net.SocketAddress socketAddress28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy29 = new java.net.Proxy(type27, socketAddress28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DIRECT" + "'", str16, "DIRECT");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(proxySelector23);
        org.junit.Assert.assertNull(okAuthenticator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(socketAddress26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type27.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient10.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient10.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient10.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = null;
        okHttpClient19.authenticator = okAuthenticator22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient19.responseCache = responseCache25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient19.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient10.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ProxySelector proxySelector47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.setProxySelector(proxySelector47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient48.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray50 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet51 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet51, routeArray50);
        okHttpClient49.failedRoutes = routeSet51;
        okHttpClient0.failedRoutes = routeSet51;
        java.util.List<java.lang.String> strList55 = okHttpClient0.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = okHttpClient57.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory63 = okHttpClient57.sslSocketFactory;
        java.net.CookieHandler cookieHandler64 = okHttpClient57.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient57.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool67 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient66.connectionPool = connectionPool67;
        com.squareup.okhttp.OkAuthenticator okAuthenticator69 = null;
        okHttpClient66.authenticator = okAuthenticator69;
        java.util.List<java.lang.String> strList71 = okHttpClient66.transports;
        java.net.ResponseCache responseCache72 = null;
        okHttpClient66.responseCache = responseCache72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        java.net.ResponseCache responseCache77 = null;
        okHttpClient74.responseCache = responseCache77;
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = okHttpClient74.hostnameVerifier;
        java.net.Proxy proxy80 = okHttpClient74.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool83 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient74.connectionPool = connectionPool83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient74.copyWithDefaults();
        java.net.Proxy proxy86 = okHttpClient85.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier87 = okHttpClient85.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient66.setHostnameVerifier(hostnameVerifier87);
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient57.setHostnameVerifier(hostnameVerifier87);
        java.net.Proxy proxy90 = okHttpClient89.proxy;
        java.util.Set<com.squareup.okhttp.Route> routeSet91 = okHttpClient89.failedRoutes;
        okHttpClient56.failedRoutes = routeSet91;
        java.net.ResponseCache responseCache93 = null;
        okHttpClient56.responseCache = responseCache93;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(routeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(hostnameVerifier62);
        org.junit.Assert.assertNull(sSLSocketFactory63);
        org.junit.Assert.assertNull(cookieHandler64);
        org.junit.Assert.assertNull(hostnameVerifier65);
        org.junit.Assert.assertNotNull(connectionPool67);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(hostnameVerifier79);
        org.junit.Assert.assertNull(proxy80);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNull(proxy86);
        org.junit.Assert.assertNotNull(hostnameVerifier87);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNull(proxy90);
        org.junit.Assert.assertNotNull(routeSet91);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient11.connectionPool;
        java.net.ProxySelector proxySelector15 = okHttpClient11.getProxySelector();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNull(connectionPool14);
        org.junit.Assert.assertNull(proxySelector15);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getDefaultCipherSuites();
        java.net.Socket socket65 = sSLSocketFactory61.createSocket();
        java.net.InetAddress inetAddress66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket68 = sSLSocketFactory61.createSocket(inetAddress66, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getDefaultCipherSuites();
        java.net.InetAddress inetAddress38 = null;
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory34.createSocket(inetAddress38, (int) ' ', inetAddress40, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        java.util.List<java.lang.String> strList19 = okHttpClient11.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setResponseCache(responseCache21);
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient20.getAuthenticator();
        java.net.CookieHandler cookieHandler24 = okHttpClient20.getCookieHandler();
        java.net.Proxy proxy25 = okHttpClient20.getProxy();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okAuthenticator23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(proxy25);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient13.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket37 = sSLSocketFactory35.createSocket();
        java.net.Socket socket38 = sSLSocketFactory35.createSocket();
        okHttpClient13.sslSocketFactory = sSLSocketFactory35;
        com.squareup.okhttp.OkAuthenticator okAuthenticator40 = okHttpClient13.authenticator;
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection42 = okHttpClient13.open(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okAuthenticator40);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setConnectionPool(connectionPool27);
        java.net.CookieHandler cookieHandler29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setCookieHandler(cookieHandler29);
        java.net.ResponseCache responseCache31 = okHttpClient30.responseCache;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.setProxy(proxy32);
        java.util.List<java.lang.String> strList35 = okHttpClient34.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache36 = okHttpClient34.okResponseCache();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(responseCache31);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(okResponseCache36);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient5.sslSocketFactory = sSLSocketFactory6;
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setResponseCache(responseCache8);
        java.net.ProxySelector proxySelector10 = okHttpClient9.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.CookieHandler cookieHandler19 = okHttpClient11.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient11.okResponseCache();
        java.net.CookieHandler cookieHandler21 = okHttpClient11.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.Proxy proxy23 = java.net.Proxy.NO_PROXY;
        boolean boolean25 = proxy23.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type26 = proxy23.type();
        java.net.SocketAddress socketAddress27 = proxy23.address();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient28.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory34);
        boolean boolean36 = proxy23.equals((java.lang.Object) okHttpClient28);
        java.net.SocketAddress socketAddress37 = proxy23.address();
        okHttpClient22.proxy = proxy23;
        okHttpClient9.proxy = proxy23;
        java.lang.Class<?> wildcardClass40 = okHttpClient9.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(proxySelector10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(proxy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type26.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress27);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(socketAddress37);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        int int27 = connectionPool25.getConnectionCount();
        com.squareup.okhttp.Connection connection28 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool25.maybeShare(connection28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        int int3 = connectionPool2.getSpdyConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient22.connectionPool;
        java.net.ResponseCache responseCache24 = okHttpClient22.responseCache;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient22.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient22.copyWithDefaults();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNull(responseCache24);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNotNull(okHttpClient26);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        okHttpClient0.followProtocolRedirects = false;
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory22);
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient0.getHostnameVerifier();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNull(okAuthenticator20);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(hostnameVerifier24);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setCookieHandler(cookieHandler18);
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection21 = okHttpClient19.open(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
    }
}
