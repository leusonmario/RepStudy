/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 31 00:09:59 GMT 2021
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.internal.http.HttpEngine;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.file.Path;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import sun.net.spi.DefaultProxySelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      okHttpClient0.transports = (List<String>) linkedList0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertTrue(okHttpClient0.transports.isEmpty());
      assertEquals(0, okHttpClient0.transports.size());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(okHttpClient0.transports);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient4 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient5 = okHttpClient1.setAuthenticator(okHttpClient3.authenticator);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient6 = okHttpClient1.setAuthenticator(okHttpClient3.authenticator);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      
      CookieHandler cookieHandler0 = okHttpClient2.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient8 = okHttpClient7.setCookieHandler(okHttpClient0.cookieHandler);
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient9 = okHttpClient1.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient10 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      
      OkHttpClient okHttpClient11 = okHttpClient10.copyWithDefaults();
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      String string0 = "7(tUy9PX^Q!EuLK4H";
      int int0 = (-1);
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      
      URL uRL1 = MockURL.getFileExample();
      assertNotNull(uRL1);
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      String string0 = "https";
      int int0 = 1355;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals(1355, uRL0.getPort());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https:1355", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals(1355, uRL0.getPort());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https:1355", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)17;
      byteArray0[2] = byte0;
      byteArray0[3] = byteArray0[2];
      String string0 = "Too many redirects: ";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, byteArray0[3]);
      assertNotNull(httpResponseCache0);
      assertEquals(4, byteArray0.length);
      assertEquals("Too many redirects: ", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/Too many redirects: ", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/Too many redirects: /Too many redirects: ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)17, (byte)17}, byteArray0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient1);
      assertEquals(4, byteArray0.length);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("Too many redirects: ", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/Too many redirects: ", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/Too many redirects: /Too many redirects: ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      
      String string1 = "htte";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string1, string0, (int) byteArray0[2], string1, uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals(4, byteArray0.length);
      assertEquals("[Too many redirects: ]:17", uRL0.getAuthority());
      assertEquals("htte", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals(17, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("htte", uRL0.getPath());
      assertEquals("htte", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("[Too many redirects: ]", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: htte
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      String string0 = "httNs";
      String string1 = "nm";
      int int0 = 1;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string0, uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("httNs", uRL0.getPath());
      assertEquals("httNs", uRL0.getFile());
      assertEquals("nm:1", uRL0.getAuthority());
      assertEquals("nm", uRL0.getHost());
      assertEquals("httns", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: httns
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(okHttpClient1.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.DEFAULT_TRANSPORTS);
      assertNotNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient1.connectionPool);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(okHttpClient0.followProtocolRedirects);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = null;
      OkHttpClient okHttpClient1 = null;
      try {
        okHttpClient1 = new OkHttpClient(okHttpClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      OkAuthenticator okAuthenticator0 = okHttpClient1.getAuthenticator();
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient4 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient5 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient6 = okHttpClient2.setCookieHandler(cookieManager0);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      
      List<String> list0 = okHttpClient3.getTransports();
      assertNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      okHttpClient0.transports = okHttpClient1.transports;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient1.responseCache);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient1.getSslSocketFactory();
      assertNull(sSLSocketFactory1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient4 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient5 = okHttpClient4.setConnectionPool(okHttpClient2.connectionPool);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      
      // Undeclared exception!
      try { 
        okHttpClient5.setTransports(okHttpClient4.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(boolean0);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      List<String> list0 = okHttpClient1.getTransports();
      assertNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient1.setResponseCache(okHttpClient2.responseCache);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient4 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache0 = (com.squareup.okhttp.HttpResponseCache)ResponseCache.getDefault();
      assertNotNull(httpResponseCache0);
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = (OkResponseCacheAdapter)okHttpClient1.okResponseCache();
      assertNotNull(okResponseCacheAdapter0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      ResponseCache.setDefault(httpResponseCache0);
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      
      List<String> list0 = okHttpClient0.getTransports();
      assertNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache1 = (com.squareup.okhttp.HttpResponseCache)okHttpClient0.getResponseCache();
      assertNotNull(httpResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache1.getWriteSuccessCount());
      assertEquals(0, httpResponseCache1.getWriteAbortCount());
      assertEquals(89, httpResponseCache1.getRequestCount());
      assertEquals(0, httpResponseCache1.getHitCount());
      assertEquals(89, httpResponseCache1.getNetworkCount());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(httpResponseCache1, httpResponseCache0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertNotNull(proxy0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("SOCKS @ /192.168.1.42:0", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("SOCKS @ /192.168.1.42:0", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      boolean boolean1 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      
      List<String> list0 = okHttpClient1.getTransports();
      assertNotNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient0.setTransports(okHttpClient1.DEFAULT_TRANSPORTS);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      
      OkHttpClient okHttpClient5 = okHttpClient3.setTransports(okHttpClient0.transports);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      
      OkHttpClient okHttpClient6 = okHttpClient2.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      
      okHttpClient6.authenticator = okHttpClient5.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      okHttpClient5.authenticator = okHttpClient3.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient6.transports = okHttpClient4.DEFAULT_TRANSPORTS;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(2, okHttpClient6.transports.size());
      assertFalse(okHttpClient6.transports.isEmpty());
      
      OkHttpClient okHttpClient7 = okHttpClient3.setCookieHandler(okHttpClient6.cookieHandler);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      
      OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(okHttpClient6.sslSocketFactory);
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      
      OkResponseCache okResponseCache2 = okHttpClient7.okResponseCache();
      assertNull(okResponseCache2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      
      Proxy proxy0 = okHttpClient4.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      
      OkHttpClient okHttpClient9 = okHttpClient2.copyWithDefaults();
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      
      OkHttpClient okHttpClient10 = okHttpClient9.setProxy(okHttpClient4.proxy);
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache0 = (com.squareup.okhttp.HttpResponseCache)ResponseCache.getDefault();
      assertNotNull(httpResponseCache0);
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      DefaultProxySelector defaultProxySelector0 = (DefaultProxySelector)ProxySelector.getDefault();
      assertNull(defaultProxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(defaultProxySelector0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient1.connectionPool);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(okHttpClient3.responseCache);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      
      DefaultProxySelector defaultProxySelector1 = (DefaultProxySelector)okHttpClient3.getProxySelector();
      assertNull(defaultProxySelector1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      RawHeaders rawHeaders0 = new RawHeaders();
      assertNotNull(rawHeaders0);
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getResponseMessage());
      
      RawHeaders rawHeaders1 = new RawHeaders(rawHeaders0);
      assertNotNull(rawHeaders1);
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getResponseMessage());
      assertNull(rawHeaders1.getStatusLine());
      assertEquals(1, rawHeaders1.getHttpMinorVersion());
      assertEquals((-1), rawHeaders1.getResponseCode());
      assertEquals(0, rawHeaders1.length());
      assertNull(rawHeaders1.getResponseMessage());
      assertFalse(rawHeaders1.equals((Object)rawHeaders0));
      
      List<String> list0 = rawHeaders1.toNameValueBlock();
      assertNotNull(list0);
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getResponseMessage());
      assertNull(rawHeaders1.getStatusLine());
      assertEquals(1, rawHeaders1.getHttpMinorVersion());
      assertEquals((-1), rawHeaders1.getResponseCode());
      assertEquals(0, rawHeaders1.length());
      assertNull(rawHeaders1.getResponseMessage());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(rawHeaders0, rawHeaders1);
      assertNotSame(rawHeaders1, rawHeaders0);
      assertFalse(rawHeaders0.equals((Object)rawHeaders1));
      assertFalse(rawHeaders1.equals((Object)rawHeaders0));
      
      okHttpClient0.transports = list0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getResponseMessage());
      assertNull(rawHeaders1.getStatusLine());
      assertEquals(1, rawHeaders1.getHttpMinorVersion());
      assertEquals((-1), rawHeaders1.getResponseCode());
      assertEquals(0, rawHeaders1.length());
      assertNull(rawHeaders1.getResponseMessage());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(okHttpClient0.transports.isEmpty());
      assertEquals(0, okHttpClient0.transports.size());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      okHttpClient1.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      
      OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      
      OkHttpClient okHttpClient4 = okHttpClient0.setConnectionPool(okHttpClient3.connectionPool);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      
      okHttpClient3.sslSocketFactory = okHttpClient4.sslSocketFactory;
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(okHttpClient3.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      
      okHttpClient3.hostnameVerifier = okHttpClient2.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      
      OkHttpClient okHttpClient5 = okHttpClient2.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient6 = okHttpClient5.setCookieHandler(cookieManager0);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      
      ProxySelector proxySelector0 = okHttpClient2.getProxySelector();
      assertNull(proxySelector0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      
      CookieHandler cookieHandler0 = okHttpClient2.getCookieHandler();
      assertNull(cookieHandler0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      
      List<String> list0 = okHttpClient5.getTransports();
      assertNotNull(list0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache0 = (com.squareup.okhttp.HttpResponseCache)okHttpClient6.getResponseCache();
      assertNotNull(httpResponseCache0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      
      boolean boolean1 = okHttpClient6.getFollowProtocolRedirects();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(boolean1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      
      ProxySelector proxySelector1 = okHttpClient0.getProxySelector();
      assertNull(proxySelector1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      
      OkHttpClient okHttpClient7 = okHttpClient5.copyWithDefaults();
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient8 = okHttpClient2.setConnectionPool(okHttpClient4.connectionPool);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(okHttpClient0.cookieHandler);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      
      ConnectionPool connectionPool0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      List<String> list0 = okHttpClient1.getTransports();
      assertNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      
      OkHttpClient okHttpClient4 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient5 = okHttpClient1.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(boolean1 == boolean0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      
      OkHttpClient okHttpClient6 = okHttpClient5.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(boolean1 == boolean0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      List<String> list0 = OkHttpClient.DEFAULT_TRANSPORTS;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(list0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkAuthenticator okAuthenticator1 = okHttpClient0.getAuthenticator();
      assertNull(okAuthenticator1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      
      okHttpClient3.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertNotNull(hostnameVerifier1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(hostnameVerifier1, hostnameVerifier0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient5 = okHttpClient3.setResponseCache(okHttpClient1.responseCache);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient6 = okHttpClient5.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient7 = okHttpClient5.setAuthenticator(okHttpClient3.authenticator);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient8 = okHttpClient7.setFollowProtocolRedirects(okHttpClient3.followProtocolRedirects);
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient4.getSslSocketFactory();
      assertNotNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient9 = okHttpClient3.setCookieHandler(okHttpClient1.cookieHandler);
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient10 = okHttpClient2.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient11 = okHttpClient10.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient1);
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      
      okHttpClient11.sslSocketFactory = okHttpClient3.sslSocketFactory;
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      OkHttpClient.DEFAULT_TRANSPORTS = okHttpClient10.transports;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      assertNotNull(okHttpClient12);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      
      OkHttpClient.DEFAULT_TRANSPORTS = okHttpClient1.transports;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      // Undeclared exception!
      try { 
        okHttpClient7.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient.DEFAULT_TRANSPORTS = okHttpClient0.transports;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNull(cookieHandler0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0.authenticator, okAuthenticator0);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      int int0 = 0;
      long long0 = (-1554L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      int int1 = connectionPool0.getHttpConnectionCount();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(int0 == int1);
      
      String string0 = "w?&%2+)aWq";
      String string1 = null;
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      URI uRI0 = mockFile0.toURI();
      assertNotNull(uRI0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      
      long long0 = 1126L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string0, string0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient5 = okHttpClient2.setTransports(okHttpClient1.DEFAULT_TRANSPORTS);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient6 = okHttpClient2.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      
      okHttpClient2.authenticator = okHttpClient6.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient1.setResponseCache(okHttpClient2.responseCache);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache0 = (com.squareup.okhttp.HttpResponseCache)ResponseCache.getDefault();
      assertNotNull(httpResponseCache0);
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      
      OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      
      OkHttpClient okHttpClient9 = okHttpClient8.setHostnameVerifier(okHttpClient6.hostnameVerifier);
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient10 = okHttpClient9.setConnectionPool(okHttpClient2.connectionPool);
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = (OkResponseCacheAdapter)okHttpClient9.okResponseCache();
      assertNotNull(okResponseCacheAdapter0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient11 = okHttpClient6.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient12 = okHttpClient2.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient12);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      
      OkHttpClient okHttpClient13 = okHttpClient0.setTransports(okHttpClient6.transports);
      assertNotNull(okHttpClient13);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient14 = okHttpClient6.setAuthenticator(okHttpClient2.authenticator);
      assertNotNull(okHttpClient14);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient14.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient14.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertSame(okHttpClient14, okHttpClient4);
      assertSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertSame(okHttpClient14, okHttpClient1);
      assertSame(okHttpClient14, okHttpClient3);
      assertSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient14);
      assertSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient13));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      
      OkResponseCacheAdapter okResponseCacheAdapter1 = (OkResponseCacheAdapter)okHttpClient0.okResponseCache();
      assertNotNull(okResponseCacheAdapter1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okResponseCacheAdapter1, okResponseCacheAdapter0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okResponseCacheAdapter1.equals((Object)okResponseCacheAdapter0));
      
      ConnectionPool connectionPool0 = okHttpClient13.getConnectionPool();
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient14);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient14);
      assertSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient14));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient13));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      
      boolean boolean2 = okHttpClient1.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(boolean2);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      
      HostnameVerifier hostnameVerifier0 = okHttpClient14.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient14.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient14.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertSame(okHttpClient14, okHttpClient4);
      assertSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertSame(okHttpClient14, okHttpClient1);
      assertSame(okHttpClient14, okHttpClient3);
      assertSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient14);
      assertSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient13));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(okHttpClient13.sslSocketFactory);
      assertNotNull(okHttpClient15);
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient15.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient15.followProtocolRedirects);
      assertSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient14);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient15);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient14);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient14);
      assertSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient15);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient15, okHttpClient1);
      assertSame(okHttpClient15, okHttpClient14);
      assertSame(okHttpClient15, okHttpClient6);
      assertSame(okHttpClient15, okHttpClient3);
      assertNotSame(okHttpClient15, okHttpClient9);
      assertNotSame(okHttpClient15, okHttpClient10);
      assertSame(okHttpClient15, okHttpClient12);
      assertSame(okHttpClient15, okHttpClient5);
      assertSame(okHttpClient15, okHttpClient11);
      assertNotSame(okHttpClient15, okHttpClient0);
      assertSame(okHttpClient15, okHttpClient2);
      assertNotSame(okHttpClient15, okHttpClient8);
      assertSame(okHttpClient15, okHttpClient7);
      assertSame(okHttpClient15, okHttpClient4);
      assertNotSame(okHttpClient15, okHttpClient13);
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient13));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient14));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient13));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient15.equals((Object)okHttpClient0));
      assertFalse(okHttpClient15.equals((Object)okHttpClient9));
      assertFalse(okHttpClient15.equals((Object)okHttpClient10));
      assertFalse(okHttpClient15.equals((Object)okHttpClient8));
      assertFalse(okHttpClient15.equals((Object)okHttpClient13));
      
      OkHttpClient okHttpClient16 = okHttpClient1.setProxySelector(okHttpClient4.proxySelector);
      assertNotNull(okHttpClient16);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient16.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient16.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient15);
      assertNotSame(okHttpClient0, okHttpClient16);
      assertSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient16);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient16);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient16);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient15);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient16);
      assertSame(okHttpClient4, okHttpClient15);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient13);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient16, okHttpClient15);
      assertNotSame(okHttpClient16, okHttpClient8);
      assertSame(okHttpClient16, okHttpClient4);
      assertSame(okHttpClient16, okHttpClient2);
      assertNotSame(okHttpClient16, okHttpClient13);
      assertSame(okHttpClient16, okHttpClient7);
      assertSame(okHttpClient16, okHttpClient3);
      assertSame(okHttpClient16, okHttpClient14);
      assertNotSame(okHttpClient16, okHttpClient9);
      assertSame(okHttpClient16, okHttpClient6);
      assertSame(okHttpClient16, okHttpClient12);
      assertSame(okHttpClient16, okHttpClient1);
      assertNotSame(okHttpClient16, okHttpClient10);
      assertSame(okHttpClient16, okHttpClient5);
      assertNotSame(okHttpClient16, okHttpClient0);
      assertSame(okHttpClient16, okHttpClient11);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient15));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertTrue(boolean0 == boolean2);
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient13));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient16.equals((Object)okHttpClient8));
      assertFalse(okHttpClient16.equals((Object)okHttpClient9));
      assertFalse(okHttpClient16.equals((Object)okHttpClient10));
      assertFalse(okHttpClient16.equals((Object)okHttpClient13));
      assertFalse(okHttpClient16.equals((Object)okHttpClient0));
      
      ConnectionPool connectionPool1 = okHttpClient6.getConnectionPool();
      assertNull(connectionPool1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient15);
      assertNotSame(okHttpClient0, okHttpClient16);
      assertSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient16);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient16);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient14);
      assertSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient16);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient15);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient15));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient16));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient13));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      int int0 = connectionPool0.getSpdyConnectionCount();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, int0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertNotNull(connectionPool1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(connectionPool1, connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient5 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      
      OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient7 = okHttpClient1.setHostnameVerifier(okHttpClient6.hostnameVerifier);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      
      ProxySelector proxySelector0 = okHttpClient7.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      
      boolean boolean1 = okHttpClient3.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(boolean1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertTrue(boolean1 == boolean0);
      
      int int1 = 0;
      ConnectionPool connectionPool2 = new ConnectionPool(int1, int0);
      assertNotNull(connectionPool2);
      assertEquals(0, connectionPool2.getConnectionCount());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(int1 == int0);
      assertFalse(connectionPool2.equals((Object)connectionPool0));
      assertFalse(connectionPool2.equals((Object)connectionPool1));
      assertTrue(int0 == int1);
      
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        connectionPool2.maybeShare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.ConnectionPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient1.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      ProxySelector.setDefault(proxySelector0);
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient1.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      
      OkHttpClient okHttpClient5 = okHttpClient2.setResponseCache(okHttpClient4.responseCache);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      
      Proxy proxy1 = okHttpClient3.getProxy();
      assertNotNull(proxy1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(proxy1, proxy0);
      
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      
      ProxySelector proxySelector1 = okHttpClient4.getProxySelector();
      assertNull(proxySelector1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      
      Proxy proxy2 = okHttpClient4.getProxy();
      assertNotNull(proxy2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy2.toString());
      assertEquals(Proxy.Type.DIRECT, proxy2.type());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(proxy2, proxy1);
      assertSame(proxy2, proxy0);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      
      ConnectionPool connectionPool0 = null;
      OkHttpClient okHttpClient6 = okHttpClient5.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkAuthenticator okAuthenticator1 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(okAuthenticator1).toString();
      OkHttpClient okHttpClient2 = okHttpClient0.setAuthenticator(okAuthenticator1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      
      OkAuthenticator okAuthenticator2 = okHttpClient2.getAuthenticator();
      assertNotNull(okAuthenticator2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okAuthenticator2, okAuthenticator1);
      assertNotSame(okAuthenticator2, okAuthenticator0);
      assertFalse(okAuthenticator2.equals((Object)okAuthenticator0));
      
      OkHttpClient okHttpClient4 = okHttpClient3.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      
      String string0 = "";
      String string1 = "Unexpected protocol: ";
      String string2 = "";
      try { 
        MockURI.URI(string0, string1, string2, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://Unexpected%20protocol:%20?Unexpected%20protocol:%20#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      URL uRL0 = null;
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(okHttpClient0.responseCache);
      assertNotNull(okResponseCacheAdapter0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCacheAdapter0, okHttpClient0.failedRoutes);
      assertNotNull(httpsURLConnectionImpl0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      int int0 = httpsURLConnectionImpl0.getReadTimeout();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertEquals(0, int0);
      
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      okHttpClient1.transports = okHttpClient0.DEFAULT_TRANSPORTS;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(2, okHttpClient1.transports.size());
      assertFalse(okHttpClient1.transports.isEmpty());
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertNotNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(cookieHandler0, cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient1, okHttpClient0);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      String string0 = "";
      int int0 = 514;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(string0, int0);
      assertNotNull(inetSocketAddress0);
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      assertNotNull(proxy0);
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setProxySelector(okHttpClient2.proxySelector);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertNull(httpURLConnection0.getContentType());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://foo.bar", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getDoInput());
      assertNull(httpURLConnection0.getContentEncoding());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient1.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(okHttpClient2.proxy);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      
      OkHttpClient okHttpClient6 = okHttpClient0.setCookieHandler(okHttpClient3.cookieHandler);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      
      OkResponseCache okResponseCache0 = okHttpClient6.okResponseCache();
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setAuthenticator(okHttpClient3.authenticator);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      
      OkHttpClient okHttpClient8 = okHttpClient7.setCookieHandler(okHttpClient2.cookieHandler);
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      
      List<String> list0 = okHttpClient1.getTransports();
      assertNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient7.setConnectionPool(okHttpClient3.connectionPool);
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertEquals(514, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(":514", inetSocketAddress0.toString());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ :514", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient3);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      okHttpClient1.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ProxySelector proxySelector2 = ProxySelector.getDefault();
      assertNull(proxySelector2);
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      
      okHttpClient0.transports = okHttpClient1.DEFAULT_TRANSPORTS;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.transports.isEmpty());
      assertEquals(2, okHttpClient0.transports.size());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      List<String> list0 = okHttpClient1.getTransports();
      assertNotNull(list0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      
      ProxySelector.setDefault(okHttpClient2.proxySelector);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient1.connectionPool);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      
      ProxySelector proxySelector3 = ProxySelector.getDefault();
      assertNull(proxySelector3);
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      OkHttpClient okHttpClient4 = okHttpClient2.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      
      okHttpClient3.hostnameVerifier = okHttpClient2.hostnameVerifier;
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      
      OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(okHttpClient4.hostnameVerifier);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache0 = (com.squareup.okhttp.HttpResponseCache)ResponseCache.getDefault();
      assertNotNull(httpResponseCache0);
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      
      OkHttpClient okHttpClient7 = okHttpClient3.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient7.setProxySelector(proxySelector1);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      
      OkHttpClient okHttpClient9 = okHttpClient7.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      
      OkHttpClient okHttpClient10 = okHttpClient5.setProxy(okHttpClient1.proxy);
      assertNotNull(okHttpClient10);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      
      OkHttpClient okHttpClient11 = okHttpClient1.setTransports(okHttpClient0.transports);
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient8);
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient3.getSslSocketFactory();
      assertNull(sSLSocketFactory1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient11);
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient12 = okHttpClient11.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient12);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient3);
      
      DefaultProxySelector defaultProxySelector0 = (DefaultProxySelector)okHttpClient4.getProxySelector();
      assertNull(defaultProxySelector0);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient11);
      
      DefaultProxySelector defaultProxySelector1 = (DefaultProxySelector)okHttpClient0.getProxySelector();
      assertNull(defaultProxySelector1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      
      ConnectionPool connectionPool1 = okHttpClient10.getConnectionPool();
      assertNull(connectionPool1);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient11);
      
      OkHttpClient okHttpClient13 = okHttpClient12.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient13);
      assertFalse(okHttpClient13.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient13.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient10);
      assertSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient13, okHttpClient7);
      assertSame(okHttpClient13, okHttpClient1);
      assertSame(okHttpClient13, okHttpClient5);
      assertSame(okHttpClient13, okHttpClient9);
      assertSame(okHttpClient13, okHttpClient4);
      assertSame(okHttpClient13, okHttpClient6);
      assertSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient13);
      assertSame(okHttpClient12, okHttpClient11);
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache1 = (com.squareup.okhttp.HttpResponseCache)okHttpClient13.getResponseCache();
      assertNotNull(httpResponseCache1);
      assertFalse(okHttpClient13.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache1.getWriteAbortCount());
      assertEquals(89, httpResponseCache1.getNetworkCount());
      assertEquals(0, httpResponseCache1.getHitCount());
      assertEquals(0, httpResponseCache1.getWriteSuccessCount());
      assertEquals(89, httpResponseCache1.getRequestCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient13.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient10);
      assertSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient13, okHttpClient7);
      assertSame(okHttpClient13, okHttpClient1);
      assertSame(okHttpClient13, okHttpClient5);
      assertSame(okHttpClient13, okHttpClient9);
      assertSame(okHttpClient13, okHttpClient4);
      assertSame(okHttpClient13, okHttpClient6);
      assertSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(httpResponseCache1, httpResponseCache0);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient13);
      assertSame(okHttpClient12, okHttpClient11);
      
      DefaultProxySelector defaultProxySelector2 = (DefaultProxySelector)ProxySelector.getDefault();
      assertNull(defaultProxySelector2);
      
      OkHttpClient okHttpClient14 = okHttpClient8.setProxySelector(defaultProxySelector2);
      assertNotNull(okHttpClient14);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient14.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient14.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient14, okHttpClient0);
      assertSame(okHttpClient14, okHttpClient13);
      assertSame(okHttpClient14, okHttpClient12);
      assertSame(okHttpClient14, okHttpClient4);
      assertSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient3);
      assertSame(okHttpClient14, okHttpClient6);
      assertSame(okHttpClient14, okHttpClient10);
      assertSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient2);
      assertSame(okHttpClient14, okHttpClient9);
      assertSame(okHttpClient14, okHttpClient8);
      assertSame(okHttpClient14, okHttpClient5);
      assertSame(okHttpClient14, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(httpResponseCache0, httpResponseCache1);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient13);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient14);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient14);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient13);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient13);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient14);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      
      OkHttpClient okHttpClient15 = okHttpClient8.setFollowProtocolRedirects(okHttpClient6.followProtocolRedirects);
      assertNotNull(okHttpClient15);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient15.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(89, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(89, httpResponseCache0.getNetworkCount());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient15.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient15);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient13);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient15);
      assertSame(okHttpClient6, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient13);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient14);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient15);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient15, okHttpClient4);
      assertSame(okHttpClient15, okHttpClient12);
      assertSame(okHttpClient15, okHttpClient8);
      assertSame(okHttpClient15, okHttpClient1);
      assertSame(okHttpClient15, okHttpClient7);
      assertSame(okHttpClient15, okHttpClient10);
      assertSame(okHttpClient15, okHttpClient5);
      assertSame(okHttpClient15, okHttpClient2);
      assertSame(okHttpClient15, okHttpClient9);
      assertSame(okHttpClient15, okHttpClient14);
      assertSame(okHttpClient15, okHttpClient6);
      assertSame(okHttpClient15, okHttpClient11);
      assertSame(okHttpClient15, okHttpClient13);
      assertSame(okHttpClient15, okHttpClient3);
      assertSame(okHttpClient15, okHttpClient0);
      assertSame(httpResponseCache0, httpResponseCache1);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient15);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient13);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient14);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient14);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient13);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient15);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient13);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient14);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient15);
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache2 = (com.squareup.okhttp.HttpResponseCache)okHttpClient0.getResponseCache();
      assertNotNull(httpResponseCache2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(89, httpResponseCache2.getNetworkCount());
      assertEquals(0, httpResponseCache2.getHitCount());
      assertEquals(89, httpResponseCache2.getRequestCount());
      assertEquals(0, httpResponseCache2.getWriteSuccessCount());
      assertEquals(0, httpResponseCache2.getWriteAbortCount());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(httpResponseCache2, httpResponseCache1);
      assertSame(httpResponseCache2, httpResponseCache0);
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache3 = (com.squareup.okhttp.HttpResponseCache)okHttpClient4.getResponseCache();
      assertNotNull(httpResponseCache3);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(89, httpResponseCache3.getNetworkCount());
      assertEquals(89, httpResponseCache3.getRequestCount());
      assertEquals(0, httpResponseCache3.getWriteSuccessCount());
      assertEquals(0, httpResponseCache3.getHitCount());
      assertEquals(0, httpResponseCache3.getWriteAbortCount());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient15);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient13);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient15);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(httpResponseCache3, httpResponseCache0);
      assertSame(httpResponseCache3, httpResponseCache1);
      assertSame(httpResponseCache3, httpResponseCache2);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient13);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient14);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient15);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      okHttpClient0.transports = (List<String>) linkedList0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertEquals(0, okHttpClient0.transports.size());
      assertTrue(okHttpClient0.transports.isEmpty());
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertNotNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      
      List<String> list1 = okHttpClient0.getTransports();
      assertNotNull(list1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(list1, list0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setProxy(okHttpClient1.proxy);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      
      okHttpClient4.sslSocketFactory = okHttpClient2.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      
      RawHeaders rawHeaders0 = new RawHeaders();
      assertNotNull(rawHeaders0);
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      
      List<String> list2 = rawHeaders0.toNameValueBlock();
      assertNotNull(list2);
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      
      // Undeclared exception!
      try { 
        okHttpClient6.setTransports(list2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("7", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      String string0 = "https";
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      boolean boolean1 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      
      String string1 = "7";
      int int0 = 1;
      String string2 = "f?Ko++X#}#";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("f?Ko++X", uRL0.getFile());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("7", uRL0.getHost());
      assertEquals("}#", uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Ko++X", uRL0.getQuery());
      assertEquals("7:1", uRL0.getAuthority());
      assertEquals("f", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("f?Ko++X", uRL0.getFile());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("7", uRL0.getHost());
      assertEquals("}#", uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("Ko++X", uRL0.getQuery());
      assertEquals("7:1", uRL0.getAuthority());
      assertEquals("f", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient5 = okHttpClient4.setResponseCache(okHttpClient1.responseCache);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient6 = okHttpClient5.setCookieHandler(okHttpClient0.cookieHandler);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient7 = okHttpClient4.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient8 = okHttpClient7.setCookieHandler(okHttpClient3.cookieHandler);
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      
      OkHttpClient okHttpClient9 = okHttpClient3.setTransports(okHttpClient6.DEFAULT_TRANSPORTS);
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient10 = okHttpClient1.setTransports(okHttpClient9.DEFAULT_TRANSPORTS);
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      
      OkHttpClient okHttpClient11 = okHttpClient3.setFollowProtocolRedirects(okHttpClient4.followProtocolRedirects);
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      
      OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient12);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      
      List<String> list0 = okHttpClient6.getTransports();
      assertNotNull(list0);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(list0.contains(string1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient12));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      boolean boolean0 = false;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)17;
      byteArray0[2] = byte2;
      byte byte3 = (byte)17;
      byteArray0[3] = byte3;
      String string0 = ")k#:_JYF?k?9/";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, byteArray0[3]);
      assertNotNull(httpResponseCache0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(")k#:_JYF?k?9", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9/)k#:_JYF?k?9", mockFile0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9", mockFile0.getParent());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)17, (byte)17, (byte)0}, byteArray0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient1);
      assertEquals(5, byteArray0.length);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(")k#:_JYF?k?9", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9/)k#:_JYF?k?9", mockFile0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9", mockFile0.getParent());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)17, (byte)17, (byte)0}, byteArray0);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient1);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      byte byte4 = (byte)56;
      byteArray0[4] = byte4;
      boolean boolean1 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)17, (byte)17, (byte)56}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      okHttpClient0.transports = (List<String>) linkedList0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertEquals(0, okHttpClient0.transports.size());
      assertTrue(okHttpClient0.transports.isEmpty());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      
      OkHttpClient okHttpClient3 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient6 = okHttpClient5.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient7 = okHttpClient6.setFollowProtocolRedirects(okHttpClient5.followProtocolRedirects);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okResponseCache1, okResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(okHttpClient0.transports);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      boolean boolean0 = false;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[1] = byte0;
      byte byte1 = (byte)17;
      byteArray0[2] = byte1;
      byteArray0[3] = byteArray0[2];
      String string0 = ")k#:_JYF?k?9/";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, byteArray0[3]);
      assertNotNull(httpResponseCache0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9/)k#:_JYF?k?9", mockFile0.toString());
      assertEquals(")k#:_JYF?k?9", mockFile0.getName());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)17, (byte)17, (byte)0}, byteArray0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient1);
      assertEquals(5, byteArray0.length);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_5/)k#:_JYF?k?9/)k#:_JYF?k?9", mockFile0.toString());
      assertEquals(")k#:_JYF?k?9", mockFile0.getName());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)17, (byte)17, (byte)0}, byteArray0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      byte byte2 = (byte)27;
      boolean boolean1 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)17, (byte)17, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      okHttpClient0.transports = (List<String>) linkedList0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.transports.isEmpty());
      assertEquals(0, okHttpClient0.transports.size());
      assertEquals(0, linkedList0.size());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      
      OkHttpClient okHttpClient3 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      
      OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(okHttpClient6.followProtocolRedirects);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      
      HttpResponseCache httpResponseCache1 = (HttpResponseCache)okHttpClient4.getResponseCache();
      assertNotNull(httpResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache1.getWriteSuccessCount());
      assertEquals(0, httpResponseCache1.getNetworkCount());
      assertEquals(0, httpResponseCache1.getWriteAbortCount());
      assertEquals(0, httpResponseCache1.getRequestCount());
      assertEquals(0, httpResponseCache1.getHitCount());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(httpResponseCache1, httpResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okResponseCache1, okResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(okHttpClient0.transports);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("none", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      okHttpClient0.transports = (List<String>) linkedList0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertTrue(okHttpClient0.transports.isEmpty());
      assertEquals(0, okHttpClient0.transports.size());
      
      String string0 = "%httes";
      boolean boolean1 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(string0));
      assertTrue(boolean1 == boolean0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      List<String> list0 = okHttpClient1.getTransports();
      assertNotNull(list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(list0.contains(string0));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      OkHttpClient okHttpClient3 = new OkHttpClient();
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(okHttpClient0.transports);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: [%httes]
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }
}
