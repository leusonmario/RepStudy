/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 31 04:51:05 GMT 2021
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.SerializedObjectSupporter;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient207();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      ProxySelector proxySelector0 = null;
      List<String> list0 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(list0);
      
      okHttpClient0.transports = list0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(okHttpClient0.transports.isEmpty());
      assertEquals(2, okHttpClient0.transports.size());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      okHttpClient0.transports = okHttpClient1.DEFAULT_TRANSPORTS;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(okHttpClient0.transports.isEmpty());
      assertEquals(2, okHttpClient0.transports.size());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotNull(okHttpClient2);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient3.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient5);
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNull(proxy0);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient6);
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNull(connectionPool0);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertNull(hostnameVerifier0);
      
      boolean boolean1 = okHttpClient6.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertTrue(boolean1);
      
      OkResponseCache okResponseCache0 = okHttpClient6.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient7.setTransports(okHttpClient2.transports);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient8);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient9 = okHttpClient8.setProxySelector(okHttpClient5.proxySelector);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient9);
      
      Proxy proxy1 = okHttpClient6.getProxy();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNull(proxy1);
      
      okHttpClient0.hostnameVerifier = okHttpClient1.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = serializedObjectSupporter0.deserializeObjectOkHttpClient199();
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertNotNull(okHttpClient10);
      
      Proxy proxy2 = okHttpClient7.getProxy();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNull(proxy2);
      
      OkHttpClient okHttpClient11 = okHttpClient7.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient11.setAuthenticator(okHttpClient4.authenticator);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient12);
      
      ProxySelector proxySelector1 = okHttpClient4.getProxySelector();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient12));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient13 = okHttpClient1.setCookieHandler(okHttpClient6.cookieHandler);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertSame(okHttpClient13, okHttpClient1);
      assertSame(okHttpClient13, okHttpClient6);
      assertSame(okHttpClient13, okHttpClient4);
      assertSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient13);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient13);
      
      OkHttpClient okHttpClient14 = okHttpClient6.setProxySelector(okHttpClient8.proxySelector);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient13);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient14);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient13);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient14);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient14);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertSame(okHttpClient14, okHttpClient4);
      assertSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient2);
      assertSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertSame(okHttpClient14, okHttpClient13);
      assertSame(okHttpClient14, okHttpClient1);
      assertSame(okHttpClient14, okHttpClient6);
      assertSame(okHttpClient14, okHttpClient0);
      assertSame(okHttpClient14, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertNotNull(okHttpClient14);
      
      List<String> list1 = okHttpClient8.getTransports();
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(list1, list0);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient13);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient14);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient13);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient14);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNotNull(list1);
      
      Proxy proxy3 = okHttpClient1.getProxy();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNull(proxy3);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient6.getSslSocketFactory();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient14);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient13);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient15 = okHttpClient4.setTransports(okHttpClient0.transports);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient15.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient15.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient15);
      assertNotSame(okHttpClient15, okHttpClient12);
      assertSame(okHttpClient15, okHttpClient1);
      assertSame(okHttpClient15, okHttpClient13);
      assertSame(okHttpClient15, okHttpClient6);
      assertSame(okHttpClient15, okHttpClient7);
      assertSame(okHttpClient15, okHttpClient9);
      assertNotSame(okHttpClient15, okHttpClient10);
      assertNotSame(okHttpClient15, okHttpClient5);
      assertSame(okHttpClient15, okHttpClient8);
      assertSame(okHttpClient15, okHttpClient0);
      assertSame(okHttpClient15, okHttpClient14);
      assertSame(okHttpClient15, okHttpClient2);
      assertSame(okHttpClient15, okHttpClient4);
      assertNotSame(okHttpClient15, okHttpClient11);
      assertSame(okHttpClient15, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient13);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient15);
      assertSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient13);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient15);
      assertSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient15.equals((Object)okHttpClient12));
      assertFalse(okHttpClient15.equals((Object)okHttpClient11));
      assertFalse(okHttpClient15.equals((Object)okHttpClient10));
      assertFalse(okHttpClient15.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient12));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertNotNull(okHttpClient15);
      
      OkHttpClient okHttpClient16 = okHttpClient9.setTransports(okHttpClient12.transports);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient16.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient16.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient16);
      assertSame(okHttpClient16, okHttpClient14);
      assertSame(okHttpClient16, okHttpClient8);
      assertSame(okHttpClient16, okHttpClient2);
      assertSame(okHttpClient16, okHttpClient3);
      assertNotSame(okHttpClient16, okHttpClient5);
      assertNotSame(okHttpClient16, okHttpClient10);
      assertSame(okHttpClient16, okHttpClient15);
      assertSame(okHttpClient16, okHttpClient4);
      assertSame(okHttpClient16, okHttpClient6);
      assertSame(okHttpClient16, okHttpClient1);
      assertSame(okHttpClient16, okHttpClient13);
      assertSame(okHttpClient16, okHttpClient9);
      assertNotSame(okHttpClient16, okHttpClient11);
      assertSame(okHttpClient16, okHttpClient0);
      assertSame(okHttpClient16, okHttpClient7);
      assertNotSame(okHttpClient16, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient16);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient16);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient13);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient16);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient15);
      assertSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient13);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient16);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient15);
      assertSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient15);
      assertNotSame(okHttpClient5, okHttpClient16);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient14);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient15);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient13);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient16);
      assertSame(okHttpClient7, okHttpClient14);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient13);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient16);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient15);
      assertSame(okHttpClient8, okHttpClient14);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient15);
      assertNotSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient16);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient13);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient14);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient14);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient15);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient16);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient16);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient14);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient15);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient13);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient16.equals((Object)okHttpClient11));
      assertFalse(okHttpClient16.equals((Object)okHttpClient5));
      assertFalse(okHttpClient16.equals((Object)okHttpClient10));
      assertFalse(okHttpClient16.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient12));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient15));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient14));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient12));
      assertFalse(okHttpClient9.equals((Object)okHttpClient11));
      assertFalse(okHttpClient11.equals((Object)okHttpClient14));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient15));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient13));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient14));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient15));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient13));
      assertNotNull(okHttpClient16);
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient12.getSslSocketFactory();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient16);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient15);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient13);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient16);
      assertSame(okHttpClient7, okHttpClient14);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient16);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient16);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient13);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient16);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient15);
      assertSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient14);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient15);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient16);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient13);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient16);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient15);
      assertSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient16);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient14);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient15);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient13);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient14));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient15));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient16));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient13));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient12));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient16));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient14));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient15));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient13));
      assertNotNull(sSLSocketFactory1);
      
      ResponseCache responseCache1 = okHttpClient7.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient16);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient15);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient13);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient16);
      assertSame(okHttpClient7, okHttpClient14);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient13);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient16);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNull(responseCache1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient237();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient57();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient247();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(proxy0);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient99();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      String string0 = null;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ftp", 12345);
      long long0 = 517L;
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okResponseCache0);
      
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = new OkHttpClient();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      okHttpClient0.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotNull(set0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(httpURLConnection0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient127();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient192();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.transports, locale_FilteringMode0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotNull(list0);
      
      String string0 = "https";
      URL uRL0 = MockURL.URL(string0, string0, string0);
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("https://httpshttps", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://httpshttps", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("https://httpshttps", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://httpshttps", uRL0.toExternalForm());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotNull(httpURLConnection0);
      
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient184();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient90();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient190();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(cookieHandler0);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient29();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient225();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      String string0 = "";
      int int0 = 116;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(116, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(":116", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: 
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(proxySelector0);
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okAuthenticator0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient55();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient61();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      okHttpClient1.transports = list0;
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(okHttpClient1.transports.isEmpty());
      assertEquals(0, okHttpClient1.transports.size());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      okHttpClient2.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(okHttpClient2.transports);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient32();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setTransports(okHttpClient1.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient3);
      
      String string0 = " jaf6OgARSpmh";
      String string1 = "";
      int int0 = 2295;
      String string2 = null;
      // Undeclared exception!
      try { 
        MockURL.URL(string0, string1, int0, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient257();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient70();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(connectionPool0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotNull(httpURLConnection0);
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient5 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient5.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient6.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient8);
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient9 = okHttpClient0.setResponseCache(okHttpClient2.responseCache);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient9);
      
      ResponseCache responseCache1 = okHttpClient5.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertNull(responseCache1);
      
      OkHttpClient okHttpClient10 = okHttpClient1.setSSLSocketFactory(okHttpClient7.sslSocketFactory);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertNotNull(okHttpClient10);
      
      OkHttpClient okHttpClient11 = okHttpClient8.setAuthenticator(okHttpClient9.authenticator);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient11);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient178();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient184();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      SerializedObjectSupporter serializedObjectSupporter1 = okHttpClient0.serializedObjectSupporter;
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotNull(serializedObjectSupporter1);
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter1.deserializeObjectOkHttpClient2();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter1.deserializeObjectOkHttpClient214();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      
      okHttpClient3.sslSocketFactory = okHttpClient2.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient3.setProxySelector(okHttpClient0.proxySelector);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient3.setResponseCache(okHttpClient7.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient8);
      
      ConnectionPool connectionPool0 = okHttpClient5.getConnectionPool();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient9 = okHttpClient5.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient7.setAuthenticator(okHttpClient2.authenticator);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient10);
      
      OkHttpClient okHttpClient11 = okHttpClient10.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient12);
      
      OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertNotNull(okHttpClient13);
      
      ResponseCache responseCache0 = okHttpClient2.getResponseCache();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient14 = okHttpClient8.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient13);
      assertNotSame(okHttpClient7, okHttpClient14);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient14);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient13));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertNotNull(okHttpClient14);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient138();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient13();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient167();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient181();
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = okHttpClient3.getFollowProtocolRedirects();
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertTrue(boolean0);
      
      okHttpClient2.sslSocketFactory = okHttpClient3.sslSocketFactory;
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient3.setAuthenticator(okAuthenticator0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient6);
      
      List<String> list0 = okHttpClient2.getTransports();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(list0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient7 = okHttpClient6.copyWithDefaults();
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient7);
      
      okHttpClient2.sslSocketFactory = okHttpClient7.sslSocketFactory;
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient6.getSslSocketFactory();
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertNull(sSLSocketFactory0);
      
      OkAuthenticator okAuthenticator1 = okHttpClient2.getAuthenticator();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(okAuthenticator1);
      
      Proxy proxy0 = okHttpClient2.getProxy();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(proxy0);
      
      ProxySelector proxySelector0 = okHttpClient6.getProxySelector();
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient8.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient9);
      
      okHttpClient9.authenticator = okHttpClient8.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      okHttpClient9.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient8.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertNull(okResponseCache1);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient10 = okHttpClient5.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient10);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy3();
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:43383", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient136();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient118();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient55();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient123();
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNull(okResponseCache0);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = serializedObjectSupporter0.deserializeObjectOkHttpClient136();
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient3.setAuthenticator(okHttpClient0.authenticator);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient3.setProxySelector(okHttpClient0.proxySelector);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient8);
      
      okHttpClient8.serializedObjectSupporter = okHttpClient2.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNull(okResponseCache1);
      
      List<String> list0 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNotNull(list0);
      
      OkHttpClient okHttpClient9 = okHttpClient1.setResponseCache(okHttpClient3.responseCache);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient1.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient10);
      
      OkHttpClient okHttpClient11 = okHttpClient10.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient8.setConnectionPool(okHttpClient7.connectionPool);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient12);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient12);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient12);
      
      OkHttpClient okHttpClient13 = okHttpClient12.setResponseCache(okHttpClient9.responseCache);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient13);
      assertSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient13);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient12);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient12));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient13);
      
      OkHttpClient okHttpClient14 = okHttpClient10.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient14);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertSame(okHttpClient14, okHttpClient9);
      assertSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient14);
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient14);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient15 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient15.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient15.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient15, okHttpClient10);
      assertNotSame(okHttpClient15, okHttpClient4);
      assertNotSame(okHttpClient15, okHttpClient8);
      assertNotSame(okHttpClient15, okHttpClient7);
      assertNotSame(okHttpClient15, okHttpClient5);
      assertSame(okHttpClient15, okHttpClient6);
      assertNotSame(okHttpClient15, okHttpClient12);
      assertSame(okHttpClient15, okHttpClient2);
      assertNotSame(okHttpClient15, okHttpClient11);
      assertNotSame(okHttpClient15, okHttpClient13);
      assertNotSame(okHttpClient15, okHttpClient14);
      assertNotSame(okHttpClient15, okHttpClient1);
      assertNotSame(okHttpClient15, okHttpClient3);
      assertNotSame(okHttpClient15, okHttpClient9);
      assertNotSame(okHttpClient15, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient15.equals((Object)okHttpClient10));
      assertFalse(okHttpClient15.equals((Object)okHttpClient4));
      assertFalse(okHttpClient15.equals((Object)okHttpClient8));
      assertFalse(okHttpClient15.equals((Object)okHttpClient7));
      assertFalse(okHttpClient15.equals((Object)okHttpClient5));
      assertFalse(okHttpClient15.equals((Object)okHttpClient12));
      assertFalse(okHttpClient15.equals((Object)okHttpClient11));
      assertFalse(okHttpClient15.equals((Object)okHttpClient13));
      assertFalse(okHttpClient15.equals((Object)okHttpClient14));
      assertFalse(okHttpClient15.equals((Object)okHttpClient1));
      assertFalse(okHttpClient15.equals((Object)okHttpClient3));
      assertFalse(okHttpClient15.equals((Object)okHttpClient9));
      assertFalse(okHttpClient15.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient15);
      
      okHttpClient11.serializedObjectSupporter = okHttpClient13.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      
      // Undeclared exception!
      try { 
        okHttpClient14.setTransports(okHttpClient10.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient85();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient53();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(okResponseCache0);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotNull(set0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient86();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      int int0 = (-505);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient10();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy2();
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:45413", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:45413", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:45413", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:45413", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:45413", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient3);
      
      okHttpClient2.serializedObjectSupporter = okHttpClient1.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:45413", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNull(okResponseCache0);
      
      ProxySelector proxySelector0 = okHttpClient2.getProxySelector();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:45413", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNull(proxySelector0);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotNull(okHttpClient4);
      
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient4.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient232();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      String string0 = "transports doesn't contain http/1.1: ";
      String string1 = "]>n.0CAw";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      long long0 = 9223372036854775807L;
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient189();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpResponseCache0);
      
      ResponseCache.setDefault(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(okHttpClient2.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(list0);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setResponseCache(okHttpClient2.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient6);
      
      boolean boolean1 = true;
      OkHttpClient okHttpClient7 = okHttpClient6.setFollowProtocolRedirects(boolean1);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient7);
      
      okHttpClient3.hostnameVerifier = okHttpClient2.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient4.getProxy();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertNull(proxy0);
      
      OkHttpClient okHttpClient8 = okHttpClient0.setSSLSocketFactory(okHttpClient4.sslSocketFactory);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports doesn't contain http/1.1: /]>n.0CAw", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("]>n.0CAw", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient8);
      
      // Undeclared exception!
      try { 
        okHttpClient8.setTransports(okHttpClient1.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient58();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = null;
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient184();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient144();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(sSLSocketFactory0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient99();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(okAuthenticator0).toString();
      CookieStore cookieStore0 = null;
      String string0 = null;
      String string1 = "(I}9rS:Lb3]eSn9";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      
      long long0 = 517L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertNotNull(httpResponseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okResponseCache0);
      
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(okHttpClient1.cookieHandler);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotNull(okHttpClient4);
      
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      List<String> list0 = okHttpClient0.getTransports();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNull(list0);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotNull(set0);
      
      OkHttpClient okHttpClient5 = okHttpClient1.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient5.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient6);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertNull(sSLSocketFactory0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.getDoInput());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertFalse(httpURLConnection0.getDoOutput());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertNotNull(httpURLConnection0);
      
      Set<Route> set1 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(1, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(1, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(set1, set0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertNotNull(set1);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient6.getHostnameVerifier();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(1, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(1, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNotNull(hostnameVerifier0);
      
      CookiePolicy cookiePolicy1 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      cookieManager0.setCookiePolicy(cookiePolicy1);
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient7 = okHttpClient2.setCookieHandler(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient7);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient59();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient167();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient244();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient11();
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy9();
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient4 = okHttpClient2.setProxy(proxy0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setResponseCache(okHttpClient2.responseCache);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient4.copyWithDefaults();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setTransports(okHttpClient5.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
      
      List<String> list0 = okHttpClient2.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(list0);
      
      CookieHandler cookieHandler0 = okHttpClient4.getCookieHandler();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNull(cookieHandler0);
      
      Proxy proxy1 = okHttpClient2.getProxy();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy1.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy1.toString());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy1, proxy0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(proxy1);
      
      OkHttpClient okHttpClient8 = serializedObjectSupporter0.deserializeObjectOkHttpClient53();
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient8);
      
      ConnectionPool connectionPool0 = okHttpClient4.getConnectionPool();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNull(connectionPool0);
      
      Proxy proxy2 = okHttpClient2.getProxy();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy2.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy2.toString());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy2, proxy0);
      assertSame(proxy2, proxy1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(proxy2);
      
      Set<Route> set0 = okHttpClient6.getfailedRoutes();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(set0);
      
      OkHttpClient okHttpClient9 = okHttpClient4.setSSLSocketFactory(okHttpClient6.sslSocketFactory);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient9);
      
      okHttpClient5.transports = okHttpClient7.transports;
      assertEquals(2, okHttpClient5.transports.size());
      assertFalse(okHttpClient5.transports.isEmpty());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient9.setFollowProtocolRedirects(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient10);
      
      List<String> list1 = okHttpClient9.getTransports();
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(list1, list0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertTrue(list1.equals((Object)list0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertNotNull(list1);
      
      OkHttpClient okHttpClient11 = okHttpClient5.setAuthenticator(okHttpClient8.authenticator);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient10.setCookieHandler(okHttpClient9.cookieHandler);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertNotNull(okHttpClient12);
      
      OkAuthenticator okAuthenticator0 = okHttpClient9.getAuthenticator();
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertNull(okAuthenticator0);
      
      OkAuthenticator okAuthenticator1 = okHttpClient10.getAuthenticator();
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertNull(okAuthenticator1);
      
      ConnectionPool connectionPool1 = okHttpClient10.getConnectionPool();
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertNull(connectionPool1);
      
      CookieHandler cookieHandler1 = okHttpClient12.getCookieHandler();
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertNull(cookieHandler1);
      
      OkAuthenticator okAuthenticator2 = okHttpClient6.getAuthenticator();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(proxy0, proxy2);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertNotNull(okAuthenticator2);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient144();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNotSame(cookieHandler0, cookieManager0);
      assertFalse(cookieHandler0.equals((Object)cookieManager0));
      assertNotNull(cookieHandler0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(cookieManager0.equals((Object)cookieHandler0));
      assertNotNull(okHttpClient1);
      
      CookieHandler cookieHandler1 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(cookieManager0, cookieHandler0);
      assertSame(cookieManager0, cookieHandler1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(cookieHandler1, cookieHandler0);
      assertSame(cookieHandler1, cookieManager0);
      assertFalse(cookieManager0.equals((Object)cookieHandler0));
      assertFalse(cookieHandler1.equals((Object)cookieHandler0));
      assertNotNull(cookieHandler1);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient56();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient39();
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient158();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient248();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient0.connectionPool);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient4 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient4.getSslSocketFactory();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNull(sSLSocketFactory0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient56();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient39();
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNotNull(httpURLConnection0);
      
      List<String> list0 = okHttpClient1.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertNotNull(list0);
      
      OkResponseCache okResponseCache1 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertNull(okResponseCache1);
      
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(okHttpClient0.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient39();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter1.deserializeObjectOkHttpClient143();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      String string0 = "transports must not contain null";
      String string1 = "http/1.1";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      long long0 = 3349L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http/1.1", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals("1.1", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpResponseCache0);
      
      OkResponseCache okResponseCache0 = httpResponseCache0.okResponseCache;
      assertNotNull(okResponseCache0);
      
      Set<Route> set0 = null;
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient1, okResponseCache0, set0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http/1.1", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals("1.1", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpsURLConnectionImpl0);
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http/1.1", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals("1.1", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_9/transports must not contain null/http/1.1", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals("1.1", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient85();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient250();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      Set<Route> set0 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(set0);
      
      Set<Route> set1 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(set1, set0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(set1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(proxySelector0);
      
      int int0 = 300;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      okHttpClient2.authenticator = okHttpClient3.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient5 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setCookieHandler(okHttpClient5.cookieHandler);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient7);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertNull(responseCache0);
      
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient8 = okHttpClient5.setConnectionPool(connectionPool0);
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient1.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = serializedObjectSupporter0.deserializeObjectOkHttpClient142();
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient10);
      
      ProxySelector proxySelector1 = okHttpClient9.getProxySelector();
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient11 = serializedObjectSupporter0.deserializeObjectOkHttpClient58();
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient0.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertNotNull(okHttpClient12);
      
      ResponseCache responseCache1 = okHttpClient2.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNull(responseCache1);
      
      Set<Route> set2 = okHttpClient8.getfailedRoutes();
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(set2, set0);
      assertSame(set2, set1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertNotNull(set2);
      
      ConnectionPool connectionPool1 = okHttpClient7.getConnectionPool();
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(connectionPool0, connectionPool1);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(connectionPool1, connectionPool0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient12));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertNotNull(connectionPool1);
      
      OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient13);
      
      ConnectionPool connectionPool2 = okHttpClient8.getConnectionPool();
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, connectionPool2.getConnectionCount());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(connectionPool0, connectionPool1);
      assertSame(connectionPool0, connectionPool2);
      assertSame(connectionPool2, connectionPool0);
      assertSame(connectionPool2, connectionPool1);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertNotNull(connectionPool2);
      
      boolean boolean1 = okHttpClient8.getFollowProtocolRedirects();
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(connectionPool0, connectionPool1);
      assertSame(connectionPool0, connectionPool2);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(boolean1);
      
      ConnectionPool connectionPool3 = okHttpClient12.getConnectionPool();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertNull(connectionPool3);
      
      OkHttpClient okHttpClient14 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient14);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient14);
      
      boolean boolean2 = false;
      OkHttpClient okHttpClient15 = okHttpClient14.setFollowProtocolRedirects(boolean2);
      assertFalse(okHttpClient15.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient14.getFollowProtocolRedirects());
      assertFalse(okHttpClient15.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient14.followProtocolRedirects);
      assertNotSame(okHttpClient15, okHttpClient7);
      assertNotSame(okHttpClient15, okHttpClient5);
      assertNotSame(okHttpClient15, okHttpClient6);
      assertNotSame(okHttpClient15, okHttpClient10);
      assertNotSame(okHttpClient15, okHttpClient2);
      assertSame(okHttpClient15, okHttpClient14);
      assertNotSame(okHttpClient15, okHttpClient13);
      assertNotSame(okHttpClient15, okHttpClient1);
      assertNotSame(okHttpClient15, okHttpClient11);
      assertNotSame(okHttpClient15, okHttpClient8);
      assertNotSame(okHttpClient15, okHttpClient0);
      assertNotSame(okHttpClient15, okHttpClient4);
      assertNotSame(okHttpClient15, okHttpClient12);
      assertNotSame(okHttpClient15, okHttpClient3);
      assertNotSame(okHttpClient15, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient15);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient14);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient15);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertSame(okHttpClient14, okHttpClient15);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertTrue(boolean2 == boolean1);
      assertFalse(okHttpClient15.equals((Object)okHttpClient7));
      assertFalse(okHttpClient15.equals((Object)okHttpClient5));
      assertFalse(okHttpClient15.equals((Object)okHttpClient6));
      assertFalse(okHttpClient15.equals((Object)okHttpClient10));
      assertFalse(okHttpClient15.equals((Object)okHttpClient2));
      assertFalse(okHttpClient15.equals((Object)okHttpClient13));
      assertFalse(okHttpClient15.equals((Object)okHttpClient1));
      assertFalse(okHttpClient15.equals((Object)okHttpClient11));
      assertFalse(okHttpClient15.equals((Object)okHttpClient8));
      assertFalse(okHttpClient15.equals((Object)okHttpClient0));
      assertFalse(okHttpClient15.equals((Object)okHttpClient4));
      assertFalse(okHttpClient15.equals((Object)okHttpClient12));
      assertFalse(okHttpClient15.equals((Object)okHttpClient3));
      assertFalse(okHttpClient15.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient15);
      
      // Undeclared exception!
      try { 
        okHttpClient5.setTransports(okHttpClient2.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient216();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      int int0 = 2;
      long long1 = 826L;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long1);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(long1 == long0);
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(long1 == long0);
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(long1 == long0);
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(long1 == long0);
      assertNull(okResponseCache0);
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(boolean1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(long1 == long0);
      assertTrue(boolean1 == boolean0);
      assertNotNull(okHttpClient3);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNull(list0);
      
      OkHttpClient okHttpClient4 = okHttpClient2.copyWithDefaults();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(long1 == long0);
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient2.setAuthenticator(okHttpClient3.authenticator);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(long1 == long0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = serializedObjectSupporter0.deserializeObjectOkHttpClient9();
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient6);
      
      okHttpClient6.serializedObjectSupporter = okHttpClient4.serializedObjectSupporter;
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      okHttpClient5.hostnameVerifier = okHttpClient2.hostnameVerifier;
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient4.setProxy(okHttpClient1.proxy);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(long1 == long0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient5.setCookieHandler(okHttpClient3.cookieHandler);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(long1 == long0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient8);
      
      okHttpClient8.transports = okHttpClient5.transports;
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient7.getResponseCache();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(long1 == long0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient9 = okHttpClient7.setAuthenticator(okHttpClient8.authenticator);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(long1 == long0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient4.setCookieHandler(okHttpClient1.cookieHandler);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(long1 == long0);
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient10);
      
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient11 = okHttpClient1.setAuthenticator(okAuthenticator0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(long1 == long0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient11);
      
      ConnectionPool connectionPool1 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool1.getConnectionCount());
      assertNotSame(connectionPool1, connectionPool0);
      assertFalse(connectionPool1.equals((Object)connectionPool0));
      assertNotNull(connectionPool1);
      
      OkHttpClient okHttpClient12 = okHttpClient8.setConnectionPool(connectionPool1);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(connectionPool0, connectionPool1);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(connectionPool1, connectionPool0);
      assertSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(long1 == long0);
      assertFalse(connectionPool0.equals((Object)connectionPool1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(connectionPool1.equals((Object)connectionPool0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient12);
      
      OkHttpClient okHttpClient13 = okHttpClient6.setAuthenticator(okAuthenticator0);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient13);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string0 = "M|-";
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient136();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(set0);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy3();
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:43383", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:43383", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient0.responseCache);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotNull(okHttpClient3);
      
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNull(okResponseCache0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient111();
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      okHttpClient4.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient3.setAuthenticator(okHttpClient0.authenticator);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient5.setFollowProtocolRedirects(boolean1);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertTrue(boolean1 == boolean0);
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient3.setHostnameVerifier(okHttpClient7.hostnameVerifier);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertTrue(boolean1 == boolean0);
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient8.setTransports(okHttpClient6.DEFAULT_TRANSPORTS);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertTrue(boolean1 == boolean0);
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient5.setProxySelector(okHttpClient0.proxySelector);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient10);
      
      List<String> list0 = okHttpClient3.getDEFAULT_TRANSPORTS();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      OkHttpClient okHttpClient11 = okHttpClient5.setTransports(okHttpClient1.DEFAULT_TRANSPORTS);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:43383", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient10.setCookieHandler(okHttpClient7.cookieHandler);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertTrue(boolean1 == boolean0);
      assertNotNull(okHttpClient12);
      
      ResponseCache responseCache0 = okHttpClient7.getResponseCache();
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertTrue(boolean1 == boolean0);
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient13 = okHttpClient1.setFollowProtocolRedirects(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:43383", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient13.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient13.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient1);
      assertSame(okHttpClient13, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient13, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertNotNull(okHttpClient13);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:43383", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertTrue(httpURLConnection0.usingProxy());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertNull(httpURLConnection0.getContentEncoding());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertNull(httpURLConnection0.getContentType());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertNotNull(httpURLConnection0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient14 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory0);
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient14.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient14.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient14);
      assertSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient14);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient12);
      assertSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient14);
      
      long long0 = 358L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient99();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      String string0 = "AkU^og.q<\"Krk`XV";
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(okAuthenticator0).toString();
      CookieStore cookieStore0 = null;
      String string1 = null;
      String string2 = "(I}9rS:Lb3]eSn9";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(mockFile0);
      
      long long0 = 517L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(httpResponseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(okHttpClient1);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(okResponseCache0);
      
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(okHttpClient1.cookieHandler);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(okHttpClient4);
      
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotNull(set0);
      
      OkHttpClient okHttpClient5 = okHttpClient1.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient5.copyWithDefaults();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(okHttpClient6);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertNull(sSLSocketFactory0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNotSame(cookieHandler0, cookieManager0);
      assertFalse(cookieHandler0.equals((Object)cookieManager0));
      assertNotNull(cookieHandler0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertNotNull(httpURLConnection0);
      
      Set<Route> set1 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(1, httpResponseCache0.getRequestCount());
      assertEquals(1, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string2, string0);
      assertSame(set1, set0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertNotNull(set1);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient6.getHostnameVerifier();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("(I}9rS:Lb3]eSn9", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1, httpResponseCache0.getRequestCount());
      assertEquals(1, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(string2, string0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(cookieManager0.equals((Object)cookieHandler0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNotNull(hostnameVerifier0);
      
      CookiePolicy cookiePolicy1 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      cookieManager0.setCookiePolicy(cookiePolicy1);
      assertNotSame(cookieManager0, cookieHandler0);
      assertFalse(cookieManager0.equals((Object)cookieHandler0));
      
      CookieHandler cookieHandler1 = null;
      OkHttpClient okHttpClient7 = okHttpClient2.setCookieHandler(cookieHandler1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(cookieManager0.equals((Object)cookieHandler0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient7);
      
      HttpResponseCache httpResponseCache1 = (HttpResponseCache)okHttpClient2.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(1, httpResponseCache1.getRequestCount());
      assertEquals(1, httpResponseCache1.getNetworkCount());
      assertEquals(0, httpResponseCache1.getHitCount());
      assertEquals(0, httpResponseCache1.getWriteSuccessCount());
      assertEquals(0, httpResponseCache1.getWriteAbortCount());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(httpResponseCache1, httpResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(cookieManager0.equals((Object)cookieHandler0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNotNull(httpResponseCache1);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      OkHttpClient okHttpClient0 = null;
      OkHttpClient okHttpClient1 = null;
      try {
        okHttpClient1 = new OkHttpClient(okHttpClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient7();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      RawHeaders rawHeaders0 = RawHeaders.fromNameValueBlock(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(1, rawHeaders0.length());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(rawHeaders0);
      
      List<String> list0 = rawHeaders0.toNameValueBlock();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(1, rawHeaders0.length());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      okHttpClient0.transports = list0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(1, rawHeaders0.length());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, okHttpClient0.transports.size());
      assertFalse(okHttpClient0.transports.isEmpty());
      
      okHttpClient0.hostnameVerifier = hostnameVerifier0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(okHttpClient1.proxy);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient3);
      
      List<String> list1 = okHttpClient1.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(string0));
      assertNotNull(list1);
      
      List<String> list2 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(list2, list1);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.contains(string0));
      assertNotNull(list2);
      
      okHttpClient2.hostnameVerifier = okHttpClient0.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      rawHeaders0.setRequestLine(string0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(1, rawHeaders0.length());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("transports doesn't contain http/1.1: ", 12345);
      boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long long0 = (-2251L);
      System.setCurrentTimeMillis(long0);
      OkHttpClient okHttpClient4 = okHttpClient0.setResponseCache(okHttpClient3.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setResponseCache(okHttpClient3.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient5);
      
      List<String> list3 = okHttpClient4.getTransports();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(2, list3.size());
      assertFalse(list3.isEmpty());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(list3, list0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertFalse(list3.contains(string0));
      assertNotNull(list3);
      
      OkHttpClient okHttpClient6 = okHttpClient4.setAuthenticator(okHttpClient5.authenticator);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient6);
      
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient7 = okHttpClient5.setResponseCache(okHttpClient4.responseCache);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient7);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      okHttpClient0.transports = (List<String>) linkedList0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertTrue(okHttpClient0.transports.isEmpty());
      assertEquals(0, okHttpClient0.transports.size());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient3 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient3);
      
      int int0 = (-1177);
      long long0 = (-1593L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setConnectionPool(connectionPool0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotNull(okHttpClient4);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotNull(list0);
      
      ConnectionPool connectionPool1 = okHttpClient3.getConnectionPool();
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(connectionPool1, connectionPool0);
      assertNotNull(connectionPool1);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setAuthenticator(okHttpClient5.authenticator);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotNull(okHttpClient6);
  }
}
