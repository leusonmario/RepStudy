/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 08 18:26:05 GMT 2021
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.SerializedObjectSupporter;
import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import sun.security.ssl.SSLSocketFactoryImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient192();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient64();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient275();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient155();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient53();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      
      ResponseCache responseCache0 = okHttpClient3.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNull(responseCache0);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNotNull(set0);
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      List<String> list0 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNotNull(list0);
      
      ProxySelector proxySelector2 = okHttpClient4.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNull(proxySelector2);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient226();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient66();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory1 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient1.connectionPool);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      CookieStore cookieStore0 = null;
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(cookieHandler0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient4 = okHttpClient2.setProxySelector(okHttpClient3.proxySelector);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient1.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      OkResponseCache okResponseCache1 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(okResponseCache1);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setConnectionPool(okHttpClient1.connectionPool);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient6);
      
      long long0 = 40L;
      System.setCurrentTimeMillis(long0);
      OkHttpClient okHttpClient7 = okHttpClient4.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient83();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient186();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      int int0 = 3897;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient361();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      int int1 = connectionPool0.getSpdyConnectionCount();
      assertEquals(0, int1);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(int1 == int0);
      
      List<Connection> list0 = connectionPool0.getConnections();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(int0 == int1);
      assertNotNull(list0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, okHttpClient0.followProtocolRedirects, boolean0, boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(boolean1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(boolean1 == boolean0);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(int0 == int1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      File file0 = null;
      String string0 = "h";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      long long0 = 1007L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("h", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("h", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertNotNull(httpResponseCache0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("h", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("h", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(int0 == int1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("h", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("h", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(int0 == int1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(int0 == int1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okResponseCache0);
      
      ProxySelector proxySelector0 = okHttpClient2.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient6 = okHttpClient2.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(int0 == int1);
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient2.setAuthenticator(okHttpClient3.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(int0 == int1);
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient7);
      
      List<String> list1 = okHttpClient0.getTransports();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertNull(list1);
      
      OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient8);
      
      long long1 = 40L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      OkHttpClient okHttpClient9 = okHttpClient3.setCookieHandler(okHttpClient1.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(int0 == int1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient9);
      
      List<String> list2 = okHttpClient1.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertFalse(list2.contains(string0));
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertNotNull(list2);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient208();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient137();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy6();
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient322();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient64();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(sSLSocketFactory0);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(okHttpClient1.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient70();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      ResponseCache responseCache0 = null;
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient338();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient349();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(hostnameVerifier0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient293();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient307();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      okHttpClient1.hostnameVerifier = okHttpClient3.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      String string0 = "k\"ZT_cc";
      try { 
        MockURL.URL(string0, string0, string0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: k\"zt_cc
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient277();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(connectionPool0);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(list0);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(hostnameVerifier0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient88();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(proxy0);
      
      RawHeaders rawHeaders0 = RawHeaders.fromNameValueBlock(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertEquals(1, rawHeaders0.length());
      assertNull(rawHeaders0.getResponseMessage());
      assertNull(rawHeaders0.getStatusLine());
      assertNotNull(rawHeaders0);
      
      List<String> list0 = rawHeaders0.toNameValueBlock();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertEquals(1, rawHeaders0.length());
      assertNull(rawHeaders0.getResponseMessage());
      assertNull(rawHeaders0.getStatusLine());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(list0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertEquals(1, rawHeaders0.length());
      assertNull(rawHeaders0.getResponseMessage());
      assertNull(rawHeaders0.getStatusLine());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient184();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient345();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient359();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient252();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient141();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(okResponseCache0);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient41();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient5);
      
      List<String> list0 = okHttpClient1.getTransports();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(list0);
      
      List<String> list1 = okHttpClient0.getTransports();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(list1);
      
      ResponseCache responseCache0 = okHttpClient4.getResponseCache();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setAuthenticator(okHttpClient3.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient6);
      
      okHttpClient6.serializedObjectSupporter = okHttpClient0.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = serializedObjectSupporter0.deserializeObjectOkHttpClient376();
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient7);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient3.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNull(hostnameVerifier0);
      
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(responseCache1);
      
      OkHttpClient okHttpClient8 = okHttpClient3.setFollowProtocolRedirects(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient8.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient9);
      
      List<String> list2 = okHttpClient1.getTransports();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(list2);
      
      List<String> list3 = okHttpClient5.getTransports();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertEquals(2, list3.size());
      assertFalse(list3.isEmpty());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertNotNull(list3);
      
      ConnectionPool connectionPool0 = okHttpClient3.getConnectionPool();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNull(connectionPool0);
      
      OkResponseCache okResponseCache1 = okHttpClient8.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNull(okResponseCache1);
      
      OkHttpClient okHttpClient10 = okHttpClient1.setProxy(okHttpClient8.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient10);
      
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(list1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient252();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient402();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      okHttpClient0.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient1.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setAuthenticator(okAuthenticator0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      String string0 = "transports doesn't contain http/1.1: ";
      URL uRL1 = MockURL.URL(uRL0, string0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient218();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(okHttpClient1.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) hostnameVerifier0;
      objectArray0[2] = (Object) okHttpClient2;
      objectArray0[3] = (Object) serializedObjectSupporter0;
      objectArray0[4] = (Object) okHttpClient1;
      objectArray0[5] = (Object) linkedList0;
      Object[] objectArray1 = linkedList0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotNull(objectArray1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient264();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient129();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient324();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okAuthenticator0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient366();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      List<String> list0 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient5 = okHttpClient4.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient4.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient6);
      
      String string0 = "K=<9;L";
      try { 
        MockURL.URL(string0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: K=<9;L
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient263();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactoryImpl sSLSocketFactoryImpl0 = serializedObjectSupporter0.deserializeObjectSSLSocketFactory2();
      assertNull(sSLSocketFactoryImpl0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactoryImpl0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNull(proxySelector0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient42();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(cookieHandler0);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler1 = CookieHandler.getDefault();
      assertNull(cookieHandler1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(cookieHandler0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient0.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(sSLSocketFactory1);
      
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(boolean1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient255();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDoInput());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient333();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      okHttpClient3.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient136();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNull(proxy0);
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNotNull(sSLSocketFactory0);
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNull(responseCache0);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setTransports(okHttpClient1.transports);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient5);
      
      // Undeclared exception!
      try { 
        okHttpClient5.setTransports(okHttpClient3.transports);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient70();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(responseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient158();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(set0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(okHttpClient1.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient1.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertNull(proxySelector0);
      
      Proxy proxy0 = okHttpClient3.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNull(proxy0);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient3.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient1.setFollowProtocolRedirects(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient8.setCookieHandler(okHttpClient3.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient9);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient10 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient10);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient43();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient48();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      List<String> list0 = OkHttpClient.DEFAULT_TRANSPORTS;
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setTransports(list0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      okHttpClient3.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setResponseCache(okHttpClient3.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      
      OkResponseCache okResponseCache0 = okHttpClient4.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(boolean0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      
      List<String> list1 = okHttpClient1.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(list1, list0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotNull(list1);
      
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient197();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient168();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy9();
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:33933", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:33933", proxy0.toString());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkAuthenticator okAuthenticator1 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient0.setAuthenticator(okAuthenticator1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setCookieHandler(okHttpClient3.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      String string0 = "";
      try { 
        MockURL.URL(string0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient180();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      List<String> list0 = OkHttpClient.DEFAULT_TRANSPORTS;
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(list0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      String string0 = "https";
      String string1 = "";
      okHttpClient2.authenticator = okHttpClient1.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      try { 
        MockURI.URI(string0, string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: https://httpshttps?https#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient359();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(proxy0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient226();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNotNull(httpsURLConnectionImpl0);
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient66();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache1 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(okResponseCache1);
      
      SSLSocketFactory sSLSocketFactory1 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(okHttpClient3.proxy);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      CookieStore cookieStore0 = null;
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient6 = okHttpClient2.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      
      boolean boolean0 = okHttpClient3.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertTrue(boolean0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient7 = serializedObjectSupporter0.deserializeObjectOkHttpClient379();
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient7);
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertNull(connectionPool1);
      
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertTrue(boolean1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNull(cookieHandler0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient4.open(uRL0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getDoInput());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient8 = okHttpClient4.setProxySelector(okHttpClient6.proxySelector);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient5.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient9);
      
      OkResponseCache okResponseCache2 = okHttpClient5.okResponseCache();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient8);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNull(okResponseCache2);
      
      OkHttpClient okHttpClient10 = okHttpClient7.setConnectionPool(okHttpClient5.connectionPool);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient8);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient10);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      OkHttpClient okHttpClient0 = null;
      OkHttpClient okHttpClient1 = null;
      try {
        okHttpClient1 = new OkHttpClient(okHttpClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient388();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      byte byte0 = (byte)75;
      byteArray0[0] = byte0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)75}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      String string0 = "Y`H_gUlCtF1%;Pr";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      URL uRL0 = null;
      OkHttpClient okHttpClient3 = okHttpClient0.serializedObjectSupporter.deserializeObjectOkHttpClient67();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0.serializedObjectSupporter, serializedObjectSupporter0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient353();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = true;
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      okHttpClient0.hostnameVerifier = hostnameVerifier0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      List<String> list0 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      ProxySelector.setDefault(okHttpClient1.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      URL uRL0 = null;
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okResponseCacheAdapter0);
      
      HttpURLConnectionImpl httpURLConnectionImpl0 = new HttpURLConnectionImpl(uRL0, okHttpClient2, okResponseCacheAdapter0, okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(httpURLConnectionImpl0.getDefaultUseCaches());
      assertTrue(httpURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertEquals(0L, httpURLConnectionImpl0.getIfModifiedSince());
      assertTrue(httpURLConnectionImpl0.getUseCaches());
      assertTrue(httpURLConnectionImpl0.getAllowUserInteraction());
      assertFalse(httpURLConnectionImpl0.usingProxy());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:null", httpURLConnectionImpl0.toString());
      assertEquals(0, httpURLConnectionImpl0.getReadTimeout());
      assertTrue(httpURLConnectionImpl0.getDoInput());
      assertTrue(httpURLConnectionImpl0.getInstanceFollowRedirects());
      assertTrue(httpURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpURLConnectionImpl0.getDoOutput());
      assertEquals(0, httpURLConnectionImpl0.getConnectTimeout());
      assertEquals("GET", httpURLConnectionImpl0.getRequestMethod());
      assertNotNull(httpURLConnectionImpl0);
      
      Map<String, List<String>> map0 = httpURLConnectionImpl0.getRequestProperties();
      okHttpClient2.transports = list0;
      boolean boolean1 = true;
      RawHeaders rawHeaders0 = RawHeaders.fromMultimap(map0, boolean1);
      List<String> list1 = rawHeaders0.toNameValueBlock();
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(list1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient253();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, okHttpClient0.followProtocolRedirects, boolean0, boolean1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(boolean2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient382();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient2.getHostnameVerifier();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setTransports(okHttpClient1.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient226();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertNotNull(httpsURLConnectionImpl0);
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient66();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache1 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(okResponseCache1);
      
      SSLSocketFactory sSLSocketFactory1 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(okHttpClient3.proxy);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      CookieStore cookieStore0 = null;
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient6 = okHttpClient2.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient6);
      
      boolean boolean0 = okHttpClient3.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(boolean0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient7 = serializedObjectSupporter0.deserializeObjectOkHttpClient379();
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(connectionPool1);
      
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(boolean1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNull(cookieHandler0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient4.open(uRL0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertTrue(httpURLConnection0.getAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient8 = okHttpClient3.setHostnameVerifier(okHttpClient7.hostnameVerifier);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient5.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient7.setConnectionPool(okHttpClient5.connectionPool);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient10);
      
      OkHttpClient okHttpClient11 = okHttpClient6.copyWithDefaults();
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient11);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "https";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotNull(okHttpClient1);
      
      boolean boolean3 = false;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotNull(okHttpClient3);
      
      String string1 = "spdy/3";
      OkHttpClient okHttpClient4 = okHttpClient2.setCookieHandler(okHttpClient0.cookieHandler);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(okHttpClient3.proxy);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotNull(okHttpClient5);
      
      MockFile mockFile0 = new MockFile(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotSame(string1, string0);
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/spdy/3/spdy/3", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/spdy/3/spdy", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("3", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(uRL0);
      
      OkResponseCache okResponseCache0 = null;
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient1, okResponseCache0, okHttpClient1.failedRoutes);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/spdy/3/spdy/3", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/spdy/3/spdy", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("3", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpsURLConnectionImpl0);
      
      // Undeclared exception!
      try { 
        httpsURLConnectionImpl0.connect();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient42();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(cookieHandler0);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler1 = CookieHandler.getDefault();
      assertNull(cookieHandler1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient0.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(sSLSocketFactory1);
      
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(boolean1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okAuthenticator0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient226();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertNotNull(httpsURLConnectionImpl0);
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient66();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache1 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(okResponseCache1);
      
      SSLSocketFactory sSLSocketFactory1 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(okHttpClient3.proxy);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = okHttpClient3.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(boolean0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient6 = serializedObjectSupporter0.deserializeObjectOkHttpClient379();
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient6);
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(connectionPool1);
      
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(boolean1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      boolean boolean2 = false;
      OkHttpClient okHttpClient7 = okHttpClient3.setFollowProtocolRedirects(boolean2);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNull(cookieHandler0);
      
      OkHttpClient okHttpClient8 = okHttpClient4.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient8);
      
      HttpURLConnection httpURLConnection0 = okHttpClient4.open(uRL0);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient9 = okHttpClient5.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient6.setConnectionPool(okHttpClient5.connectionPool);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient10);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient226();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertNotNull(httpsURLConnectionImpl0);
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient26();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient66();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache1 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(okResponseCache1);
      
      SSLSocketFactory sSLSocketFactory1 = null;
      OkHttpClient okHttpClient3 = okHttpClient1.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setProxy(okHttpClient1.proxy);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      
      CookieStore cookieStore0 = null;
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient5 = okHttpClient2.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient6 = serializedObjectSupporter0.deserializeObjectOkHttpClient379();
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient6);
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNull(connectionPool1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNull(cookieHandler0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient3.open(uRL0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNull(httpURLConnection0.getContentEncoding());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getDefaultAllowUserInteraction());
      assertNull(httpURLConnection0.getContentType());
      assertTrue(httpURLConnection0.getAllowUserInteraction());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient7 = okHttpClient3.setProxySelector(okHttpClient5.proxySelector);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient4.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient8);
      
      OkResponseCache okResponseCache2 = okHttpClient3.okResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNull(okResponseCache2);
      
      OkHttpClient okHttpClient9 = okHttpClient6.setConnectionPool(okHttpClient4.connectionPool);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient2.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertNotNull(okHttpClient10);
      
      OkHttpClient okHttpClient11 = okHttpClient10.setAuthenticator(okHttpClient8.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient1.setTransports(okHttpClient10.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient12);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient122();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(list0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("transports doesn't contain http/1.1: ", 1);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient268();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      List<String> list0 = OkHttpClient.DEFAULT_TRANSPORTS;
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      okHttpClient0.transports = list0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(okHttpClient0.transports.isEmpty());
      assertEquals(2, okHttpClient0.transports.size());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient58();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(okResponseCache0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(okResponseCache1);
      
      boolean boolean2 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient2.setConnectionPool(okHttpClient1.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient3.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient6);
      
      boolean boolean3 = false;
      OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(boolean3);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient7);
      
      OkResponseCache okResponseCache2 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(okResponseCache2);
      
      OkHttpClient okHttpClient8 = okHttpClient6.setConnectionPool(okHttpClient1.connectionPool);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient8);
      
      Proxy proxy0 = okHttpClient8.getProxy();
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(proxy0);
      
      ProxySelector proxySelector0 = okHttpClient3.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient9 = okHttpClient2.setConnectionPool(okHttpClient7.connectionPool);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient9);
      
      boolean boolean4 = okHttpClient5.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(boolean4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient226();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient66();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(okResponseCache1);
      
      SSLSocketFactory sSLSocketFactory1 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory1);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient1.connectionPool);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setProxy(okHttpClient2.proxy);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      CookieStore cookieStore0 = null;
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient5 = okHttpClient1.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(boolean1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient6 = serializedObjectSupporter0.deserializeObjectOkHttpClient379();
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      
      ConnectionPool connectionPool1 = okHttpClient1.getConnectionPool();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertNull(connectionPool1);
      
      boolean boolean2 = okHttpClient1.getFollowProtocolRedirects();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertTrue(boolean2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      
      OkHttpClient okHttpClient7 = okHttpClient3.setProxySelector(okHttpClient5.proxySelector);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient4.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient8);
      
      OkResponseCache okResponseCache2 = okHttpClient4.okResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertNull(okResponseCache2);
      
      OkHttpClient okHttpClient9 = okHttpClient6.setConnectionPool(okHttpClient4.connectionPool);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient1.setProxy(okHttpClient7.proxy);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertNotNull(okHttpClient10);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNotNull(set0);
      
      CookieHandler cookieHandler0 = okHttpClient5.getCookieHandler();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(cookieHandler0, cookieManager0);
      assertSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertNotNull(cookieHandler0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient155();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient316();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(list0);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(responseCache0);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      
      okHttpClient4.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(responseCache1);
      
      ProxySelector proxySelector0 = okHttpClient4.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setProxy(okHttpClient4.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setAuthenticator(okHttpClient3.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient6);
      
      HostnameVerifier hostnameVerifier1 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(hostnameVerifier1);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient7);
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient8 = okHttpClient5.setFollowProtocolRedirects(boolean1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient4.setSSLSocketFactory(okHttpClient5.sslSocketFactory);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient9);
      
      String string1 = "c+~ari@5ri6_}";
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ResponseCache responseCache2 = okHttpClient7.getResponseCache();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNull(responseCache2);
      
      OkHttpClient okHttpClient10 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient10);
      
      Set<Route> set0 = okHttpClient3.getfailedRoutes();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertNotNull(set0);
      
      OkHttpClient okHttpClient11 = okHttpClient9.setCookieHandler(okHttpClient2.cookieHandler);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient11);
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient12 = okHttpClient0.setProxySelector(proxySelector1);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertNotNull(okHttpClient12);
      
      OkHttpClient okHttpClient13 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient13);
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient13.getSslSocketFactory();
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertSame(sSLSocketFactory1, sSLSocketFactory0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNotNull(sSLSocketFactory1);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient401();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("https", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      int int0 = 2032;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "'w VArV+$=Ip7{! X";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient384();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      boolean boolean2 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ConnectionPool connectionPool1 = okHttpClient0.getConnectionPool();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(connectionPool1, connectionPool0);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertEquals(0, connectionPool1.getConnectionCount());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNotNull(connectionPool1);
      
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNull(okResponseCache0);
      
      ConnectionPool connectionPool2 = okHttpClient0.getConnectionPool();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool2, connectionPool0);
      assertSame(connectionPool2, connectionPool1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool2.getConnectionCount());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNotNull(connectionPool2);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(connectionPool0, connectionPool1);
      assertSame(connectionPool0, connectionPool2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      
      List<Connection> list0 = connectionPool0.getConnections();
      assertSame(connectionPool0, connectionPool1);
      assertSame(connectionPool0, connectionPool2);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(list0);
      
      List<Connection> list1 = connectionPool0.getConnections();
      assertNotSame(list1, list0);
      assertSame(connectionPool0, connectionPool1);
      assertSame(connectionPool0, connectionPool2);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNull(okAuthenticator0);
      
      OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient0.setProxySelector(okHttpClient4.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(connectionPool0, connectionPool1);
      assertSame(connectionPool0, connectionPool2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setConnectionPool(okHttpClient5.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(connectionPool0, connectionPool1);
      assertSame(connectionPool0, connectionPool2);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient7);
      
      List<String> list2 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(list2.contains(string0));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNotNull(list2);
      
      boolean boolean3 = false;
      OkHttpClient okHttpClient8 = okHttpClient3.setFollowProtocolRedirects(boolean3);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient8);
      
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient6.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient230();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy6();
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = serializedObjectSupporter0.deserializeObjectOkHttpClient14();
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient6);
      
      List<String> list0 = okHttpClient3.getTransports();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotNull(list0);
      
      Proxy proxy1 = okHttpClient5.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(proxy1, proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy1.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy1.toString());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(proxy1);
      
      OkHttpClient okHttpClient7 = okHttpClient3.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient1.setProxySelector(okHttpClient3.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient8);
      
      Set<Route> set0 = okHttpClient2.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNotNull(set0);
      
      OkHttpClient okHttpClient9 = okHttpClient0.setAuthenticator(okHttpClient4.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient9);
      
      List<String> list1 = okHttpClient9.getDEFAULT_TRANSPORTS();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(list1, list0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertNotNull(list1);
      
      OkHttpClient okHttpClient10 = okHttpClient4.setProxySelector(okHttpClient0.proxySelector);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient10);
      
      OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(okHttpClient4.hostnameVerifier);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40677", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient11);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient155();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient316();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(list0);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(responseCache0);
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertNull(okResponseCache0);
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      
      okHttpClient4.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(responseCache1);
      
      ProxySelector proxySelector0 = okHttpClient4.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setProxy(okHttpClient4.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setAuthenticator(okHttpClient3.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient6);
      
      HostnameVerifier hostnameVerifier1 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(hostnameVerifier1);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient7);
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient8 = okHttpClient5.setFollowProtocolRedirects(boolean1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient4.setAuthenticator(okHttpClient8.authenticator);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient9);
      
      OkHttpClient okHttpClient10 = okHttpClient4.setSSLSocketFactory(okHttpClient5.sslSocketFactory);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient10);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient10);
      
      String string1 = "c+~ari@5ri6_}";
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ResponseCache responseCache2 = okHttpClient7.getResponseCache();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNull(responseCache2);
      
      OkHttpClient okHttpClient11 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient11);
      
      Set<Route> set0 = okHttpClient3.getfailedRoutes();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(set0);
      
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      OkHttpClient okHttpClient12 = okHttpClient10.setCookieHandler(okHttpClient2.cookieHandler);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient10);
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient12);
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient13 = okHttpClient0.setProxySelector(proxySelector1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient13.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient5);
      assertSame(okHttpClient13, okHttpClient4);
      assertSame(okHttpClient13, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient10);
      assertSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient1);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient6);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient13.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient13);
      
      OkHttpClient okHttpClient14 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient14);
      
      List<String> list1 = okHttpClient0.getDEFAULT_TRANSPORTS();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertFalse(list1.contains(string1));
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNotNull(list1);
      
      OkHttpClient okHttpClient15 = okHttpClient10.copyWithDefaults();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient15.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient15);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient13);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient14);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient15, okHttpClient9);
      assertNotSame(okHttpClient15, okHttpClient6);
      assertNotSame(okHttpClient15, okHttpClient5);
      assertNotSame(okHttpClient15, okHttpClient14);
      assertNotSame(okHttpClient15, okHttpClient11);
      assertNotSame(okHttpClient15, okHttpClient3);
      assertNotSame(okHttpClient15, okHttpClient1);
      assertNotSame(okHttpClient15, okHttpClient7);
      assertNotSame(okHttpClient15, okHttpClient8);
      assertNotSame(okHttpClient15, okHttpClient10);
      assertNotSame(okHttpClient15, okHttpClient2);
      assertNotSame(okHttpClient15, okHttpClient4);
      assertNotSame(okHttpClient15, okHttpClient13);
      assertNotSame(okHttpClient15, okHttpClient12);
      assertNotSame(okHttpClient15, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient15);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient15);
      assertSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient14);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient13);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient15);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient14);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient13);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient10);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient15.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient14));
      assertFalse(okHttpClient15.equals((Object)okHttpClient9));
      assertFalse(okHttpClient15.equals((Object)okHttpClient6));
      assertFalse(okHttpClient15.equals((Object)okHttpClient5));
      assertFalse(okHttpClient15.equals((Object)okHttpClient14));
      assertFalse(okHttpClient15.equals((Object)okHttpClient11));
      assertFalse(okHttpClient15.equals((Object)okHttpClient3));
      assertFalse(okHttpClient15.equals((Object)okHttpClient1));
      assertFalse(okHttpClient15.equals((Object)okHttpClient7));
      assertFalse(okHttpClient15.equals((Object)okHttpClient8));
      assertFalse(okHttpClient15.equals((Object)okHttpClient10));
      assertFalse(okHttpClient15.equals((Object)okHttpClient2));
      assertFalse(okHttpClient15.equals((Object)okHttpClient4));
      assertFalse(okHttpClient15.equals((Object)okHttpClient13));
      assertFalse(okHttpClient15.equals((Object)okHttpClient12));
      assertFalse(okHttpClient15.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient14));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient14));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient14));
      assertNotNull(okHttpClient15);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient64();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "fK4pRBvg)t]Z(r";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(okResponseCache0);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient1.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(hostnameVerifier0);
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient226();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(okResponseCache0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNotNull(httpsURLConnectionImpl0);
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient66();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      
      SSLSocketFactory sSLSocketFactory1 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(okHttpClient3.proxy);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      
      CookieStore cookieStore0 = null;
      boolean boolean0 = okHttpClient3.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertTrue(boolean0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient6 = serializedObjectSupporter0.deserializeObjectOkHttpClient379();
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient6);
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNull(connectionPool1);
      
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertTrue(boolean1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNull(cookieHandler0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient4.open(uRL0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient7 = okHttpClient5.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient7);
      
      OkResponseCache okResponseCache1 = okHttpClient5.okResponseCache();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNull(okResponseCache1);
      
      OkHttpClient okHttpClient8 = okHttpClient6.setConnectionPool(okHttpClient5.connectionPool);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient8);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient275();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = okHttpClient0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter1);
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      
      okHttpClient1.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okAuthenticator0);
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }
}
