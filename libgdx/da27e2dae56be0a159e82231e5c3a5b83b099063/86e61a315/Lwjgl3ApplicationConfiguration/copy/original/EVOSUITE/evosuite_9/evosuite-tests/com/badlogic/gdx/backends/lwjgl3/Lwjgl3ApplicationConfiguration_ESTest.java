/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 17:39:45 GMT 2021
 */

package com.badlogic.gdx.backends.lwjgl3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.badlogic.gdx.Files;
import com.badlogic.gdx.Graphics;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3NativesLoader;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3WindowAdapter;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3WindowListener;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.utils.GdxNativesLoader;
import com.badlogic.gdx.utils.SharedLibraryLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lwjgl3ApplicationConfiguration_ESTest extends Lwjgl3ApplicationConfiguration_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 32;
      lwjgl3ApplicationConfiguration0.setWindowedMode(int0, int0);
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
      String string0 = "glfwGetJoystickName";
      Files.FileType files_FileType0 = Files.FileType.Absolute;
      lwjgl3ApplicationConfiguration0.setPreferencesConfig(string0, files_FileType0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 1302;
      lwjgl3ApplicationConfiguration0.setBackBufferConfig(int0, lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion, int0, lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion, lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion, lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion, int0);
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.setDecorated(boolean0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 421;
      String string0 = "U}4,fvA5\\E=e'k\\#?x";
      lwjgl3ApplicationConfiguration0.setTitle(string0);
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      Lwjgl3WindowListener lwjgl3WindowListener0 = lwjgl3ApplicationConfiguration0.windowListener;
      assertNull(lwjgl3WindowListener0);
      
      lwjgl3ApplicationConfiguration0.setWindowListener(lwjgl3WindowListener0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      lwjgl3ApplicationConfiguration0.setWindowSizeLimits(int0, int0, int0, int0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Pixels;
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.useVsync(boolean0);
      Graphics.Monitor graphics_Monitor0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes(graphics_Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 19;
      Color color0 = Color.SKY;
      assertNotNull(color0);
      assertEquals(0.80784315F, color0.g, 0.01F);
      assertEquals(0.92156863F, color0.b, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.5294118F, color0.r, 0.01F);
      assertEquals((-1323385), color0.toIntBits());
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertEquals(0.80784315F, color0.g, 0.01F);
      assertEquals(0.92156863F, color0.b, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.5294118F, color0.r, 0.01F);
      assertEquals((-1323385), color0.toIntBits());
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.useOpenGL3(boolean0, int0, int0);
      lwjgl3ApplicationConfiguration0.disableAudio(boolean0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 472;
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int0, int0);
      lwjgl3ApplicationConfiguration0.setResizable(boolean0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.toLwjgl3Monitor(int0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lwjgl.glfw.GLFW
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3Graphics.Lwjgl3DisplayMode lwjgl3Graphics_Lwjgl3DisplayMode0 = lwjgl3ApplicationConfiguration0.fullscreenMode;
      assertNull(lwjgl3Graphics_Lwjgl3DisplayMode0);
      
      lwjgl3ApplicationConfiguration0.setFullscreenMode(lwjgl3Graphics_Lwjgl3DisplayMode0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      String string0 = "";
      lwjgl3ApplicationConfiguration0.setTitle(string0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = (-3703);
      lwjgl3ApplicationConfiguration1.audioDeviceSimultaneousSources = int0;
      int int1 = 0;
      int int2 = 35669;
      lwjgl3ApplicationConfiguration1.setAudioConfig(int1, int1, int2);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration1.setDecorated(boolean0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.setResizable(boolean0);
      int int0 = 35739;
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      
      Lwjgl3WindowListener lwjgl3WindowListener0 = lwjgl3ApplicationConfiguration1.windowListener;
      assertNull(lwjgl3WindowListener0);
      
      lwjgl3ApplicationConfiguration0.setWindowListener(lwjgl3WindowListener0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.windowResizable = boolean0;
      Color color0 = Color.ROYAL;
      assertNotNull(color0);
      assertEquals(0.4117647F, color0.g, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.88235295F, color0.b, 0.01F);
      assertEquals(0.25490198F, color0.r, 0.01F);
      assertEquals((-2004671), color0.toIntBits());
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertEquals(0.4117647F, color0.g, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.88235295F, color0.b, 0.01F);
      assertEquals(0.25490198F, color0.r, 0.01F);
      assertEquals((-2004671), color0.toIntBits());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.toLwjgl3Monitor(long0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lwjgl.glfw.GLFW
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.disableAudio = boolean0;
      boolean boolean1 = true;
      lwjgl3ApplicationConfiguration0.useVsync(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration2 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration2);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration2.disableAudio(boolean0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      
      lwjgl3ApplicationConfiguration2.setResizable(boolean0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-701);
      int int1 = 4090;
      lwjgl3ApplicationConfiguration0.setWindowedMode(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      String string0 = "f6JP4=][{teR$1N~>";
      Files.FileType files_FileType0 = Files.FileType.External;
      lwjgl3ApplicationConfiguration0.setPreferencesConfig(string0, files_FileType0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      int int0 = 2963;
      int int1 = 3272;
      lwjgl3ApplicationConfiguration0.useOpenGL3(boolean0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Color color0 = Color.OLIVE;
      assertNotNull(color0);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.41960785F, color0.r, 0.01F);
      assertEquals(0.13725491F, color0.b, 0.01F);
      assertEquals(0.5568628F, color0.g, 0.01F);
      assertEquals((-14446997), color0.toIntBits());
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.41960785F, color0.r, 0.01F);
      assertEquals(0.13725491F, color0.b, 0.01F);
      assertEquals(0.5568628F, color0.g, 0.01F);
      assertEquals((-14446997), color0.toIntBits());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 2;
      int int1 = 0;
      int int2 = 0;
      int int3 = 0;
      lwjgl3ApplicationConfiguration1.setBackBufferConfig(int0, int0, int1, int2, int3, int1, int3);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Pixels;
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      int int0 = 5322;
      int int1 = 36096;
      lwjgl3ApplicationConfiguration0.setWindowSizeLimits(int0, int1, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.useVsync(boolean0);
      String string0 = "";
      lwjgl3ApplicationConfiguration0.setTitle(string0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3WindowAdapter lwjgl3WindowAdapter0 = new Lwjgl3WindowAdapter();
      assertNotNull(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      lwjgl3ApplicationConfiguration0.setWindowListener(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      int int0 = (-4337);
      int int1 = 1728;
      int int2 = 0;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int1, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.setDecorated(boolean0);
      Color color0 = Color.SKY;
      assertNotNull(color0);
      assertEquals(0.92156863F, color0.b, 0.01F);
      assertEquals(0.5294118F, color0.r, 0.01F);
      assertEquals(0.80784315F, color0.g, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals((-1323385), color0.toIntBits());
      
      float float0 = 2152.4F;
      float float1 = 0.0F;
      float float2 = Color.toFloatBits(float0, float1, color0.a, (float) int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotEquals(float0, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.92156863F, color0.b, 0.01F);
      assertEquals(0.5294118F, color0.r, 0.01F);
      assertEquals(0.80784315F, color0.g, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals((-1323385), color0.toIntBits());
      assertEquals(7.980468F, float2, 0.01F);
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertEquals(0.92156863F, color0.b, 0.01F);
      assertEquals(0.5294118F, color0.r, 0.01F);
      assertEquals(0.80784315F, color0.g, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals((-1323385), color0.toIntBits());
      
      int int3 = 1840;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int2, int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = 2;
      int int5 = 0;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int3, int4, int5);
      assertFalse(int4 == int1);
      assertFalse(int4 == int5);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int3 == int5);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int6 = 640;
      int int7 = 34014;
      int int8 = (-2848);
      lwjgl3ApplicationConfiguration0.setAudioConfig(int6, int7, int8);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int8);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int7);
      assertFalse(int6 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int8);
      assertFalse(int7 == int3);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.toLwjgl3Monitor(int3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lwjgl.glfw.GLFW
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      SharedLibraryLoader.is64Bit = boolean0;
      int int0 = 889;
      lwjgl3ApplicationConfiguration0.audioDeviceSimultaneousSources = int0;
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration0.disableAudio = boolean1;
      String string0 = "[uxuhW\\.i|6$Mo7|";
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration2 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration1);
      assertNotNull(lwjgl3ApplicationConfiguration2);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      boolean boolean2 = true;
      SharedLibraryLoader.is64Bit = boolean2;
      Lwjgl3WindowListener lwjgl3WindowListener0 = null;
      boolean boolean3 = true;
      lwjgl3ApplicationConfiguration2.useVsync(boolean3);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      lwjgl3ApplicationConfiguration2.setWindowListener(lwjgl3WindowListener0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      Files.FileType files_FileType0 = Files.FileType.Classpath;
      lwjgl3ApplicationConfiguration2.preferencesFileType = files_FileType0;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 619;
      int int1 = 2693;
      int int2 = (-2460);
      int int3 = 36348;
      int int4 = 0;
      lwjgl3ApplicationConfiguration1.setWindowSizeLimits(int1, int2, int3, int4);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int5 = 0;
      int int6 = 0;
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Pixels;
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.windowResizable = boolean0;
      lwjgl3ApplicationConfiguration1.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int7 = 36341;
      lwjgl3ApplicationConfiguration1.setBackBufferConfig(int0, int5, int5, int0, int0, int6, int7);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int7);
      assertFalse(int0 == int3);
      assertFalse(int0 == int6);
      assertFalse(int0 == int1);
      assertFalse(int0 == int5);
      assertFalse(int5 == int7);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int7);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean1 = true;
      lwjgl3ApplicationConfiguration0.setDecorated(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      boolean boolean2 = false;
      int int8 = (-613);
      int int9 = (-1915);
      lwjgl3ApplicationConfiguration0.useOpenGL3(boolean2, int8, int9);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(boolean2 == boolean1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertFalse(int8 == int9);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int9 == int2);
      assertFalse(int9 == int7);
      assertFalse(int9 == int0);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int4);
      assertFalse(int9 == int6);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      String string0 = "com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration";
      lwjgl3ApplicationConfiguration1.setTitle(string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      String string0 = "4pNc^'/r5x`";
      lwjgl3ApplicationConfiguration0.setTitle(string0);
      int int0 = (-839);
      lwjgl3ApplicationConfiguration0.audioDeviceSimultaneousSources = int0;
      Files.FileType files_FileType0 = Files.FileType.Internal;
      lwjgl3ApplicationConfiguration0.setPreferencesConfig(string0, files_FileType0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      String string0 = "capacity";
      Files.FileType files_FileType0 = Files.FileType.External;
      lwjgl3ApplicationConfiguration1.setPreferencesConfig(string0, files_FileType0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = (-4026);
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      int int1 = 0;
      int int2 = 0;
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(int0, int1, int2, string0);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      assertEquals((-4026L), lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-539);
      int int1 = 0;
      lwjgl3ApplicationConfiguration0.setWindowSizeLimits(int0, int1, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      int int3 = 421;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration1.vSyncEnabled = boolean0;
      int int4 = 0;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int2, int3, int4);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      String string0 = "zsvJr)o;zAxD";
      lwjgl3ApplicationConfiguration0.setTitle(string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration2 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration1);
      assertNotNull(lwjgl3ApplicationConfiguration2);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      Lwjgl3WindowListener lwjgl3WindowListener0 = lwjgl3ApplicationConfiguration2.windowListener;
      assertNull(lwjgl3WindowListener0);
      
      lwjgl3ApplicationConfiguration1.setWindowListener(lwjgl3WindowListener0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      int int5 = 0;
      SharedLibraryLoader.is64Bit = boolean0;
      int int6 = (-458);
      lwjgl3ApplicationConfiguration2.setWindowSizeLimits(int4, int3, int5, int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int6);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int5);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int6);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int6);
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx.so' for target: Linux, 32-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 480;
      lwjgl3ApplicationConfiguration0.windowY = int0;
      lwjgl3ApplicationConfiguration0.windowX = int0;
      boolean boolean0 = true;
      Lwjgl3WindowAdapter lwjgl3WindowAdapter0 = new Lwjgl3WindowAdapter();
      assertNotNull(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      lwjgl3ApplicationConfiguration0.windowListener = (Lwjgl3WindowListener) lwjgl3WindowAdapter0;
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      assertTrue(lwjgl3ApplicationConfiguration0.windowListener.closeRequested());
      
      lwjgl3ApplicationConfiguration0.useVsync(boolean0);
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Logical;
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      Graphics.Monitor graphics_Monitor0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes(graphics_Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.setResizable(boolean0);
      int int0 = 3040;
      int int1 = 9;
      int int2 = 6873;
      int int3 = 3391;
      int int4 = 1042;
      lwjgl3ApplicationConfiguration0.setBackBufferConfig(int0, int1, int2, int3, int4, int3, int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      int int0 = (-709);
      int int1 = 446;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      int int0 = 0;
      int int1 = 16384;
      lwjgl3ApplicationConfiguration0.useOpenGL3(boolean0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = "l^d;W(4";
      Files.FileType files_FileType0 = Files.FileType.Internal;
      lwjgl3ApplicationConfiguration0.setPreferencesConfig(string0, files_FileType0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 480;
      int int1 = 0;
      lwjgl3ApplicationConfiguration0.windowMinHeight = int1;
      lwjgl3ApplicationConfiguration0.windowMinHeight = int0;
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Pixels;
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      int int2 = (-1260);
      int int3 = 2466;
      lwjgl3ApplicationConfiguration0.setWindowedMode(int2, int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = 2;
      int int5 = 993;
      int int6 = (-1);
      Lwjgl3Graphics.Lwjgl3DisplayMode lwjgl3Graphics_Lwjgl3DisplayMode0 = new Lwjgl3Graphics.Lwjgl3DisplayMode(lwjgl3ApplicationConfiguration0.windowMinHeight, int4, int5, int1, int6);
      assertNotNull(lwjgl3Graphics_Lwjgl3DisplayMode0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int6);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int6);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int4);
      assertTrue(lwjgl3ApplicationConfiguration0.windowMinHeight == int0);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int5);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int2);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int1);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int6);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int3);
      assertFalse(int4 == int6);
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.refreshRate);
      assertEquals((-1), lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(2, lwjgl3Graphics_Lwjgl3DisplayMode0.width);
      assertEquals(993, lwjgl3Graphics_Lwjgl3DisplayMode0.height);
      assertEquals(480L, lwjgl3Graphics_Lwjgl3DisplayMode0.getMonitor());
      
      lwjgl3ApplicationConfiguration0.setFullscreenMode(lwjgl3Graphics_Lwjgl3DisplayMode0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int6);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int6);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int4);
      assertTrue(lwjgl3ApplicationConfiguration0.windowMinHeight == int0);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int5);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int2);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int1);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int6);
      assertFalse(lwjgl3ApplicationConfiguration0.windowMinHeight == int3);
      assertFalse(int4 == int6);
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.refreshRate);
      assertEquals((-1), lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(2, lwjgl3Graphics_Lwjgl3DisplayMode0.width);
      assertEquals(993, lwjgl3Graphics_Lwjgl3DisplayMode0.height);
      assertEquals(480L, lwjgl3Graphics_Lwjgl3DisplayMode0.getMonitor());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      long long0 = 8L;
      int int0 = 0;
      int int1 = (-448);
      String string0 = "";
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(long0, int0, int1, string0);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-448), lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      assertEquals(8L, lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      String string0 = "Couldn't load shared library '";
      lwjgl3ApplicationConfiguration0.title = string0;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      long long0 = (-1L);
      int int0 = 0;
      String string1 = "";
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(long0, int0, int0, string1);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      assertEquals((-1L), lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 34004;
      lwjgl3ApplicationConfiguration1.windowWidth = int0;
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration1.disableAudio(boolean0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 3;
      int int1 = 0;
      lwjgl3ApplicationConfiguration1.setWindowPosition(int0, int1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 603;
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      Lwjgl3NativesLoader.load();
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 480;
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      lwjgl3ApplicationConfiguration0.windowY = int0;
      lwjgl3ApplicationConfiguration0.windowX = int0;
      Lwjgl3WindowAdapter lwjgl3WindowAdapter0 = new Lwjgl3WindowAdapter();
      assertNotNull(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      lwjgl3ApplicationConfiguration0.windowListener = (Lwjgl3WindowListener) lwjgl3WindowAdapter0;
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      assertTrue(lwjgl3ApplicationConfiguration0.windowListener.closeRequested());
      
      Graphics.Monitor graphics_Monitor0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes(graphics_Monitor0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      long long0 = (-1L);
      int int0 = 0;
      String string0 = "";
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(long0, int0, int0, string0);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      assertEquals((-1L), lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int0 = 0;
      int int1 = (-2227);
      lwjgl3ApplicationConfiguration0.setWindowedMode(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = true;
      GdxNativesLoader.disableNativesLoading = boolean2;
      int int2 = 763;
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      lwjgl3ApplicationConfiguration0.windowDecorated = boolean0;
      int int3 = 1219;
      String string0 = "";
      Files.FileType files_FileType0 = Files.FileType.Classpath;
      lwjgl3ApplicationConfiguration0.setPreferencesConfig(string0, files_FileType0);
      int int4 = (-1326);
      lwjgl3ApplicationConfiguration0.vSyncEnabled = boolean1;
      boolean boolean3 = true;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      Lwjgl3NativesLoader.load = boolean3;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 480;
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      lwjgl3ApplicationConfiguration0.windowY = int0;
      lwjgl3ApplicationConfiguration0.windowX = int0;
      int int1 = 553;
      int int2 = (-29);
      int int3 = 3409;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 0;
      boolean boolean0 = false;
      boolean boolean1 = true;
      GdxNativesLoader.disableNativesLoading = boolean1;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int0, int0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }
}
