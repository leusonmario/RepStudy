/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 17:45:12 GMT 2021
 */

package com.badlogic.gdx.backends.lwjgl3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.badlogic.gdx.Files;
import com.badlogic.gdx.Graphics;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3NativesLoader;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3WindowAdapter;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3WindowListener;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.utils.GdxNativesLoader;
import com.badlogic.gdx.utils.SharedLibraryLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lwjgl3ApplicationConfiguration_ESTest extends Lwjgl3ApplicationConfiguration_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-4071);
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int0, int0);
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.setDecorated(boolean0);
      lwjgl3ApplicationConfiguration0.setResizable(boolean0);
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
      String string0 = "Ss.refsX";
      lwjgl3ApplicationConfiguration0.setTitle(string0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.toLwjgl3Monitor(int0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lwjgl.glfw.GLFW
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.useVsync(boolean0);
      lwjgl3ApplicationConfiguration0.disableAudio(boolean0);
      String string0 = "1@G)oe {Jx[\\]}{U";
      Files.FileType files_FileType0 = Files.FileType.External;
      lwjgl3ApplicationConfiguration0.setPreferencesConfig(string0, files_FileType0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 373;
      Lwjgl3WindowAdapter lwjgl3WindowAdapter0 = new Lwjgl3WindowAdapter();
      assertNotNull(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      lwjgl3ApplicationConfiguration0.setWindowListener(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      Lwjgl3Graphics.Lwjgl3DisplayMode lwjgl3Graphics_Lwjgl3DisplayMode0 = new Lwjgl3Graphics.Lwjgl3DisplayMode(int0, int0, int0, int0, int0);
      assertNotNull(lwjgl3Graphics_Lwjgl3DisplayMode0);
      assertEquals(373L, lwjgl3Graphics_Lwjgl3DisplayMode0.getMonitor());
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.refreshRate);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.width);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.height);
      
      lwjgl3ApplicationConfiguration0.setFullscreenMode(lwjgl3Graphics_Lwjgl3DisplayMode0);
      assertEquals(373L, lwjgl3Graphics_Lwjgl3DisplayMode0.getMonitor());
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.refreshRate);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.width);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.height);
      
      lwjgl3ApplicationConfiguration0.setBackBufferConfig(int0, int0, int0, int0, int0, int0, lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(373L, lwjgl3Graphics_Lwjgl3DisplayMode0.getMonitor());
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.refreshRate);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.width);
      assertEquals(373, lwjgl3Graphics_Lwjgl3DisplayMode0.height);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Pixels;
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      int int0 = 0;
      lwjgl3ApplicationConfiguration0.setWindowedMode(int0, int0);
      lwjgl3ApplicationConfiguration0.setInitialVisible(boolean0);
      lwjgl3ApplicationConfiguration0.useOpenGL3(boolean0, int0, int0);
      Color color0 = Color.FOREST;
      assertNotNull(color0);
      assertEquals((-14513374), color0.toIntBits());
      assertEquals(0.54509807F, color0.g, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.13333334F, color0.r, 0.01F);
      assertEquals(0.13333334F, color0.b, 0.01F);
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertEquals((-14513374), color0.toIntBits());
      assertEquals(0.54509807F, color0.g, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.13333334F, color0.r, 0.01F);
      assertEquals(0.13333334F, color0.b, 0.01F);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Graphics.Monitor graphics_Monitor0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes(graphics_Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Graphics.Monitor graphics_Monitor0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode(graphics_Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Lwjgl3ApplicationConfiguration.HdpiMode[] lwjgl3ApplicationConfiguration_HdpiModeArray0 = Lwjgl3ApplicationConfiguration.HdpiMode.values();
      assertNotNull(lwjgl3ApplicationConfiguration_HdpiModeArray0);
      assertEquals(2, lwjgl3ApplicationConfiguration_HdpiModeArray0.length);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 135183;
      int int1 = 0;
      int int2 = 1398;
      int int3 = 1;
      lwjgl3ApplicationConfiguration1.setBackBufferConfig(int0, int1, int0, int0, int2, int2, int3);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Color color0 = Color.WHITE;
      assertNotNull(color0);
      assertEquals((-1), color0.toIntBits());
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(1.0F, color0.r, 0.01F);
      assertEquals(1.0F, color0.b, 0.01F);
      assertEquals(1.0F, color0.g, 0.01F);
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertEquals((-1), color0.toIntBits());
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(1.0F, color0.r, 0.01F);
      assertEquals(1.0F, color0.b, 0.01F);
      assertEquals(1.0F, color0.g, 0.01F);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      long long0 = 1000000000L;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.toLwjgl3Monitor(long0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lwjgl.glfw.GLFW
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.setInitialVisible(boolean0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 1691;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int0, int0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      int int0 = 0;
      lwjgl3ApplicationConfiguration1.useOpenGL3(boolean0, int0, int0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-1);
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      Lwjgl3Graphics.Lwjgl3DisplayMode lwjgl3Graphics_Lwjgl3DisplayMode0 = lwjgl3ApplicationConfiguration1.fullscreenMode;
      assertNull(lwjgl3Graphics_Lwjgl3DisplayMode0);
      
      lwjgl3ApplicationConfiguration1.setFullscreenMode(lwjgl3Graphics_Lwjgl3DisplayMode0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 0;
      Color color0 = Color.MAROON;
      assertNotNull(color0);
      assertEquals((-10473296), color0.toIntBits());
      assertEquals(0.3764706F, color0.b, 0.01F);
      assertEquals(0.6901961F, color0.r, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(0.1882353F, color0.g, 0.01F);
      
      Color color1 = Color.CORAL;
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      assertEquals((-11501569), color1.toIntBits());
      assertEquals(1.0F, color1.r, 0.01F);
      assertEquals(0.49803922F, color1.g, 0.01F);
      assertEquals(1.0F, color1.a, 0.01F);
      assertEquals(0.3137255F, color1.b, 0.01F);
      assertNotSame(color1, color0);
      
      Color.rgba8888ToColor(color0, int0);
      assertFalse(color0.equals((Object)color1));
      assertEquals(0, color0.toIntBits());
      assertEquals(0.0F, color0.g, 0.01F);
      assertEquals(0.0F, color0.a, 0.01F);
      assertEquals(0.0F, color0.r, 0.01F);
      assertEquals(0.0F, color0.b, 0.01F);
      assertNotSame(color0, color1);
      
      Color color2 = color1.clamp();
      assertFalse(color1.equals((Object)color0));
      assertFalse(color2.equals((Object)color0));
      assertNotNull(color2);
      assertEquals((-11501569), color1.toIntBits());
      assertEquals((-11501569), color2.toIntBits());
      assertEquals(1.0F, color1.r, 0.01F);
      assertEquals(0.49803922F, color1.g, 0.01F);
      assertEquals(1.0F, color1.a, 0.01F);
      assertEquals(0.3137255F, color1.b, 0.01F);
      assertEquals(0.49803922F, color2.g, 0.01F);
      assertEquals(0.3137255F, color2.b, 0.01F);
      assertEquals(1.0F, color2.r, 0.01F);
      assertEquals(1.0F, color2.a, 0.01F);
      assertNotSame(color1, color0);
      assertSame(color1, color2);
      assertSame(color2, color1);
      assertNotSame(color2, color0);
      
      Color color3 = color0.set(color1);
      assertTrue(color0.equals((Object)color2));
      assertTrue(color0.equals((Object)color1));
      assertTrue(color1.equals((Object)color0));
      assertTrue(color3.equals((Object)color2));
      assertTrue(color3.equals((Object)color1));
      assertNotNull(color3);
      assertEquals((-11501569), color0.toIntBits());
      assertEquals((-11501569), color1.toIntBits());
      assertEquals((-11501569), color3.toIntBits());
      assertEquals(0.3137255F, color0.b, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(1.0F, color0.r, 0.01F);
      assertEquals(0.49803922F, color0.g, 0.01F);
      assertEquals(1.0F, color1.r, 0.01F);
      assertEquals(0.49803922F, color1.g, 0.01F);
      assertEquals(1.0F, color1.a, 0.01F);
      assertEquals(0.3137255F, color1.b, 0.01F);
      assertEquals(0.49803922F, color3.g, 0.01F);
      assertEquals(1.0F, color3.a, 0.01F);
      assertEquals(1.0F, color3.r, 0.01F);
      assertEquals(0.3137255F, color3.b, 0.01F);
      assertNotSame(color0, color1);
      assertNotSame(color0, color2);
      assertSame(color0, color3);
      assertSame(color1, color2);
      assertNotSame(color1, color0);
      assertNotSame(color1, color3);
      assertNotSame(color3, color2);
      assertNotSame(color3, color1);
      assertSame(color3, color0);
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertTrue(color0.equals((Object)color2));
      assertTrue(color0.equals((Object)color1));
      assertEquals((-11501569), color0.toIntBits());
      assertEquals(0.3137255F, color0.b, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      assertEquals(1.0F, color0.r, 0.01F);
      assertEquals(0.49803922F, color0.g, 0.01F);
      assertNotSame(color0, color1);
      assertNotSame(color0, color2);
      assertSame(color0, color3);
      
      int int1 = 496;
      int int2 = 294;
      lwjgl3ApplicationConfiguration0.setBackBufferConfig(int0, int1, int0, int1, int0, int2, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.toLwjgl3Monitor(int1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lwjgl.glfw.GLFW
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Color color0 = Color.SALMON;
      assertNotNull(color0);
      assertEquals((-9273094), color0.toIntBits());
      assertEquals(0.44705883F, color0.b, 0.01F);
      assertEquals(0.5019608F, color0.g, 0.01F);
      assertEquals(0.98039216F, color0.r, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      
      lwjgl3ApplicationConfiguration0.setInitialBackgroundColor(color0);
      assertEquals((-9273094), color0.toIntBits());
      assertEquals(0.44705883F, color0.b, 0.01F);
      assertEquals(0.5019608F, color0.g, 0.01F);
      assertEquals(0.98039216F, color0.r, 0.01F);
      assertEquals(1.0F, color0.a, 0.01F);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.setResizable(boolean0);
      boolean boolean1 = true;
      lwjgl3ApplicationConfiguration0.setInitialVisible(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.vSyncEnabled = boolean0;
      boolean boolean1 = true;
      lwjgl3ApplicationConfiguration0.disableAudio(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 35666;
      int int1 = 0;
      int int2 = 0;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int1, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.initialVisible = boolean0;
      boolean boolean1 = true;
      lwjgl3ApplicationConfiguration1.disableAudio(boolean1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 395;
      int int1 = (-134);
      int int2 = 0;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int0, int1, int2);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      int int0 = 0;
      lwjgl3ApplicationConfiguration0.audioDeviceBufferCount = int0;
      int int1 = 759;
      int int2 = 1254;
      lwjgl3ApplicationConfiguration0.useOpenGL3(boolean0, int1, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration0.setResizable(boolean1);
      int int3 = 994;
      int int4 = 0;
      long long0 = (-1020L);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.toLwjgl3Monitor(long0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lwjgl.glfw.GLFW
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "Logical";
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.valueOf(string0);
      assertEquals(Lwjgl3ApplicationConfiguration.HdpiMode.Logical, lwjgl3ApplicationConfiguration_HdpiMode0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 0;
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      String string0 = "mj:n";
      lwjgl3ApplicationConfiguration1.setTitle(string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 2537;
      int int1 = 0;
      lwjgl3ApplicationConfiguration1.setWindowPosition(int0, int1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.useVsync(boolean0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.disableAudio(boolean0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      long long0 = 0L;
      int int0 = 8;
      String string0 = "glfwGetCurrentContext";
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(long0, int0, int0, string0);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertEquals(0L, lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      assertEquals(8, lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      assertEquals(8, lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      String string0 = "\\29Pq2-97Lcj";
      Files.FileType files_FileType0 = Files.FileType.External;
      lwjgl3ApplicationConfiguration1.setPreferencesConfig(string0, files_FileType0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      Lwjgl3WindowListener lwjgl3WindowListener0 = lwjgl3ApplicationConfiguration1.windowListener;
      assertNull(lwjgl3WindowListener0);
      
      lwjgl3ApplicationConfiguration1.setWindowListener(lwjgl3WindowListener0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration1.windowResizable = boolean0;
      boolean boolean1 = true;
      int int0 = 135184;
      lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion = int0;
      int int1 = 0;
      int int2 = 651;
      int int3 = 5071;
      int int4 = 480;
      int int5 = 0;
      String string0 = "Logical";
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion, int4, int5, string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int3);
      assertTrue(lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion == int0);
      assertFalse(lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion == int3);
      assertFalse(lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion == int2);
      assertFalse(lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion == int1);
      assertFalse(lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion == int4);
      assertFalse(lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertEquals(135184L, lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      assertEquals(480, lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      assertEquals(0, lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration1.disableAudio(boolean0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.initialVisible = boolean0;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration1.disableAudio(boolean1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = (-460);
      lwjgl3ApplicationConfiguration1.windowHeight = int0;
      Lwjgl3WindowAdapter lwjgl3WindowAdapter0 = new Lwjgl3WindowAdapter();
      assertNotNull(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      lwjgl3ApplicationConfiguration1.setWindowListener(lwjgl3WindowAdapter0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      String string0 = "Pixels";
      Files.FileType files_FileType0 = Files.FileType.Internal;
      lwjgl3ApplicationConfiguration0.setPreferencesConfig(string0, files_FileType0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      int int1 = 610;
      lwjgl3ApplicationConfiguration0.setAudioConfig(lwjgl3ApplicationConfiguration1.windowHeight, int1, int0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int1);
      assertFalse(lwjgl3ApplicationConfiguration1.windowHeight == int1);
      assertTrue(lwjgl3ApplicationConfiguration1.windowHeight == int0);
      assertFalse(int1 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      int int0 = (-626712321);
      lwjgl3ApplicationConfiguration0.windowHeight = int0;
      Lwjgl3WindowAdapter lwjgl3WindowAdapter0 = new Lwjgl3WindowAdapter();
      assertNotNull(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      lwjgl3ApplicationConfiguration0.windowListener = (Lwjgl3WindowListener) lwjgl3WindowAdapter0;
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      assertTrue(lwjgl3ApplicationConfiguration0.windowListener.closeRequested());
      
      lwjgl3ApplicationConfiguration0.windowDecorated = boolean0;
      Files.FileType files_FileType0 = Files.FileType.Local;
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration0.setInitialVisible(boolean1);
      assertFalse(boolean1 == boolean0);
      
      lwjgl3ApplicationConfiguration0.setDecorated(boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = (-226);
      int int1 = 0;
      lwjgl3ApplicationConfiguration1.setWindowedMode(int0, int1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      lwjgl3ApplicationConfiguration0.setDecorated(boolean0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      String string0 = "glfwHideWindow";
      lwjgl3ApplicationConfiguration1.setTitle(string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int2 = 0;
      lwjgl3ApplicationConfiguration0.setWindowPosition(int2, int2);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(int2 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      boolean boolean1 = true;
      lwjgl3ApplicationConfiguration1.setResizable(boolean1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int3 = 35712;
      lwjgl3ApplicationConfiguration0.setAudioConfig(int1, int3, int0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 480;
      lwjgl3ApplicationConfiguration1.audioDeviceSimultaneousSources = int0;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration2 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      int int1 = (-1167);
      String string0 = "";
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(lwjgl3ApplicationConfiguration1.audioDeviceSimultaneousSources, int1, int0, string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(int0 == int1);
      assertTrue(lwjgl3ApplicationConfiguration1.audioDeviceSimultaneousSources == int0);
      assertFalse(lwjgl3ApplicationConfiguration1.audioDeviceSimultaneousSources == int1);
      assertFalse(int1 == int0);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertEquals(480L, lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      assertEquals((-1167), lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      assertEquals(480, lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Pixels;
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      String string0 = null;
      lwjgl3ApplicationConfiguration0.setTitle(string0);
      int int0 = (-2036);
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load shared library 'libgdx64.so' for target: Linux, 64-bit
         //
         verifyException("com.badlogic.gdx.utils.SharedLibraryLoader", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int0 = 2024;
      int int1 = 301;
      int int2 = (-274);
      int int3 = 0;
      int int4 = 0;
      lwjgl3ApplicationConfiguration1.setBackBufferConfig(int0, int1, int2, int0, int0, int3, int4);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = false;
      SharedLibraryLoader.isLinux = boolean0;
      int int0 = 3;
      int int1 = 897;
      lwjgl3ApplicationConfiguration1.setWindowPosition(int0, int1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      int int2 = (-1055);
      lwjgl3ApplicationConfiguration0.setWindowedMode(int2, int2);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      lwjgl3ApplicationConfiguration0.useGL30 = boolean0;
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration0.useVsync(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Lwjgl3ApplicationConfiguration.HdpiMode[] lwjgl3ApplicationConfiguration_HdpiModeArray0 = Lwjgl3ApplicationConfiguration.HdpiMode.values();
      assertNotNull(lwjgl3ApplicationConfiguration_HdpiModeArray0);
      assertEquals(2, lwjgl3ApplicationConfiguration_HdpiModeArray0.length);
      
      Lwjgl3ApplicationConfiguration.HdpiMode[] lwjgl3ApplicationConfiguration_HdpiModeArray1 = Lwjgl3ApplicationConfiguration.HdpiMode.values();
      assertFalse(lwjgl3ApplicationConfiguration_HdpiModeArray1.equals((Object)lwjgl3ApplicationConfiguration_HdpiModeArray0));
      assertNotNull(lwjgl3ApplicationConfiguration_HdpiModeArray1);
      assertEquals(2, lwjgl3ApplicationConfiguration_HdpiModeArray1.length);
      assertNotSame(lwjgl3ApplicationConfiguration_HdpiModeArray1, lwjgl3ApplicationConfiguration_HdpiModeArray0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = 827;
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      Lwjgl3NativesLoader.load();
      lwjgl3ApplicationConfiguration0.setWindowPosition(int0, int0);
      Lwjgl3WindowAdapter lwjgl3WindowAdapter0 = new Lwjgl3WindowAdapter();
      assertNotNull(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      lwjgl3ApplicationConfiguration0.setWindowListener(lwjgl3WindowAdapter0);
      assertTrue(lwjgl3WindowAdapter0.closeRequested());
      
      int int1 = 512;
      lwjgl3ApplicationConfiguration0.gles30ContextMajorVersion = int1;
      Graphics.Monitor graphics_Monitor0 = null;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode(graphics_Monitor0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-232);
      lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion = int0;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      String string0 = null;
      lwjgl3ApplicationConfiguration1.setTitle(string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration0.disableAudio(boolean1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-232);
      lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion = int0;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      String string0 = null;
      lwjgl3ApplicationConfiguration1.gles30ContextMajorVersion = lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion;
      Lwjgl3ApplicationConfiguration.HdpiMode lwjgl3ApplicationConfiguration_HdpiMode0 = Lwjgl3ApplicationConfiguration.HdpiMode.Logical;
      lwjgl3ApplicationConfiguration0.setHdpiMode(lwjgl3ApplicationConfiguration_HdpiMode0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      lwjgl3ApplicationConfiguration1.setTitle(string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration0.disableAudio(boolean1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayMode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-232);
      lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion = int0;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      int int1 = 0;
      int int2 = 10241;
      lwjgl3ApplicationConfiguration1.setWindowedMode(int1, int2);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getPrimaryMonitor();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      int int0 = (-232);
      lwjgl3ApplicationConfiguration0.gles30ContextMinorVersion = int0;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      GdxNativesLoader.disableNativesLoading = boolean0;
      String string0 = null;
      lwjgl3ApplicationConfiguration1.setTitle(string0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean1 = false;
      lwjgl3ApplicationConfiguration0.disableAudio(boolean1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      
      int int1 = (-2695);
      String string1 = null;
      Lwjgl3Graphics.Lwjgl3Monitor lwjgl3Graphics_Lwjgl3Monitor0 = new Lwjgl3Graphics.Lwjgl3Monitor(int0, int0, int1, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(lwjgl3Graphics_Lwjgl3Monitor0);
      assertEquals((-232L), lwjgl3Graphics_Lwjgl3Monitor0.getMonitorHandle());
      assertEquals((-2695), lwjgl3Graphics_Lwjgl3Monitor0.virtualY);
      assertEquals((-232), lwjgl3Graphics_Lwjgl3Monitor0.virtualX);
      
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getDisplayModes((Graphics.Monitor) lwjgl3Graphics_Lwjgl3Monitor0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration0 = new Lwjgl3ApplicationConfiguration();
      assertNotNull(lwjgl3ApplicationConfiguration0);
      
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration1 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration0);
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      GdxNativesLoader.disableNativesLoading = boolean1;
      SharedLibraryLoader.isAndroid = boolean0;
      boolean boolean2 = false;
      SharedLibraryLoader.isWindows = boolean2;
      Lwjgl3ApplicationConfiguration lwjgl3ApplicationConfiguration2 = Lwjgl3ApplicationConfiguration.copy(lwjgl3ApplicationConfiguration1);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotNull(lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      long long0 = 1000000000L;
      int int0 = 0;
      lwjgl3ApplicationConfiguration2.setWindowPosition(int0, int0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      Lwjgl3Graphics.Lwjgl3DisplayMode lwjgl3Graphics_Lwjgl3DisplayMode0 = new Lwjgl3Graphics.Lwjgl3DisplayMode(long0, int0, int0, int0, int0);
      assertNotNull(lwjgl3Graphics_Lwjgl3DisplayMode0);
      assertEquals(1000000000L, lwjgl3Graphics_Lwjgl3DisplayMode0.getMonitor());
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.width);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.refreshRate);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.height);
      
      lwjgl3ApplicationConfiguration2.setFullscreenMode(lwjgl3Graphics_Lwjgl3DisplayMode0);
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration0.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration0));
      assertFalse(lwjgl3ApplicationConfiguration1.equals((Object)lwjgl3ApplicationConfiguration2));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration1));
      assertFalse(lwjgl3ApplicationConfiguration2.equals((Object)lwjgl3ApplicationConfiguration0));
      assertEquals(1000000000L, lwjgl3Graphics_Lwjgl3DisplayMode0.getMonitor());
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.width);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.bitsPerPixel);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.refreshRate);
      assertEquals(0, lwjgl3Graphics_Lwjgl3DisplayMode0.height);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration0, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration0);
      assertNotSame(lwjgl3ApplicationConfiguration1, lwjgl3ApplicationConfiguration2);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration1);
      assertNotSame(lwjgl3ApplicationConfiguration2, lwjgl3ApplicationConfiguration0);
      
      String string0 = "";
      lwjgl3ApplicationConfiguration1.title = string0;
      int int1 = (-1);
      lwjgl3ApplicationConfiguration2.audioDeviceBufferSize = int1;
      SharedLibraryLoader.isLinux = boolean1;
      // Undeclared exception!
      try { 
        Lwjgl3ApplicationConfiguration.getMonitors();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org.lwjgl.system.Pointer
         //
         verifyException("com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application", e);
      }
  }
}
