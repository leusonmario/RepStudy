/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 07:16:03 GMT 2021
 */

package com.netflix.appinfo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.netflix.appinfo.AmazonInfo;
import com.netflix.appinfo.ApplicationInfoManager;
import com.netflix.appinfo.CloudInstanceConfig;
import com.netflix.appinfo.DataCenterInfo;
import com.netflix.appinfo.EurekaInstanceConfig;
import com.netflix.appinfo.InstanceInfo;
import com.netflix.appinfo.LeaseInfo;
import com.netflix.appinfo.MyDataCenterInstanceConfig;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationInfoManager_ESTest extends ApplicationInfoManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = null;
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig(string0);
      assertNotNull(myDataCenterInstanceConfig0);
      assertNull(myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      InstanceInfo instanceInfo0 = mock(InstanceInfo.class, new ViolatedAssumptionAnswer());
      InstanceInfo instanceInfo1 = new InstanceInfo(instanceInfo0);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNotNull(instanceInfo1);
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getVersion());
      assertFalse(instanceInfo1.isDirty());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getHostName());
      assertEquals(0, instanceInfo1.getSecurePort());
      
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager(myDataCenterInstanceConfig0, instanceInfo1);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNotNull(applicationInfoManager0);
      assertNull(myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getVersion());
      assertFalse(instanceInfo1.isDirty());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getHostName());
      assertEquals(0, instanceInfo1.getSecurePort());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNull(myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getVersion());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getStatus());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getAppName());
      assertEquals(0, instanceInfo1.getSecurePort());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNull(myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getVersion());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getStatus());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getAppName());
      assertEquals(0, instanceInfo1.getSecurePort());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.UNKNOWN;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      String string0 = "o3+F";
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig(string0);
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("o3+F", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("o3+F", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.STARTING;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      EurekaInstanceConfig eurekaInstanceConfig0 = null;
      // Undeclared exception!
      try { 
        applicationInfoManager0.initComponent(eurekaInstanceConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize ApplicationInfoManager
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "F4yX&\"O";
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig(string0);
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("F4yX&\"O", myDataCenterInstanceConfig0.getNamespace());
      
      String string1 = myDataCenterInstanceConfig0.getSecureVirtualHostName();
      assertNull(string1);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("F4yX&\"O", myDataCenterInstanceConfig0.getNamespace());
      
      Map<String, String> map0 = myDataCenterInstanceConfig0.getMetadataMap();
      assertNotNull(map0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("F4yX&\"O", myDataCenterInstanceConfig0.getNamespace());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      applicationInfoManager0.registerAppMetadata(map0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("F4yX&\"O", myDataCenterInstanceConfig0.getNamespace());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        applicationInfoManager0.refreshDataCenterInfoIfRequired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
          assertNotNull(applicationInfoManager0);
          
          AmazonInfo amazonInfo0 = new AmazonInfo();
          assertNotNull(amazonInfo0);
          assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
          
          Map<String, String> map0 = amazonInfo0.getMetadata();
          assertNotNull(map0);
          assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
          assertTrue(map0.isEmpty());
          assertEquals(0, map0.size());
          
          applicationInfoManager0.registerAppMetadata(map0);
          assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
          assertTrue(map0.isEmpty());
          assertEquals(0, map0.size());
          
          CloudInstanceConfig cloudInstanceConfig0 = null;
          try {
            cloudInstanceConfig0 = new CloudInstanceConfig();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Your datacenter is defined as cloud but we are not able to get the amazon metadata to register. 
             // Set the property eureka.validateInstanceId to false to ignore themetadata call
             //
             verifyException("com.netflix.appinfo.CloudInstanceConfig", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      EurekaInstanceConfig eurekaInstanceConfig0 = null;
      InstanceInfo instanceInfo0 = mock(InstanceInfo.class, new ViolatedAssumptionAnswer());
      InstanceInfo instanceInfo1 = new InstanceInfo(instanceInfo0);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNotNull(instanceInfo1);
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertFalse(instanceInfo1.isDirty());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getHostName());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getOverriddenStatus());
      
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager(eurekaInstanceConfig0, instanceInfo1);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNotNull(applicationInfoManager0);
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertFalse(instanceInfo1.isDirty());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getHostName());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getOverriddenStatus());
      
      // Undeclared exception!
      try { 
        applicationInfoManager0.refreshDataCenterInfoIfRequired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.OUT_OF_SERVICE;
      // Undeclared exception!
      try { 
        applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo instanceInfo0 = mock(InstanceInfo.class, new ViolatedAssumptionAnswer());
      InstanceInfo instanceInfo1 = new InstanceInfo(instanceInfo0);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNotNull(instanceInfo1);
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getHostName());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getASGName());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      
      Map<String, String> map0 = instanceInfo1.getMetadata();
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNull(map0);
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getHostName());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getASGName());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      
      // Undeclared exception!
      try { 
        applicationInfoManager0.registerAppMetadata(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertNull(instanceInfo0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig();
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.UNKNOWN;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertNotNull(instanceInfo0);
      assertEquals(80, instanceInfo0.getPort());
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertNull(instanceInfo0.getASGName());
      assertNull(instanceInfo0.getActionType());
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertEquals(443, instanceInfo0.getSecurePort());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getStatus());
      assertEquals("na", instanceInfo0.getSID());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertTrue(instanceInfo0.isDirty());
      assertEquals(1392409281320L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals(1, instanceInfo0.getCountryId());
      assertEquals(1392409281320L, instanceInfo0.getLastUpdatedTimestamp());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertNull(instanceInfo0.getSecureVipAddress());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      
      InstanceInfo instanceInfo1 = applicationInfoManager0.getInfo();
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertSame(instanceInfo1, instanceInfo0);
      assertNotNull(instanceInfo1);
      assertTrue(instanceInfo1.isDirty());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo1.getOverriddenStatus());
      assertEquals("192.168.1.42:80", instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertEquals("na", instanceInfo1.getSID());
      assertEquals("UNKNOWN", instanceInfo1.getAppName());
      assertNull(instanceInfo1.getActionType());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo1.getStatusPageUrl());
      assertEquals(80, instanceInfo1.getPort());
      assertEquals("unknown", instanceInfo1.getVersion());
      assertEquals("192.168.1.42", instanceInfo1.getIPAddr());
      assertEquals("http://192.168.1.42:80/", instanceInfo1.getHomePageUrl());
      assertEquals(1392409281320L, instanceInfo1.getLastUpdatedTimestamp());
      assertEquals(1, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getASGName());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo1.getStatus());
      assertEquals(443, instanceInfo1.getSecurePort());
      assertFalse(instanceInfo1.isCoordinatingDiscoveryServer());
      
      InstanceInfo instanceInfo2 = applicationInfoManager0.getInfo();
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertSame(instanceInfo2, instanceInfo0);
      assertSame(instanceInfo2, instanceInfo1);
      assertNotNull(instanceInfo2);
      assertEquals(1392409281320L, instanceInfo2.getLastUpdatedTimestamp());
      assertEquals(1, instanceInfo2.getCountryId());
      assertFalse(instanceInfo2.isCoordinatingDiscoveryServer());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo2.getStatus());
      assertEquals(443, instanceInfo2.getSecurePort());
      assertEquals("UNKNOWN", instanceInfo2.getAppName());
      assertNull(instanceInfo2.getASGName());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo2.getStatusPageUrl());
      assertEquals("http://192.168.1.42:80/", instanceInfo2.getHomePageUrl());
      assertEquals(1392409281320L, (long)instanceInfo2.getLastDirtyTimestamp());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo2.getOverriddenStatus());
      assertEquals("192.168.1.42:80", instanceInfo2.getVIPAddress());
      assertNull(instanceInfo2.getSecureVipAddress());
      assertEquals("na", instanceInfo2.getSID());
      assertTrue(instanceInfo2.isDirty());
      assertNull(instanceInfo2.getActionType());
      assertEquals("192.168.1.42", instanceInfo2.getHostName());
      assertEquals(80, instanceInfo2.getPort());
      assertEquals("unknown", instanceInfo2.getVersion());
      assertEquals("192.168.1.42", instanceInfo2.getIPAddr());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      AmazonInfo amazonInfo0 = new AmazonInfo();
      assertNotNull(amazonInfo0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      
      Map<String, String> map0 = amazonInfo0.getMetadata();
      assertNotNull(map0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      applicationInfoManager0.registerAppMetadata(map0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      AmazonInfo.MetaDataKey amazonInfo_MetaDataKey0 = AmazonInfo.MetaDataKey.mac;
      String string0 = amazonInfo0.get(amazonInfo_MetaDataKey0);
      assertNull(string0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.DOWN;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertNotNull(instanceInfo0);
      assertEquals(443, instanceInfo0.getSecurePort());
      assertEquals(1, instanceInfo0.getCountryId());
      assertEquals(1392409281320L, instanceInfo0.getLastUpdatedTimestamp());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals(1392409281320L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertNull(instanceInfo0.getASGName());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertNull(instanceInfo0.getActionType());
      assertEquals(InstanceInfo.InstanceStatus.DOWN, instanceInfo0.getStatus());
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertEquals(80, instanceInfo0.getPort());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertTrue(instanceInfo0.isDirty());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      assertEquals("na", instanceInfo0.getSID());
      assertNull(instanceInfo0.getSecureVipAddress());
      
      applicationInfoManager0.registerAppMetadata(map0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      applicationInfoManager0.registerAppMetadata(map0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus1 = InstanceInfo.InstanceStatus.OUT_OF_SERVICE;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus1);
      assertFalse(instanceInfo_InstanceStatus1.equals((Object)instanceInfo_InstanceStatus0));
      assertNotSame(instanceInfo_InstanceStatus1, instanceInfo_InstanceStatus0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      ApplicationInfoManager applicationInfoManager1 = ApplicationInfoManager.getInstance();
      assertSame(applicationInfoManager1, applicationInfoManager0);
      assertNotNull(applicationInfoManager1);
      
      EurekaInstanceConfig eurekaInstanceConfig0 = null;
      // Undeclared exception!
      try { 
        applicationInfoManager1.initComponent(eurekaInstanceConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize ApplicationInfoManager
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig();
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      InstanceInfo instanceInfo0 = mock(InstanceInfo.class, new ViolatedAssumptionAnswer());
      InstanceInfo instanceInfo1 = new InstanceInfo(instanceInfo0);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNotNull(instanceInfo1);
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getHostName());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager(myDataCenterInstanceConfig0, instanceInfo1);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertNotNull(applicationInfoManager0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getHostName());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      
      InstanceInfo instanceInfo2 = applicationInfoManager0.getInfo();
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertFalse(instanceInfo2.equals((Object)instanceInfo0));
      assertSame(instanceInfo1, instanceInfo2);
      assertSame(instanceInfo2, instanceInfo1);
      assertNotNull(instanceInfo2);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getHostName());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo2.getAppName());
      assertNull(instanceInfo2.getVersion());
      assertNull(instanceInfo2.getLastDirtyTimestamp());
      assertNull(instanceInfo2.getSID());
      assertNull(instanceInfo2.getASGName());
      assertNull(instanceInfo2.getActionType());
      assertNull(instanceInfo2.getStatusPageUrl());
      assertNull(instanceInfo2.getHostName());
      assertNull(instanceInfo2.getAppGroupName());
      assertNull(instanceInfo2.getOverriddenStatus());
      assertNull(instanceInfo2.getVIPAddress());
      assertEquals(0, instanceInfo2.getPort());
      assertEquals(0, instanceInfo2.getSecurePort());
      assertFalse(instanceInfo2.isDirty());
      assertNull(instanceInfo2.getStatus());
      assertNull(instanceInfo2.getIPAddr());
      assertNull(instanceInfo2.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo2.getSecureVipAddress());
      assertEquals(0, instanceInfo2.getCountryId());
      assertNull(instanceInfo2.getHomePageUrl());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      String string0 = "o3+F";
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig(string0);
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("o3+F", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("o3+F", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.STARTING;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("o3+F", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus1 = InstanceInfo.InstanceStatus.OUT_OF_SERVICE;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus1);
      assertFalse(instanceInfo_InstanceStatus1.equals((Object)instanceInfo_InstanceStatus0));
      assertNotSame(instanceInfo_InstanceStatus1, instanceInfo_InstanceStatus0);
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("o3+F", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertNotNull(instanceInfo0);
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertEquals(0L, instanceInfo0.getLastUpdatedTimestamp());
      assertEquals(0L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      assertFalse(instanceInfo0.isDirty());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertEquals(80, instanceInfo0.getPort());
      assertNull(instanceInfo0.getSecureVipAddress());
      assertEquals("na", instanceInfo0.getSID());
      assertNull(instanceInfo0.getActionType());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals(443, instanceInfo0.getSecurePort());
      assertNull(instanceInfo0.getASGName());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo0.getStatus());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals(1, instanceInfo0.getCountryId());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "F4yX&\"O";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      assertFalse(boolean0);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.STARTING;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertNotNull(instanceInfo0);
      assertEquals(0L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertNull(instanceInfo0.getASGName());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertNull(instanceInfo0.getActionType());
      assertEquals(80, instanceInfo0.getPort());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo0.getStatus());
      assertEquals(443, instanceInfo0.getSecurePort());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertEquals(1, instanceInfo0.getCountryId());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      assertEquals("na", instanceInfo0.getSID());
      assertNull(instanceInfo0.getSecureVipAddress());
      assertEquals(0L, instanceInfo0.getLastUpdatedTimestamp());
      assertFalse(instanceInfo0.isDirty());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      ApplicationInfoManager applicationInfoManager1 = ApplicationInfoManager.getInstance();
      assertSame(applicationInfoManager1, applicationInfoManager0);
      assertNotNull(applicationInfoManager1);
  }
}
