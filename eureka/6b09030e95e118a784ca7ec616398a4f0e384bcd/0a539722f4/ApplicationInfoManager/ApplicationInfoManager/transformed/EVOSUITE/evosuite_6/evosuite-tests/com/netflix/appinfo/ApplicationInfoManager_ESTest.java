/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 09:19:45 GMT 2021
 */

package com.netflix.appinfo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.netflix.appinfo.AmazonInfo;
import com.netflix.appinfo.ApplicationInfoManager;
import com.netflix.appinfo.CloudInstanceConfig;
import com.netflix.appinfo.DataCenterInfo;
import com.netflix.appinfo.EurekaInstanceConfig;
import com.netflix.appinfo.InstanceInfo;
import com.netflix.appinfo.MyDataCenterInstanceConfig;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationInfoManager_ESTest extends ApplicationInfoManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      applicationInfoManager0.instance.instanceInfo = applicationInfoManager0.instanceInfo;
      ApplicationInfoManager.instance = applicationInfoManager0;
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertNull(instanceInfo0);
      
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        applicationInfoManager0.registerAppMetadata(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig();
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      InstanceInfo instanceInfo0 = mock(InstanceInfo.class, new ViolatedAssumptionAnswer());
      InstanceInfo instanceInfo1 = new InstanceInfo(instanceInfo0);
      assertNotNull(instanceInfo1);
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getHostName());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager(myDataCenterInstanceConfig0, instanceInfo1);
      assertNotNull(applicationInfoManager0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getHostName());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppName());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppName());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      applicationInfoManager0.instance.refreshDataCenterInfoIfRequired();
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppName());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppName());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      EurekaInstanceConfig eurekaInstanceConfig0 = null;
      InstanceInfo instanceInfo2 = new InstanceInfo(applicationInfoManager0.instanceInfo);
      assertNotNull(instanceInfo2);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppName());
      assertEquals("192.168.1.42", instanceInfo2.getHostName());
      assertEquals(1392409281320L, (long)instanceInfo2.getLastDirtyTimestamp());
      assertNull(instanceInfo2.getStatus());
      assertEquals(0, instanceInfo2.getSecurePort());
      assertTrue(instanceInfo2.isDirty());
      assertEquals(0, instanceInfo2.getCountryId());
      assertNull(instanceInfo2.getIPAddr());
      assertEquals(0, instanceInfo2.getPort());
      assertNull(instanceInfo2.getVersion());
      assertNull(instanceInfo2.getHomePageUrl());
      assertNull(instanceInfo2.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo2.getSecureVipAddress());
      assertNull(instanceInfo2.getStatusPageUrl());
      assertNull(instanceInfo2.getSID());
      assertNull(instanceInfo2.getActionType());
      assertNull(instanceInfo2.getASGName());
      assertNull(instanceInfo2.getAppGroupName());
      assertNull(instanceInfo2.getAppName());
      assertNull(instanceInfo2.getOverriddenStatus());
      assertNull(instanceInfo2.getVIPAddress());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertTrue(instanceInfo2.equals((Object)instanceInfo1));
      assertFalse(instanceInfo2.equals((Object)instanceInfo0));
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      
      applicationInfoManager0.instance.instanceInfo = instanceInfo2;
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getVersion());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getHomePageUrl());
      assertEquals(0, instanceInfo1.getCountryId());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertNull(instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getAppName());
      assertEquals("192.168.1.42", instanceInfo2.getHostName());
      assertEquals(1392409281320L, (long)instanceInfo2.getLastDirtyTimestamp());
      assertNull(instanceInfo2.getStatus());
      assertEquals(0, instanceInfo2.getSecurePort());
      assertTrue(instanceInfo2.isDirty());
      assertEquals(0, instanceInfo2.getCountryId());
      assertNull(instanceInfo2.getIPAddr());
      assertEquals(0, instanceInfo2.getPort());
      assertNull(instanceInfo2.getVersion());
      assertNull(instanceInfo2.getHomePageUrl());
      assertNull(instanceInfo2.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo2.getSecureVipAddress());
      assertNull(instanceInfo2.getStatusPageUrl());
      assertNull(instanceInfo2.getSID());
      assertNull(instanceInfo2.getActionType());
      assertNull(instanceInfo2.getASGName());
      assertNull(instanceInfo2.getAppGroupName());
      assertNull(instanceInfo2.getAppName());
      assertNull(instanceInfo2.getOverriddenStatus());
      assertNull(instanceInfo2.getVIPAddress());
      assertNull(applicationInfoManager0.instance.instanceInfo.getVersion());
      assertNull(applicationInfoManager0.instance.instanceInfo.getSID());
      assertNull(applicationInfoManager0.instance.instanceInfo.getAppName());
      assertNull(applicationInfoManager0.instance.instanceInfo.getActionType());
      assertNull(applicationInfoManager0.instance.instanceInfo.getStatusPageUrl());
      assertNull(applicationInfoManager0.instance.instanceInfo.getASGName());
      assertNull(applicationInfoManager0.instance.instanceInfo.getAppGroupName());
      assertEquals("192.168.1.42", applicationInfoManager0.instance.instanceInfo.getHostName());
      assertNull(applicationInfoManager0.instance.instanceInfo.getOverriddenStatus());
      assertNull(applicationInfoManager0.instance.instanceInfo.getVIPAddress());
      assertNull(applicationInfoManager0.instance.instanceInfo.getHomePageUrl());
      assertTrue(applicationInfoManager0.instance.instanceInfo.isDirty());
      assertEquals(0, applicationInfoManager0.instance.instanceInfo.getSecurePort());
      assertNull(applicationInfoManager0.instance.instanceInfo.getIPAddr());
      assertNull(applicationInfoManager0.instance.instanceInfo.getStatus());
      assertNull(applicationInfoManager0.instance.instanceInfo.isCoordinatingDiscoveryServer());
      assertNull(applicationInfoManager0.instance.instanceInfo.getSecureVipAddress());
      assertEquals(0, applicationInfoManager0.instance.instanceInfo.getCountryId());
      assertEquals(1392409281320L, (long)applicationInfoManager0.instance.instanceInfo.getLastDirtyTimestamp());
      assertEquals(0, applicationInfoManager0.instance.instanceInfo.getPort());
      
      String string0 = myDataCenterInstanceConfig0.getHomePageUrl();
      assertNull(string0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      long long0 = (-838L);
      System.setCurrentTimeMillis(long0);
      // Undeclared exception!
      try { 
        applicationInfoManager0.initComponent(eurekaInstanceConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize ApplicationInfoManager
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      // Undeclared exception!
      try { 
        applicationInfoManager0.refreshDataCenterInfoIfRequired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      InstanceInfo instanceInfo0 = mock(InstanceInfo.class, new ViolatedAssumptionAnswer());
      AmazonInfo amazonInfo0 = new AmazonInfo();
      assertNotNull(amazonInfo0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.OUT_OF_SERVICE;
      // Undeclared exception!
      try { 
        applicationInfoManager0.instance.setInstanceStatus(instanceInfo_InstanceStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      // Undeclared exception!
      try { 
        applicationInfoManager0.refreshDataCenterInfoIfRequired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.UP;
      // Undeclared exception!
      try { 
        applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertNull(instanceInfo0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig();
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.instance;
      assertNotNull(applicationInfoManager0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        applicationInfoManager0.registerAppMetadata(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.OUT_OF_SERVICE;
      // Undeclared exception!
      try { 
        applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig();
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      boolean boolean0 = myDataCenterInstanceConfig0.isInstanceEnabledOnit();
      assertFalse(boolean0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      int int0 = myDataCenterInstanceConfig0.getLeaseExpirationDurationInSeconds();
      assertEquals(90, int0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.instance.instanceInfo = applicationInfoManager0.instanceInfo;
      assertEquals("na", applicationInfoManager0.instance.instanceInfo.getSID());
      assertNull(applicationInfoManager0.instance.instanceInfo.getSecureVipAddress());
      assertEquals("192.168.1.42:80", applicationInfoManager0.instance.instanceInfo.getVIPAddress());
      assertFalse(applicationInfoManager0.instance.instanceInfo.isDirty());
      assertFalse(applicationInfoManager0.instance.instanceInfo.isCoordinatingDiscoveryServer());
      assertEquals("http://192.168.1.42:80/Status", applicationInfoManager0.instance.instanceInfo.getStatusPageUrl());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, applicationInfoManager0.instance.instanceInfo.getStatus());
      assertEquals("http://192.168.1.42:80/", applicationInfoManager0.instance.instanceInfo.getHomePageUrl());
      assertEquals("UNKNOWN", applicationInfoManager0.instance.instanceInfo.getAppName());
      assertEquals(1, applicationInfoManager0.instance.instanceInfo.getCountryId());
      assertEquals(1392409281320L, applicationInfoManager0.instance.instanceInfo.getLastUpdatedTimestamp());
      assertEquals(1392409281320L, (long)applicationInfoManager0.instance.instanceInfo.getLastDirtyTimestamp());
      assertEquals(80, applicationInfoManager0.instance.instanceInfo.getPort());
      assertNull(applicationInfoManager0.instance.instanceInfo.getASGName());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, applicationInfoManager0.instance.instanceInfo.getOverriddenStatus());
      assertEquals(443, applicationInfoManager0.instance.instanceInfo.getSecurePort());
      assertNull(applicationInfoManager0.instance.instanceInfo.getActionType());
      assertEquals("192.168.1.42", applicationInfoManager0.instance.instanceInfo.getHostName());
      assertEquals("192.168.1.42", applicationInfoManager0.instance.instanceInfo.getIPAddr());
      assertEquals("unknown", applicationInfoManager0.instance.instanceInfo.getVersion());
      
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        applicationInfoManager0.registerAppMetadata(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.instance;
      assertNotNull(applicationInfoManager0);
      
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertNotNull(instanceInfo0);
      assertFalse(instanceInfo0.isDirty());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      assertEquals("na", instanceInfo0.getSID());
      assertNull(instanceInfo0.getSecureVipAddress());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo0.getStatus());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertEquals(1, instanceInfo0.getCountryId());
      assertEquals(1392409281320L, instanceInfo0.getLastUpdatedTimestamp());
      assertEquals(1392409281320L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertEquals(80, instanceInfo0.getPort());
      assertNull(instanceInfo0.getASGName());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertEquals(443, instanceInfo0.getSecurePort());
      assertNull(instanceInfo0.getActionType());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      ApplicationInfoManager applicationInfoManager1 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager1);
      assertSame(applicationInfoManager1, applicationInfoManager0);
      
      InstanceInfo instanceInfo1 = applicationInfoManager1.getInfo();
      assertNotNull(instanceInfo1);
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo1.getOverriddenStatus());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo1.getStatus());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertEquals(443, instanceInfo1.getSecurePort());
      assertFalse(instanceInfo1.isCoordinatingDiscoveryServer());
      assertFalse(instanceInfo1.isDirty());
      assertEquals("na", instanceInfo1.getSID());
      assertEquals("192.168.1.42:80", instanceInfo1.getVIPAddress());
      assertEquals(80, instanceInfo1.getPort());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertEquals("192.168.1.42", instanceInfo1.getIPAddr());
      assertEquals("unknown", instanceInfo1.getVersion());
      assertEquals("http://192.168.1.42:80/", instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getActionType());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getASGName());
      assertEquals("UNKNOWN", instanceInfo1.getAppName());
      assertEquals(1, instanceInfo1.getCountryId());
      assertEquals(1392409281320L, instanceInfo1.getLastUpdatedTimestamp());
      assertEquals(1392409281320L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertSame(applicationInfoManager1, applicationInfoManager0);
      assertSame(instanceInfo1, instanceInfo0);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      
      applicationInfoManager1.instance.initComponent(applicationInfoManager0.config);
      assertSame(applicationInfoManager0, applicationInfoManager1);
      assertSame(applicationInfoManager1, applicationInfoManager0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      applicationInfoManager1.registerAppMetadata(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(applicationInfoManager1, applicationInfoManager0);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.STARTING;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      assertSame(applicationInfoManager0, applicationInfoManager1);
      
      ApplicationInfoManager applicationInfoManager2 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager2);
      assertSame(applicationInfoManager2, applicationInfoManager0);
      assertSame(applicationInfoManager2, applicationInfoManager1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "V9);#/l1W";
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig(string0);
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("V9);#/l1W", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      InstanceInfo instanceInfo0 = null;
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager(myDataCenterInstanceConfig0, instanceInfo0);
      assertNotNull(applicationInfoManager0);
      assertEquals("V9);#/l1W", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("V9);#/l1W", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      boolean boolean0 = myDataCenterInstanceConfig0.isNonSecurePortEnabled();
      assertTrue(boolean0);
      assertEquals("V9);#/l1W", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.OUT_OF_SERVICE;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus0);
      assertEquals("V9);#/l1W", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertEquals("V9);#/l1W", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      applicationInfoManager0.instance.instanceInfo = applicationInfoManager0.instanceInfo;
      ApplicationInfoManager.instance = applicationInfoManager0;
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig();
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      boolean boolean0 = myDataCenterInstanceConfig0.isNonSecurePortEnabled();
      assertTrue(boolean0);
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertNotNull(instanceInfo0);
      assertEquals(80, instanceInfo0.getPort());
      assertNull(instanceInfo0.getASGName());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo0.getStatus());
      assertNull(instanceInfo0.getActionType());
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      assertEquals("na", instanceInfo0.getSID());
      assertNull(instanceInfo0.getSecureVipAddress());
      assertFalse(instanceInfo0.isDirty());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertEquals(443, instanceInfo0.getSecurePort());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertEquals(1, instanceInfo0.getCountryId());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals(1392409281320L, instanceInfo0.getLastUpdatedTimestamp());
      assertEquals(1392409281320L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        applicationInfoManager0.registerAppMetadata(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      // Undeclared exception!
      try { 
        applicationInfoManager0.instance.initComponent(applicationInfoManager0.config);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize ApplicationInfoManager
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager();
      assertNotNull(applicationInfoManager0);
      
      ApplicationInfoManager.instance = applicationInfoManager0;
      // Undeclared exception!
      try { 
        ApplicationInfoManager.instance.instance.initComponent(applicationInfoManager0.config);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize ApplicationInfoManager
         //
         verifyException("com.netflix.appinfo.ApplicationInfoManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig(string0);
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      InstanceInfo instanceInfo0 = mock(InstanceInfo.class, new ViolatedAssumptionAnswer());
      InstanceInfo instanceInfo1 = new InstanceInfo(instanceInfo0);
      assertNotNull(instanceInfo1);
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getHostName());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getVIPAddress());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getActionType());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      ApplicationInfoManager applicationInfoManager0 = new ApplicationInfoManager(myDataCenterInstanceConfig0, instanceInfo1);
      assertNotNull(applicationInfoManager0);
      assertEquals("", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getHostName());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getVIPAddress());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getActionType());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      InstanceInfo instanceInfo2 = applicationInfoManager0.getInfo();
      assertNotNull(instanceInfo2);
      assertEquals("", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals(0, instanceInfo1.getPort());
      assertNull(instanceInfo1.getAppGroupName());
      assertEquals(0, instanceInfo1.getSecurePort());
      assertFalse(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getHostName());
      assertNull(instanceInfo1.getHomePageUrl());
      assertNull(instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getVIPAddress());
      assertEquals(0, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getStatusPageUrl());
      assertNull(instanceInfo1.getSID());
      assertNull(instanceInfo1.getASGName());
      assertNull(instanceInfo1.getAppName());
      assertNull(instanceInfo1.getVersion());
      assertNull(instanceInfo1.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertNull(instanceInfo1.getStatus());
      assertNull(instanceInfo1.getLastDirtyTimestamp());
      assertNull(instanceInfo1.getIPAddr());
      assertNull(instanceInfo1.getActionType());
      assertNull(instanceInfo2.getActionType());
      assertNull(instanceInfo2.getHostName());
      assertNull(instanceInfo2.getAppName());
      assertFalse(instanceInfo2.isDirty());
      assertNull(instanceInfo2.isCoordinatingDiscoveryServer());
      assertNull(instanceInfo2.getSecureVipAddress());
      assertNull(instanceInfo2.getLastDirtyTimestamp());
      assertNull(instanceInfo2.getStatus());
      assertNull(instanceInfo2.getVersion());
      assertNull(instanceInfo2.getHomePageUrl());
      assertNull(instanceInfo2.getIPAddr());
      assertNull(instanceInfo2.getOverriddenStatus());
      assertEquals(0, instanceInfo2.getSecurePort());
      assertEquals(0, instanceInfo2.getCountryId());
      assertEquals(0, instanceInfo2.getPort());
      assertNull(instanceInfo2.getAppGroupName());
      assertNull(instanceInfo2.getASGName());
      assertNull(instanceInfo2.getVIPAddress());
      assertNull(instanceInfo2.getSID());
      assertNull(instanceInfo2.getStatusPageUrl());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertFalse(instanceInfo2.equals((Object)instanceInfo0));
      assertSame(instanceInfo1, instanceInfo2);
      assertSame(instanceInfo2, instanceInfo1);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(long0);
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig();
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "(Tl1+H2?b";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      assertFalse(boolean0);
      
      boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      System.setCurrentTimeMillis(long0);
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertEquals("eureka.", myDataCenterInstanceConfig0.getNamespace());
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertNotNull(instanceInfo0);
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertEquals(0L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals(0L, instanceInfo0.getLastUpdatedTimestamp());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertFalse(instanceInfo0.isDirty());
      assertEquals("na", instanceInfo0.getSID());
      assertNull(instanceInfo0.getSecureVipAddress());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      assertEquals(80, instanceInfo0.getPort());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertNull(instanceInfo0.getActionType());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals(443, instanceInfo0.getSecurePort());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo0.getStatus());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals(1, instanceInfo0.getCountryId());
      assertNull(instanceInfo0.getASGName());
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      ApplicationInfoManager applicationInfoManager1 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager1);
      assertSame(applicationInfoManager1, applicationInfoManager0);
      
      ApplicationInfoManager.instance = applicationInfoManager1;
      applicationInfoManager1.instanceInfo = applicationInfoManager0.instanceInfo;
      assertEquals(1, applicationInfoManager1.instanceInfo.getCountryId());
      assertEquals("192.168.1.42", applicationInfoManager1.instanceInfo.getHostName());
      assertFalse(applicationInfoManager1.instanceInfo.isCoordinatingDiscoveryServer());
      assertEquals(443, applicationInfoManager1.instanceInfo.getSecurePort());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, applicationInfoManager1.instanceInfo.getStatus());
      assertEquals("UNKNOWN", applicationInfoManager1.instanceInfo.getAppName());
      assertNull(applicationInfoManager1.instanceInfo.getASGName());
      assertEquals("unknown", applicationInfoManager1.instanceInfo.getVersion());
      assertEquals("192.168.1.42:80", applicationInfoManager1.instanceInfo.getVIPAddress());
      assertEquals("http://192.168.1.42:80/Status", applicationInfoManager1.instanceInfo.getStatusPageUrl());
      assertEquals("http://192.168.1.42:80/", applicationInfoManager1.instanceInfo.getHomePageUrl());
      assertFalse(applicationInfoManager1.instanceInfo.isDirty());
      assertEquals("192.168.1.42", applicationInfoManager1.instanceInfo.getIPAddr());
      assertEquals(80, applicationInfoManager1.instanceInfo.getPort());
      assertEquals("na", applicationInfoManager1.instanceInfo.getSID());
      assertNull(applicationInfoManager1.instanceInfo.getSecureVipAddress());
      assertEquals(0L, applicationInfoManager1.instanceInfo.getLastUpdatedTimestamp());
      assertEquals(0L, (long)applicationInfoManager1.instanceInfo.getLastDirtyTimestamp());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, applicationInfoManager1.instanceInfo.getOverriddenStatus());
      assertNull(applicationInfoManager1.instanceInfo.getActionType());
      
      ApplicationInfoManager applicationInfoManager2 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager2);
      assertSame(applicationInfoManager2, applicationInfoManager1);
      assertSame(applicationInfoManager2, applicationInfoManager0);
      
      ApplicationInfoManager.instance = applicationInfoManager2;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      applicationInfoManager2.registerAppMetadata(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(applicationInfoManager2, applicationInfoManager1);
      assertSame(applicationInfoManager2, applicationInfoManager0);
      
      InstanceInfo instanceInfo1 = applicationInfoManager2.getInfo();
      assertNotNull(instanceInfo1);
      assertEquals("http://192.168.1.42:80/", instanceInfo1.getHomePageUrl());
      assertEquals(0L, instanceInfo1.getLastUpdatedTimestamp());
      assertEquals(0L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo1.getStatusPageUrl());
      assertEquals("unknown", instanceInfo1.getVersion());
      assertEquals("UNKNOWN", instanceInfo1.getAppName());
      assertEquals(1, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getASGName());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertFalse(instanceInfo1.isCoordinatingDiscoveryServer());
      assertEquals(443, instanceInfo1.getSecurePort());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo1.getStatus());
      assertEquals("na", instanceInfo1.getSID());
      assertEquals(80, instanceInfo1.getPort());
      assertEquals("192.168.1.42", instanceInfo1.getIPAddr());
      assertEquals("192.168.1.42:80", instanceInfo1.getVIPAddress());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getActionType());
      assertSame(applicationInfoManager2, applicationInfoManager1);
      assertSame(applicationInfoManager2, applicationInfoManager0);
      assertSame(instanceInfo1, instanceInfo0);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      
      System.setCurrentTimeMillis(instanceInfo1.DEFAULT_PORT);
      assertEquals("http://192.168.1.42:80/", instanceInfo1.getHomePageUrl());
      assertEquals(0L, instanceInfo1.getLastUpdatedTimestamp());
      assertEquals(0L, (long)instanceInfo1.getLastDirtyTimestamp());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo1.getStatusPageUrl());
      assertEquals("unknown", instanceInfo1.getVersion());
      assertEquals("UNKNOWN", instanceInfo1.getAppName());
      assertEquals(1, instanceInfo1.getCountryId());
      assertNull(instanceInfo1.getASGName());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertFalse(instanceInfo1.isCoordinatingDiscoveryServer());
      assertEquals(443, instanceInfo1.getSecurePort());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo1.getStatus());
      assertEquals("na", instanceInfo1.getSID());
      assertEquals(80, instanceInfo1.getPort());
      assertEquals("192.168.1.42", instanceInfo1.getIPAddr());
      assertEquals("192.168.1.42:80", instanceInfo1.getVIPAddress());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo1.getOverriddenStatus());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertTrue(instanceInfo1.isDirty());
      assertNull(instanceInfo1.getActionType());
      assertSame(applicationInfoManager2, applicationInfoManager1);
      assertSame(applicationInfoManager2, applicationInfoManager0);
      assertSame(instanceInfo1, instanceInfo0);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertSame(applicationInfoManager0, applicationInfoManager1);
      assertSame(applicationInfoManager0, applicationInfoManager2);
      
      ApplicationInfoManager.instance.refreshDataCenterInfoIfRequired();
      assertSame(applicationInfoManager1, applicationInfoManager0);
      assertSame(applicationInfoManager1, applicationInfoManager2);
      assertSame(ApplicationInfoManager.instance, applicationInfoManager1);
      assertSame(ApplicationInfoManager.instance, applicationInfoManager0);
      assertSame(ApplicationInfoManager.instance, applicationInfoManager2);
      
      ApplicationInfoManager applicationInfoManager3 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager3);
      assertSame(applicationInfoManager3, applicationInfoManager2);
      assertSame(applicationInfoManager3, applicationInfoManager0);
      assertSame(applicationInfoManager3, applicationInfoManager1);
      
      ApplicationInfoManager applicationInfoManager4 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager4);
      assertSame(applicationInfoManager4, applicationInfoManager0);
      assertSame(applicationInfoManager4, applicationInfoManager3);
      assertSame(applicationInfoManager4, applicationInfoManager2);
      assertSame(applicationInfoManager4, applicationInfoManager1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      long long1 = (-2690L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ApplicationInfoManager applicationInfoManager0 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager0);
      
      System.setCurrentTimeMillis(long0);
      assertFalse(long0 == long1);
      
      String string0 = "RSV=ndFM+/2oc3fV!n";
      AmazonInfo amazonInfo0 = new AmazonInfo();
      assertNotNull(amazonInfo0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      
      AmazonInfo.MetaDataKey amazonInfo_MetaDataKey0 = AmazonInfo.MetaDataKey.localIpv4;
      String string1 = amazonInfo0.get(amazonInfo_MetaDataKey0);
      assertNull(string1);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      
      MyDataCenterInstanceConfig myDataCenterInstanceConfig0 = new MyDataCenterInstanceConfig(string0, amazonInfo0);
      assertNotNull(myDataCenterInstanceConfig0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      
      String string2 = myDataCenterInstanceConfig0.getHomePageUrlPath();
      assertEquals("/", string2);
      assertNotNull(string2);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      
      InstanceInfo instanceInfo0 = applicationInfoManager0.getInfo();
      assertNotNull(instanceInfo0);
      assertFalse(instanceInfo0.isDirty());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo0.getStatus());
      assertEquals(443, instanceInfo0.getSecurePort());
      assertFalse(instanceInfo0.isCoordinatingDiscoveryServer());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo0.getOverriddenStatus());
      assertEquals("192.168.1.42:80", instanceInfo0.getVIPAddress());
      assertEquals("192.168.1.42", instanceInfo0.getHostName());
      assertNull(instanceInfo0.getSecureVipAddress());
      assertEquals("na", instanceInfo0.getSID());
      assertNull(instanceInfo0.getActionType());
      assertEquals("192.168.1.42", instanceInfo0.getIPAddr());
      assertEquals("unknown", instanceInfo0.getVersion());
      assertEquals("UNKNOWN", instanceInfo0.getAppName());
      assertEquals(80, instanceInfo0.getPort());
      assertEquals(1L, (long)instanceInfo0.getLastDirtyTimestamp());
      assertEquals(1L, instanceInfo0.getLastUpdatedTimestamp());
      assertEquals(1, instanceInfo0.getCountryId());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo0.getStatusPageUrl());
      assertEquals("http://192.168.1.42:80/", instanceInfo0.getHomePageUrl());
      assertNull(instanceInfo0.getASGName());
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      EvoSuiteURL evoSuiteURL0 = null;
      boolean boolean0 = myDataCenterInstanceConfig0.getSecurePortEnabled();
      assertFalse(boolean0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus0 = InstanceInfo.InstanceStatus.DOWN;
      applicationInfoManager0.instance.setInstanceStatus(instanceInfo_InstanceStatus0);
      String string3 = "oW?@?A6Huhd";
      boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string3);
      assertFalse(boolean1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      boolean boolean2 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string2);
      assertFalse(boolean2);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig0);
      assertEquals(DataCenterInfo.Name.Amazon, amazonInfo0.getName());
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig0.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig0.getIpAddress());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      
      InstanceInfo.InstanceStatus instanceInfo_InstanceStatus1 = InstanceInfo.InstanceStatus.STARTING;
      applicationInfoManager0.setInstanceStatus(instanceInfo_InstanceStatus1);
      assertFalse(instanceInfo_InstanceStatus1.equals((Object)instanceInfo_InstanceStatus0));
      assertNotSame(instanceInfo_InstanceStatus1, instanceInfo_InstanceStatus0);
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      long long2 = (-1L);
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      MyDataCenterInstanceConfig myDataCenterInstanceConfig1 = new MyDataCenterInstanceConfig(string0);
      assertNotNull(myDataCenterInstanceConfig1);
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig1.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig1.getIpAddress());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(myDataCenterInstanceConfig1.equals((Object)myDataCenterInstanceConfig0));
      
      int int0 = myDataCenterInstanceConfig1.getSecurePort();
      assertEquals(443, int0);
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig1.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig1.getIpAddress());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(myDataCenterInstanceConfig1.equals((Object)myDataCenterInstanceConfig0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(myDataCenterInstanceConfig1, myDataCenterInstanceConfig0);
      
      String string4 = myDataCenterInstanceConfig1.getASGName();
      assertNull(string4);
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig1.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig1.getIpAddress());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(myDataCenterInstanceConfig1.equals((Object)myDataCenterInstanceConfig0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(myDataCenterInstanceConfig1, myDataCenterInstanceConfig0);
      
      String string5 = myDataCenterInstanceConfig1.getASGName();
      assertNull(string5);
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig1.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig1.getIpAddress());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(myDataCenterInstanceConfig1.equals((Object)myDataCenterInstanceConfig0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(myDataCenterInstanceConfig1, myDataCenterInstanceConfig0);
      
      applicationInfoManager0.initComponent(myDataCenterInstanceConfig1);
      assertEquals("RSV=ndFM+/2oc3fV!n", myDataCenterInstanceConfig1.getNamespace());
      assertEquals("192.168.1.42", myDataCenterInstanceConfig1.getIpAddress());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(myDataCenterInstanceConfig1.equals((Object)myDataCenterInstanceConfig0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(myDataCenterInstanceConfig1, myDataCenterInstanceConfig0);
      
      ApplicationInfoManager applicationInfoManager1 = ApplicationInfoManager.getInstance();
      assertNotNull(applicationInfoManager1);
      assertSame(applicationInfoManager1, applicationInfoManager0);
      
      applicationInfoManager0.initComponent(applicationInfoManager1.config);
      assertSame(applicationInfoManager1, applicationInfoManager0);
      assertSame(applicationInfoManager0, applicationInfoManager1);
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertSame(applicationInfoManager0, applicationInfoManager1);
      
      applicationInfoManager0.refreshDataCenterInfoIfRequired();
      assertSame(applicationInfoManager0, applicationInfoManager1);
      
      InstanceInfo instanceInfo1 = applicationInfoManager1.getInfo();
      assertNotNull(instanceInfo1);
      assertNull(instanceInfo1.getASGName());
      assertEquals("192.168.1.42", instanceInfo1.getIPAddr());
      assertEquals("UNKNOWN", instanceInfo1.getAppName());
      assertEquals("http://192.168.1.42:80/", instanceInfo1.getHomePageUrl());
      assertEquals(80, instanceInfo1.getPort());
      assertFalse(instanceInfo1.isCoordinatingDiscoveryServer());
      assertEquals("192.168.1.42", instanceInfo1.getHostName());
      assertEquals(1, instanceInfo1.getCountryId());
      assertEquals(443, instanceInfo1.getSecurePort());
      assertFalse(instanceInfo1.isDirty());
      assertEquals("na", instanceInfo1.getSID());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo1.getStatusPageUrl());
      assertEquals((-1L), instanceInfo1.getLastUpdatedTimestamp());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo1.getStatus());
      assertNull(instanceInfo1.getActionType());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo1.getOverriddenStatus());
      assertEquals("unknown", instanceInfo1.getVersion());
      assertEquals("192.168.1.42:80", instanceInfo1.getVIPAddress());
      assertNull(instanceInfo1.getSecureVipAddress());
      assertEquals((-1L), (long)instanceInfo1.getLastDirtyTimestamp());
      assertFalse(instanceInfo1.equals((Object)instanceInfo0));
      assertSame(applicationInfoManager1, applicationInfoManager0);
      assertNotSame(instanceInfo1, instanceInfo0);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
      
      InstanceInfo instanceInfo2 = applicationInfoManager0.getInfo();
      assertNotNull(instanceInfo2);
      assertFalse(instanceInfo2.isCoordinatingDiscoveryServer());
      assertFalse(instanceInfo2.isDirty());
      assertEquals("192.168.1.42:80", instanceInfo2.getVIPAddress());
      assertEquals(443, instanceInfo2.getSecurePort());
      assertNull(instanceInfo2.getSecureVipAddress());
      assertEquals(InstanceInfo.InstanceStatus.UNKNOWN, instanceInfo2.getOverriddenStatus());
      assertEquals("na", instanceInfo2.getSID());
      assertEquals("192.168.1.42", instanceInfo2.getHostName());
      assertNull(instanceInfo2.getActionType());
      assertEquals(80, instanceInfo2.getPort());
      assertEquals("192.168.1.42", instanceInfo2.getIPAddr());
      assertEquals("unknown", instanceInfo2.getVersion());
      assertEquals("UNKNOWN", instanceInfo2.getAppName());
      assertNull(instanceInfo2.getASGName());
      assertEquals((-1L), instanceInfo2.getLastUpdatedTimestamp());
      assertEquals((-1L), (long)instanceInfo2.getLastDirtyTimestamp());
      assertEquals(1, instanceInfo2.getCountryId());
      assertEquals(InstanceInfo.InstanceStatus.STARTING, instanceInfo2.getStatus());
      assertEquals("http://192.168.1.42:80/", instanceInfo2.getHomePageUrl());
      assertEquals("http://192.168.1.42:80/Status", instanceInfo2.getStatusPageUrl());
      assertFalse(instanceInfo2.equals((Object)instanceInfo0));
      assertSame(applicationInfoManager0, applicationInfoManager1);
      assertNotSame(instanceInfo2, instanceInfo0);
      assertSame(instanceInfo2, instanceInfo1);
      assertEquals(1, InstanceInfo.DEFAULT_COUNTRY_ID);
      assertEquals(7001, InstanceInfo.DEFAULT_PORT);
      assertEquals(7002, InstanceInfo.DEFAULT_SECURE_PORT);
  }
}
