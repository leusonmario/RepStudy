/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 10:45:51 GMT 2021
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.LinearShardSpec;
import com.metamx.druid.shard.NoneShardSpec;
import com.metamx.druid.shard.SingleDimensionShardSpec;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipException;
import org.apache.commons.httpclient.auth.CredentialsProvider;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hyperic.sigar.Sigar;
import org.hyperic.sigar.cmd.Shell;
import org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer;
import org.jets3t.service.StorageService;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.model.S3Object;
import org.jets3t.service.model.StorageObject;
import org.jets3t.service.security.GSCredentials;
import org.jets3t.service.security.ProviderCredentials;
import org.joda.time.DateTimeZone;
import org.joda.time.Interval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(restS3Service0);
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(s3SegmentPusher0);
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      
      Shell shell0 = new Shell();
      assertNotNull(shell0);
      assertFalse(shell0.isRedirected());
      assertFalse(shell0.isInteractive());
      assertEquals(0, shell0.getPageSize());
      
      Sigar sigar0 = shell0.getSigar();
      assertEquals((-1L), Sigar.FIELD_NOTIMPL);
      assertNotNull(sigar0);
      assertFalse(shell0.isRedirected());
      assertFalse(shell0.isInteractive());
      assertEquals(0, shell0.getPageSize());
      
      File file0 = sigar0.getNativeLibrary();
      assertEquals((-1L), Sigar.FIELD_NOTIMPL);
      assertNull(file0);
      assertFalse(shell0.isRedirected());
      assertFalse(shell0.isInteractive());
      assertEquals(0, shell0.getPageSize());
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      long long0 = 6L;
      Interval interval0 = new Interval(long0, long0);
      assertNotNull(interval0);
      assertEquals(6L, interval0.getStartMillis());
      assertEquals(6L, interval0.getEndMillis());
      
      String string1 = "org.apache.log4j.helpers.OptionConverter";
      File file0 = MockFile.createTempFile(string1, string0, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("8", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8/8", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.apache.log4j.helpers.OptionConverter08", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8/8/org.apache.log4j.helpers.OptionConverter08", file0.toString());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8/8", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string1, string0);
      assertNotSame(file0, mockFile0);
      
      LinearShardSpec linearShardSpec0 = new LinearShardSpec();
      assertNotNull(linearShardSpec0);
      assertEquals((-1), linearShardSpec0.getPartitionNum());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(linearShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string0).when(dataSegment0).getVersion();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "5f1";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      long long0 = 29L;
      Interval interval0 = new Interval(long0, long0);
      assertNotNull(interval0);
      assertEquals(29L, interval0.getEndMillis());
      assertEquals(29L, interval0.getStartMillis());
      
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("5f1", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("5f1", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/5f1/5f105f1", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/5f1", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("5f105f1", file0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      LinearShardSpec linearShardSpec0 = new LinearShardSpec();
      assertNotNull(linearShardSpec0);
      assertEquals((-1), linearShardSpec0.getPartitionNum());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(linearShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string0).when(dataSegment0).getVersion();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      File file0 = null;
      DataSegment dataSegment0 = null;
      DataSegment dataSegment1 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      Shell shell0 = new Shell();
      assertNotNull(shell0);
      assertFalse(shell0.isRedirected());
      assertFalse(shell0.isInteractive());
      assertEquals(0, shell0.getPageSize());
      
      Sigar sigar0 = shell0.getSigar();
      assertEquals((-1L), Sigar.FIELD_NOTIMPL);
      assertNotNull(sigar0);
      assertFalse(shell0.isRedirected());
      assertFalse(shell0.isInteractive());
      assertEquals(0, shell0.getPageSize());
      
      File file0 = sigar0.getNativeLibrary();
      assertEquals((-1L), Sigar.FIELD_NOTIMPL);
      assertNull(file0);
      assertFalse(shell0.isRedirected());
      assertFalse(shell0.isInteractive());
      assertEquals(0, shell0.getPageSize());
      
      String string0 = "java.version";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertEquals((-1L), Sigar.FIELD_NOTIMPL);
      assertNotNull(mockFile0);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sigar0.BUILD_DATE, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      assertFalse(shell0.isRedirected());
      assertFalse(shell0.isInteractive());
      assertEquals(0, shell0.getPageSize());
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("8", mockFile0.toString());
      assertEquals("8", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      long long0 = 10L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      assertNotNull(interval0);
      assertEquals(10L, interval0.getStartMillis());
      assertEquals(10L, interval0.getEndMillis());
      
      String string1 = "org.jets3t.service.utils.Mimetypes";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataSegment0).getDataSource();
      doReturn((Interval) null).when(dataSegment0).getInterval();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("8", mockFile0.getName());
      assertEquals("8", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      long long0 = 10L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      assertNotNull(interval0);
      assertEquals(10L, interval0.getStartMillis());
      assertEquals(10L, interval0.getEndMillis());
      
      String string1 = "org.jets3t.service.utils.Mimetypes";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(dataSegment0).getDataSource();
      doReturn(interval0, (Interval) null).when(dataSegment0).getInterval();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("8", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertEquals("8", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      
      long long0 = 10L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      assertNotNull(interval0);
      assertEquals(10L, interval0.getEndMillis());
      assertEquals(10L, interval0.getStartMillis());
      
      String string1 = "org.jets3t.service.utils.Mimetypes";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      assertNotNull(noneShardSpec0);
      assertEquals(0, noneShardSpec0.getPartitionNum());
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      
      String string2 = ")-C%RA|ItU8#1.:L";
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(noneShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string2).when(dataSegment0).getVersion();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn((String) null).when(s3SegmentPusherConfig0).getBucket();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("8", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("8", mockFile0.getName());
      
      long long0 = 10L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      assertNotNull(interval0);
      assertEquals(10L, interval0.getStartMillis());
      assertEquals(10L, interval0.getEndMillis());
      
      String string1 = "org.jets3t.service.utils.Mimetypes";
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "@Cv>djibt8JGp";
      String string3 = "";
      File file0 = MockFile.createTempFile(string2, string3, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("8", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("8", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8/@Cv>djibt8JGp0", file0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("@Cv>djibt8JGp0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 2;
      Random.setNextRandom(int0);
      String string4 = null;
      int int1 = (-9);
      LinearShardSpec linearShardSpec0 = new LinearShardSpec(int1);
      assertNotNull(linearShardSpec0);
      assertFalse(int1 == int0);
      assertEquals((-9), linearShardSpec0.getPartitionNum());
      
      String string5 = "H8/*I<+hYj{COvd";
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(linearShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string5).when(dataSegment0).getVersion();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      Object object0 = null;
      Interval interval0 = new Interval(object0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      String string1 = "t8S~!";
      Map<String, Object> map0 = null;
      DefaultHttpChunkTrailer defaultHttpChunkTrailer0 = new DefaultHttpChunkTrailer();
      assertNotNull(defaultHttpChunkTrailer0);
      assertTrue(defaultHttpChunkTrailer0.isLast());
      
      String string2 = "ivD`u6aA";
      List<String> list0 = defaultHttpChunkTrailer0.getHeaders(string2);
      assertNotNull(list0);
      assertFalse(list0.contains(string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(defaultHttpChunkTrailer0.isLast());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getEnd());
      
      long long0 = 0L;
      DataSegment dataSegment0 = new DataSegment(string0, interval0, string1, map0, list0, list0, singleDimensionShardSpec0, long0);
      assertNotNull(dataSegment0);
      assertFalse(list0.contains(string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertTrue(defaultHttpChunkTrailer0.isLast());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals("_2014-02-14T17:21:21.320-03:00_2014-02-14T17:21:21.320-03:00_t8S~!_-1", dataSegment0.getIdentifier());
      assertEquals("t8S~!", dataSegment0.getVersion());
      assertEquals(0L, dataSegment0.getSize());
      assertEquals("", dataSegment0.getDataSource());
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("8", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("8", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      long long0 = 10L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      assertNotNull(interval0);
      assertEquals(10L, interval0.getStartMillis());
      assertEquals(10L, interval0.getEndMillis());
      
      String string1 = "org.jets3t.service.utils.M;metypes";
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "@Cv>djibt8JGp";
      String string3 = "";
      File file0 = MockFile.createTempFile(string2, string3, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("8", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("8", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("@Cv>djibt8JGp0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8/@Cv>djibt8JGp0", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 2;
      Random.setNextRandom(int0);
      String string4 = null;
      int int1 = (-9);
      LinearShardSpec linearShardSpec0 = new LinearShardSpec(int1);
      assertNotNull(linearShardSpec0);
      assertFalse(int1 == int0);
      assertEquals((-9), linearShardSpec0.getPartitionNum());
      
      String string5 = "H8/*I<+hYj{COvd";
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(linearShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string5).when(dataSegment0).getVersion();
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("8", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("8", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      
      long long0 = 10L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      assertNotNull(interval0);
      assertEquals(10L, interval0.getEndMillis());
      assertEquals(10L, interval0.getStartMillis());
      
      String string1 = "org.jets3t.service.utils.Mimetypes";
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "@Cv>djibt8JGp";
      String string3 = "";
      String string4 = "4!s)T/5bL-D6=LY";
      String string5 = "os.name";
      GSCredentials gSCredentials0 = new GSCredentials(string4, string5);
      assertNotNull(gSCredentials0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("os.name", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4!s)T/5bL-D6=LY", gSCredentials0.getAccessKey());
      assertNull(gSCredentials0.getFriendlyName());
      
      String string6 = "%l]0R X3Q?vfd~(";
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string6, credentialsProvider0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(restS3Service0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertEquals("os.name", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4!s)T/5bL-D6=LY", gSCredentials0.getAccessKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("%l]0R X3Q?vfd~(", restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      
      s3SegmentPusher0.s3Client = restS3Service0;
      assertEquals("os.name", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4!s)T/5bL-D6=LY", gSCredentials0.getAccessKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("%l]0R X3Q?vfd~(", restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(s3SegmentPusher0.s3Client.getDevPayProductToken());
      assertFalse(s3SegmentPusher0.s3Client.isShutdown());
      assertTrue(s3SegmentPusher0.s3Client.isHttpsOnly());
      assertNull(s3SegmentPusher0.s3Client.getDevPayUserToken());
      assertFalse(s3SegmentPusher0.s3Client.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", s3SegmentPusher0.s3Client.getRestMetadataPrefix());
      assertEquals("x-amz-", s3SegmentPusher0.s3Client.getRestHeaderPrefix());
      assertEquals("%l]0R X3Q?vfd~(", s3SegmentPusher0.s3Client.getInvokingApplicationDescription());
      assertTrue(s3SegmentPusher0.s3Client.isAuthenticatedConnection());
      assertEquals(5, s3SegmentPusher0.s3Client.getInternalErrorRetryMax());
      
      File file0 = MockFile.createTempFile(string2, string3, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("8", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("8", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("@Cv>djibt8JGp0", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8/@Cv>djibt8JGp0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8", file0.getParent());
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 6;
      Random.setNextRandom(int0);
      String string7 = null;
      int int1 = 2048;
      LinearShardSpec linearShardSpec0 = new LinearShardSpec();
      assertNotNull(linearShardSpec0);
      assertEquals((-1), linearShardSpec0.getPartitionNum());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(linearShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string3).when(dataSegment0).getVersion();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000084\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "8";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("8/@Cv>djibt8JGp0m");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-7);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-18);
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-18)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("8", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("8", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      
      long long0 = 19L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      assertNotNull(interval0);
      assertEquals(19L, interval0.getStartMillis());
      assertEquals(19L, interval0.getEndMillis());
      
      String string1 = "org.jets3t.service.utils.Mimetypes";
      String string2 = "@Cv>djibt8JGp";
      String string3 = "m";
      File file0 = MockFile.createTempFile(string2, string3, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("@Cv>djibt8JGp0m", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_6/8/@Cv>djibt8JGp0m", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(2L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("8", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("8", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 2;
      Random.setNextRandom(int0);
      String string4 = null;
      int int1 = 2048;
      LinearShardSpec linearShardSpec0 = new LinearShardSpec(int1);
      assertNotNull(linearShardSpec0);
      assertFalse(int1 == int0);
      assertEquals(2048, linearShardSpec0.getPartitionNum());
      
      Boolean boolean1 = new Boolean(string0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1.equals((Object)boolean0));
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(linearShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string3).when(dataSegment0).getVersion();
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // duplicate entry: @Cv>djibt8JGp0m
         //
         verifyException("java.util.zip.ZipOutputStream", e);
      }
  }
}
