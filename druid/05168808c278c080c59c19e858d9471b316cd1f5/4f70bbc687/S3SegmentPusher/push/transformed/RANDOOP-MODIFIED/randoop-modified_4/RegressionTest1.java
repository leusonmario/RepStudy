import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = restS3Service4.renameMetadataKeys(strMap5);
        com.metamx.druid.client.DataSegment.Builder builder7 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.metamx.druid.client.DataSegment.Builder builder12 = builder7.dimensions((java.util.List<java.lang.String>) strList10);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        java.util.List<java.lang.String> strList18 = restS3Service14.getResourceParameterNames();
        com.metamx.druid.shard.ShardSpec shardSpec19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment21 = new com.metamx.druid.client.DataSegment("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", interval1, "null", strMap5, (java.util.List<java.lang.String>) strList10, strList18, shardSpec19, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com.s3.amazonaws.com/?torrent/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com.s3.amazonaws.com/?torrent/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        java.lang.String str13 = restS3Service9.getEndpoint();
        java.lang.String str16 = restS3Service9.createTorrentUrl("", "");
        java.lang.String str17 = restS3Service9.getRestMetadataPrefix();
        java.util.Date date18 = restS3Service9.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service1.createSignedDeleteUrl("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "", date18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "s3.amazonaws.com" + "'", str13, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str16, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 04 08:17:08 BRT 2021");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        java.lang.Class<?> wildcardClass7 = file4.getClass();
        org.codehaus.jackson.type.JavaType javaType8 = objectMapper2.constructType((java.lang.reflect.Type) wildcardClass7);
        com.metamx.emitter.EmittingLogger emittingLogger9 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass7);
        com.google.common.base.Joiner joiner11 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger13 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable14 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode19 = objectMapper18.createObjectNode();
        java.lang.Object[] objArray20 = new java.lang.Object[] { providerCredentials16, objectMapper18 };
        emittingLogger13.info(throwable14, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.disableDefaultTyping();
        java.io.File file26 = new java.io.File("hi!");
        java.io.File file28 = new java.io.File(file26, "");
        java.lang.Class<?> wildcardClass29 = file26.getClass();
        org.codehaus.jackson.type.JavaType javaType30 = objectMapper24.constructType((java.lang.reflect.Type) wildcardClass29);
        com.metamx.emitter.EmittingLogger emittingLogger32 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig41 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38, serializerProvider39, deserializerProvider40, serializationConfig41, deserializationConfig42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper43.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper45.disableDefaultTyping();
        java.lang.Object obj48 = null;
        java.lang.String str49 = objectMapper45.writeValueAsString(obj48);
        com.metamx.druid.client.DataSegment.Builder builder50 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder50.dimensions((java.util.List<java.lang.String>) strList53);
        com.metamx.emitter.EmittingLogger emittingLogger57 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray59 = new java.lang.Object[] { objectMapper35, deserializerProvider44, objectMapper45, strList53, emittingLogger57, (byte) 1 };
        emittingLogger32.error(throwable33, "{\"\": \"s3.amazonaws.com\"}", objArray59);
        java.lang.Throwable throwable61 = null;
        java.io.File file64 = new java.io.File("hi!");
        java.io.File file66 = new java.io.File(file64, "");
        java.io.File file67 = file64.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode69 = objectMapper68.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory70 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper72 = objectMapper71.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = objectMapper71.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider74 = objectMapper71.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider75 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory70, serializerProvider74, deserializerProvider75);
        org.jets3t.service.security.ProviderCredentials providerCredentials77 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service78 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials77);
        org.jets3t.service.security.ProviderCredentials providerCredentials79 = restS3Service78.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager80 = null;
        restS3Service78.setHttpConnectionManager(httpConnectionManager80);
        java.lang.Object[] objArray84 = new java.lang.Object[] { file67, objectMapper68, objectMapper76, restS3Service78, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger32.info(throwable61, "", objArray84);
        java.lang.String str86 = joiner11.join((java.lang.Object) emittingLogger13, (java.lang.Object) javaType30, objArray84);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.service.AlertBuilder alertBuilder87 = emittingLogger9.makeAlert("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", objArray84);
            org.junit.Assert.fail("Expected exception of type com.metamx.common.ISE; message: Emitter not initialized!  Cannot alert.  Please make sure to call class com.metamx.emitter.EmittingLogger.registerEmitter()");
        } catch (com.metamx.common.ISE e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(javaType8);
        org.junit.Assert.assertNotNull(joiner11);
        org.junit.Assert.assertNotNull(objectNode19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNull("file26.getParent() == null", file26.getParent());
        org.junit.Assert.assertEquals(file26.toString(), "hi!");
        org.junit.Assert.assertNull("file28.getParent() == null", file28.getParent());
        org.junit.Assert.assertEquals(file28.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(javaType30);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "null" + "'", str49, "null");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNull("file64.getParent() == null", file64.getParent());
        org.junit.Assert.assertEquals(file64.toString(), "hi!");
        org.junit.Assert.assertNull("file66.getParent() == null", file66.getParent());
        org.junit.Assert.assertEquals(file66.toString(), "hi!");
        org.junit.Assert.assertNotNull(file67);
// flaky:         org.junit.Assert.assertEquals(file67.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode69);
        org.junit.Assert.assertNotNull(objectMapper72);
        org.junit.Assert.assertNotNull(objectMapper73);
        org.junit.Assert.assertNotNull(serializerProvider74);
        org.junit.Assert.assertNull(providerCredentials79);
        org.junit.Assert.assertNotNull(objArray84);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17, "null", credentialsProvider19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service22.renameMetadataKeys(strMap23);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service20.renameMetadataKeys(strMap23);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = restS3Service1.createSignedUrl("", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", strMap25, providerCredentials26, (long) (short) 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider5, jets3tProperties11);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11, hostConfiguration13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object18 = restS3Service14.getVersionedObject("null", "{\"\": \"s3.amazonaws.com\"}", ":");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/%3A?versionId=null': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteObject("", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.suspendBucketVersioningWithMFA("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "[\"content-length-range\", -226, -226]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        boolean boolean4 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        java.util.Date date17 = restS3Service13.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service1.createSignedPutUrl("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "x-amz-meta-", strMap10, providerCredentials11, date17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:17:09 BRT 2021");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = objectMapper8.canDeserialize(javaType19);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider21 = null;
        objectMapper8.setFilters(filterProvider21);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode24 = objectMapper8.readTree("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.JsonParseException; message: Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)? at [Source: java.io.StringReader@102d4994; line: 1, column: 2]");
        } catch (org.codehaus.jackson.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Range((int) (byte) 10, (int) '/');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[\"content-length-range\", 10, 47]" + "'", str2, "[\"content-length-range\", 10, 47]");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        file1.deleteOnExit();
        boolean boolean9 = file1.mkdirs();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setRequesterPaysBucket("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/?requestPayment': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties8);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList13 = restS3Service9.getVersionedObjectAcl("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "[\"content-length-range\", -226, -226]", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", -226, -226]/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D?versionId=%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D&acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setAnnotationIntrospector(annotationIntrospector7);
        org.codehaus.jackson.JsonParser.Feature feature9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper8.configure(feature9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager4);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setRequesterPaysBucket("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]/&requestPayment': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteWebsiteConfig("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/?website': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket10 = restS3Service1.createBucket("[\"content-length-range\", -226, -226]", "/");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageOwner storageOwner8 = restS3Service1.getAccountOwner();
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: List all buckets to find account owner");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = restS3Service6.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager8 = null;
        restS3Service6.setHttpConnectionManager(httpConnectionManager8);
        java.lang.String str10 = restS3Service6.getEndpoint();
        java.lang.String str13 = restS3Service6.createTorrentUrl("", "");
        java.lang.String str14 = restS3Service6.getRestMetadataPrefix();
        java.util.Date date15 = restS3Service6.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = restS3Service1.createSignedGetUrl("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", date15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(providerCredentials7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "s3.amazonaws.com" + "'", str10, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str13, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "x-amz-meta-" + "'", str14, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Nov 04 08:17:10 BRT 2021");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "null", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray5 = restS3Service3.listObjects(s3Bucket4);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        java.util.Calendar calendar7 = null;
        java.util.Calendar calendar8 = null;
        java.lang.String[] strArray15 = new java.lang.String[] { "[\"content-length-range\", 58, 1]", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "hi!", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}" };
        java.lang.String[] strArray19 = new java.lang.String[] { "{\"\": \"s3.amazonaws.com\"}/hi!", "s3.amazonaws.com", "null" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object20 = restS3Service3.getVersionedObjectDetails("[\"content-length-range\", 58, 1]", s3Bucket5, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", calendar7, calendar8, strArray15, strArray19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Versioned Object Details cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        java.util.Date date10 = restS3Service1.getCurrentTimeWithOffset();
        org.jets3t.service.model.StorageObject storageObject12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service1.updateObjectMetadata("s3.amazonaws.com", storageObject12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Nov 04 08:17:10 BRT 2021");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str18 = restS3Service1.getDevPayProductToken();
        org.jets3t.service.model.S3Object s3Object20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object21 = restS3Service1.putObjectWithSignedUrl("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", s3Object20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        boolean boolean6 = file2.isHidden();
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList7 = restS3Service1.getVersionedObjectAcl("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", s3Bucket5, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service26.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service26.getEndpoint();
        java.lang.String str33 = restS3Service26.createTorrentUrl("", "");
        java.lang.String str34 = restS3Service26.getRestMetadataPrefix();
        java.util.Date date35 = restS3Service26.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = restS3Service1.createSignedGetUrl("x-amz-meta-", "/", providerCredentials24, date35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "s3.amazonaws.com" + "'", str30, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str33, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "x-amz-meta-" + "'", str34, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 04 08:17:11 BRT 2021");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket9 = restS3Service1.getOrCreateBucket(":");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get or Create Bucket with location");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.io.File file4 = file1.getAbsoluteFile();
        boolean boolean5 = file4.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode31 = objectMapper30.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema32 = null;
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper30.schemaBasedReader(formatSchema32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode35 = objectMapper34.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectReader objectReader37 = objectMapper34.schemaBasedReader(formatSchema36);
        byte[] byteArray39 = objectMapper34.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode40 = objectMapper30.valueToTree((java.lang.Object) 10L);
        byte[] byteArray41 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector43 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.setAnnotationIntrospector(annotationIntrospector43);
        java.lang.Object obj45 = null;
        byte[] byteArray46 = objectMapper44.writeValueAsBytes(obj45);
        org.codehaus.jackson.type.TypeReference typeReference49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.Version version50 = objectMapper0.readValue(byteArray46, 100, 100, typeReference49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
        org.junit.Assert.assertNotNull(objectNode31);
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectNode35);
        org.junit.Assert.assertNotNull(objectReader37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[110, 117, 108, 108]");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "null", credentialsProvider5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service6.renameMetadataKeys(strMap9);
        com.metamx.druid.client.DataSegment.Builder builder12 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        java.util.List<java.lang.String> strList18 = restS3Service14.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder19 = builder12.dimensions(strList18);
        com.metamx.druid.client.DataSegment.Builder builder20 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = restS3Service22.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager24);
        java.util.List<java.lang.String> strList26 = restS3Service22.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder27 = builder20.dimensions(strList26);
        com.metamx.druid.shard.ShardSpec shardSpec28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment30 = new com.metamx.druid.client.DataSegment("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", interval1, "null", strMap9, strList18, strList26, shardSpec28, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(providerCredentials23);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.io.File file2 = new java.io.File("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertEquals(file2.getParent(), "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.JsonFactory jsonFactory11 = objectMapper8.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(jsonFactory11);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "null", credentialsProvider5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service6.renameMetadataKeys(strMap9);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        java.util.List<java.lang.String> strList17 = restS3Service13.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder18 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder18.dimensions((java.util.List<java.lang.String>) strList21);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder23.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec26 = null;
        com.metamx.druid.client.DataSegment.Builder builder27 = builder23.shardSpec(shardSpec26);
        com.metamx.druid.client.DataSegment.Builder builder29 = builder23.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder30.dimensions((java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder35.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder39 = builder37.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder40 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder40.dimensions((java.util.List<java.lang.String>) strList43);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder39.metrics((java.util.List<java.lang.String>) strList43);
        com.metamx.druid.client.DataSegment.Builder builder47 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder47.dimensions((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder46.metrics((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder23.metrics((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.shard.ShardSpec shardSpec55 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment57 = new com.metamx.druid.client.DataSegment("", interval1, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap9, strList17, (java.util.List<java.lang.String>) strList50, shardSpec55, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        org.codehaus.jackson.map.ObjectReader objectReader25 = objectMapper0.updatingReader((java.lang.Object) objectMapper20);
        org.codehaus.jackson.map.ObjectWriter objectWriter26 = objectMapper20.writer();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectReader25);
        org.junit.Assert.assertNotNull(objectWriter26);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        java.lang.String str8 = restS3Service1.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket10 = null;
        org.jets3t.service.model.S3Object s3Object11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object12 = restS3Service1.putObject(s3Bucket10, s3Object11);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str8, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties11);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service14.deleteObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "http://s3.amazonaws.com//hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider5, jets3tProperties11);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11, hostConfiguration13);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service14.deleteVersionedObject("{\"\": \"s3.amazonaws.com\"}", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action deleteVersionedObject cannot be performed with an invalid object key name: ");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket10 = restS3Service1.getBucket("/");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service9.renameMetadataKeys(strMap10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = restS3Service1.createSignedUrl("[\"content-length-range\", 10, 47]", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 58, 1]", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap10, providerCredentials12, (long) (short) 1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket10 = null;
        org.jets3t.service.model.S3Object s3Object11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object12 = restS3Service1.putObject(s3Bucket10, s3Object11);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = restS3Service4.renameMetadataKeys(strMap5);
        com.metamx.druid.client.DataSegment.Builder builder7 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.metamx.druid.client.DataSegment.Builder builder12 = builder7.dimensions((java.util.List<java.lang.String>) strList10);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder12.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder16 = builder14.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder17 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder17.dimensions((java.util.List<java.lang.String>) strList20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder14.metrics((java.util.List<java.lang.String>) strList20);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = restS3Service25.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service25.setHttpConnectionManager(httpConnectionManager27);
        java.util.List<java.lang.String> strList29 = restS3Service25.getResourceParameterNames();
        com.metamx.druid.shard.ShardSpec shardSpec30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment32 = new com.metamx.druid.client.DataSegment("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", interval1, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", strMap5, (java.util.List<java.lang.String>) strList20, strList29, shardSpec30, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(providerCredentials26);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory15 = objectMapper13.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper11.reader(jsonNodeFactory15);
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper8.reader(jsonNodeFactory15);
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode19 = objectMapper8.readTree(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(jsonNodeFactory15);
        org.junit.Assert.assertNotNull(objectReader16);
        org.junit.Assert.assertNotNull(objectReader17);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Range((int) (byte) 100, 4);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[\"content-length-range\", 100, 4]" + "'", str2, "[\"content-length-range\", 100, 4]");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        java.util.Date date10 = restS3Service1.getCurrentTimeWithOffset();
        org.jets3t.service.model.S3Bucket s3Bucket11 = null;
        java.util.Calendar calendar13 = null;
        java.util.Calendar calendar14 = null;
        java.lang.String[] strArray19 = new java.lang.String[] { "x-amz-meta-", "http://s3.amazonaws.com//hi%21?torrent", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "http://s3.amazonaws.com//?torrent", "[\"content-length-range\", 10, 47]", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "{\"\": \"s3.amazonaws.com\"}/hi!" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object28 = restS3Service1.getObject(s3Bucket11, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", calendar13, calendar14, strArray19, strArray25, (java.lang.Long) 967682662400L, (java.lang.Long) 10L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Object cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Nov 04 08:17:15 BRT 2021");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray25);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        int int16 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObjectWithMFA("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 58, 1]", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/%5B%22%22%2C%20%22%24http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%2C%20%22null%22%5D&versionId=http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray8 = restS3Service1.listObjects("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/?max-keys=1000&prefix=%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D&delimiter=%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.io.File file3 = new java.io.File("hi!");
        java.io.File file5 = new java.io.File(file3, "");
        java.lang.String str6 = file3.getAbsolutePath();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file7 = java.io.File.createTempFile("", "http://s3.amazonaws.com//hi%21?torrent", file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Prefix string too short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str6, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object13 = restS3Service1.getObject("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "{\"\": \"s3.amazonaws.com\"}/hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider5, jets3tProperties11);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", credentialsProvider2, jets3tProperties11);
        java.util.Calendar calendar17 = null;
        java.util.Calendar calendar18 = null;
        java.lang.String[] strArray20 = new java.lang.String[] { "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" };
        java.lang.String[] strArray21 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object24 = restS3Service13.getVersionedObject("http://s3.amazonaws.com//hi%21?torrent", "{\"\": \"s3.amazonaws.com\"}", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", calendar17, calendar18, strArray20, strArray21, (java.lang.Long) 0L, (java.lang.Long) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D?versionId=http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        org.jets3t.service.acl.AccessControlList accessControlList14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload16 = restS3Service1.multipartStartUpload(":", "{\"\": \"s3.amazonaws.com\"}", strMap13, accessControlList14, "{\"\": \"s3.amazonaws.com\"}/hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        java.io.File file15 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        com.metamx.druid.client.DataSegment dataSegment16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment17 = s3SegmentPusher12.push(file15, dataSegment16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertEquals(file15.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file15.toString(), "http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        java.io.InputStream inputStream30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter33 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter34 = objectMapper31.writer(prettyPrinter33);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper31.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter37 = objectMapper35.schemaBasedWriter(formatSchema36);
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38);
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        java.io.File file44 = new java.io.File("hi!");
        java.io.File file46 = new java.io.File(file44, "");
        java.lang.Class<?> wildcardClass47 = file44.getClass();
        org.codehaus.jackson.type.JavaType javaType48 = objectMapper42.constructType((java.lang.reflect.Type) wildcardClass47);
        org.codehaus.jackson.map.ObjectWriter objectWriter49 = objectMapper39.writerWithType(javaType48);
        org.codehaus.jackson.map.ObjectWriter objectWriter50 = objectMapper35.typedWriter(javaType48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type51 = objectMapper0.readValue(inputStream30, javaType48);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectWriter34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectWriter37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNull("file44.getParent() == null", file44.getParent());
        org.junit.Assert.assertEquals(file44.toString(), "hi!");
        org.junit.Assert.assertNull("file46.getParent() == null", file46.getParent());
        org.junit.Assert.assertEquals(file46.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(javaType48);
        org.junit.Assert.assertNotNull(objectWriter49);
        org.junit.Assert.assertNotNull(objectWriter50);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object9 = restS3Service1.getVersionedObjectDetails("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "s3.amazonaws.com", "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.PrettyPrinter prettyPrinter1 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper0.prettyPrintingWriter(prettyPrinter1);
        org.codehaus.jackson.PrettyPrinter prettyPrinter3 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter4 = objectMapper0.prettyPrintingWriter(prettyPrinter3);
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectWriter4);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, ":", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray21 = restS3Service19.listObjects(s3Bucket20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver2 = null;
        objectMapper1.setSubtypeResolver(subtypeResolver2);
        java.text.DateFormat dateFormat4 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter5 = objectMapper1.writer(dateFormat4);
        org.junit.Assert.assertNotNull(objectWriter5);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setAnnotationIntrospector(annotationIntrospector7);
        org.codehaus.jackson.FormatSchema formatSchema9 = null;
        org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper6.schemaBasedReader(formatSchema9);
        java.io.File file12 = new java.io.File("hi!");
        java.io.File file14 = new java.io.File(file12, "");
        java.lang.String str15 = file12.getAbsolutePath();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        java.lang.Object obj19 = null;
        java.lang.String str20 = objectMapper16.writeValueAsString(obj19);
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        java.io.File file25 = new java.io.File("hi!");
        java.io.File file27 = new java.io.File(file25, "");
        java.lang.Class<?> wildcardClass28 = file25.getClass();
        org.codehaus.jackson.type.JavaType javaType29 = objectMapper23.constructType((java.lang.reflect.Type) wildcardClass28);
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper16.typedWriter(javaType29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = objectMapper6.convertValue((java.lang.Object) file12, javaType29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectReader10);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str15, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "null" + "'", str20, "null");
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "hi!");
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(javaType29);
        org.junit.Assert.assertNotNull(objectWriter30);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher7 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = restS3Service1.getBucketLocation("/");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        java.util.Date date18 = restS3Service14.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service1.createSignedDeleteUrl("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "", providerCredentials12, date18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 04 08:17:17 BRT 2021");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object7 = restS3Service1.getVersionedObjectDetails("{\"\": \"s3.amazonaws.com\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/http%3A%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent?versionId=%7B%22%22%3A%20%22s3.amazonaws.com%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = restS3Service4.renameMetadataKeys(strMap5);
        com.metamx.druid.client.DataSegment.Builder builder7 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        java.util.List<java.lang.String> strList13 = restS3Service9.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder14 = builder7.dimensions(strList13);
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder15.dimensions((java.util.List<java.lang.String>) strList18);
        com.metamx.druid.shard.ShardSpec shardSpec21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment23 = new com.metamx.druid.client.DataSegment("s3.amazonaws.com", interval1, "[\"content-length-range\", -226, -226]", strMap5, strList13, (java.util.List<java.lang.String>) strList18, shardSpec21, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("x-amz-meta-");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "null", credentialsProvider5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service6.renameMetadataKeys(strMap9);
        com.metamx.druid.client.DataSegment.Builder builder12 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.metamx.druid.client.DataSegment.Builder builder17 = builder12.dimensions((java.util.List<java.lang.String>) strList15);
        com.metamx.druid.client.DataSegment.Builder builder19 = builder17.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder21 = builder19.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.druid.client.DataSegment.Builder builder28 = builder19.metrics((java.util.List<java.lang.String>) strList25);
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder30.dimensions((java.util.List<java.lang.String>) strList33);
        java.lang.String str36 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList33);
        com.metamx.druid.shard.ShardSpec shardSpec37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment39 = new com.metamx.druid.client.DataSegment("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", interval1, "[\"content-length-range\", 58, 1]", strMap9, (java.util.List<java.lang.String>) strList25, (java.util.List<java.lang.String>) strList33, shardSpec37, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str36, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "null", credentialsProvider12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials14);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service15.renameMetadataKeys(strMap16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service13.renameMetadataKeys(strMap16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = restS3Service1.createSignedUrl("x-amz-meta-", "[\"content-length-range\", 10, 47]", "x-amz-meta-", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", strMap18, (long) 11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17);
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = restS3Service18.renameMetadataKeys(strMap19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = restS3Service1.createSignedUrl("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "http://s3.amazonaws.com//?torrent", "{\"\": \"s3.amazonaws.com\"}", strMap19, providerCredentials21, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory22 = objectMapper20.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper18.reader(jsonNodeFactory22);
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper15.reader(jsonNodeFactory22);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher25 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk33 = restS3Service1.listVersionedObjectsChunked(":", "[\"content-length-range\", 58, 1]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", 100L, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "hi!", true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(jsonNodeFactory22);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(objectReader24);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials33);
        org.jets3t.service.security.ProviderCredentials providerCredentials35 = restS3Service34.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager36 = null;
        restS3Service34.setHttpConnectionManager(httpConnectionManager36);
        java.util.Date date38 = restS3Service34.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = restS3Service1.createSignedGetUrl("http://s3.amazonaws.com//?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", date38, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(providerCredentials35);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Thu Nov 04 08:17:18 BRT 2021");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        org.jets3t.service.model.NotificationConfig notificationConfig10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setNotificationConfig("x-amz-meta-", notificationConfig10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build NotificationConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket6 = restS3Service1.getBucket("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.metamx.druid.loading.S3SegmentPusher.JOINER = joiner1;
        com.google.common.base.Joiner.MapJoiner mapJoiner4 = joiner1.withKeyValueSeparator("http://s3.amazonaws.com//hi%21?torrent");
        com.google.common.base.Joiner joiner5 = joiner1.skipNulls();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.base.Joiner.MapJoiner mapJoiner7 = joiner5.withKeyValueSeparator("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: can't use .skipNulls() with maps");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(mapJoiner4);
        org.junit.Assert.assertNotNull(joiner5);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket21 = restS3Service19.createBucket(s3Bucket20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Create Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.lang.String str8 = restS3Service4.getEndpoint();
        java.lang.String str9 = restS3Service4.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod10 = null;
        restS3Service4.authorizeHttpRequest(httpMethod10);
        boolean boolean12 = restS3Service4.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties13 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider2, jets3tProperties13, hostConfiguration14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        java.lang.String str24 = restS3Service20.getEndpoint();
        java.lang.String str27 = restS3Service20.createTorrentUrl("", "");
        java.lang.String str28 = restS3Service20.getRestMetadataPrefix();
        java.util.Date date29 = restS3Service20.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = restS3Service15.createSignedHeadUrl("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", providerCredentials18, date29, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "s3.amazonaws.com" + "'", str9, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jets3tProperties13);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "s3.amazonaws.com" + "'", str24, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str27, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "x-amz-meta-" + "'", str28, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Nov 04 08:17:19 BRT 2021");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket11 = restS3Service1.createBucket("x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str18 = restS3Service1.getDevPayProductToken();
        org.jets3t.service.model.S3Bucket s3Bucket19 = null;
        org.jets3t.service.model.S3Object s3Object20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl(s3Bucket19, s3Object20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig9 = objectMapper6.copyDeserializationConfig();
        org.codehaus.jackson.Version version10 = objectMapper6.version();
        org.codehaus.jackson.JsonGenerator jsonGenerator11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        java.lang.Object obj15 = null;
        java.lang.String str16 = objectMapper12.writeValueAsString(obj15);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider17 = objectMapper12.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper12.setSerializerProvider(serializerProvider22);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig26 = objectMapper12.getDeserializationConfig();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper6.writeValue(jsonGenerator11, (java.lang.Object) deserializationConfig26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not pass null serializerFactory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(deserializationConfig9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null" + "'", str16, "null");
        org.junit.Assert.assertNotNull(deserializerProvider17);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(deserializationConfig26);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray14 = restS3Service1.listObjects(s3Bucket10, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", ":", (long) 2);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = restS3Service5.renameMetadataKeys(strMap6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = org.jets3t.service.S3Service.createSignedUrl("http://s3.amazonaws.com//hi%21?torrent", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "hi!", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", strMap6, providerCredentials8, (long) ':', true, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray6 = restS3Service1.listObjects("/", "[\"content-length-range\", -226, -226]", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        java.lang.Object obj26 = null;
        java.lang.String str27 = objectMapper23.writeValueAsString(obj26);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = objectMapper23.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper23.setSerializerProvider(serializerProvider33);
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider38 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig40 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider38, deserializerProvider39, serializationConfig40, deserializationConfig41);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider43 = objectMapper42.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper36.setDeserializerProvider(deserializerProvider43);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher45 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig22, objectMapper36);
        org.jets3t.service.security.ProviderCredentials providerCredentials50 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider52 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service53 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials50, "null", credentialsProvider52);
        org.jets3t.service.security.ProviderCredentials providerCredentials54 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service55 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials54);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service55.renameMetadataKeys(strMap56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = restS3Service53.renameMetadataKeys(strMap56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = restS3Service1.createSignedUrl("http://s3.amazonaws.com//?torrent", "[\"content-length-range\", 10, 47]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", strMap58, (long) (byte) 10, false, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "null" + "'", str27, "null");
        org.junit.Assert.assertNotNull(deserializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.suspendBucketVersioningWithMFA("[\"content-length-range\", 100, 4]", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder11 = builder9.size((long) (-226));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = restS3Service14.renameMetadataKeys(strMap15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service1.createSignedUrl("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", strMap15, providerCredentials17, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.model.S3Object s3Object8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object9 = restS3Service1.putObjectWithSignedUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", s3Object8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.metamx.druid.loading.S3SegmentPusher.JOINER = joiner1;
        com.google.common.base.Joiner.MapJoiner mapJoiner4 = joiner1.withKeyValueSeparator("http://s3.amazonaws.com//hi%21?torrent");
        com.google.common.base.Joiner joiner5 = joiner1.skipNulls();
        java.lang.Object[] objArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = joiner1.join(objArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(mapJoiner4);
        org.junit.Assert.assertNotNull(joiner5);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket25 = restS3Service1.createBucket("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        java.io.File file11 = null;
        java.io.File file13 = new java.io.File(file11, "x-amz-meta-");
        boolean boolean14 = file13.setReadOnly();
        java.io.File file15 = file13.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        com.metamx.emitter.EmittingLogger emittingLogger27 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass25);
        org.codehaus.jackson.type.JavaType javaType28 = objectMapper16.constructType((java.lang.reflect.Type) wildcardClass25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericDeclaration genericDeclaration29 = objectMapper10.readValue(file13, javaType28);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: x-amz-meta- (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(file15);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertNotNull(javaType28);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        java.lang.String str5 = restS3Service1.getDevPayProductToken();
        org.jets3t.service.model.S3Bucket s3Bucket6 = null;
        org.jets3t.service.model.S3Object s3Object7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl(s3Bucket6, s3Object7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.suspendBucketVersioning("null");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Range((int) (byte) 1, (int) (byte) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[\"content-length-range\", 1, 0]" + "'", str2, "[\"content-length-range\", 1, 0]");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        java.lang.String str35 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder36 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder37 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder37.dimensions((java.util.List<java.lang.String>) strList40);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder42.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder46 = builder44.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder47 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder47.dimensions((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder46.metrics((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder54.dimensions((java.util.List<java.lang.String>) strList57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder53.metrics((java.util.List<java.lang.String>) strList57);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder36.metrics((java.util.List<java.lang.String>) strList57);
        com.metamx.druid.shard.ShardSpec shardSpec62 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment64 = new com.metamx.druid.client.DataSegment(":", interval1, "/", strMap27, (java.util.List<java.lang.String>) strList32, (java.util.List<java.lang.String>) strList57, shardSpec62, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str35, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = restS3Service30.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager32 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager32);
        java.util.List<java.lang.String> strList34 = restS3Service30.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder35 = builder28.dimensions(strList34);
        com.metamx.druid.client.DataSegment.Builder builder36 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder36.dimensions((java.util.List<java.lang.String>) strList39);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder45 = builder43.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder46 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder46.dimensions((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder45.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder53 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder53.dimensions((java.util.List<java.lang.String>) strList56);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder52.metrics((java.util.List<java.lang.String>) strList56);
        com.metamx.druid.shard.ShardSpec shardSpec60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment62 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 58, 1]", interval1, "http://s3.amazonaws.com//?torrent", strMap27, strList34, (java.util.List<java.lang.String>) strList56, shardSpec60, (long) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(providerCredentials31);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        java.util.Calendar calendar8 = null;
        java.util.Calendar calendar9 = null;
        java.lang.String[] strArray13 = new java.lang.String[] { "http://s3.amazonaws.com//hi%21?torrent", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "" };
        java.lang.String[] strArray19 = new java.lang.String[] { "null", "", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", ":", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service1.getVersionedObject("/", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "null", calendar8, calendar9, strArray13, strArray19, (java.lang.Long) 0L, (java.lang.Long) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null/null?versionId=%2F': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        org.codehaus.jackson.map.ObjectReader objectReader25 = objectMapper0.updatingReader((java.lang.Object) objectMapper20);
        java.io.OutputStream outputStream26 = null;
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = objectMapper28.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider31, deserializerProvider32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode35 = objectMapper34.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectReader objectReader37 = objectMapper34.schemaBasedReader(formatSchema36);
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode39 = objectMapper38.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema40 = null;
        org.codehaus.jackson.map.ObjectReader objectReader41 = objectMapper38.schemaBasedReader(formatSchema40);
        byte[] byteArray43 = objectMapper38.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode44 = objectMapper34.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser45 = objectMapper33.treeAsTokens(jsonNode44);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.writeValue(outputStream26, (java.lang.Object) objectMapper33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectReader25);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(serializerProvider31);
        org.junit.Assert.assertNotNull(objectNode35);
        org.junit.Assert.assertNotNull(objectReader37);
        org.junit.Assert.assertNotNull(objectNode39);
        org.junit.Assert.assertNotNull(objectReader41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode44);
        org.junit.Assert.assertNotNull(jsonParser45);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.setSerializationInclusion(inclusion3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper0.writer(filterProvider5);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectWriter6);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.setDevPayProductToken("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider15 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider18 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.jets3t.service.Jets3tProperties jets3tProperties24 = restS3Service20.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16, "", credentialsProvider18, jets3tProperties24, hostConfiguration25);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider15, jets3tProperties24);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider30 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28, "null", credentialsProvider30);
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service33 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials32);
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = restS3Service33.renameMetadataKeys(strMap34);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = restS3Service31.renameMetadataKeys(strMap34);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = restS3Service27.renameMetadataKeys(strMap36);
        org.jets3t.service.security.ProviderCredentials providerCredentials38 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service39 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials38);
        org.jets3t.service.security.ProviderCredentials providerCredentials40 = restS3Service39.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager41 = null;
        restS3Service39.setHttpConnectionManager(httpConnectionManager41);
        java.lang.String str43 = restS3Service39.getEndpoint();
        java.lang.String str46 = restS3Service39.createTorrentUrl("", "");
        java.lang.String str47 = restS3Service39.getRestMetadataPrefix();
        java.util.Date date48 = restS3Service39.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = restS3Service1.createSignedPutUrl("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"content-length-range\", 100, 4]", strMap36, date48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertNotNull(jets3tProperties24);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(providerCredentials40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "s3.amazonaws.com" + "'", str43, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str46, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "x-amz-meta-" + "'", str47, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Thu Nov 04 08:17:21 BRT 2021");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.setDevPayProductToken("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider15 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider18 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.jets3t.service.Jets3tProperties jets3tProperties24 = restS3Service20.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16, "", credentialsProvider18, jets3tProperties24, hostConfiguration25);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider15, jets3tProperties24);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider30 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28, "null", credentialsProvider30);
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service33 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials32);
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = restS3Service33.renameMetadataKeys(strMap34);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = restS3Service31.renameMetadataKeys(strMap34);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = restS3Service27.renameMetadataKeys(strMap36);
        org.jets3t.service.security.ProviderCredentials providerCredentials38 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service39 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials38);
        org.jets3t.service.security.ProviderCredentials providerCredentials40 = restS3Service39.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager41 = null;
        restS3Service39.setHttpConnectionManager(httpConnectionManager41);
        java.util.Date date43 = restS3Service39.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = restS3Service1.createSignedPutUrl("hi!", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", strMap37, date43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertNotNull(jets3tProperties24);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(providerCredentials40);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Thu Nov 04 08:17:21 BRT 2021");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.setSerializationInclusion(inclusion3);
        org.codehaus.jackson.map.SerializationConfig.Feature feature5 = null;
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] { feature5 };
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray6);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder5.shardSpec(shardSpec8);
        com.metamx.druid.client.DataSegment.Builder builder11 = builder5.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder13 = builder5.dataSource("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment14 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: interval");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        java.lang.String str8 = file1.getCanonicalPath();
        java.io.File file10 = new java.io.File(file1, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        boolean boolean12 = file1.setLastModified((long) 10);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str8, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file10.toString(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket(s3Bucket10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        java.lang.String str17 = restS3Service1.getEndpoint();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject20 = restS3Service1.getObjectDetails("[\"content-length-range\", 1, 0]", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "s3.amazonaws.com" + "'", str17, "s3.amazonaws.com");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.unsetNotificationConfig("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/&notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"content-length-range\", -226, -226]", "{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}" + "'", str2, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.model.NotificationConfig notificationConfig16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service14.setNotificationConfig("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", notificationConfig16);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build NotificationConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service0 = null;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher3 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service0, s3SegmentPusherConfig1, objectMapper2);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = s3SegmentPusher3.config;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        s3SegmentPusher3.config = s3SegmentPusherConfig5;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = s3SegmentPusher3.jsonMapper;
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "");
        boolean boolean13 = file9.setWritable(false);
        java.io.File file15 = new java.io.File(file9, "http://s3.amazonaws.com//?torrent");
        file9.deleteOnExit();
        boolean boolean17 = file9.mkdirs();
        com.metamx.druid.client.DataSegment dataSegment18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment19 = s3SegmentPusher3.push(file9, dataSegment18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(s3SegmentPusherConfig4);
        org.junit.Assert.assertNull(objectMapper7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file15.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.map.SerializationConfig.Feature feature29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper0.configure(feature29, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializationConfig(serializationConfig15);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enableDefaultTyping();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(objectMapper16);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2);
        org.jets3t.service.model.StorageObject storageObject5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject6 = restS3Service3.putObject("", storageObject5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Create Object in bucket  cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.delete();
        java.io.File file5 = file1.getCanonicalFile();
        java.lang.String str6 = file1.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.io.File file3 = new java.io.File("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file4 = java.io.File.createTempFile("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "x-amz-meta-", file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(file3.getParent(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file3.toString(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.model.StorageBucket storageBucket23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageBucket storageBucket24 = restS3Service1.createBucket(storageBucket23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        java.lang.Object obj5 = null;
        java.lang.String str6 = objectMapper2.writeValueAsString(obj5);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider7 = objectMapper2.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper9.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider12, deserializerProvider13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper2.setSerializerProvider(serializerProvider12);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = objectMapper2.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper0.setDeserializationConfig(deserializationConfig16);
        java.io.File file19 = new java.io.File("hi!");
        java.io.File file21 = new java.io.File(file19, "");
        boolean boolean23 = file19.setWritable(false);
        java.io.File file25 = new java.io.File(file19, "http://s3.amazonaws.com//?torrent");
        java.lang.String str26 = file19.getCanonicalPath();
        java.io.File file28 = new java.io.File(file19, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        org.codehaus.jackson.type.TypeReference typeReference29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper0.readValue(file28, typeReference29);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"] (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null" + "'", str6, "null");
        org.junit.Assert.assertNotNull(deserializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(deserializationConfig16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "hi!");
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file25.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str26, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals(file28.getParent(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file28.toString(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.io.File file2 = new java.io.File("", "s3.amazonaws.com");
        java.io.File file4 = new java.io.File("hi!");
        boolean boolean5 = file4.mkdirs();
        boolean boolean8 = file4.setReadable(true, false);
        int int9 = file2.compareTo(file4);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/s3.amazonaws.com");
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-57) + "'", int9 == (-57));
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper0.reader(formatSchema6);
        java.text.DateFormat dateFormat8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper0.writer(dateFormat8);
        org.codehaus.jackson.JsonParser.Feature feature10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper0.configure(feature10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(objectWriter9);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        org.jets3t.service.model.StorageObject storageObject10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectMaybeAsMultipart("/", storageObject10, (long) (-57));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider19 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider22 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.jets3t.service.Jets3tProperties jets3tProperties28 = restS3Service24.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20, "", credentialsProvider22, jets3tProperties28, hostConfiguration29);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider19, jets3tProperties28);
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials32, "null", credentialsProvider34);
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service37 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials36);
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = restS3Service37.renameMetadataKeys(strMap38);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = restS3Service35.renameMetadataKeys(strMap38);
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = restS3Service31.renameMetadataKeys(strMap40);
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service43 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials42);
        org.jets3t.service.security.ProviderCredentials providerCredentials44 = restS3Service43.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager45 = null;
        restS3Service43.setHttpConnectionManager(httpConnectionManager45);
        java.lang.String str47 = restS3Service43.getEndpoint();
        java.lang.String str50 = restS3Service43.createTorrentUrl("", "");
        java.lang.String str51 = restS3Service43.getRestMetadataPrefix();
        java.util.Date date52 = restS3Service43.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = restS3Service14.createSignedPutUrl("", "x-amz-meta-", strMap40, date52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertNotNull(jets3tProperties28);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(providerCredentials44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "s3.amazonaws.com" + "'", str47, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str50, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "x-amz-meta-" + "'", str51, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Thu Nov 04 08:17:22 BRT 2021");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        java.util.Calendar calendar12 = null;
        java.util.Calendar calendar13 = null;
        java.lang.String[] strArray14 = new java.lang.String[] {};
        java.lang.String[] strArray19 = new java.lang.String[] { "{\"\": \"s3.amazonaws.com\"}/hi!", "[\"content-length-range\", 10, 47]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service1.getVersionedObject("s3.amazonaws.com", ":", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", calendar12, calendar13, strArray14, strArray19, (java.lang.Long) 100L, (java.lang.Long) (-1L));
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        java.lang.String str8 = restS3Service1.getEndpoint();
        org.jets3t.service.model.S3Object s3Object10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload11 = restS3Service1.multipartStartUpload("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", s3Object10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteWebsiteConfig("[\"content-length-range\", 1, 0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/?website': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping9 = null;
        org.codehaus.jackson.annotate.JsonTypeInfo.As as10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper6.enableDefaultTyping(defaultTyping9, as10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: includeAs can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.model.S3Bucket s3Bucket3 = null;
        org.jets3t.service.model.S3Object s3Object4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object5 = restS3Service1.putObject(s3Bucket3, s3Object4);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = restS3Service17.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager19 = null;
        restS3Service17.setHttpConnectionManager(httpConnectionManager19);
        java.util.Date date21 = restS3Service17.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = restS3Service1.createSignedDeleteUrl("x-amz-meta-", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", providerCredentials15, date21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNull(providerCredentials18);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Nov 04 08:17:24 BRT 2021");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
        org.codehaus.jackson.map.HandlerInstantiator handlerInstantiator3 = null;
        objectMapper0.setHandlerInstantiator(handlerInstantiator3);
        org.codehaus.jackson.Version version5 = objectMapper0.version();
        org.codehaus.jackson.map.SerializationConfig.Feature feature6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = objectMapper0.isEnabled(feature6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str8 = restS3Service1.createTorrentUrl("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = restS3Service1.getBucketPolicy("{\"\": \"s3.amazonaws.com\"}/hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/hi!/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" + "'", str8, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        org.jets3t.service.model.MultipartUpload multipartUpload15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartPart> multipartPartList16 = restS3Service1.multipartListParts(multipartUpload15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket7 = restS3Service1.getOrCreateBucket("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get or Create Bucket with location");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.lang.String str8 = restS3Service4.getEndpoint();
        java.lang.String str9 = restS3Service4.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod10 = null;
        restS3Service4.authorizeHttpRequest(httpMethod10);
        boolean boolean12 = restS3Service4.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties13 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider2, jets3tProperties13, hostConfiguration14);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object17 = restS3Service15.getObjectDetailsWithSignedUrl("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Host name may not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "s3.amazonaws.com" + "'", str9, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jets3tProperties13);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "null", credentialsProvider5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service6.renameMetadataKeys(strMap9);
        com.metamx.druid.client.DataSegment.Builder builder13 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder16 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager20 = null;
        restS3Service18.setHttpConnectionManager(httpConnectionManager20);
        java.util.List<java.lang.String> strList22 = restS3Service18.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder23 = builder16.dimensions(strList22);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder15.dimensions(strList22);
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strList22);
        com.metamx.druid.client.DataSegment.Builder builder26 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder26.dimensions((java.util.List<java.lang.String>) strList29);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder31.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec34 = null;
        com.metamx.druid.client.DataSegment.Builder builder35 = builder31.shardSpec(shardSpec34);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder31.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder38 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder38.dimensions((java.util.List<java.lang.String>) strList41);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder43.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder47 = builder45.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder48 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder48.dimensions((java.util.List<java.lang.String>) strList51);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder47.metrics((java.util.List<java.lang.String>) strList51);
        com.metamx.druid.client.DataSegment.Builder builder55 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder55.dimensions((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder54.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder31.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.shard.ShardSpec shardSpec63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment65 = new com.metamx.druid.client.DataSegment("s3.amazonaws.com", interval1, "[\"content-length-range\", 1, 0]", strMap9, strList22, (java.util.List<java.lang.String>) strList58, shardSpec63, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}" + "'", str25, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder28.dimensions((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder34.dimensions((java.util.List<java.lang.String>) strList37);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder44 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.metamx.druid.client.DataSegment.Builder builder49 = builder44.dimensions((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder43.metrics((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder51 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder51.dimensions((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder50.metrics((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.shard.ShardSpec shardSpec58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment60 = new com.metamx.druid.client.DataSegment("x-amz-meta-", interval1, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", strMap26, (java.util.List<java.lang.String>) strList31, (java.util.List<java.lang.String>) strList54, shardSpec58, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode6 = objectMapper0.readTree(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.model.S3Bucket s3Bucket19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray22 = restS3Service18.listObjects(s3Bucket19, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        org.jets3t.service.model.S3Bucket s3Bucket18 = null;
        org.jets3t.service.model.S3Object s3Object19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("http://s3.amazonaws.com//?torrent", s3Bucket18, s3Object19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.setAnnotationIntrospector(annotationIntrospector11);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode14 = objectMapper10.readTree(inputStream13);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.mkdirs();
        boolean boolean5 = file1.setExecutable(false, false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        java.lang.Throwable throwable2 = null;
        com.metamx.emitter.EmittingLogger emittingLogger5 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable6 = null;
        com.metamx.emitter.EmittingLogger emittingLogger9 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable10 = null;
        com.metamx.emitter.EmittingLogger emittingLogger13 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray19 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper16.enable(featureArray19);
        emittingLogger13.warn(throwable14, "", (java.lang.Object[]) featureArray19);
        emittingLogger9.trace(throwable10, "/", (java.lang.Object[]) featureArray19);
        emittingLogger5.trace(throwable6, "x-amz-meta-", (java.lang.Object[]) featureArray19);
        emittingLogger1.info(throwable2, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", (java.lang.Object[]) featureArray19);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(objectMapper20);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        java.lang.String str8 = restS3Service1.createTorrentUrl("s3.amazonaws.com", "");
        java.util.Calendar calendar12 = null;
        java.util.Calendar calendar13 = null;
        java.lang.String[] strArray16 = new java.lang.String[] { "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "null" };
        java.lang.String[] strArray22 = new java.lang.String[] { "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "http://s3.amazonaws.com//hi%21?torrent" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object25 = restS3Service1.getVersionedObject("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "[\"content-length-range\", 1, 0]", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", calendar12, calendar13, strArray16, strArray22, (java.lang.Long) 1L, (java.lang.Long) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D?versionId=%5B%22%22%2C%20%22%24http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%2C%20%22null%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str8, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object8 = restS3Service1.getVersionedObject("[\"content-length-range\", 10, 47]", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/http%3A%2F%2Fs3.amazonaws.com.s3.amazonaws.com%2F%3Ftorrent&versionId=%5B%22content-length-range%22%2C%2010%2C%2047%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList5 = restS3Service3.getObjectAclWithSignedUrl("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        java.lang.Object obj5 = null;
        java.lang.String str6 = objectMapper2.writeValueAsString(obj5);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider7 = objectMapper2.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper9.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider12, deserializerProvider13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper2.setSerializerProvider(serializerProvider12);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = objectMapper2.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper0.setDeserializationConfig(deserializationConfig16);
        java.io.OutputStream outputStream18 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider21 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        org.jets3t.service.Jets3tProperties jets3tProperties27 = restS3Service23.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider21, jets3tProperties27);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.writeValue(outputStream18, (java.lang.Object) credentialsProvider21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null" + "'", str6, "null");
        org.junit.Assert.assertNotNull(deserializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(deserializationConfig16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertNotNull(jets3tProperties27);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"content-length-range\", -226, -226]");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode10 = objectMapper9.createObjectNode();
        java.lang.Object[] objArray11 = new java.lang.Object[] { providerCredentials7, objectMapper9 };
        emittingLogger4.info(throwable5, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray11);
        java.lang.Throwable throwable13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper17.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider20, deserializerProvider21);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver23 = null;
        objectMapper22.setSubtypeResolver(subtypeResolver23);
        org.codehaus.jackson.map.SerializationConfig serializationConfig25 = objectMapper22.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.PrettyPrinter prettyPrinter27 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter28 = objectMapper26.prettyPrintingWriter(prettyPrinter27);
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = restS3Service30.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager32 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager32);
        java.lang.String str34 = restS3Service30.getEndpoint();
        java.lang.String str37 = restS3Service30.createTorrentUrl("", "");
        java.lang.String str38 = restS3Service30.getRestMetadataPrefix();
        java.lang.Object[] objArray39 = new java.lang.Object[] { "[\"content-length-range\", 58, 1]", serializationConfig25, objectMapper26, restS3Service30 };
        emittingLogger4.trace(throwable13, ":", objArray39);
        emittingLogger1.info("x-amz-meta-", objArray39);
        org.junit.Assert.assertNotNull(objectNode10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(serializationConfig25);
        org.junit.Assert.assertNotNull(objectWriter28);
        org.junit.Assert.assertNull(providerCredentials31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "s3.amazonaws.com" + "'", str34, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str37, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "x-amz-meta-" + "'", str38, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objArray39);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.lang.Object obj20 = null;
        java.lang.String str21 = objectMapper17.writeValueAsString(obj20);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.emitter.EmittingLogger emittingLogger29 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray31 = new java.lang.Object[] { objectMapper7, deserializerProvider16, objectMapper17, strList25, emittingLogger29, (byte) 1 };
        emittingLogger4.error(throwable5, "{\"\": \"s3.amazonaws.com\"}", objArray31);
        java.lang.Throwable throwable33 = null;
        java.io.File file36 = new java.io.File("hi!");
        java.io.File file38 = new java.io.File(file36, "");
        java.io.File file39 = file36.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode41 = objectMapper40.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider47);
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = restS3Service50.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager52 = null;
        restS3Service50.setHttpConnectionManager(httpConnectionManager52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { file39, objectMapper40, objectMapper48, restS3Service50, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger4.info(throwable33, "", objArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper59.getSerializerProvider();
        java.text.DateFormat dateFormat63 = null;
        objectMapper59.setDateFormat(dateFormat63);
        org.codehaus.jackson.node.ArrayNode arrayNode65 = objectMapper59.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder66 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder68 = builder66.size(0L);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objectMapper59, builder66 };
        emittingLogger4.trace("null", objArray69);
        emittingLogger1.error("[\"content-length-range\", 58, 1]", objArray69);
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger1;
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode75 = objectMapper74.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema76 = null;
        org.codehaus.jackson.map.ObjectReader objectReader77 = objectMapper74.schemaBasedReader(formatSchema76);
        byte[] byteArray79 = objectMapper74.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray80 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = objectMapper74.disable(featureArray80);
        emittingLogger1.warn("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", (java.lang.Object[]) featureArray80);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null" + "'", str21, "null");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "hi!");
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "hi!");
        org.junit.Assert.assertNotNull(file39);
// flaky:         org.junit.Assert.assertEquals(file39.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode41);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNull(providerCredentials51);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(arrayNode65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(objectNode75);
        org.junit.Assert.assertNotNull(objectReader77);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray80);
        org.junit.Assert.assertNotNull(objectMapper81);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        int int18 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service1.getVersionedObject("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", ":", "http://s3.amazonaws.com//hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket9 = restS3Service1.getBucket("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        boolean boolean7 = restS3Service1.isAuthenticatedConnection();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketPolicy("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray8 = restS3Service3.listObjects("", "http://s3.amazonaws.com//?torrent", "{\"\": \"s3.amazonaws.com\"}", (long) ':');
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to parse XML document with handler class org.jets3t.service.impl.rest.XmlResponsesSaxParser$ListBucketHandler");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.JsonGenerator jsonGenerator11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        java.lang.Object obj15 = null;
        java.lang.String str16 = objectMapper12.writeValueAsString(obj15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.io.File file21 = new java.io.File("hi!");
        java.io.File file23 = new java.io.File(file21, "");
        java.lang.Class<?> wildcardClass24 = file21.getClass();
        org.codehaus.jackson.type.JavaType javaType25 = objectMapper19.constructType((java.lang.reflect.Type) wildcardClass24);
        org.codehaus.jackson.map.ObjectWriter objectWriter26 = objectMapper12.typedWriter(javaType25);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper8.writeValue(jsonGenerator11, (java.lang.Object) objectMapper12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not pass null serializerFactory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null" + "'", str16, "null");
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "hi!");
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(javaType25);
        org.junit.Assert.assertNotNull(objectWriter26);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        java.io.File file12 = new java.io.File("hi!");
        java.io.File file14 = new java.io.File(file12, "");
        boolean boolean16 = file12.setWritable(false);
        java.io.File file17 = file12.getParentFile();
        com.google.common.base.Joiner joiner18 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger20 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable21 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode26 = objectMapper25.createObjectNode();
        java.lang.Object[] objArray27 = new java.lang.Object[] { providerCredentials23, objectMapper25 };
        emittingLogger20.info(throwable21, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        java.io.File file33 = new java.io.File("hi!");
        java.io.File file35 = new java.io.File(file33, "");
        java.lang.Class<?> wildcardClass36 = file33.getClass();
        org.codehaus.jackson.type.JavaType javaType37 = objectMapper31.constructType((java.lang.reflect.Type) wildcardClass36);
        com.metamx.emitter.EmittingLogger emittingLogger39 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory45 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider47 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig48 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig49 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory45, serializerProvider46, deserializerProvider47, serializationConfig48, deserializationConfig49);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = objectMapper50.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper52.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.disableDefaultTyping();
        java.lang.Object obj55 = null;
        java.lang.String str56 = objectMapper52.writeValueAsString(obj55);
        com.metamx.druid.client.DataSegment.Builder builder57 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder57.dimensions((java.util.List<java.lang.String>) strList60);
        com.metamx.emitter.EmittingLogger emittingLogger64 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray66 = new java.lang.Object[] { objectMapper42, deserializerProvider51, objectMapper52, strList60, emittingLogger64, (byte) 1 };
        emittingLogger39.error(throwable40, "{\"\": \"s3.amazonaws.com\"}", objArray66);
        java.lang.Throwable throwable68 = null;
        java.io.File file71 = new java.io.File("hi!");
        java.io.File file73 = new java.io.File(file71, "");
        java.io.File file74 = file71.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode76 = objectMapper75.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory77 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = objectMapper78.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper78.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider81 = objectMapper78.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider82 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory77, serializerProvider81, deserializerProvider82);
        org.jets3t.service.security.ProviderCredentials providerCredentials84 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service85 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials84);
        org.jets3t.service.security.ProviderCredentials providerCredentials86 = restS3Service85.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager87 = null;
        restS3Service85.setHttpConnectionManager(httpConnectionManager87);
        java.lang.Object[] objArray91 = new java.lang.Object[] { file74, objectMapper75, objectMapper83, restS3Service85, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger39.info(throwable68, "", objArray91);
        java.lang.String str93 = joiner18.join((java.lang.Object) emittingLogger20, (java.lang.Object) javaType37, objArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.node.ArrayNode arrayNode94 = objectMapper5.readValue(file12, javaType37);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(file17);
        org.junit.Assert.assertNotNull(joiner18);
        org.junit.Assert.assertNotNull(objectNode26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNull("file33.getParent() == null", file33.getParent());
        org.junit.Assert.assertEquals(file33.toString(), "hi!");
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(javaType37);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(deserializerProvider51);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "null" + "'", str56, "null");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNull("file71.getParent() == null", file71.getParent());
        org.junit.Assert.assertEquals(file71.toString(), "hi!");
        org.junit.Assert.assertNull("file73.getParent() == null", file73.getParent());
        org.junit.Assert.assertEquals(file73.toString(), "hi!");
        org.junit.Assert.assertNotNull(file74);
// flaky:         org.junit.Assert.assertEquals(file74.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file74.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode76);
        org.junit.Assert.assertNotNull(objectMapper79);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(serializerProvider81);
        org.junit.Assert.assertNull(providerCredentials86);
        org.junit.Assert.assertNotNull(objArray91);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2);
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper3.reader();
        org.codehaus.jackson.JsonGenerator jsonGenerator5 = null;
        com.google.common.base.Joiner joiner6 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode14 = objectMapper13.createObjectNode();
        java.lang.Object[] objArray15 = new java.lang.Object[] { providerCredentials11, objectMapper13 };
        emittingLogger8.info(throwable9, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.io.File file21 = new java.io.File("hi!");
        java.io.File file23 = new java.io.File(file21, "");
        java.lang.Class<?> wildcardClass24 = file21.getClass();
        org.codehaus.jackson.type.JavaType javaType25 = objectMapper19.constructType((java.lang.reflect.Type) wildcardClass24);
        com.metamx.emitter.EmittingLogger emittingLogger27 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider34 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider35 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig36 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider34, deserializerProvider35, serializationConfig36, deserializationConfig37);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = objectMapper38.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        java.lang.Object obj43 = null;
        java.lang.String str44 = objectMapper40.writeValueAsString(obj43);
        com.metamx.druid.client.DataSegment.Builder builder45 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder45.dimensions((java.util.List<java.lang.String>) strList48);
        com.metamx.emitter.EmittingLogger emittingLogger52 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray54 = new java.lang.Object[] { objectMapper30, deserializerProvider39, objectMapper40, strList48, emittingLogger52, (byte) 1 };
        emittingLogger27.error(throwable28, "{\"\": \"s3.amazonaws.com\"}", objArray54);
        java.lang.Throwable throwable56 = null;
        java.io.File file59 = new java.io.File("hi!");
        java.io.File file61 = new java.io.File(file59, "");
        java.io.File file62 = file59.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode64 = objectMapper63.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory65 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = objectMapper66.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = objectMapper66.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider69 = objectMapper66.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider70 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory65, serializerProvider69, deserializerProvider70);
        org.jets3t.service.security.ProviderCredentials providerCredentials72 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service73 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials72);
        org.jets3t.service.security.ProviderCredentials providerCredentials74 = restS3Service73.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager75 = null;
        restS3Service73.setHttpConnectionManager(httpConnectionManager75);
        java.lang.Object[] objArray79 = new java.lang.Object[] { file62, objectMapper63, objectMapper71, restS3Service73, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger27.info(throwable56, "", objArray79);
        java.lang.String str81 = joiner6.join((java.lang.Object) emittingLogger8, (java.lang.Object) javaType25, objArray79);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper3.writeValue(jsonGenerator5, (java.lang.Object) javaType25);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectReader4);
        org.junit.Assert.assertNotNull(joiner6);
        org.junit.Assert.assertNotNull(objectNode14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "hi!");
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(javaType25);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializerProvider39);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "null" + "'", str44, "null");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNull("file59.getParent() == null", file59.getParent());
        org.junit.Assert.assertEquals(file59.toString(), "hi!");
        org.junit.Assert.assertNull("file61.getParent() == null", file61.getParent());
        org.junit.Assert.assertEquals(file61.toString(), "hi!");
        org.junit.Assert.assertNotNull(file62);
// flaky:         org.junit.Assert.assertEquals(file62.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode64);
        org.junit.Assert.assertNotNull(objectMapper67);
        org.junit.Assert.assertNotNull(objectMapper68);
        org.junit.Assert.assertNotNull(serializerProvider69);
        org.junit.Assert.assertNull(providerCredentials74);
        org.junit.Assert.assertNotNull(objArray79);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials1 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service2 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials1);
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = restS3Service2.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service2.setHttpConnectionManager(httpConnectionManager4);
        java.util.List<java.lang.String> strList6 = restS3Service2.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.dimensions(strList6);
        org.joda.time.Interval interval8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder0.interval(interval8);
        com.metamx.druid.client.DataSegment.Builder builder11 = builder9.size((long) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(providerCredentials3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper5.setDeserializationConfig(deserializationConfig7);
        java.io.InputStream inputStream9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper10.writer(prettyPrinter12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper14.schemaBasedWriter(formatSchema15);
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17);
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        java.io.File file23 = new java.io.File("hi!");
        java.io.File file25 = new java.io.File(file23, "");
        java.lang.Class<?> wildcardClass26 = file23.getClass();
        org.codehaus.jackson.type.JavaType javaType27 = objectMapper21.constructType((java.lang.reflect.Type) wildcardClass26);
        org.codehaus.jackson.map.ObjectWriter objectWriter28 = objectMapper18.writerWithType(javaType27);
        org.codehaus.jackson.map.ObjectWriter objectWriter29 = objectMapper14.typedWriter(javaType27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type30 = objectMapper8.readValue(inputStream9, javaType27);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "hi!");
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(javaType27);
        org.junit.Assert.assertNotNull(objectWriter28);
        org.junit.Assert.assertNotNull(objectWriter29);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0);
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        java.io.File file6 = new java.io.File("hi!");
        java.io.File file8 = new java.io.File(file6, "");
        java.lang.Class<?> wildcardClass9 = file6.getClass();
        org.codehaus.jackson.type.JavaType javaType10 = objectMapper4.constructType((java.lang.reflect.Type) wildcardClass9);
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper1.writerWithType(javaType10);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping12 = null;
        org.codehaus.jackson.annotate.JsonTypeInfo.As as13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper1.enableDefaultTyping(defaultTyping12, as13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: includeAs can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(javaType10);
        org.junit.Assert.assertNotNull(objectWriter11);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3BucketVersioningStatus s3BucketVersioningStatus10 = restS3Service1.getBucketVersioningStatus("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]/&versioning': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("");
        boolean boolean2 = emittingLogger1.isDebugEnabled();
        boolean boolean3 = emittingLogger1.isInfoEnabled();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus24 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service21.setBucketLoggingStatus("", s3BucketLoggingStatus24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = restS3Service3.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk12 = restS3Service3.listVersionedObjectsChunked("{\"\": \"s3.amazonaws.com\"}", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", (long) (short) 100, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", ":", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/?max-keys=100&versions&prefix=%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D&delimiter=%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E&version-id-marker=%3A&key-marker=http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials4);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.acl.AccessControlList accessControlList12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("http://s3.amazonaws.com//hi%21?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", accessControlList12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver7 = null;
        objectMapper6.setSubtypeResolver(subtypeResolver7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider14);
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode17 = objectMapper16.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema18 = null;
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper16.schemaBasedReader(formatSchema18);
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode21 = objectMapper20.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema22 = null;
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper20.schemaBasedReader(formatSchema22);
        byte[] byteArray25 = objectMapper20.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode26 = objectMapper16.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser27 = objectMapper15.treeAsTokens(jsonNode26);
        org.codehaus.jackson.JsonNode jsonNode28 = objectMapper6.readTree(jsonParser27);
        org.codehaus.jackson.FormatSchema formatSchema29 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper6.schemaBasedWriter(formatSchema29);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(objectNode17);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(objectNode21);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode26);
        org.junit.Assert.assertNotNull(jsonParser27);
        org.junit.Assert.assertNotNull(jsonNode28);
        org.junit.Assert.assertNotNull(objectWriter30);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.JsonGenerator.Feature feature8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper4.configure(feature8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.SerializerFactory serializerFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.setSerializerFactory(serializerFactory35);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = objectMapper34.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper27.setDeserializationConfig(deserializationConfig37);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode40 = objectMapper27.readTree(":");
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.JsonParseException; message: Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')? at [Source: java.io.StringReader@58d46051; line: 1, column: 2]");
        } catch (org.codehaus.jackson.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializationConfig37);
        org.junit.Assert.assertNotNull(objectMapper38);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk20 = restS3Service1.listVersionedObjectsChunked(":", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", (long) 5, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder28.dimensions((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder37 = builder35.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder38 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder38.dimensions((java.util.List<java.lang.String>) strList41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder37.metrics((java.util.List<java.lang.String>) strList41);
        com.metamx.druid.client.DataSegment.Builder builder45 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder45.dimensions((java.util.List<java.lang.String>) strList48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder44.metrics((java.util.List<java.lang.String>) strList48);
        java.lang.String[] strArray86 = new java.lang.String[] { "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"content-length-range\", 1, 0]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "[\"content-length-range\", -226, -226]", "", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", ":", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "", "null", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", ":", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "http://s3.amazonaws.com//hi%21?torrent", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com//?torrent", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "x-amz-meta-" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        com.metamx.druid.shard.ShardSpec shardSpec89 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment91 = new com.metamx.druid.client.DataSegment("{\"\": \"s3.amazonaws.com\"}", interval1, "s3.amazonaws.com", strMap27, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList87, shardSpec89, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = restS3Service29.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = null;
        restS3Service29.setHttpConnectionManager(httpConnectionManager31);
        java.util.List<java.lang.String> strList33 = restS3Service29.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.size(0L);
        org.joda.time.Interval interval37 = null;
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.interval(interval37);
        java.lang.String[] strArray42 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder36.metrics((java.util.List<java.lang.String>) strList43);
        com.metamx.druid.shard.ShardSpec shardSpec46 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment48 = new com.metamx.druid.client.DataSegment("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", interval1, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", strMap27, strList33, (java.util.List<java.lang.String>) strList43, shardSpec46, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(providerCredentials30);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("/");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher0 = new com.metamx.druid.loading.S3SegmentPusher();
        java.io.File file2 = new java.io.File("hi!");
        long long3 = file2.getTotalSpace();
        com.metamx.druid.client.DataSegment dataSegment4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment5 = s3SegmentPusher0.push(file2, dataSegment4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 967682662400L + "'", long3 == 967682662400L);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.version("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.codehaus.jackson.map.SerializerFactory serializerFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory0);
        org.codehaus.jackson.JsonGenerator jsonGenerator2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setAnnotationIntrospector(annotationIntrospector10);
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper9.schemaBasedReader(formatSchema12);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory14 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper9.filteredWriter(filterProvider15);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper1.writeValue(jsonGenerator2, (java.lang.Object) objectWriter16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not pass null serializerFactory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNotNull(jsonNodeFactory14);
        org.junit.Assert.assertNotNull(objectWriter16);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service14.renameMetadataKeys(strMap23);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service14.suspendBucketVersioningWithMFA("[\"content-length-range\", 58, 1]", "", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        boolean boolean20 = restS3Service19.isShutdown();
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver2 = null;
        objectMapper1.setSubtypeResolver(subtypeResolver2);
        java.io.File file6 = new java.io.File("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "");
        boolean boolean9 = file6.setReadable(true, false);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        java.lang.Object obj13 = null;
        java.lang.String str14 = objectMapper10.writeValueAsString(obj13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        java.io.File file19 = new java.io.File("hi!");
        java.io.File file21 = new java.io.File(file19, "");
        java.lang.Class<?> wildcardClass22 = file19.getClass();
        org.codehaus.jackson.type.JavaType javaType23 = objectMapper17.constructType((java.lang.reflect.Type) wildcardClass22);
        org.codehaus.jackson.map.ObjectWriter objectWriter24 = objectMapper10.typedWriter(javaType23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.String> strCollection25 = objectMapper1.readValue(file6, javaType23);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: {\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"} (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(file6.getParent(), "{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file6.toString(), "{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null" + "'", str14, "null");
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "hi!");
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(javaType23);
        org.junit.Assert.assertNotNull(objectWriter24);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.lang.String str2 = org.jets3t.service.S3Service.buildPostForm("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str2, "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean2 = emittingLogger1.isInfoEnabled();
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger1;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        org.jets3t.service.model.S3Object s3Object5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object6 = restS3Service1.putObjectWithSignedUrl("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", s3Object5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig9 = objectMapper6.copyDeserializationConfig();
        org.codehaus.jackson.Version version10 = objectMapper6.version();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper6.getSerializerProvider();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(deserializationConfig9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(serializerProvider11);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date12 = restS3Service1.getCurrentTimeWithOffset();
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17, "null", credentialsProvider19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service22.renameMetadataKeys(strMap23);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service20.renameMetadataKeys(strMap23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = restS3Service1.createSignedUrl("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", strMap25, (long) 32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 04 08:17:32 BRT 2021");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        int int16 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service1.getBucketLocation("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.StorageObject storageObject22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service19.renameObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "hi!", storageObject22);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = restS3Service35.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager37 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager39);
        java.lang.String str43 = restS3Service35.createTorrentUrl("", "hi!");
        boolean boolean45 = restS3Service35.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date46 = restS3Service35.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = restS3Service1.createSignedDeleteUrl("x-amz-meta-", "/", providerCredentials33, date46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(providerCredentials36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str43, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Thu Nov 04 08:17:34 BRT 2021");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service11.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = null;
        restS3Service11.setHttpConnectionManager(httpConnectionManager13);
        org.jets3t.service.Jets3tProperties jets3tProperties15 = restS3Service11.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7, "", credentialsProvider9, jets3tProperties15, hostConfiguration16);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider6, jets3tProperties15);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19, "null", credentialsProvider21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service24.renameMetadataKeys(strMap25);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service22.renameMetadataKeys(strMap25);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = restS3Service18.renameMetadataKeys(strMap27);
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = org.jets3t.service.S3Service.createSignedUrl("null", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "{\"\": \"s3.amazonaws.com\"}", "[\"content-length-range\", 1, 0]", strMap27, providerCredentials29, 100L, false, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertNotNull(jets3tProperties15);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        org.jets3t.service.model.MultipartUpload multipartUpload13 = null;
        org.jets3t.service.model.S3Object s3Object15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartPart multipartPart16 = restS3Service1.multipartUploadPart(multipartUpload13, (java.lang.Integer) 10, s3Object15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "{\"\": \"s3.amazonaws.com\"}/hi!", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/hi!/http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent?versionId=http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        int int18 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList20 = restS3Service1.multipartListUploads("{\"\": \"s3.amazonaws.com\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/?max-uploads=1000&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service14.renameMetadataKeys(strMap23);
        org.jets3t.service.model.S3Bucket s3Bucket25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray28 = restS3Service14.listObjects(s3Bucket25, "http://s3.amazonaws.com//hi%21?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider5, jets3tProperties11);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", credentialsProvider2, jets3tProperties11);
        java.util.Calendar calendar16 = null;
        java.util.Calendar calendar17 = null;
        java.lang.String[] strArray22 = new java.lang.String[] { "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", ":", "http://s3.amazonaws.com//hi%21?torrent" };
        java.lang.String[] strArray24 = new java.lang.String[] { "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object27 = restS3Service13.getObject("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", calendar16, calendar17, strArray22, strArray24, (java.lang.Long) 967682662400L, (java.lang.Long) 967682662400L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]/http%3A%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.lang.String str3 = org.jets3t.service.S3Service.generatePostPolicyCondition("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]" + "'", str3, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        boolean boolean9 = restS3Service1.isHttpsOnly();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setRequesterPaysBucket("[\"content-length-range\", 58, 1]", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/?requestPayment': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper13.setDeserializerProvider(deserializerProvider20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider25 = objectMapper22.getSerializerProvider();
        java.text.DateFormat dateFormat26 = null;
        objectMapper22.setDateFormat(dateFormat26);
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.SerializerFactory serializerFactory36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.setSerializerFactory(serializerFactory36);
        org.codehaus.jackson.PrettyPrinter prettyPrinter38 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter39 = objectMapper37.prettyPrintingWriter(prettyPrinter38);
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        java.io.File file44 = new java.io.File("hi!");
        java.io.File file46 = new java.io.File(file44, "");
        java.lang.Class<?> wildcardClass47 = file44.getClass();
        org.codehaus.jackson.type.JavaType javaType48 = objectMapper42.constructType((java.lang.reflect.Type) wildcardClass47);
        boolean boolean49 = objectMapper37.canDeserialize(javaType48);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService50 = objectMapper22.readValue("null", javaType48);
        org.codehaus.jackson.node.ArrayNode arrayNode51 = objectMapper22.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode53 = objectMapper52.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema54 = null;
        org.codehaus.jackson.map.ObjectReader objectReader55 = objectMapper52.schemaBasedReader(formatSchema54);
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode57 = objectMapper56.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema58 = null;
        org.codehaus.jackson.map.ObjectReader objectReader59 = objectMapper56.schemaBasedReader(formatSchema58);
        byte[] byteArray61 = objectMapper56.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode62 = objectMapper52.valueToTree((java.lang.Object) 10L);
        byte[] byteArray63 = objectMapper22.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode64 = objectMapper21.readTree(byteArray63);
        java.io.Writer writer65 = null;
        org.codehaus.jackson.JsonFactory jsonFactory66 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory66);
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = objectMapper68.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = objectMapper68.disableDefaultTyping();
        java.io.File file72 = new java.io.File("hi!");
        java.io.File file74 = new java.io.File(file72, "");
        java.lang.Class<?> wildcardClass75 = file72.getClass();
        org.codehaus.jackson.type.JavaType javaType76 = objectMapper70.constructType((java.lang.reflect.Type) wildcardClass75);
        org.codehaus.jackson.map.ObjectWriter objectWriter77 = objectMapper67.writerWithType(javaType76);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper21.writeValue(writer65, (java.lang.Object) objectWriter77);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: No serializer found for class org.codehaus.jackson.map.ObjectWriter and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(serializerProvider25);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectWriter39);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNull("file44.getParent() == null", file44.getParent());
        org.junit.Assert.assertEquals(file44.toString(), "hi!");
        org.junit.Assert.assertNull("file46.getParent() == null", file46.getParent());
        org.junit.Assert.assertEquals(file46.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(javaType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(restStorageService50);
        org.junit.Assert.assertNotNull(arrayNode51);
        org.junit.Assert.assertNotNull(objectNode53);
        org.junit.Assert.assertNotNull(objectReader55);
        org.junit.Assert.assertNotNull(objectNode57);
        org.junit.Assert.assertNotNull(objectReader59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode64);
        org.junit.Assert.assertNotNull(objectMapper69);
        org.junit.Assert.assertNotNull(objectMapper70);
        org.junit.Assert.assertNull("file72.getParent() == null", file72.getParent());
        org.junit.Assert.assertEquals(file72.toString(), "hi!");
        org.junit.Assert.assertNull("file74.getParent() == null", file74.getParent());
        org.junit.Assert.assertEquals(file74.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(javaType76);
        org.junit.Assert.assertNotNull(objectWriter77);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.jets3t.service.model.MultipartUpload multipartUpload4 = null;
        org.jets3t.service.model.S3Object s3Object6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartPart multipartPart7 = restS3Service1.multipartUploadPart(multipartUpload4, (java.lang.Integer) (-57), s3Object6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder24 = builder22.size(0L);
        org.joda.time.Interval interval25 = null;
        com.metamx.druid.client.DataSegment.Builder builder26 = builder24.interval(interval25);
        java.lang.String[] strArray30 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder24.metrics((java.util.List<java.lang.String>) strList31);
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider36 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service37 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34, "null", credentialsProvider36);
        org.jets3t.service.security.ProviderCredentials providerCredentials38 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service39 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials38);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = restS3Service39.renameMetadataKeys(strMap40);
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = restS3Service37.renameMetadataKeys(strMap40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder24.loadSpec(strMap42);
        org.jets3t.service.security.ProviderCredentials providerCredentials44 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials44);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = restS3Service45.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager47 = null;
        restS3Service45.setHttpConnectionManager(httpConnectionManager47);
        java.util.Date date49 = restS3Service45.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = restS3Service19.createSignedPutUrl("[\"content-length-range\", -226, -226]", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap42, date49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(providerCredentials46);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Thu Nov 04 08:17:35 BRT 2021");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = restS3Service30.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager32 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager32);
        java.util.List<java.lang.String> strList34 = restS3Service30.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder35 = builder28.dimensions(strList34);
        com.metamx.druid.client.DataSegment.Builder builder36 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder36.dimensions((java.util.List<java.lang.String>) strList39);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec44 = null;
        com.metamx.druid.client.DataSegment.Builder builder45 = builder41.shardSpec(shardSpec44);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder41.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder48 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder48.dimensions((java.util.List<java.lang.String>) strList51);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder53.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder57 = builder55.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder58 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder58.dimensions((java.util.List<java.lang.String>) strList61);
        com.metamx.druid.client.DataSegment.Builder builder64 = builder57.metrics((java.util.List<java.lang.String>) strList61);
        com.metamx.druid.client.DataSegment.Builder builder65 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.metamx.druid.client.DataSegment.Builder builder70 = builder65.dimensions((java.util.List<java.lang.String>) strList68);
        com.metamx.druid.client.DataSegment.Builder builder71 = builder64.metrics((java.util.List<java.lang.String>) strList68);
        com.metamx.druid.client.DataSegment.Builder builder72 = builder41.metrics((java.util.List<java.lang.String>) strList68);
        com.metamx.druid.shard.ShardSpec shardSpec73 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment75 = new com.metamx.druid.client.DataSegment("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", interval1, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", strMap27, strList34, (java.util.List<java.lang.String>) strList68, shardSpec73, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(providerCredentials31);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder3.dimensions(strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder3.loadSpec(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.size(0L);
        org.joda.time.Interval interval19 = null;
        com.metamx.druid.client.DataSegment.Builder builder20 = builder18.interval(interval19);
        java.lang.String[] strArray24 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder18.metrics((java.util.List<java.lang.String>) strList25);
        com.metamx.druid.client.DataSegment.Builder builder28 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder38.metrics((java.util.List<java.lang.String>) strList42);
        com.metamx.druid.client.DataSegment.Builder builder46 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder46.dimensions((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder45.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder28.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.shard.ShardSpec shardSpec54 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment56 = new com.metamx.druid.client.DataSegment("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", interval1, "[\"content-length-range\", 10, 47]", strMap14, (java.util.List<java.lang.String>) strList25, (java.util.List<java.lang.String>) strList49, shardSpec54, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket11 = null;
        java.util.Calendar calendar13 = null;
        java.util.Calendar calendar14 = null;
        java.lang.String[] strArray18 = new java.lang.String[] { "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "x-amz-meta-", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" };
        java.lang.String[] strArray23 = new java.lang.String[] { "[\"content-length-range\", 58, 1]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object24 = restS3Service1.getObjectDetails(s3Bucket11, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", calendar13, calendar14, strArray18, strArray23);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Object Details cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray23);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializationConfig(serializationConfig15);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig18 = s3SegmentPusher17.config;
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNull(s3SegmentPusherConfig18);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, ":", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2, jets3tProperties17, hostConfiguration23);
        org.jets3t.service.model.StorageObject storageObject28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service24.copyObject("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", storageObject28, true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = objectMapper0.getDeserializationConfig();
        org.codehaus.jackson.map.SerializerFactory serializerFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper0.setSerializerFactory(serializerFactory15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        java.io.File file19 = new java.io.File("hi!");
        java.io.File file21 = new java.io.File(file19, "");
        boolean boolean23 = file19.setWritable(false);
        boolean boolean24 = file19.delete();
        boolean boolean27 = file19.setWritable(true, false);
        java.lang.String str28 = file19.getAbsolutePath();
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode29 = objectMapper17.readTree(file19);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializationConfig14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "hi!");
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str28, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.lang.Object obj20 = null;
        java.lang.String str21 = objectMapper17.writeValueAsString(obj20);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.emitter.EmittingLogger emittingLogger29 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray31 = new java.lang.Object[] { objectMapper7, deserializerProvider16, objectMapper17, strList25, emittingLogger29, (byte) 1 };
        emittingLogger4.error(throwable5, "{\"\": \"s3.amazonaws.com\"}", objArray31);
        emittingLogger1.debug("http://s3.amazonaws.com//hi%21?torrent", objArray31);
        boolean boolean34 = emittingLogger1.isInfoEnabled();
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null" + "'", str21, "null");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service14.renameMetadataKeys(strMap23);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = restS3Service29.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = null;
        restS3Service29.setHttpConnectionManager(httpConnectionManager31);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager33 = null;
        restS3Service29.setHttpConnectionManager(httpConnectionManager33);
        java.lang.String str37 = restS3Service29.createTorrentUrl("", "hi!");
        boolean boolean39 = restS3Service29.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date40 = restS3Service29.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = restS3Service14.createSignedDeleteUrl("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"content-length-range\", 10, 47]", providerCredentials27, date40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(providerCredentials30);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str37, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Thu Nov 04 08:17:37 BRT 2021");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        java.io.File file4 = file1.getAbsoluteFile();
        java.io.File file6 = new java.io.File(file4, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        boolean boolean7 = file4.mkdir();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties8);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service9.enableBucketVersioningAndMFA("");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.HandlerInstantiator handlerInstantiator30 = null;
        objectMapper0.setHandlerInstantiator(handlerInstantiator30);
        org.codehaus.jackson.annotate.JsonMethod jsonMethod32 = null;
        org.codehaus.jackson.annotate.JsonAutoDetect.Visibility visibility33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper0.setVisibility(jsonMethod32, visibility33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties10 = restS3Service1.getJetS3tProperties();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk18 = restS3Service1.listVersionedObjectsChunked("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "s3.amazonaws.com", (long) (-226), "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "http://s3.amazonaws.com//hi%21?torrent", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]/&versions&prefix=%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21&delimiter=s3.amazonaws.com&version-id-marker=http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent&key-marker=%5B%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jets3tProperties10);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "http://s3.amazonaws.com//?torrent");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}1242060594735807871http:/s3.amazonaws.com/?torrent");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider5, jets3tProperties11);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider2, jets3tProperties11, hostConfiguration13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList16 = restS3Service14.getObjectAclWithSignedUrl("");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.acl.AccessControlList accessControlList19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", accessControlList19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The object '[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.acl.AccessControlList accessControlList10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket11 = restS3Service1.createBucket("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", accessControlList10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean2 = emittingLogger1.isInfoEnabled();
        com.metamx.emitter.EmittingLogger emittingLogger5 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig14 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider12, deserializerProvider13, serializationConfig14, deserializationConfig15);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider17 = objectMapper16.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        com.metamx.druid.client.DataSegment.Builder builder23 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.metamx.druid.client.DataSegment.Builder builder28 = builder23.dimensions((java.util.List<java.lang.String>) strList26);
        com.metamx.emitter.EmittingLogger emittingLogger30 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray32 = new java.lang.Object[] { objectMapper8, deserializerProvider17, objectMapper18, strList26, emittingLogger30, (byte) 1 };
        emittingLogger5.error(throwable6, "{\"\": \"s3.amazonaws.com\"}", objArray32);
        java.lang.Throwable throwable34 = null;
        java.io.File file37 = new java.io.File("hi!");
        java.io.File file39 = new java.io.File(file37, "");
        java.io.File file40 = file37.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode42 = objectMapper41.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory43 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper44.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper44.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider47 = objectMapper44.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory43, serializerProvider47, deserializerProvider48);
        org.jets3t.service.security.ProviderCredentials providerCredentials50 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service51 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials50);
        org.jets3t.service.security.ProviderCredentials providerCredentials52 = restS3Service51.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager53 = null;
        restS3Service51.setHttpConnectionManager(httpConnectionManager53);
        java.lang.Object[] objArray57 = new java.lang.Object[] { file40, objectMapper41, objectMapper49, restS3Service51, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger5.info(throwable34, "", objArray57);
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        java.text.DateFormat dateFormat64 = null;
        objectMapper60.setDateFormat(dateFormat64);
        org.codehaus.jackson.node.ArrayNode arrayNode66 = objectMapper60.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder67 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder69 = builder67.size(0L);
        java.lang.Object[] objArray70 = new java.lang.Object[] { objectMapper60, builder67 };
        emittingLogger5.trace("null", objArray70);
        emittingLogger1.trace("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", objArray70);
        java.lang.Throwable throwable73 = null;
        com.metamx.emitter.EmittingLogger emittingLogger76 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable77 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials79 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service80 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials79);
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode82 = objectMapper81.createObjectNode();
        java.lang.Object[] objArray83 = new java.lang.Object[] { providerCredentials79, objectMapper81 };
        emittingLogger76.info(throwable77, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray83);
        emittingLogger1.trace(throwable73, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray83);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(deserializerProvider17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "hi!");
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "hi!");
        org.junit.Assert.assertNotNull(file40);
// flaky:         org.junit.Assert.assertEquals(file40.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode42);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(serializerProvider47);
        org.junit.Assert.assertNull(providerCredentials52);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(arrayNode66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(objectNode82);
        org.junit.Assert.assertNotNull(objArray83);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on('a');
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = joiner1.join(objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials1 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service2 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials1);
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = restS3Service2.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service2.setHttpConnectionManager(httpConnectionManager4);
        java.util.List<java.lang.String> strList6 = restS3Service2.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.dimensions(strList6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service9.renameMetadataKeys(strMap10);
        com.metamx.druid.client.DataSegment.Builder builder12 = builder0.loadSpec(strMap11);
        com.metamx.druid.shard.ShardSpec shardSpec13 = null;
        com.metamx.druid.client.DataSegment.Builder builder14 = builder12.shardSpec(shardSpec13);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(providerCredentials3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper8.reader();
        java.io.File file15 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        java.nio.file.Path path16 = file15.toPath();
        org.codehaus.jackson.type.TypeReference typeReference17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.schema.JsonSchema jsonSchema18 = objectMapper8.convertValue((java.lang.Object) file15, typeReference17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertNotNull(path16);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.model.S3Bucket s3Bucket2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object4 = restS3Service1.getObject(s3Bucket2, "http://s3.amazonaws.com//?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action getObject cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.JsonGenerator jsonGenerator3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        java.lang.Object obj7 = null;
        java.lang.String str8 = objectMapper4.writeValueAsString(obj7);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = objectMapper4.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper4.setSerializerProvider(serializerProvider14);
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider19, deserializerProvider20, serializationConfig21, deserializationConfig22);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = objectMapper23.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper17.setDeserializerProvider(deserializerProvider24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        java.text.DateFormat dateFormat30 = null;
        objectMapper26.setDateFormat(dateFormat30);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider38);
        org.codehaus.jackson.map.SerializerFactory serializerFactory40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.setSerializerFactory(serializerFactory40);
        org.codehaus.jackson.PrettyPrinter prettyPrinter42 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter43 = objectMapper41.prettyPrintingWriter(prettyPrinter42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper44.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper44.disableDefaultTyping();
        java.io.File file48 = new java.io.File("hi!");
        java.io.File file50 = new java.io.File(file48, "");
        java.lang.Class<?> wildcardClass51 = file48.getClass();
        org.codehaus.jackson.type.JavaType javaType52 = objectMapper46.constructType((java.lang.reflect.Type) wildcardClass51);
        boolean boolean53 = objectMapper41.canDeserialize(javaType52);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService54 = objectMapper26.readValue("null", javaType52);
        org.codehaus.jackson.node.ArrayNode arrayNode55 = objectMapper26.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode57 = objectMapper56.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema58 = null;
        org.codehaus.jackson.map.ObjectReader objectReader59 = objectMapper56.schemaBasedReader(formatSchema58);
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode61 = objectMapper60.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema62 = null;
        org.codehaus.jackson.map.ObjectReader objectReader63 = objectMapper60.schemaBasedReader(formatSchema62);
        byte[] byteArray65 = objectMapper60.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode66 = objectMapper56.valueToTree((java.lang.Object) 10L);
        byte[] byteArray67 = objectMapper26.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode68 = objectMapper25.readTree(byteArray67);
        org.codehaus.jackson.JsonFactory jsonFactory69 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = objectMapper70.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper72 = objectMapper70.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider73 = objectMapper70.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider74 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory69, serializerProvider73, deserializerProvider74);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver76 = null;
        objectMapper75.setSubtypeResolver(subtypeResolver76);
        org.codehaus.jackson.map.SerializationConfig serializationConfig78 = objectMapper75.getSerializationConfig();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper2.writeTree(jsonGenerator3, jsonNode68, serializationConfig78);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "null" + "'", str8, "null");
        org.junit.Assert.assertNotNull(deserializerProvider9);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(deserializerProvider24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectWriter43);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "hi!");
        org.junit.Assert.assertNull("file50.getParent() == null", file50.getParent());
        org.junit.Assert.assertEquals(file50.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(javaType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(restStorageService54);
        org.junit.Assert.assertNotNull(arrayNode55);
        org.junit.Assert.assertNotNull(objectNode57);
        org.junit.Assert.assertNotNull(objectReader59);
        org.junit.Assert.assertNotNull(objectNode61);
        org.junit.Assert.assertNotNull(objectReader63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode68);
        org.junit.Assert.assertNotNull(objectMapper71);
        org.junit.Assert.assertNotNull(objectMapper72);
        org.junit.Assert.assertNotNull(serializerProvider73);
        org.junit.Assert.assertNotNull(serializationConfig78);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.map.SerializerFactory serializerFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.setSerializerFactory(serializerFactory25);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper24.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5, serializerProvider9, deserializerProvider16, serializationConfig17, deserializationConfig27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider16);
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper29.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver34 = objectMapper33.getSubtypeResolver();
        org.codehaus.jackson.PrettyPrinter prettyPrinter35 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter36 = objectMapper33.prettyPrintingWriter(prettyPrinter35);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.node.ContainerNode containerNode37 = objectMapper29.valueToTree((java.lang.Object) objectMapper33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: (was java.lang.NullPointerException) (through reference chain: org.codehaus.jackson.map.ObjectMapper[\"serializationConfig\"]->org.codehaus.jackson.map.SerializationConfig[\"dateFormat\"]->org.codehaus.jackson.map.util.StdDateFormat[\"lenient\"])");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
        org.junit.Assert.assertNotNull(objectWriter30);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(subtypeResolver34);
        org.junit.Assert.assertNotNull(objectWriter36);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str18 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray23 = restS3Service1.listObjects("[\"content-length-range\", 1, 0]", "[\"content-length-range\", 10, 47]", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/?max-keys=5&prefix=%5B%22content-length-range%22%2C%2010%2C%2047%5D&delimiter=%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher0 = new com.metamx.druid.loading.S3SegmentPusher();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        s3SegmentPusher0.config = s3SegmentPusherConfig1;
        java.io.File file4 = new java.io.File("hi!");
        boolean boolean5 = file4.mkdirs();
        com.metamx.druid.client.DataSegment dataSegment6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment7 = s3SegmentPusher0.push(file4, dataSegment6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service1.getJetS3tProperties();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = restS3Service1.isObjectInBucket("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.setSerializationInclusion(inclusion3);
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = objectMapper5.getSerializerProvider();
        java.text.DateFormat dateFormat9 = null;
        objectMapper5.setDateFormat(dateFormat9);
        org.codehaus.jackson.JsonFactory jsonFactory12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider16 = objectMapper13.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider16, deserializerProvider17);
        org.codehaus.jackson.map.SerializerFactory serializerFactory19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.setSerializerFactory(serializerFactory19);
        org.codehaus.jackson.PrettyPrinter prettyPrinter21 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter22 = objectMapper20.prettyPrintingWriter(prettyPrinter21);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        java.io.File file27 = new java.io.File("hi!");
        java.io.File file29 = new java.io.File(file27, "");
        java.lang.Class<?> wildcardClass30 = file27.getClass();
        org.codehaus.jackson.type.JavaType javaType31 = objectMapper25.constructType((java.lang.reflect.Type) wildcardClass30);
        boolean boolean32 = objectMapper20.canDeserialize(javaType31);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService33 = objectMapper5.readValue("null", javaType31);
        org.codehaus.jackson.node.ArrayNode arrayNode34 = objectMapper5.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode36 = objectMapper35.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema37 = null;
        org.codehaus.jackson.map.ObjectReader objectReader38 = objectMapper35.schemaBasedReader(formatSchema37);
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode40 = objectMapper39.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema41 = null;
        org.codehaus.jackson.map.ObjectReader objectReader42 = objectMapper39.schemaBasedReader(formatSchema41);
        byte[] byteArray44 = objectMapper39.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode45 = objectMapper35.valueToTree((java.lang.Object) 10L);
        byte[] byteArray46 = objectMapper5.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.type.TypeReference typeReference47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String> strComparable48 = objectMapper4.readValue(byteArray46, typeReference47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(serializerProvider8);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(serializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectWriter22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "hi!");
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(javaType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(restStorageService33);
        org.junit.Assert.assertNotNull(arrayNode34);
        org.junit.Assert.assertNotNull(objectNode36);
        org.junit.Assert.assertNotNull(objectReader38);
        org.junit.Assert.assertNotNull(objectNode40);
        org.junit.Assert.assertNotNull(objectReader42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[49, 48]");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.codehaus.jackson.map.SerializationConfig serializationConfig7 = objectMapper0.copySerializationConfig();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializationConfig7);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder17 = builder15.size(0L);
        org.joda.time.Interval interval18 = null;
        com.metamx.druid.client.DataSegment.Builder builder19 = builder17.interval(interval18);
        java.lang.String[] strArray23 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder17.metrics((java.util.List<java.lang.String>) strList24);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27, "null", credentialsProvider29);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service32 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = restS3Service32.renameMetadataKeys(strMap33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = restS3Service30.renameMetadataKeys(strMap33);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder17.loadSpec(strMap35);
        org.jets3t.service.security.ProviderCredentials providerCredentials37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = restS3Service10.createSignedUrl("http://s3.amazonaws.com//?torrent", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "{\"\": \"s3.amazonaws.com\"}/hi!", strMap35, providerCredentials37, (long) (-226));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        boolean boolean8 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket10 = restS3Service1.createBucket(s3Bucket9);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Create Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        java.util.List<java.lang.String> strList8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.dimensions(strList8);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = objectMapper8.canDeserialize(javaType19);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider21 = null;
        objectMapper8.setFilters(filterProvider21);
        org.codehaus.jackson.map.DeserializationConfig.Feature feature23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper8.configure(feature23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        boolean boolean4 = restS3Service1.isRequesterPaysEnabled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = restS3Service1.createUnsignedObjectUrl("", "[\"content-length-range\", -226, -226]", true, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder28.dimensions((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder37 = builder35.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder38 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder38.dimensions((java.util.List<java.lang.String>) strList41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder37.metrics((java.util.List<java.lang.String>) strList41);
        org.joda.time.Interval interval45 = null;
        com.metamx.druid.client.DataSegment.Builder builder46 = builder37.interval(interval45);
        org.joda.time.Interval interval47 = null;
        com.metamx.druid.client.DataSegment.Builder builder48 = builder37.interval(interval47);
        com.metamx.druid.client.DataSegment.Builder builder49 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder51 = builder49.size(0L);
        org.joda.time.Interval interval52 = null;
        com.metamx.druid.client.DataSegment.Builder builder53 = builder51.interval(interval52);
        java.lang.String[] strArray57 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder51.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder48.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder62 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.metamx.druid.client.DataSegment.Builder builder67 = builder62.dimensions((java.util.List<java.lang.String>) strList65);
        com.metamx.druid.shard.ShardSpec shardSpec68 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment70 = new com.metamx.druid.client.DataSegment("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", interval1, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", strMap26, (java.util.List<java.lang.String>) strList58, (java.util.List<java.lang.String>) strList65, shardSpec68, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder3.dimensions(strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder3.loadSpec(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.metamx.druid.client.DataSegment.Builder builder21 = builder16.dimensions((java.util.List<java.lang.String>) strList19);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder25 = builder23.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder26 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder26.dimensions((java.util.List<java.lang.String>) strList29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder25.metrics((java.util.List<java.lang.String>) strList29);
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder34.dimensions((java.util.List<java.lang.String>) strList37);
        java.lang.String str40 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList37);
        com.metamx.druid.shard.ShardSpec shardSpec41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment43 = new com.metamx.druid.client.DataSegment("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", interval1, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", strMap14, (java.util.List<java.lang.String>) strList29, (java.util.List<java.lang.String>) strList37, shardSpec41, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str40, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        org.jets3t.service.Jets3tProperties jets3tProperties9 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        java.util.Date date18 = restS3Service14.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service1.createSignedHeadUrl("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", providerCredentials12, date18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jets3tProperties9);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 04 08:17:41 BRT 2021");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        boolean boolean11 = restS3Service10.isAuthenticatedConnection();
        org.jets3t.service.model.WebsiteConfig websiteConfig13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service10.setWebsiteConfig("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", websiteConfig13);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build WebsiteConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties11);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket17 = restS3Service14.getOrCreateBucket("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get or Create Bucket with location");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket9 = restS3Service1.getBucket("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        org.jets3t.service.model.StorageObject storageObject8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject9 = restS3Service1.putObject("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", storageObject8);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Create Object in bucket {\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"} cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str17 = restS3Service10.createTorrentUrl("", "");
        java.lang.String str18 = restS3Service10.getRestMetadataPrefix();
        java.util.Date date19 = restS3Service10.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = restS3Service1.createSignedGetUrl("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "", providerCredentials8, date19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str17, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "x-amz-meta-" + "'", str18, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 04 08:17:42 BRT 2021");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on(':');
        java.lang.StringBuilder stringBuilder2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode11 = objectMapper10.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper10.schemaBasedReader(formatSchema12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        byte[] byteArray19 = objectMapper14.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode20 = objectMapper10.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser21 = objectMapper9.treeAsTokens(jsonNode20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder22 = joiner1.appendTo(stringBuilder2, (java.lang.Iterable<org.codehaus.jackson.JsonNode>) jsonNode20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectNode11);
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode20);
        org.junit.Assert.assertNotNull(jsonParser21);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.model.S3Bucket s3Bucket15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray16 = restS3Service14.listObjects(s3Bucket15);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2, jets3tProperties11);
        java.util.Calendar calendar16 = null;
        java.util.Calendar calendar17 = null;
        java.lang.String[] strArray23 = new java.lang.String[] { "null", "[\"content-length-range\", 58, 1]", "[\"content-length-range\", 10, 47]", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" };
        java.lang.String[] strArray27 = new java.lang.String[] { "{\"\": \"s3.amazonaws.com\"}", "{\"\": \"s3.amazonaws.com\"}", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object28 = restS3Service12.getVersionedObjectDetails("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", calendar16, calendar17, strArray23, strArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent&versionId=%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray27);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = null;
        restS3Service8.setHttpConnectionManager(httpConnectionManager10);
        java.lang.String str12 = restS3Service8.getEndpoint();
        java.lang.String str15 = restS3Service8.createTorrentUrl("", "");
        java.lang.String str16 = restS3Service8.getRestMetadataPrefix();
        java.util.Date date17 = restS3Service8.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service3.createSignedGetUrl("[\"content-length-range\", -226, -226]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", providerCredentials6, date17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "s3.amazonaws.com" + "'", str12, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str15, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "x-amz-meta-" + "'", str16, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:17:43 BRT 2021");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig19 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider17, deserializerProvider18, serializationConfig19, deserializationConfig20);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig23 = null;
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.SerializerFactory serializerFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.setSerializerFactory(serializerFactory31);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig33 = objectMapper30.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider22, serializationConfig23, deserializationConfig33);
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider42 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig43 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider41, deserializerProvider42, serializationConfig43, deserializationConfig44);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = objectMapper45.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig47 = null;
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper49.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider52, deserializerProvider53);
        org.codehaus.jackson.map.SerializerFactory serializerFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.setSerializerFactory(serializerFactory55);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig57 = objectMapper54.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider46, serializationConfig47, deserializationConfig57);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider15, deserializerProvider46);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider15, deserializerProvider60);
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper61.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        java.lang.Object obj66 = null;
        java.lang.String str67 = objectMapper63.writeValueAsString(obj66);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider68 = objectMapper63.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider62, deserializerProvider68);
        org.codehaus.jackson.FormatSchema formatSchema70 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter71 = objectMapper69.writer(formatSchema70);
        java.text.DateFormat dateFormat72 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter73 = objectMapper69.writer(dateFormat72);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(deserializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializationConfig33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(deserializerProvider46);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(serializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(deserializationConfig57);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "null" + "'", str67, "null");
        org.junit.Assert.assertNotNull(deserializerProvider68);
        org.junit.Assert.assertNotNull(objectWriter71);
        org.junit.Assert.assertNotNull(objectWriter73);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        java.lang.String str16 = restS3Service1.createTorrentUrl("/", "x-amz-meta-");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray18 = restS3Service1.listObjects("s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent" + "'", str16, "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
        org.codehaus.jackson.map.InjectableValues injectableValues3 = null;
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper2.reader(injectableValues3);
        java.text.DateFormat dateFormat5 = null;
        objectMapper2.setDateFormat(dateFormat5);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectReader4);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.disableMFAForVersionedBucket("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 10, 47]", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucketPolicy("[\"content-length-range\", 100, 4]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 100, 4]/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.io.File file3 = new java.io.File("hi!");
        java.io.File file5 = new java.io.File(file3, "");
        java.lang.String str6 = file5.getName();
        java.net.URL uRL7 = file5.toURL();
        boolean boolean8 = file5.mkdir();
        java.nio.file.Path path9 = file5.toPath();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("http://s3.amazonaws.com//?torrent", "http://s3.amazonaws.com//?torrent", file5);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, hi!/?torrent9001469459429693113http:/s3.amazonaws.com/?torrent");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(path9);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        boolean boolean9 = restS3Service1.isHttpsOnly();
        java.util.Calendar calendar12 = null;
        java.util.Calendar calendar13 = null;
        java.lang.String[] strArray18 = new java.lang.String[] { "{\"\": \"s3.amazonaws.com\"}/hi!", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" };
        java.lang.String[] strArray24 = new java.lang.String[] { "{\"\": \"s3.amazonaws.com\"}/hi!", "s3.amazonaws.com", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", ":", "null" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject25 = restS3Service1.getObjectDetails("", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", calendar12, calendar13, strArray18, strArray24);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials1 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service2 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials1);
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = restS3Service2.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service2.setHttpConnectionManager(httpConnectionManager4);
        java.util.List<java.lang.String> strList6 = restS3Service2.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.dimensions(strList6);
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.dataSource("[\"content-length-range\", 1, 0]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(providerCredentials3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27);
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = restS3Service28.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager30 = null;
        restS3Service28.setHttpConnectionManager(httpConnectionManager30);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager32 = null;
        restS3Service28.setHttpConnectionManager(httpConnectionManager32);
        boolean boolean34 = restS3Service28.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder37 = builder35.size(0L);
        org.joda.time.Interval interval38 = null;
        com.metamx.druid.client.DataSegment.Builder builder39 = builder37.interval(interval38);
        java.lang.String[] strArray43 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder37.metrics((java.util.List<java.lang.String>) strList44);
        org.jets3t.service.security.ProviderCredentials providerCredentials47 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials47, "null", credentialsProvider49);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service52 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials51);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service52.renameMetadataKeys(strMap53);
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = restS3Service50.renameMetadataKeys(strMap53);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder37.loadSpec(strMap55);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service28.renameMetadataKeys(strMap55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = restS3Service1.createSignedUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "/", strMap55, (long) 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNull(providerCredentials29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap57);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket16 = restS3Service1.createBucket("{\"\": \"s3.amazonaws.com\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object12 = restS3Service1.getVersionedObject("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "{\"\": \"s3.amazonaws.com\"}", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D?versionId=%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonGenerator jsonGenerator10 = null;
        java.io.File file12 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean14 = file12.setLastModified((long) (short) 10);
        java.io.File file15 = file12.getAbsoluteFile();
        java.io.File file17 = new java.io.File(file15, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        // The following exception was thrown during execution in test generation
        try {
            objectMapper9.writeValue(jsonGenerator10, (java.lang.Object) "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertEquals(file12.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file12.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(file15);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
// flaky:         org.junit.Assert.assertEquals(file17.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        java.io.File file6 = new java.io.File(uRI4);
        java.io.File file8 = new java.io.File(file6, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean9 = file8.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRI4);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean4 = file2.setExecutable(false);
        boolean boolean5 = file2.mkdir();
        boolean boolean7 = file2.setExecutable(true);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        boolean boolean8 = restS3Service1.isShutdown();
        java.util.Calendar calendar12 = null;
        java.util.Calendar calendar13 = null;
        java.lang.String[] strArray18 = new java.lang.String[] { "[\"content-length-range\", 100, 4]", "x-amz-meta-", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]" };
        java.lang.String[] strArray19 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service1.getVersionedObject("{\"\": \"s3.amazonaws.com\"}", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", calendar12, calendar13, strArray18, strArray19, (java.lang.Long) 967682662400L, (java.lang.Long) 967682662400L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}/%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E?versionId=%7B%22%22%3A%20%22s3.amazonaws.com%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object7 = restS3Service1.getObjectWithSignedUrl("{\"\": \"s3.amazonaws.com\"}/hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\"\": \"s3.amazonaws.com\"}/hi!': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str8 = restS3Service1.createTorrentUrl("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.jets3t.service.model.MultipartUpload multipartUpload9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartPart> multipartPartList10 = restS3Service1.multipartListParts(multipartUpload9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" + "'", str8, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        java.util.Calendar calendar7 = null;
        java.util.Calendar calendar8 = null;
        java.lang.String[] strArray10 = new java.lang.String[] { "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]" };
        java.lang.String[] strArray17 = new java.lang.String[] { "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/", "/", "s3.amazonaws.com", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object20 = restS3Service1.getObject("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", calendar7, calendar8, strArray10, strArray17, (java.lang.Long) 1L, (java.lang.Long) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}/http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        boolean boolean24 = restS3Service21.isBucketAccessible("");
        java.lang.String str25 = restS3Service21.getRestMetadataPrefix();
        boolean boolean26 = restS3Service21.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = restS3Service21.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager27);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "x-amz-meta-" + "'", str25, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager27);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder30 = builder28.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder31 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service33 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials32);
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = restS3Service33.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager35 = null;
        restS3Service33.setHttpConnectionManager(httpConnectionManager35);
        java.util.List<java.lang.String> strList37 = restS3Service33.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder38 = builder31.dimensions(strList37);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder30.dimensions(strList37);
        org.jets3t.service.security.ProviderCredentials providerCredentials40 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service41 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials40);
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = restS3Service41.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager43 = null;
        restS3Service41.setHttpConnectionManager(httpConnectionManager43);
        java.util.List<java.lang.String> strList45 = restS3Service41.getResourceParameterNames();
        com.metamx.druid.shard.ShardSpec shardSpec46 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment48 = new com.metamx.druid.client.DataSegment("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", interval1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", strMap27, strList37, strList45, shardSpec46, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(providerCredentials34);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(providerCredentials42);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.io.File file2 = new java.io.File("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.junit.Assert.assertEquals(file2.getParent(), "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]/[\"starts-with\", \"$<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file2.toString(), "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]/[\"starts-with\", \"$<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager8 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager8);
        boolean boolean10 = restS3Service4.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder13 = builder11.size(0L);
        org.joda.time.Interval interval14 = null;
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.interval(interval14);
        java.lang.String[] strArray19 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder13.metrics((java.util.List<java.lang.String>) strList20);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23, "null", credentialsProvider25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service28.renameMetadataKeys(strMap29);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service26.renameMetadataKeys(strMap29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder13.loadSpec(strMap31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service4.renameMetadataKeys(strMap31);
        java.util.List<java.lang.String> strList34 = null;
        com.metamx.druid.client.DataSegment.Builder builder36 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder36.dimensions((java.util.List<java.lang.String>) strList39);
        java.lang.String str42 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList39);
        com.metamx.druid.shard.ShardSpec shardSpec43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment45 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 58, 1]", interval1, "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", strMap33, strList34, (java.util.List<java.lang.String>) strList39, shardSpec43, (long) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str42, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.io.File file4 = file1.getAbsoluteFile();
        java.io.File file5 = file1.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            file5.deleteOnExit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        boolean boolean13 = restS3Service10.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = restS3Service10.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service10.renameMetadataKeys(strMap23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service26.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager28);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager30 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager30);
        java.lang.String str34 = restS3Service26.createTorrentUrl("", "hi!");
        boolean boolean36 = restS3Service26.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date37 = restS3Service26.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = restS3Service1.createSignedPutUrl("null", "", strMap24, date37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(credentialsProvider14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str34, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Thu Nov 04 08:17:49 BRT 2021");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        java.text.DateFormat dateFormat7 = null;
        objectMapper6.setDateFormat(dateFormat7);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file6 = file1.getParentFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode8 = objectMapper7.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema9 = null;
        org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper7.schemaBasedReader(formatSchema9);
        byte[] byteArray12 = objectMapper7.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray13 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper7.disable(featureArray13);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = objectMapper7.getDeserializerProvider();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = file6.equals((java.lang.Object) objectMapper7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(objectNode8);
        org.junit.Assert.assertNotNull(objectReader10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(deserializerProvider15);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object8 = restS3Service1.getObjectWithSignedUrl("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = restS3Service19.getProviderCredentials();
        boolean boolean22 = restS3Service19.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider23 = restS3Service19.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24, "null", credentialsProvider26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service29.renameMetadataKeys(strMap30);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = restS3Service27.renameMetadataKeys(strMap30);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service19.renameMetadataKeys(strMap32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = restS3Service1.createSignedUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "[\"content-length-range\", 58, 1]", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap32, (long) (-226), false, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(providerCredentials20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(credentialsProvider23);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        java.lang.String str8 = file7.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!/http:/s3.amazonaws.com" + "'", str8, "hi!/http:/s3.amazonaws.com");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.setPropertyNamingStrategy(propertyNamingStrategy13);
        org.codehaus.jackson.JsonGenerator jsonGenerator15 = null;
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper17.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider20, deserializerProvider21);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver23 = null;
        objectMapper22.setSubtypeResolver(subtypeResolver23);
        org.codehaus.jackson.JsonFactory jsonFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider29, deserializerProvider30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode33 = objectMapper32.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema34 = null;
        org.codehaus.jackson.map.ObjectReader objectReader35 = objectMapper32.schemaBasedReader(formatSchema34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode37 = objectMapper36.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema38 = null;
        org.codehaus.jackson.map.ObjectReader objectReader39 = objectMapper36.schemaBasedReader(formatSchema38);
        byte[] byteArray41 = objectMapper36.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode42 = objectMapper32.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser43 = objectMapper31.treeAsTokens(jsonNode42);
        org.codehaus.jackson.JsonNode jsonNode44 = objectMapper22.readTree(jsonParser43);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper8.writeTree(jsonGenerator15, jsonNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not pass null serializerFactory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectNode33);
        org.junit.Assert.assertNotNull(objectReader35);
        org.junit.Assert.assertNotNull(objectNode37);
        org.junit.Assert.assertNotNull(objectReader39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode42);
        org.junit.Assert.assertNotNull(jsonParser43);
        org.junit.Assert.assertNotNull(jsonNode44);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.lang.String str2 = org.jets3t.service.S3Service.buildPostForm("[\"content-length-range\", 100, 4]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str2, "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.NotificationConfig notificationConfig4 = restS3Service1.getNotificationConfig(":");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper16);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketPolicy("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        java.io.File file4 = file1.getAbsoluteFile();
        boolean boolean5 = file4.isFile();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray10 = restS3Service1.listObjects("hi!/http:/s3.amazonaws.com", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder10.dimensions((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder9.metrics((java.util.List<java.lang.String>) strList13);
        org.joda.time.Interval interval17 = null;
        com.metamx.druid.client.DataSegment.Builder builder18 = builder9.interval(interval17);
        org.joda.time.Interval interval19 = null;
        com.metamx.druid.client.DataSegment.Builder builder20 = builder9.interval(interval19);
        com.metamx.druid.client.DataSegment.Builder builder21 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.size(0L);
        org.joda.time.Interval interval24 = null;
        com.metamx.druid.client.DataSegment.Builder builder25 = builder23.interval(interval24);
        java.lang.String[] strArray29 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder23.metrics((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder20.metrics((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder34.dimensions((java.util.List<java.lang.String>) strList37);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec42 = null;
        com.metamx.druid.client.DataSegment.Builder builder43 = builder39.shardSpec(shardSpec42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder39.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder46 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder46.dimensions((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder51.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder55 = builder53.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder56 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder56.dimensions((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder55.metrics((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder63 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder63.dimensions((java.util.List<java.lang.String>) strList66);
        com.metamx.druid.client.DataSegment.Builder builder69 = builder62.metrics((java.util.List<java.lang.String>) strList66);
        com.metamx.druid.client.DataSegment.Builder builder70 = builder39.metrics((java.util.List<java.lang.String>) strList66);
        com.metamx.druid.client.DataSegment.Builder builder71 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.metamx.druid.client.DataSegment.Builder builder76 = builder71.dimensions((java.util.List<java.lang.String>) strList74);
        com.metamx.druid.client.DataSegment.Builder builder78 = builder76.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder80 = builder78.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder81 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        com.metamx.druid.client.DataSegment.Builder builder86 = builder81.dimensions((java.util.List<java.lang.String>) strList84);
        com.metamx.druid.client.DataSegment.Builder builder87 = builder80.metrics((java.util.List<java.lang.String>) strList84);
        com.metamx.druid.client.DataSegment.Builder builder88 = builder39.dimensions((java.util.List<java.lang.String>) strList84);
        com.metamx.druid.client.DataSegment.Builder builder89 = builder33.metrics((java.util.List<java.lang.String>) strList84);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList11 = restS3Service1.getBucketAcl("[\"content-length-range\", 58, 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/?acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        java.lang.Object obj16 = null;
        java.lang.String str17 = objectMapper13.writeValueAsString(obj16);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = objectMapper13.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider23 = objectMapper20.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory19, serializerProvider23, deserializerProvider24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper13.setSerializerProvider(serializerProvider23);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper13.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper11.setDeserializationConfig(deserializationConfig27);
        org.codehaus.jackson.map.type.TypeFactory typeFactory29 = objectMapper28.getTypeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper5.setTypeFactory(typeFactory29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper31.disableDefaultTyping();
        java.lang.Object obj34 = null;
        java.lang.String str35 = objectMapper31.writeValueAsString(obj34);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = objectMapper31.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper38.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper38.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = objectMapper38.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider41, deserializerProvider42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper31.setSerializerProvider(serializerProvider41);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig45 = objectMapper31.getDeserializationConfig();
        org.codehaus.jackson.type.TypeReference typeReference46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.ObjectCodec objectCodec47 = objectMapper5.convertValue((java.lang.Object) objectMapper31, typeReference46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null" + "'", str17, "null");
        org.junit.Assert.assertNotNull(deserializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(serializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(typeFactory29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "null" + "'", str35, "null");
        org.junit.Assert.assertNotNull(deserializerProvider36);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(serializerProvider41);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(deserializationConfig45);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object6 = restS3Service1.getObjectWithSignedUrl("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        java.lang.String str4 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.acl.AccessControlList accessControlList6 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl("null", accessControlList6);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The bucket 'null' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.lang.Object obj20 = null;
        java.lang.String str21 = objectMapper17.writeValueAsString(obj20);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.emitter.EmittingLogger emittingLogger29 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray31 = new java.lang.Object[] { objectMapper7, deserializerProvider16, objectMapper17, strList25, emittingLogger29, (byte) 1 };
        emittingLogger4.error(throwable5, "{\"\": \"s3.amazonaws.com\"}", objArray31);
        java.lang.Throwable throwable33 = null;
        java.io.File file36 = new java.io.File("hi!");
        java.io.File file38 = new java.io.File(file36, "");
        java.io.File file39 = file36.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode41 = objectMapper40.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider47);
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = restS3Service50.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager52 = null;
        restS3Service50.setHttpConnectionManager(httpConnectionManager52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { file39, objectMapper40, objectMapper48, restS3Service50, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger4.info(throwable33, "", objArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper59.getSerializerProvider();
        java.text.DateFormat dateFormat63 = null;
        objectMapper59.setDateFormat(dateFormat63);
        org.codehaus.jackson.node.ArrayNode arrayNode65 = objectMapper59.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder66 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder68 = builder66.size(0L);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objectMapper59, builder66 };
        emittingLogger4.trace("null", objArray69);
        emittingLogger1.error("[\"content-length-range\", 58, 1]", objArray69);
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger1;
        boolean boolean73 = emittingLogger1.isTraceEnabled();
        java.lang.Throwable throwable74 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = objectMapper76.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory78 = objectMapper76.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper79.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = objectMapper81.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory83 = objectMapper81.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader84 = objectMapper79.reader(jsonNodeFactory83);
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = objectMapper85.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = objectMapper85.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray88 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper89 = objectMapper85.enable(featureArray88);
        org.codehaus.jackson.map.ObjectMapper objectMapper90 = objectMapper79.enable(featureArray88);
        org.codehaus.jackson.map.ObjectMapper objectMapper91 = objectMapper76.enable(featureArray88);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.warn(throwable74, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", (java.lang.Object[]) featureArray88);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = '2'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null" + "'", str21, "null");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "hi!");
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "hi!");
        org.junit.Assert.assertNotNull(file39);
// flaky:         org.junit.Assert.assertEquals(file39.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode41);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNull(providerCredentials51);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(arrayNode65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectMapper77);
        org.junit.Assert.assertNotNull(jsonNodeFactory78);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(objectMapper82);
        org.junit.Assert.assertNotNull(jsonNodeFactory83);
        org.junit.Assert.assertNotNull(objectReader84);
        org.junit.Assert.assertNotNull(objectMapper86);
        org.junit.Assert.assertNotNull(objectMapper87);
        org.junit.Assert.assertNotNull(featureArray88);
        org.junit.Assert.assertNotNull(objectMapper89);
        org.junit.Assert.assertNotNull(objectMapper90);
        org.junit.Assert.assertNotNull(objectMapper91);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        org.codehaus.jackson.map.ObjectReader objectReader25 = objectMapper0.updatingReader((java.lang.Object) objectMapper20);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        java.text.DateFormat dateFormat30 = null;
        objectMapper26.setDateFormat(dateFormat30);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider38);
        org.codehaus.jackson.map.SerializerFactory serializerFactory40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.setSerializerFactory(serializerFactory40);
        org.codehaus.jackson.PrettyPrinter prettyPrinter42 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter43 = objectMapper41.prettyPrintingWriter(prettyPrinter42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper44.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper44.disableDefaultTyping();
        java.io.File file48 = new java.io.File("hi!");
        java.io.File file50 = new java.io.File(file48, "");
        java.lang.Class<?> wildcardClass51 = file48.getClass();
        org.codehaus.jackson.type.JavaType javaType52 = objectMapper46.constructType((java.lang.reflect.Type) wildcardClass51);
        boolean boolean53 = objectMapper41.canDeserialize(javaType52);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService54 = objectMapper26.readValue("null", javaType52);
        org.codehaus.jackson.node.ArrayNode arrayNode55 = objectMapper26.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode57 = objectMapper56.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema58 = null;
        org.codehaus.jackson.map.ObjectReader objectReader59 = objectMapper56.schemaBasedReader(formatSchema58);
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode61 = objectMapper60.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema62 = null;
        org.codehaus.jackson.map.ObjectReader objectReader63 = objectMapper60.schemaBasedReader(formatSchema62);
        byte[] byteArray65 = objectMapper60.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode66 = objectMapper56.valueToTree((java.lang.Object) 10L);
        byte[] byteArray67 = objectMapper26.writeValueAsBytes((java.lang.Object) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode68 = objectMapper0.readTree(byteArray67);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Unexpected token (VALUE_NUMBER_INT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class org.codehaus.jackson.JsonNode? at [Source: [B@643f7dc; line: 1, column: 1]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectReader25);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectWriter43);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "hi!");
        org.junit.Assert.assertNull("file50.getParent() == null", file50.getParent());
        org.junit.Assert.assertEquals(file50.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(javaType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(restStorageService54);
        org.junit.Assert.assertNotNull(arrayNode55);
        org.junit.Assert.assertNotNull(objectNode57);
        org.junit.Assert.assertNotNull(objectReader59);
        org.junit.Assert.assertNotNull(objectNode61);
        org.junit.Assert.assertNotNull(objectReader63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[49, 48]");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        boolean boolean23 = restS3Service20.isRequesterPaysEnabled();
        s3SegmentPusher17.s3Client = restS3Service20;
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = restS3Service29.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = null;
        restS3Service29.setHttpConnectionManager(httpConnectionManager31);
        java.lang.String str33 = restS3Service29.getEndpoint();
        java.lang.String str36 = restS3Service29.createTorrentUrl("", "");
        java.lang.String str37 = restS3Service29.getRestMetadataPrefix();
        java.util.Date date38 = restS3Service29.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = restS3Service20.createSignedDeleteUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", providerCredentials27, date38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(providerCredentials30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "s3.amazonaws.com" + "'", str33, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str36, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "x-amz-meta-" + "'", str37, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Thu Nov 04 08:17:52 BRT 2021");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        org.jets3t.service.model.S3Bucket s3Bucket12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object14 = restS3Service1.getObject(s3Bucket12, ":");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action getObject cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = objectMapper5.getSerializerProvider();
        java.text.DateFormat dateFormat9 = null;
        objectMapper5.setDateFormat(dateFormat9);
        org.codehaus.jackson.JsonFactory jsonFactory12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider16 = objectMapper13.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider16, deserializerProvider17);
        org.codehaus.jackson.map.SerializerFactory serializerFactory19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.setSerializerFactory(serializerFactory19);
        org.codehaus.jackson.PrettyPrinter prettyPrinter21 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter22 = objectMapper20.prettyPrintingWriter(prettyPrinter21);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        java.io.File file27 = new java.io.File("hi!");
        java.io.File file29 = new java.io.File(file27, "");
        java.lang.Class<?> wildcardClass30 = file27.getClass();
        org.codehaus.jackson.type.JavaType javaType31 = objectMapper25.constructType((java.lang.reflect.Type) wildcardClass30);
        boolean boolean32 = objectMapper20.canDeserialize(javaType31);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService33 = objectMapper5.readValue("null", javaType31);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = objectMapper0.readValue("[\"content-length-range\", -226, -226]", javaType31);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Can not deserialize instance of java.io.File out of START_ARRAY token? at [Source: java.io.StringReader@73a4a2d9; line: 1, column: 1]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(serializerProvider8);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(serializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectWriter22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "hi!");
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(javaType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(restStorageService33);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        int int3 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageObjectsChunk storageObjectsChunk9 = restS3Service1.listObjectsChunked("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", ":", 0L, ":");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}/&prefix=%3Cform%20action%3D%22https%3A%2F%2F%5B%22content-length-range%22%2C%20100%2C%204%5D.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2F%5B%22content-length-range%22%2C%2058%2C%201%5D%2Fnull%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E&delimiter=%3A&marker=%3A': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "null", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        org.jets3t.service.model.S3Object s3Object5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object6 = restS3Service3.putObject(s3Bucket4, s3Object5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory3 = objectMapper0.getNodeFactory();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(jsonNodeFactory3);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isShutdown();
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service1.createSignedUrl("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "s3.amazonaws.com", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap15, (long) 5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.setPropertyNamingStrategy(propertyNamingStrategy13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver18 = objectMapper17.getSubtypeResolver();
        objectMapper14.setSubtypeResolver(subtypeResolver18);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(subtypeResolver18);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        long long3 = file2.getUsableSpace();
        java.io.File file4 = file2.getCanonicalFile();
        long long5 = file2.lastModified();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        int int14 = restS3Service3.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        java.util.Date date18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service3.createSignedDeleteUrl("[\"content-length-range\", 58, 1]", "http://s3.amazonaws.com//?torrent", providerCredentials17, date18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.SerializationConfig serializationConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.setSerializationConfig(serializationConfig6);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper7.reader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.joda.time.Interval interval1 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder11.dimensions((java.util.List<java.lang.String>) strList14);
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder20 = builder18.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder21 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder21.dimensions((java.util.List<java.lang.String>) strList24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder20.metrics((java.util.List<java.lang.String>) strList24);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder28.dimensions((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder27.metrics((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder10.metrics((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.shard.ShardSpec shardSpec36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment38 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 58, 1]", interval1, "http://s3.amazonaws.com//hi%21?torrent", strMap3, strList9, (java.util.List<java.lang.String>) strList31, shardSpec36, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = restS3Service4.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "null", credentialsProvider11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = restS3Service14.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service12.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service4.renameMetadataKeys(strMap17);
        com.metamx.druid.client.DataSegment.Builder builder19 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager23 = null;
        restS3Service21.setHttpConnectionManager(httpConnectionManager23);
        java.util.List<java.lang.String> strList25 = restS3Service21.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder26 = builder19.dimensions(strList25);
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder27.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec35 = null;
        com.metamx.druid.client.DataSegment.Builder builder36 = builder32.shardSpec(shardSpec35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder32.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder44.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder48 = builder46.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder49 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder49.dimensions((java.util.List<java.lang.String>) strList52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder48.metrics((java.util.List<java.lang.String>) strList52);
        com.metamx.druid.client.DataSegment.Builder builder56 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder56.dimensions((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder55.metrics((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder32.metrics((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder64 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.metamx.druid.client.DataSegment.Builder builder69 = builder64.dimensions((java.util.List<java.lang.String>) strList67);
        com.metamx.druid.client.DataSegment.Builder builder71 = builder69.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder73 = builder71.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder74 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.metamx.druid.client.DataSegment.Builder builder79 = builder74.dimensions((java.util.List<java.lang.String>) strList77);
        com.metamx.druid.client.DataSegment.Builder builder80 = builder73.metrics((java.util.List<java.lang.String>) strList77);
        com.metamx.druid.client.DataSegment.Builder builder81 = builder32.dimensions((java.util.List<java.lang.String>) strList77);
        com.metamx.druid.shard.ShardSpec shardSpec82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment84 = new com.metamx.druid.client.DataSegment("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", interval1, "x-amz-meta-", strMap18, strList25, (java.util.List<java.lang.String>) strList77, shardSpec82, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(credentialsProvider8);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.setBucketPolicy("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "/");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode31 = objectMapper30.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema32 = null;
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper30.schemaBasedReader(formatSchema32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode35 = objectMapper34.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectReader objectReader37 = objectMapper34.schemaBasedReader(formatSchema36);
        byte[] byteArray39 = objectMapper34.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode40 = objectMapper30.valueToTree((java.lang.Object) 10L);
        byte[] byteArray41 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializerProvider serializerProvider42 = objectMapper0.getSerializerProvider();
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode44 = objectMapper0.readTree(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
        org.junit.Assert.assertNotNull(objectNode31);
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectNode35);
        org.junit.Assert.assertNotNull(objectReader37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(serializerProvider42);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "null", credentialsProvider2);
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putVersionedObjectAcl("hi!", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", accessControlList7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.setDevPayProductToken("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        java.lang.String str18 = restS3Service14.getEndpoint();
        java.lang.String str21 = restS3Service14.createTorrentUrl("", "");
        java.lang.String str22 = restS3Service14.getRestMetadataPrefix();
        java.util.Date date23 = restS3Service14.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = restS3Service1.createSignedHeadUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "hi!", date23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "s3.amazonaws.com" + "'", str18, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str21, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "x-amz-meta-" + "'", str22, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 04 08:17:54 BRT 2021");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.WebsiteConfig websiteConfig7 = restS3Service1.getWebsiteConfig("x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        java.lang.Class<?> wildcardClass7 = file4.getClass();
        org.codehaus.jackson.type.JavaType javaType8 = objectMapper2.constructType((java.lang.reflect.Type) wildcardClass7);
        org.codehaus.jackson.map.SerializationConfig serializationConfig9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper2.setSerializationConfig(serializationConfig9);
        java.io.File file11 = null;
        java.io.File file13 = new java.io.File(file11, "x-amz-meta-");
        long long14 = file13.getUsableSpace();
        java.io.File file15 = file13.getCanonicalFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        java.lang.Object obj19 = null;
        java.lang.String str20 = objectMapper16.writeValueAsString(obj19);
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        java.io.File file25 = new java.io.File("hi!");
        java.io.File file27 = new java.io.File(file25, "");
        java.lang.Class<?> wildcardClass28 = file25.getClass();
        org.codehaus.jackson.type.JavaType javaType29 = objectMapper23.constructType((java.lang.reflect.Type) wildcardClass28);
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper16.typedWriter(javaType29);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.type.JavaType javaType31 = objectMapper2.readValue(file13, javaType29);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: x-amz-meta- (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(javaType8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(file15);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "null" + "'", str20, "null");
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "hi!");
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(javaType29);
        org.junit.Assert.assertNotNull(objectWriter30);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.io.File file3 = new java.io.File("hi!");
        java.io.File file5 = new java.io.File(file3, "");
        boolean boolean7 = file3.setWritable(false);
        java.io.File file9 = new java.io.File(file3, "{\"\": \"s3.amazonaws.com\"}/hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, hi!/hi!\", \"\"]\", \"\"]4110333474943458136<form action=\"https:/http:/s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file9.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider14);
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider21 = objectMapper18.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider23 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig25 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider23, deserializerProvider24, serializationConfig25, deserializationConfig26);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = objectMapper27.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig29 = null;
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider34 = objectMapper31.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider34, deserializerProvider35);
        org.codehaus.jackson.map.SerializerFactory serializerFactory37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.setSerializerFactory(serializerFactory37);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig39 = objectMapper36.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider21, deserializerProvider28, serializationConfig29, deserializationConfig39);
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider47 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider48 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig49 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider47, deserializerProvider48, serializationConfig49, deserializationConfig50);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider52 = objectMapper51.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig53 = null;
        org.codehaus.jackson.JsonFactory jsonFactory54 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper55.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper55.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider58 = objectMapper55.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory54, serializerProvider58, deserializerProvider59);
        org.codehaus.jackson.map.SerializerFactory serializerFactory61 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.setSerializerFactory(serializerFactory61);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig63 = objectMapper60.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider52, serializationConfig53, deserializationConfig63);
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider21, deserializerProvider52);
        org.codehaus.jackson.map.SerializationConfig serializationConfig66 = null;
        org.codehaus.jackson.JsonFactory jsonFactory67 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = objectMapper68.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = objectMapper68.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider71 = objectMapper68.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory72 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider73 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider74 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig75 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig76 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory72, serializerProvider73, deserializerProvider74, serializationConfig75, deserializationConfig76);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider78 = objectMapper77.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig79 = null;
        org.codehaus.jackson.JsonFactory jsonFactory80 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = objectMapper81.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = objectMapper81.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider84 = objectMapper81.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider85 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory80, serializerProvider84, deserializerProvider85);
        org.codehaus.jackson.map.SerializerFactory serializerFactory87 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper88 = objectMapper86.setSerializerFactory(serializerFactory87);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig89 = objectMapper86.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper90 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory67, serializerProvider71, deserializerProvider78, serializationConfig79, deserializationConfig89);
        org.codehaus.jackson.map.ObjectMapper objectMapper91 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider13, deserializerProvider52, serializationConfig66, deserializationConfig89);
        org.codehaus.jackson.map.ObjectMapper objectMapper92 = objectMapper0.setDeserializerProvider(deserializerProvider52);
        org.codehaus.jackson.JsonGenerator.Feature feature93 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = objectMapper92.isEnabled(feature93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(serializerProvider21);
        org.junit.Assert.assertNotNull(deserializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(serializerProvider34);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(deserializationConfig39);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(deserializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertNotNull(serializerProvider58);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(deserializationConfig63);
        org.junit.Assert.assertNotNull(objectMapper69);
        org.junit.Assert.assertNotNull(objectMapper70);
        org.junit.Assert.assertNotNull(serializerProvider71);
        org.junit.Assert.assertNotNull(deserializerProvider78);
        org.junit.Assert.assertNotNull(objectMapper82);
        org.junit.Assert.assertNotNull(objectMapper83);
        org.junit.Assert.assertNotNull(serializerProvider84);
        org.junit.Assert.assertNotNull(objectMapper88);
        org.junit.Assert.assertNotNull(deserializationConfig89);
        org.junit.Assert.assertNotNull(objectMapper92);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        org.jets3t.service.model.S3Object s3Object8 = null;
        java.util.Calendar calendar10 = null;
        java.util.Calendar calendar11 = null;
        java.lang.String[] strArray17 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str18 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray17);
        java.lang.String[] strArray24 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service3.copyVersionedObject("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "", "http://s3.amazonaws.com//?torrent", s3Object8, false, calendar10, calendar11, strArray17, strArray24);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str18, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str25, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketLoggingStatus("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", s3BucketLoggingStatus13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray26 = restS3Service1.listObjects("s3.amazonaws.com", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "hi!/http:/s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.SerializationConfig serializationConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.setSerializationConfig(serializationConfig6);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper5.setSerializationInclusion(inclusion8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        java.io.File file3 = new java.io.File("hi!");
        java.io.File file5 = new java.io.File(file3, "");
        java.lang.String str6 = file5.getName();
        java.net.URL uRL7 = file5.toURL();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
            org.codehaus.jackson.JsonNode jsonNode8 = null; // flaky: objectMapper0.readTree(uRL7);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
// flaky:         } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Object s3Object15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", s3Object15);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.lang.String str1 = org.jets3t.service.S3Service.generatePostPolicyCondition_AllowAnyValue("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]" + "'", str1, "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager4);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str17 = restS3Service10.createTorrentUrl("", "");
        java.lang.String str18 = restS3Service10.getRestMetadataPrefix();
        java.util.Date date19 = restS3Service10.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = restS3Service1.createSignedGetUrl("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", providerCredentials8, date19, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str17, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "x-amz-meta-" + "'", str18, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 04 08:17:56 BRT 2021");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "null", credentialsProvider2);
        org.jets3t.service.model.S3Object s3Object8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service3.copyVersionedObject("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", s3Object8, true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.disableMFAForVersionedBucket("", "[\"content-length-range\", 10, 47]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.loading.S3SegmentPusher.JOINER = joiner1;
        org.junit.Assert.assertNotNull(joiner1);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, ":", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2, jets3tProperties17, hostConfiguration23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList29 = restS3Service24.multipartListUploads("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "x-amz-meta-", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", (java.lang.Integer) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}/&max-uploads=2&upload-id-marker=http%3A%2F%2Fs3.amazonaws.com.s3.amazonaws.com%2F%3Ftorrent&key-marker=x-amz-meta-&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList8 = restS3Service1.multipartListUploads("[\"content-length-range\", -226, -226]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", -226, -226]/?max-uploads=1000&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.SerializerFactory serializerFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.setSerializerFactory(serializerFactory35);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = objectMapper34.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper27.setDeserializationConfig(deserializationConfig37);
        org.codehaus.jackson.JsonGenerator jsonGenerator39 = null;
        java.io.File file41 = new java.io.File("hi!");
        java.io.File file43 = new java.io.File(file41, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean44 = file41.setReadOnly();
        java.lang.String str45 = file41.getPath();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper27.writeValue(jsonGenerator39, (java.lang.Object) file41);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializationConfig37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNull("file41.getParent() == null", file41.getParent());
        org.junit.Assert.assertEquals(file41.toString(), "hi!");
        org.junit.Assert.assertEquals(file43.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file43.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory7 = objectMapper5.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper3.reader(jsonNodeFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray12 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper9.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper3.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper0.enable(featureArray12);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory16 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider21 = objectMapper18.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider21, deserializerProvider22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode25 = objectMapper24.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema26 = null;
        org.codehaus.jackson.map.ObjectReader objectReader27 = objectMapper24.schemaBasedReader(formatSchema26);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode29 = objectMapper28.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema30 = null;
        org.codehaus.jackson.map.ObjectReader objectReader31 = objectMapper28.schemaBasedReader(formatSchema30);
        byte[] byteArray33 = objectMapper28.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode34 = objectMapper24.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser35 = objectMapper23.treeAsTokens(jsonNode34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper38.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper38.disableDefaultTyping();
        java.io.File file42 = new java.io.File("hi!");
        java.io.File file44 = new java.io.File(file42, "");
        java.lang.Class<?> wildcardClass45 = file42.getClass();
        org.codehaus.jackson.type.JavaType javaType46 = objectMapper40.constructType((java.lang.reflect.Type) wildcardClass45);
        com.metamx.emitter.EmittingLogger emittingLogger47 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass45);
        org.codehaus.jackson.type.JavaType javaType48 = objectMapper36.constructType((java.lang.reflect.Type) wildcardClass45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList49 = objectMapper0.readValue(jsonParser35, javaType48);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Can not instantiate value of type [simple type, class java.io.File] from JSON long integral number; no single-long-arg constructor/factory method");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonNodeFactory7);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(jsonNodeFactory16);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(serializerProvider21);
        org.junit.Assert.assertNotNull(objectNode25);
        org.junit.Assert.assertNotNull(objectReader27);
        org.junit.Assert.assertNotNull(objectNode29);
        org.junit.Assert.assertNotNull(objectReader31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode34);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "hi!");
        org.junit.Assert.assertNull("file44.getParent() == null", file44.getParent());
        org.junit.Assert.assertEquals(file44.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(javaType46);
        org.junit.Assert.assertNotNull(javaType48);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = restS3Service1.isObjectInBucket("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", -226, -226]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/%5B%22content-length-range%22%2C%20-226%2C%20-226%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.model.S3Object s3Object7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload8 = restS3Service3.multipartStartUpload("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", s3Object7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        boolean boolean7 = restS3Service1.isAuthenticatedConnection();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object11 = restS3Service1.getVersionedObject("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "[\"content-length-range\", 10, 47]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 10, 47]/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D?versionId=%5B%22%22%2C%20%22%24http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%2C%20%22null%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.io.File file1 = new java.io.File("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        boolean boolean2 = file1.isAbsolute();
        org.junit.Assert.assertEquals(file1.getParent(), "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file1.toString(), "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        int int14 = restS3Service3.getInternalErrorRetryMax();
        java.util.Calendar calendar18 = null;
        java.util.Calendar calendar19 = null;
        java.lang.String[] strArray25 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str26 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray25);
        java.lang.String[] strArray32 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str33 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object34 = restS3Service3.getVersionedObjectDetails("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "[\"content-length-range\", 10, 47]", "/", calendar18, calendar19, strArray25, strArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 10, 47]/%2F?versionId=%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2F%5B%22content-length-range%22%2C%2058%2C%201%5D%2Fnull': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str26, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str33, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager8 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager8);
        boolean boolean10 = restS3Service4.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder13 = builder11.size(0L);
        org.joda.time.Interval interval14 = null;
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.interval(interval14);
        java.lang.String[] strArray19 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder13.metrics((java.util.List<java.lang.String>) strList20);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23, "null", credentialsProvider25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service28.renameMetadataKeys(strMap29);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service26.renameMetadataKeys(strMap29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder13.loadSpec(strMap31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service4.renameMetadataKeys(strMap31);
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder34.dimensions((java.util.List<java.lang.String>) strList37);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder44 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.metamx.druid.client.DataSegment.Builder builder49 = builder44.dimensions((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder41.metrics((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder51 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder51.dimensions((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder56.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder60 = builder58.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder61 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.metamx.druid.client.DataSegment.Builder builder66 = builder61.dimensions((java.util.List<java.lang.String>) strList64);
        com.metamx.druid.client.DataSegment.Builder builder67 = builder60.metrics((java.util.List<java.lang.String>) strList64);
        com.metamx.druid.shard.ShardSpec shardSpec68 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment70 = new com.metamx.druid.client.DataSegment("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", interval1, "", strMap31, (java.util.List<java.lang.String>) strList47, (java.util.List<java.lang.String>) strList64, shardSpec68, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper16);
        java.io.File file22 = new java.io.File("hi!");
        boolean boolean23 = file22.canRead();
        boolean boolean24 = file22.mkdirs();
        boolean boolean27 = file22.setExecutable(false, true);
        boolean boolean28 = file22.createNewFile();
        java.io.File file30 = new java.io.File(file22, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        long long31 = file22.lastModified();
        java.lang.String str32 = file22.getName();
        com.metamx.druid.client.DataSegment dataSegment33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment34 = s3SegmentPusher20.push(file22, dataSegment33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file30.toString(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1636024658000L + "'", long31 == 1636024658000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}7920271391361233970http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}" + "'", str2, "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        long long3 = file2.getUsableSpace();
        java.io.File file4 = file2.getCanonicalFile();
        java.io.File file6 = new java.io.File(file4, "s3.amazonaws.com");
        boolean boolean8 = file4.setExecutable(false);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory7 = objectMapper5.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper3.reader(jsonNodeFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray12 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper9.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper3.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper0.enable(featureArray12);
        org.codehaus.jackson.map.SerializationConfig serializationConfig16 = objectMapper15.getSerializationConfig();
        org.codehaus.jackson.map.SerializationConfig.Feature feature17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper15.configure(feature17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonNodeFactory7);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(serializationConfig16);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider5 = objectMapper2.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider5, deserializerProvider6);
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = objectMapper28.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider20, serializationConfig21, deserializationConfig31);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig41 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38, serializerProvider39, deserializerProvider40, serializationConfig41, deserializationConfig42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper43.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig45 = null;
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.codehaus.jackson.map.SerializerFactory serializerFactory53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.setSerializerFactory(serializerFactory53);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig55 = objectMapper52.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider44, serializationConfig45, deserializationConfig55);
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider13, deserializerProvider44);
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider5, deserializerProvider44);
        java.io.InputStream inputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode60 = objectMapper58.readTree(inputStream59);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(serializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(deserializationConfig31);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(deserializationConfig55);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.setSerializationInclusion(inclusion5);
        org.codehaus.jackson.node.ArrayNode arrayNode7 = objectMapper6.createArrayNode();
        org.codehaus.jackson.map.SerializationConfig.Feature feature8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.configure(feature8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(arrayNode7);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "null", credentialsProvider6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service9.renameMetadataKeys(strMap10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = restS3Service7.renameMetadataKeys(strMap10);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = org.jets3t.service.S3Service.createSignedUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", strMap10, providerCredentials13, (long) (byte) 0, true, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.util.Date date8 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray14 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str15 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray14);
        java.lang.String[] strArray20 = new java.lang.String[] { "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "[\"content-length-range\", 58, 1]" };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = org.jets3t.service.S3Service.buildPostForm("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "{\"\": \"s3.amazonaws.com\"}/hi!", providerCredentials2, date8, strArray14, strArray20, "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Nov 04 08:17:59 BRT 2021");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str15, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory4 = objectMapper2.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader(jsonNodeFactory4);
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper0.createObjectNode();
        org.codehaus.jackson.JsonGenerator jsonGenerator7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode9 = objectMapper8.createObjectNode();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.writeTree(jsonGenerator7, (org.codehaus.jackson.JsonNode) objectNode9);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(jsonNodeFactory4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectNode9);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode31 = objectMapper30.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema32 = null;
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper30.schemaBasedReader(formatSchema32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode35 = objectMapper34.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectReader objectReader37 = objectMapper34.schemaBasedReader(formatSchema36);
        byte[] byteArray39 = objectMapper34.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode40 = objectMapper30.valueToTree((java.lang.Object) 10L);
        byte[] byteArray41 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializerProvider serializerProvider42 = objectMapper0.getSerializerProvider();
        org.codehaus.jackson.map.DeserializationConfig.Feature feature43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper0.configure(feature43, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
        org.junit.Assert.assertNotNull(objectNode31);
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectNode35);
        org.junit.Assert.assertNotNull(objectReader37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(serializerProvider42);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.jets3t.service.Jets3tProperties jets3tProperties5 = restS3Service1.getJetS3tProperties();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray7 = restS3Service1.listObjects("hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(jets3tProperties5);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.delete();
        long long4 = file2.lastModified();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        java.util.Calendar calendar7 = null;
        java.util.Calendar calendar8 = null;
        java.lang.String[] strArray14 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str15 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray14);
        java.lang.String[] strArray21 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str22 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object23 = restS3Service1.getVersionedObjectDetails("x-amz-meta-", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "", calendar7, calendar8, strArray14, strArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/&versionId=x-amz-meta-': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str15, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str22, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        java.io.File file6 = new java.io.File(uRI4);
        java.io.File file8 = new java.io.File(file6, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean10 = file6.setExecutable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRI4);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageObjectsChunk storageObjectsChunk17 = restS3Service1.listObjectsChunked("http://s3.amazonaws.com//hi%21?torrent", "http://s3.amazonaws.com//?torrent", "[\"content-length-range\", -226, -226]", 10L, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        org.jets3t.service.Jets3tProperties jets3tProperties18 = restS3Service14.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "", credentialsProvider12, jets3tProperties18, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider9, jets3tProperties18);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22, "null", credentialsProvider24);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = restS3Service27.renameMetadataKeys(strMap28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service25.renameMetadataKeys(strMap28);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service21.renameMetadataKeys(strMap30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = restS3Service1.createSignedUrl("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "http://s3.amazonaws.com//?torrent", "[\"content-length-range\", -226, -226]", "[\"content-length-range\", -226, -226]", strMap30, (long) (byte) 0, true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(jets3tProperties18);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper0.reader(formatSchema6);
        java.text.DateFormat dateFormat8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper0.writer(dateFormat8);
        com.metamx.emitter.EmittingLogger emittingLogger11 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean12 = emittingLogger11.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper14.writer(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper14.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter22 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter23 = objectMapper20.writer(prettyPrinter22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper20.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray25 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper20.enable(featureArray25);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper14.disable(featureArray25);
        emittingLogger11.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray25);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper0.enable(featureArray25);
        org.codehaus.jackson.map.DeserializationConfig.Feature feature30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper29.configure(feature30, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectWriter23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper29);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        boolean boolean7 = file1.renameTo(file6);
        long long8 = file6.getUsableSpace();
        long long9 = file6.getTotalSpace();
        java.lang.String str10 = file6.getName();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 80259575808L + "'", long8 == 80259575808L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 967682662400L + "'", long9 == 967682662400L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.unsetNotificationConfig("[\"content-length-range\", -226, -226]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", -226, -226]/?notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory7 = objectMapper5.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper3.reader(jsonNodeFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray12 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper9.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper3.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper0.enable(featureArray12);
        org.codehaus.jackson.map.SerializationConfig serializationConfig16 = objectMapper15.getSerializationConfig();
        org.codehaus.jackson.JsonParser.Feature feature17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper15.configure(feature17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonNodeFactory7);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(serializationConfig16);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.lang.String str4 = file3.getName();
        java.net.URL uRL5 = file3.toURL();
        boolean boolean6 = file3.mkdir();
        java.nio.file.Path path7 = file3.toPath();
        boolean boolean8 = file3.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(path7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        org.jets3t.service.acl.AccessControlList accessControlList12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "{\"\": \"s3.amazonaws.com\"}", accessControlList12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.NotificationConfig notificationConfig21 = restS3Service19.getNotificationConfig("s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        org.jets3t.service.model.StorageBucket storageBucket23 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service21.putBucketAcl(storageBucket23);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.map.SerializerFactory serializerFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.setSerializerFactory(serializerFactory25);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper24.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5, serializerProvider9, deserializerProvider16, serializationConfig17, deserializationConfig27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider16);
        org.codehaus.jackson.JsonGenerator.Feature feature30 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = objectMapper29.isEnabled(feature30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.metamx.emitter.EmittingLogger emittingLogger0 = com.metamx.druid.loading.S3SegmentPusher.log;
        java.lang.String[] strArray8 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str9 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray8);
        java.lang.String str10 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger0.warn("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", (java.lang.Object[]) strArray8);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = 'F'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(emittingLogger0);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str9, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str10, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        boolean boolean9 = restS3Service1.isHttpsOnly();
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = restS3Service15.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager17 = null;
        restS3Service15.setHttpConnectionManager(httpConnectionManager17);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager19 = null;
        restS3Service15.setHttpConnectionManager(httpConnectionManager19);
        boolean boolean21 = restS3Service15.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder24 = builder22.size(0L);
        org.joda.time.Interval interval25 = null;
        com.metamx.druid.client.DataSegment.Builder builder26 = builder24.interval(interval25);
        java.lang.String[] strArray30 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder24.metrics((java.util.List<java.lang.String>) strList31);
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider36 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service37 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34, "null", credentialsProvider36);
        org.jets3t.service.security.ProviderCredentials providerCredentials38 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service39 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials38);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = restS3Service39.renameMetadataKeys(strMap40);
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = restS3Service37.renameMetadataKeys(strMap40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder24.loadSpec(strMap42);
        java.util.Map<java.lang.String, java.lang.Object> strMap44 = restS3Service15.renameMetadataKeys(strMap42);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = restS3Service1.createSignedUrl("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "[\"content-length-range\", 58, 1]", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", strMap42, providerCredentials45, (long) (-226), false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(providerCredentials16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        java.io.File file29 = new java.io.File("hi!");
        java.io.File file31 = new java.io.File(file29, "");
        boolean boolean32 = file31.mkdir();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        java.io.File file39 = new java.io.File("hi!");
        java.io.File file41 = new java.io.File(file39, "");
        java.lang.Class<?> wildcardClass42 = file39.getClass();
        org.codehaus.jackson.type.JavaType javaType43 = objectMapper37.constructType((java.lang.reflect.Type) wildcardClass42);
        com.metamx.emitter.EmittingLogger emittingLogger44 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass42);
        org.codehaus.jackson.type.JavaType javaType45 = objectMapper33.constructType((java.lang.reflect.Type) wildcardClass42);
        com.metamx.emitter.EmittingLogger emittingLogger46 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass42);
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger46;
        boolean boolean48 = emittingLogger46.isTraceEnabled();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.writeValue(file31, (java.lang.Object) boolean48);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (Permission denied)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "hi!");
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "hi!");
        org.junit.Assert.assertNull("file41.getParent() == null", file41.getParent());
        org.junit.Assert.assertEquals(file41.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(javaType43);
        org.junit.Assert.assertNotNull(javaType45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file3.setReadOnly();
        boolean boolean6 = file3.setWritable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        restS3Service18.setRequesterPaysEnabled(true);
        org.jets3t.service.model.StorageBucket storageBucket22 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.putBucketAcl(storageBucket22);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider5, jets3tProperties11);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", credentialsProvider2, jets3tProperties11);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object17 = restS3Service13.getVersionedObject("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder28.dimensions((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder37 = builder35.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder38 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder38.dimensions((java.util.List<java.lang.String>) strList41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder35.metrics((java.util.List<java.lang.String>) strList41);
        com.metamx.druid.client.DataSegment.Builder builder45 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder47 = builder45.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder48 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = restS3Service50.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager52 = null;
        restS3Service50.setHttpConnectionManager(httpConnectionManager52);
        java.util.List<java.lang.String> strList54 = restS3Service50.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder55 = builder48.dimensions(strList54);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder47.dimensions(strList54);
        com.metamx.druid.shard.ShardSpec shardSpec57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment59 = new com.metamx.druid.client.DataSegment("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", interval1, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", strMap27, (java.util.List<java.lang.String>) strList41, strList54, shardSpec57, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(providerCredentials51);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        java.text.DateFormat dateFormat11 = null;
        objectMapper7.setDateFormat(dateFormat11);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        org.codehaus.jackson.PrettyPrinter prettyPrinter23 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter24 = objectMapper22.prettyPrintingWriter(prettyPrinter23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        java.io.File file29 = new java.io.File("hi!");
        java.io.File file31 = new java.io.File(file29, "");
        java.lang.Class<?> wildcardClass32 = file29.getClass();
        org.codehaus.jackson.type.JavaType javaType33 = objectMapper27.constructType((java.lang.reflect.Type) wildcardClass32);
        boolean boolean34 = objectMapper22.canDeserialize(javaType33);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService35 = objectMapper7.readValue("null", javaType33);
        org.codehaus.jackson.node.ArrayNode arrayNode36 = objectMapper7.createArrayNode();
        org.codehaus.jackson.type.TypeReference typeReference37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.EmittingLogger emittingLogger38 = objectMapper6.readValue((org.codehaus.jackson.JsonNode) arrayNode36, typeReference37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectWriter24);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "hi!");
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(javaType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(restStorageService35);
        org.junit.Assert.assertNotNull(arrayNode36);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        boolean boolean8 = file4.setWritable(false);
        boolean boolean9 = file4.delete();
        org.codehaus.jackson.type.TypeReference typeReference10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.MapperConfig<org.codehaus.jackson.map.DeserializationConfig> deserializationConfigMapperConfig11 = objectMapper0.readValue(file4, typeReference10);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory22 = objectMapper20.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper18.reader(jsonNodeFactory22);
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper15.reader(jsonNodeFactory22);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher25 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        org.jets3t.service.model.NotificationConfig notificationConfig27 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setNotificationConfig("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", notificationConfig27);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build NotificationConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(jsonNodeFactory22);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(objectReader24);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        org.jets3t.service.model.S3Object s3Object5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putObjectAcl(s3Bucket4, s3Object5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList21 = restS3Service1.multipartListUploads("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]/&max-uploads=1000&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.type.TypeReference typeReference8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.codehaus.jackson.JsonNode> jsonNodeIterable9 = objectMapper6.readValue("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", typeReference8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper5.setSerializationInclusion(inclusion7);
        org.codehaus.jackson.Version version9 = objectMapper8.version();
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        java.lang.Throwable throwable2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter6 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter7 = objectMapper4.writer(prettyPrinter6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper4.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper4.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper10.writer(prettyPrinter12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray15 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper10.enable(featureArray15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper4.disable(featureArray15);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.wtf(throwable2, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", (java.lang.Object[]) featureArray15);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = '2'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectWriter7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        byte[] byteArray19 = objectMapper14.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema20 = null;
        org.codehaus.jackson.map.ObjectReader objectReader21 = objectMapper14.reader(formatSchema20);
        java.text.DateFormat dateFormat22 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter23 = objectMapper14.writer(dateFormat22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory26 = objectMapper24.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper14.setNodeFactory(jsonNodeFactory26);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper13.setNodeFactory(jsonNodeFactory26);
        org.codehaus.jackson.JsonParser jsonParser29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray33 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper30.enable(featureArray33);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider35 = null;
        objectMapper34.setFilters(filterProvider35);
        org.codehaus.jackson.JsonFactory jsonFactory37 = objectMapper34.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37);
        org.codehaus.jackson.JsonFactory jsonFactory39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider43 = objectMapper40.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory39, serializerProvider43, deserializerProvider44);
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode47 = objectMapper46.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema48 = null;
        org.codehaus.jackson.map.ObjectReader objectReader49 = objectMapper46.schemaBasedReader(formatSchema48);
        byte[] byteArray51 = objectMapper46.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray52 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper46.disable(featureArray52);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider54 = objectMapper46.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper55.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory57 = objectMapper55.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper55.enableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig59 = objectMapper58.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = objectMapper62.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper62.disableDefaultTyping();
        java.io.File file66 = new java.io.File("hi!");
        java.io.File file68 = new java.io.File(file66, "");
        java.lang.Class<?> wildcardClass69 = file66.getClass();
        org.codehaus.jackson.type.JavaType javaType70 = objectMapper64.constructType((java.lang.reflect.Type) wildcardClass69);
        com.metamx.emitter.EmittingLogger emittingLogger71 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass69);
        org.codehaus.jackson.type.JavaType javaType72 = objectMapper60.constructType((java.lang.reflect.Type) wildcardClass69);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig73 = objectMapper60.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider43, deserializerProvider54, serializationConfig59, deserializationConfig73);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode75 = objectMapper13.readTree(jsonParser29, deserializationConfig73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader21);
        org.junit.Assert.assertNotNull(objectWriter23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(jsonNodeFactory26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(serializerProvider43);
        org.junit.Assert.assertNotNull(objectNode47);
        org.junit.Assert.assertNotNull(objectReader49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(deserializerProvider54);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(jsonNodeFactory57);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(serializationConfig59);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper63);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNull("file66.getParent() == null", file66.getParent());
        org.junit.Assert.assertEquals(file66.toString(), "hi!");
        org.junit.Assert.assertNull("file68.getParent() == null", file68.getParent());
        org.junit.Assert.assertEquals(file68.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(javaType70);
        org.junit.Assert.assertNotNull(javaType72);
        org.junit.Assert.assertNotNull(deserializationConfig73);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.jets3t.service.Jets3tProperties jets3tProperties5 = restS3Service1.getJetS3tProperties();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList7 = restS3Service1.getObjectAclWithSignedUrl("{\"\": \"s3.amazonaws.com\"}/hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\"\": \"s3.amazonaws.com\"}/hi!': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(jets3tProperties5);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.setSerializationInclusion(inclusion3);
        org.codehaus.jackson.map.Module module5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.withModule(module5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper4);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.setAnnotationIntrospector(annotationIntrospector11);
        org.codehaus.jackson.JsonFactory jsonFactory13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider28, deserializerProvider29, serializationConfig30, deserializationConfig31);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = objectMapper32.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig34 = null;
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider40);
        org.codehaus.jackson.map.SerializerFactory serializerFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper41.setSerializerFactory(serializerFactory42);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig44 = objectMapper41.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider33, serializationConfig34, deserializationConfig44);
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory51 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig54 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory51, serializerProvider52, deserializerProvider53, serializationConfig54, deserializationConfig55);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider57 = objectMapper56.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig58 = null;
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.codehaus.jackson.map.SerializerFactory serializerFactory66 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = objectMapper65.setSerializerFactory(serializerFactory66);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig68 = objectMapper65.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider57, serializationConfig58, deserializationConfig68);
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider26, deserializerProvider57);
        org.codehaus.jackson.map.SerializationConfig serializationConfig71 = null;
        org.codehaus.jackson.JsonFactory jsonFactory72 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider76 = objectMapper73.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory77 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider78 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider79 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig80 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig81 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory77, serializerProvider78, deserializerProvider79, serializationConfig80, deserializationConfig81);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider83 = objectMapper82.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig84 = null;
        org.codehaus.jackson.JsonFactory jsonFactory85 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = objectMapper86.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper88 = objectMapper86.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider89 = objectMapper86.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider90 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper91 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory85, serializerProvider89, deserializerProvider90);
        org.codehaus.jackson.map.SerializerFactory serializerFactory92 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper93 = objectMapper91.setSerializerFactory(serializerFactory92);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig94 = objectMapper91.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper95 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory72, serializerProvider76, deserializerProvider83, serializationConfig84, deserializationConfig94);
        org.codehaus.jackson.map.ObjectMapper objectMapper96 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory13, serializerProvider18, deserializerProvider57, serializationConfig71, deserializationConfig94);
        org.codehaus.jackson.map.ObjectMapper objectMapper97 = objectMapper12.setSerializerProvider(serializerProvider18);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion98 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper99 = objectMapper97.setSerializationInclusion(inclusion98);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(deserializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(deserializationConfig44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(deserializerProvider57);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(objectMapper67);
        org.junit.Assert.assertNotNull(deserializationConfig68);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper75);
        org.junit.Assert.assertNotNull(serializerProvider76);
        org.junit.Assert.assertNotNull(deserializerProvider83);
        org.junit.Assert.assertNotNull(objectMapper87);
        org.junit.Assert.assertNotNull(objectMapper88);
        org.junit.Assert.assertNotNull(serializerProvider89);
        org.junit.Assert.assertNotNull(objectMapper93);
        org.junit.Assert.assertNotNull(deserializationConfig94);
        org.junit.Assert.assertNotNull(objectMapper97);
        org.junit.Assert.assertNotNull(objectMapper99);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.JsonFactory jsonFactory2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider6 = objectMapper3.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper12.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig14 = null;
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider19, deserializerProvider20);
        org.codehaus.jackson.map.SerializerFactory serializerFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.setSerializerFactory(serializerFactory22);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig24 = objectMapper21.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory2, serializerProvider6, deserializerProvider13, serializationConfig14, deserializationConfig24);
        org.codehaus.jackson.JsonFactory jsonFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider30 = objectMapper27.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory31 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig34 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory31, serializerProvider32, deserializerProvider33, serializationConfig34, deserializationConfig35);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider37 = objectMapper36.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig38 = null;
        org.codehaus.jackson.JsonFactory jsonFactory39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider43 = objectMapper40.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory39, serializerProvider43, deserializerProvider44);
        org.codehaus.jackson.map.SerializerFactory serializerFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper45.setSerializerFactory(serializerFactory46);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig48 = objectMapper45.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory26, serializerProvider30, deserializerProvider37, serializationConfig38, deserializationConfig48);
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider6, deserializerProvider37);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider6, deserializerProvider51);
        org.codehaus.jackson.map.SerializerProvider serializerProvider53 = objectMapper52.getSerializerProvider();
        org.codehaus.jackson.JsonGenerator jsonGenerator54 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper55.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper55.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider58 = objectMapper55.getSerializerProvider();
        java.text.DateFormat dateFormat59 = null;
        objectMapper55.setDateFormat(dateFormat59);
        org.codehaus.jackson.JsonFactory jsonFactory62 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider66 = objectMapper63.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider67 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory62, serializerProvider66, deserializerProvider67);
        org.codehaus.jackson.map.SerializerFactory serializerFactory69 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = objectMapper68.setSerializerFactory(serializerFactory69);
        org.codehaus.jackson.PrettyPrinter prettyPrinter71 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter72 = objectMapper70.prettyPrintingWriter(prettyPrinter71);
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = objectMapper73.disableDefaultTyping();
        java.io.File file77 = new java.io.File("hi!");
        java.io.File file79 = new java.io.File(file77, "");
        java.lang.Class<?> wildcardClass80 = file77.getClass();
        org.codehaus.jackson.type.JavaType javaType81 = objectMapper75.constructType((java.lang.reflect.Type) wildcardClass80);
        boolean boolean82 = objectMapper70.canDeserialize(javaType81);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService83 = objectMapper55.readValue("null", javaType81);
        org.codehaus.jackson.node.ArrayNode arrayNode84 = objectMapper55.createArrayNode();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper52.writeTree(jsonGenerator54, (org.codehaus.jackson.JsonNode) arrayNode84);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(serializerProvider6);
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(deserializationConfig24);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(serializerProvider30);
        org.junit.Assert.assertNotNull(deserializerProvider37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(serializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(deserializationConfig48);
        org.junit.Assert.assertNotNull(serializerProvider53);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertNotNull(serializerProvider58);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(serializerProvider66);
        org.junit.Assert.assertNotNull(objectMapper70);
        org.junit.Assert.assertNotNull(objectWriter72);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper75);
        org.junit.Assert.assertNull("file77.getParent() == null", file77.getParent());
        org.junit.Assert.assertEquals(file77.toString(), "hi!");
        org.junit.Assert.assertNull("file79.getParent() == null", file79.getParent());
        org.junit.Assert.assertEquals(file79.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(javaType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(restStorageService83);
        org.junit.Assert.assertNotNull(arrayNode84);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Object[] objArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.info("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", objArray3);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = 'F'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus4 = restS3Service1.getBucketLoggingStatus("");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to parse XML document with handler class org.jets3t.service.impl.rest.XmlResponsesSaxParser$BucketLoggingStatusHandler");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList10 = restS3Service1.getObjectAcl("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D&acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        java.lang.Object obj38 = null;
        java.lang.String str39 = objectMapper35.writeValueAsString(obj38);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper35.setSerializerProvider(serializerProvider45);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig49 = objectMapper35.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper33.setDeserializationConfig(deserializationConfig49);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher51 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig32, objectMapper50);
        restS3Service1.setRequesterPaysEnabled(true);
        org.jets3t.service.model.S3Bucket s3Bucket54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray57 = restS3Service1.listObjects(s3Bucket54, "[\"content-length-range\", -226, -226]", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null" + "'", str39, "null");
        org.junit.Assert.assertNotNull(deserializerProvider40);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(deserializationConfig49);
        org.junit.Assert.assertNotNull(objectMapper50);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        com.metamx.druid.client.DataSegment.Builder builder13 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.size(0L);
        org.joda.time.Interval interval16 = null;
        com.metamx.druid.client.DataSegment.Builder builder17 = builder15.interval(interval16);
        java.lang.String[] strArray21 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder15.metrics((java.util.List<java.lang.String>) strList22);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25, "null", credentialsProvider27);
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = restS3Service30.renameMetadataKeys(strMap31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service28.renameMetadataKeys(strMap31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder15.loadSpec(strMap33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = restS3Service1.createSignedUrl("", "{\"\": \"s3.amazonaws.com\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "", strMap33, (long) 5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "null", credentialsProvider8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service9.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = restS3Service1.renameMetadataKeys(strMap14);
        org.jets3t.service.model.MultipartUpload multipartUpload16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartCompleted multipartCompleted17 = restS3Service1.multipartCompleteUpload(multipartUpload16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        boolean boolean8 = restS3Service1.isShutdown();
        org.jets3t.service.model.StorageObject storageObject12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service1.copyObject("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "x-amz-", "http://s3.amazonaws.com//hi%21?torrent", storageObject12, true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        boolean boolean11 = restS3Service10.isAuthenticatedConnection();
        org.jets3t.service.model.S3Bucket s3Bucket12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service10.deleteBucket(s3Bucket12);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = s3SegmentPusher5.jsonMapper;
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
        org.junit.Assert.assertNull(objectMapper23);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.StringBuilder stringBuilder2 = null;
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        java.lang.Class<?> wildcardClass7 = file4.getClass();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass7);
        com.metamx.emitter.EmittingLogger emittingLogger11 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig20 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider18, deserializerProvider19, serializationConfig20, deserializationConfig21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper22.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        java.lang.Object obj27 = null;
        java.lang.String str28 = objectMapper24.writeValueAsString(obj27);
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        com.metamx.emitter.EmittingLogger emittingLogger36 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray38 = new java.lang.Object[] { objectMapper14, deserializerProvider23, objectMapper24, strList32, emittingLogger36, (byte) 1 };
        emittingLogger11.error(throwable12, "{\"\": \"s3.amazonaws.com\"}", objArray38);
        java.lang.Throwable throwable40 = null;
        java.io.File file43 = new java.io.File("hi!");
        java.io.File file45 = new java.io.File(file43, "");
        java.io.File file46 = file43.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode48 = objectMapper47.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory49 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper50.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper50.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider53 = objectMapper50.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider54 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory49, serializerProvider53, deserializerProvider54);
        org.jets3t.service.security.ProviderCredentials providerCredentials56 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service57 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials56);
        org.jets3t.service.security.ProviderCredentials providerCredentials58 = restS3Service57.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager59 = null;
        restS3Service57.setHttpConnectionManager(httpConnectionManager59);
        java.lang.Object[] objArray63 = new java.lang.Object[] { file46, objectMapper47, objectMapper55, restS3Service57, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger11.info(throwable40, "", objArray63);
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = objectMapper66.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = objectMapper66.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider69 = objectMapper66.getSerializerProvider();
        java.text.DateFormat dateFormat70 = null;
        objectMapper66.setDateFormat(dateFormat70);
        org.codehaus.jackson.node.ArrayNode arrayNode72 = objectMapper66.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder73 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder75 = builder73.size(0L);
        java.lang.Object[] objArray76 = new java.lang.Object[] { objectMapper66, builder73 };
        emittingLogger11.trace("null", objArray76);
        com.metamx.emitter.EmittingLogger emittingLogger80 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable81 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials83 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service84 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials83);
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode86 = objectMapper85.createObjectNode();
        java.lang.Object[] objArray87 = new java.lang.Object[] { providerCredentials83, objectMapper85 };
        emittingLogger80.info(throwable81, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray87);
        emittingLogger11.error("", objArray87);
        emittingLogger8.info("", objArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder91 = joiner1.appendTo(stringBuilder2, objArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "null" + "'", str28, "null");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNull("file43.getParent() == null", file43.getParent());
        org.junit.Assert.assertEquals(file43.toString(), "hi!");
        org.junit.Assert.assertNull("file45.getParent() == null", file45.getParent());
        org.junit.Assert.assertEquals(file45.toString(), "hi!");
        org.junit.Assert.assertNotNull(file46);
// flaky:         org.junit.Assert.assertEquals(file46.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file46.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode48);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(serializerProvider53);
        org.junit.Assert.assertNull(providerCredentials58);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(objectMapper67);
        org.junit.Assert.assertNotNull(objectMapper68);
        org.junit.Assert.assertNotNull(serializerProvider69);
        org.junit.Assert.assertNotNull(arrayNode72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(objectNode86);
        org.junit.Assert.assertNotNull(objArray87);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.model.S3Bucket s3Bucket15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket16 = restS3Service14.createBucket(s3Bucket15);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Create Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        java.io.File file11 = new java.io.File("hi!");
        java.io.File file13 = new java.io.File(file11, "");
        java.lang.Class<?> wildcardClass14 = file11.getClass();
        org.codehaus.jackson.type.JavaType javaType15 = objectMapper9.constructType((java.lang.reflect.Type) wildcardClass14);
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass14);
        org.codehaus.jackson.type.JavaType javaType17 = objectMapper5.constructType((java.lang.reflect.Type) wildcardClass14);
        com.metamx.emitter.EmittingLogger emittingLogger18 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass14);
        java.lang.Throwable throwable19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory23 = objectMapper21.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory28 = objectMapper26.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader29 = objectMapper24.reader(jsonNodeFactory28);
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray33 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper30.enable(featureArray33);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper24.enable(featureArray33);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper21.enable(featureArray33);
        emittingLogger18.error(throwable19, "{\"\": \"s3.amazonaws.com\"}", (java.lang.Object[]) featureArray33);
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper4.disable(featureArray33);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(javaType15);
        org.junit.Assert.assertNotNull(javaType17);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(jsonNodeFactory23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(jsonNodeFactory28);
        org.junit.Assert.assertNotNull(objectReader29);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper38);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties8);
        org.jets3t.service.model.S3Bucket s3Bucket10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service9.deleteBucket(s3Bucket10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.model.StorageObject storageObject3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap4 = restS3Service1.updateObjectMetadata("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", storageObject3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2);
        org.jets3t.service.model.NotificationConfig notificationConfig5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.setNotificationConfig("[\"content-length-range\", -226, -226]", notificationConfig5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build NotificationConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder5 = builder3.size(0L);
        org.joda.time.Interval interval6 = null;
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.interval(interval6);
        java.lang.String[] strArray11 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder5.metrics((java.util.List<java.lang.String>) strList12);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder5.loadSpec(strMap23);
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval26 = null;
        com.metamx.druid.client.DataSegment.Builder builder27 = builder25.interval(interval26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder28.dimensions((java.util.List<java.lang.String>) strList31);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder37 = builder35.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder38 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder38.dimensions((java.util.List<java.lang.String>) strList41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder37.metrics((java.util.List<java.lang.String>) strList41);
        org.joda.time.Interval interval45 = null;
        com.metamx.druid.client.DataSegment.Builder builder46 = builder37.interval(interval45);
        org.joda.time.Interval interval47 = null;
        com.metamx.druid.client.DataSegment.Builder builder48 = builder37.interval(interval47);
        com.metamx.druid.client.DataSegment.Builder builder49 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder51 = builder49.size(0L);
        org.joda.time.Interval interval52 = null;
        com.metamx.druid.client.DataSegment.Builder builder53 = builder51.interval(interval52);
        java.lang.String[] strArray57 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder51.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder48.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder25.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder63 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials64 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service65 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials64);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = restS3Service65.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager67 = null;
        restS3Service65.setHttpConnectionManager(httpConnectionManager67);
        java.util.List<java.lang.String> strList69 = restS3Service65.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder70 = builder63.dimensions(strList69);
        com.metamx.druid.shard.ShardSpec shardSpec71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment73 = new com.metamx.druid.client.DataSegment("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", interval1, "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", strMap23, (java.util.List<java.lang.String>) strList58, strList69, shardSpec71, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(providerCredentials66);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("hi!/http:/s3.amazonaws.com");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = restS3Service4.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "null", credentialsProvider11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = restS3Service14.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service12.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service4.renameMetadataKeys(strMap17);
        com.metamx.druid.client.DataSegment.Builder builder20 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder20.dimensions((java.util.List<java.lang.String>) strList23);
        java.lang.String str26 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList23);
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder27.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec35 = null;
        com.metamx.druid.client.DataSegment.Builder builder36 = builder32.shardSpec(shardSpec35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder32.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder44.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder48 = builder46.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder49 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder49.dimensions((java.util.List<java.lang.String>) strList52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder48.metrics((java.util.List<java.lang.String>) strList52);
        com.metamx.druid.client.DataSegment.Builder builder56 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder56.dimensions((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder55.metrics((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder32.metrics((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.shard.ShardSpec shardSpec64 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment66 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 58, 1]/null", interval1, "[\"content-length-range\", 58, 1]", strMap17, (java.util.List<java.lang.String>) strList23, (java.util.List<java.lang.String>) strList59, shardSpec64, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(credentialsProvider8);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str26, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList19 = restS3Service1.multipartListUploads("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/?max-uploads=1000&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        boolean boolean23 = restS3Service20.isRequesterPaysEnabled();
        s3SegmentPusher17.s3Client = restS3Service20;
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = restS3Service30.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager32 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager32);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager34 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager34);
        boolean boolean36 = restS3Service30.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder37 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder39 = builder37.size(0L);
        org.joda.time.Interval interval40 = null;
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.interval(interval40);
        java.lang.String[] strArray45 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder39.metrics((java.util.List<java.lang.String>) strList46);
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider51 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service52 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49, "null", credentialsProvider51);
        org.jets3t.service.security.ProviderCredentials providerCredentials53 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service54 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials53);
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = restS3Service54.renameMetadataKeys(strMap55);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service52.renameMetadataKeys(strMap55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder39.loadSpec(strMap57);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = restS3Service30.renameMetadataKeys(strMap57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = restS3Service20.createSignedUrl("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", strMap59, 1636024658000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(providerCredentials31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, ":", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.MultipartUpload multipartUpload20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.multipartAbortUpload(multipartUpload20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory6 = objectMapper4.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper2.reader(jsonNodeFactory6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray11 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.enable(featureArray11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper2.enable(featureArray11);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper0.enable(featureArray11);
        org.codehaus.jackson.map.DeserializationConfig.Feature feature15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = objectMapper14.isEnabled(feature15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(jsonNodeFactory6);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        java.lang.String str8 = restS3Service1.createTorrentUrl("s3.amazonaws.com", "");
        org.jets3t.service.model.MultipartUpload multipartUpload9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.multipartAbortUpload(multipartUpload9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str8, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        org.jets3t.service.model.S3Object s3Object13 = null;
        java.util.Calendar calendar15 = null;
        java.util.Calendar calendar16 = null;
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!/http:/s3.amazonaws.com", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "" };
        java.lang.String[] strArray27 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap29 = restS3Service1.copyVersionedObject("{\"\": \"s3.amazonaws.com\"}", "s3.amazonaws.com", "http://s3.amazonaws.com//hi%21?torrent", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", s3Object13, true, calendar15, calendar16, strArray21, strArray27);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str28, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object5 = restS3Service1.getObject("[\"content-length-range\", -226, -226]", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", -226, -226]/%7B%22%7B%22%5B%22content-length-range%22%2C%20-226%2C%20-226%5D%22%3A%20%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%2Fhi%21%22%7D%22%3A%20%22x-amz-meta-%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory7 = objectMapper5.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper3.reader(jsonNodeFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray12 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper9.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper3.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper0.enable(featureArray12);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = objectMapper0.getDeserializationConfig();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonNodeFactory7);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(deserializationConfig16);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.io.File file2 = java.io.File.createTempFile("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"content-length-range\", 10, 47]");
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}7606965003512039963[\"content-length-range\", 10, 47]");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager4);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList7 = restS3Service1.getObjectAclWithSignedUrl("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus21 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.setBucketLoggingStatus("", s3BucketLoggingStatus21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.size(0L);
        org.joda.time.Interval interval3 = null;
        com.metamx.druid.client.DataSegment.Builder builder4 = builder2.interval(interval3);
        java.lang.String[] strArray8 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.metamx.druid.client.DataSegment.Builder builder11 = builder2.metrics((java.util.List<java.lang.String>) strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "null", credentialsProvider14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = restS3Service17.renameMetadataKeys(strMap18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = restS3Service15.renameMetadataKeys(strMap18);
        com.metamx.druid.client.DataSegment.Builder builder21 = builder2.loadSpec(strMap20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.size(0L);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment24 = builder23.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: dataSource");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger2 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode8 = objectMapper7.createObjectNode();
        java.lang.Object[] objArray9 = new java.lang.Object[] { providerCredentials5, objectMapper7 };
        emittingLogger2.info(throwable3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        com.metamx.emitter.EmittingLogger emittingLogger21 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider28, deserializerProvider29, serializationConfig30, deserializationConfig31);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = objectMapper32.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        java.lang.Object obj37 = null;
        java.lang.String str38 = objectMapper34.writeValueAsString(obj37);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.emitter.EmittingLogger emittingLogger46 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray48 = new java.lang.Object[] { objectMapper24, deserializerProvider33, objectMapper34, strList42, emittingLogger46, (byte) 1 };
        emittingLogger21.error(throwable22, "{\"\": \"s3.amazonaws.com\"}", objArray48);
        java.lang.Throwable throwable50 = null;
        java.io.File file53 = new java.io.File("hi!");
        java.io.File file55 = new java.io.File(file53, "");
        java.io.File file56 = file53.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode58 = objectMapper57.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service67 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66);
        org.jets3t.service.security.ProviderCredentials providerCredentials68 = restS3Service67.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager69 = null;
        restS3Service67.setHttpConnectionManager(httpConnectionManager69);
        java.lang.Object[] objArray73 = new java.lang.Object[] { file56, objectMapper57, objectMapper65, restS3Service67, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger21.info(throwable50, "", objArray73);
        java.lang.String str75 = joiner0.join((java.lang.Object) emittingLogger2, (java.lang.Object) javaType19, objArray73);
        com.google.common.base.Joiner joiner77 = joiner0.useForNull("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.base.Joiner joiner78 = joiner77.skipNulls();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: already specified useForNull");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(objectNode8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "null" + "'", str38, "null");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNull("file53.getParent() == null", file53.getParent());
        org.junit.Assert.assertEquals(file53.toString(), "hi!");
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "hi!");
        org.junit.Assert.assertNotNull(file56);
// flaky:         org.junit.Assert.assertEquals(file56.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode58);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNull(providerCredentials68);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(joiner77);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = restS3Service17.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager19 = null;
        restS3Service17.setHttpConnectionManager(httpConnectionManager19);
        java.util.Date date21 = restS3Service17.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = restS3Service1.createSignedGetUrl("[\"content-length-range\", 58, 1]", "", date21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(providerCredentials18);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Nov 04 08:18:08 BRT 2021");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.interval(interval1);
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.metamx.druid.client.DataSegment.Builder builder8 = builder3.dimensions((java.util.List<java.lang.String>) strList6);
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder8.shardSpec(shardSpec11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder8.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder15.dimensions((java.util.List<java.lang.String>) strList18);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder20.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder24 = builder22.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder24.metrics((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder32 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder32.dimensions((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder31.metrics((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder8.metrics((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder40 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder40.dimensions((java.util.List<java.lang.String>) strList43);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder45.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder49 = builder47.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder50 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder50.dimensions((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder49.metrics((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder8.dimensions((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder0.metrics((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder59 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder61 = builder59.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder62 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials63 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service64 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials63);
        org.jets3t.service.security.ProviderCredentials providerCredentials65 = restS3Service64.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager66 = null;
        restS3Service64.setHttpConnectionManager(httpConnectionManager66);
        java.util.List<java.lang.String> strList68 = restS3Service64.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder69 = builder62.dimensions(strList68);
        com.metamx.druid.client.DataSegment.Builder builder70 = builder61.dimensions(strList68);
        com.metamx.druid.client.DataSegment.Builder builder71 = builder0.metrics(strList68);
        com.metamx.druid.client.DataSegment.Builder builder73 = builder71.dataSource("[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(providerCredentials65);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        java.lang.Object obj26 = null;
        java.lang.String str27 = objectMapper23.writeValueAsString(obj26);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = objectMapper23.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper23.setSerializerProvider(serializerProvider33);
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider38 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig40 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider38, deserializerProvider39, serializationConfig40, deserializationConfig41);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider43 = objectMapper42.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper36.setDeserializerProvider(deserializerProvider43);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher45 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig22, objectMapper36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = restS3Service1.createUnsignedObjectUrl("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "hi!", false, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "null" + "'", str27, "null");
        org.junit.Assert.assertNotNull(deserializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper44);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager27);
        java.lang.String str31 = restS3Service23.createTorrentUrl("", "hi!");
        boolean boolean33 = restS3Service23.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date34 = restS3Service23.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = restS3Service18.createSignedHeadUrl("x-amz-meta-", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", providerCredentials21, date34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str31, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Thu Nov 04 08:18:09 BRT 2021");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.lang.String str4 = file3.getName();
        java.net.URL uRL5 = file3.toURL();
        boolean boolean6 = file3.mkdir();
        boolean boolean7 = file3.createNewFile();
        boolean boolean8 = file3.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.JsonParser.Feature feature5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper4.configure(feature5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.util.Date date8 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray15 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str16 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray15);
        java.lang.String str17 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray15);
        java.lang.String[] strArray24 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray24);
        java.lang.String str26 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = org.jets3t.service.S3Service.buildPostForm("{\"\": \"s3.amazonaws.com\"}/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", providerCredentials2, date8, strArray15, strArray24, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Nov 04 08:18:10 BRT 2021");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str16, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str17, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str25, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str26, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        boolean boolean11 = restS3Service8.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service8.getProviderCredentials();
        java.lang.String str15 = restS3Service8.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean16 = restS3Service8.isShutdown();
        java.util.Date date17 = restS3Service8.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service1.createSignedDeleteUrl("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 58, 1]", date17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str15, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:18:10 BRT 2021");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = s3SegmentPusher8.jsonMapper;
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(objectMapper9);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.metamx.druid.client.DataSegment.delimiter = "x-amz-";
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient6 = restS3Service1.getHttpClient();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig7 = null;
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher10 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig7, objectMapper9);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketPolicy("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "[\"content-length-range\", -226, -226]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient6);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.io.File file2 = new java.io.File("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
        org.junit.Assert.assertEquals(file2.getParent(), "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder28.dimensions((java.util.List<java.lang.String>) strList31);
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = restS3Service35.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager37 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager37);
        java.util.List<java.lang.String> strList39 = restS3Service35.getResourceParameterNames();
        com.metamx.druid.shard.ShardSpec shardSpec40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment42 = new com.metamx.druid.client.DataSegment("/", interval1, "[\"content-length-range\", 10, 47]", strMap26, (java.util.List<java.lang.String>) strList31, strList39, shardSpec40, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(providerCredentials36);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        java.lang.String str6 = restS3Service4.getInvokingApplicationDescription();
        java.lang.String str9 = restS3Service4.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service4.renameMetadataKeys(strMap13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager18 = null;
        restS3Service16.setHttpConnectionManager(httpConnectionManager18);
        java.util.List<java.lang.String> strList20 = restS3Service16.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder21 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder21.dimensions((java.util.List<java.lang.String>) strList24);
        com.metamx.druid.shard.ShardSpec shardSpec27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment29 = new com.metamx.druid.client.DataSegment(":", interval1, "x-amz-meta-", strMap14, strList20, (java.util.List<java.lang.String>) strList24, shardSpec27, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.joda.time.DateTime dateTime1 = null;
        org.joda.time.DateTime dateTime2 = null;
        com.metamx.druid.shard.ShardSpec shardSpec4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = com.metamx.druid.client.DataSegment.makeDataSegmentIdentifier("[\"content-length-range\", 58, 1]/null", dateTime1, dateTime2, "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", shardSpec4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObject("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/s3.amazonaws.com?versionId=%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "null", credentialsProvider2);
        java.lang.String str4 = restS3Service3.getRestHeaderPrefix();
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray9 = restS3Service3.listObjects(s3Bucket5, "x-amz-", "[\"content-length-range\", 58, 1]/null", (long) 'a');
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-" + "'", str4, "x-amz-");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        java.util.Date date13 = restS3Service9.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = restS3Service1.createSignedGetUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", date13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 04 08:18:12 BRT 2021");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory32 = objectMapper30.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper28.reader(jsonNodeFactory32);
        org.codehaus.jackson.node.ObjectNode objectNode34 = objectMapper28.createObjectNode();
        org.codehaus.jackson.type.TypeReference typeReference35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.String> strCollection36 = objectMapper27.readValue((org.codehaus.jackson.JsonNode) objectNode34, typeReference35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(jsonNodeFactory32);
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectNode34);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory4 = objectMapper2.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader(jsonNodeFactory4);
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray9 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enable(featureArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper0.enable(featureArray9);
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper11.writer(prettyPrinter12);
        org.codehaus.jackson.map.jsontype.NamedType[] namedTypeArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectMapper11.registerSubtypes(namedTypeArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(jsonNodeFactory4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2, jets3tProperties11);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList14 = restS3Service12.getObjectAclWithSignedUrl("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]': incorrect path");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket6 = restS3Service1.createBucket("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        int int7 = restS3Service1.getInternalErrorRetryMax();
        com.metamx.druid.client.DataSegment.Builder builder12 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder14 = builder12.size(0L);
        org.joda.time.Interval interval15 = null;
        com.metamx.druid.client.DataSegment.Builder builder16 = builder14.interval(interval15);
        java.lang.String[] strArray20 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder14.metrics((java.util.List<java.lang.String>) strList21);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24, "null", credentialsProvider26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service29.renameMetadataKeys(strMap30);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = restS3Service27.renameMetadataKeys(strMap30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder14.loadSpec(strMap32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = restS3Service1.createSignedUrl("/", "{\"\": \"s3.amazonaws.com\"}/hi!", "hi!", "", strMap32, (long) 11, false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema7 = null;
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper5.schemaBasedReader(formatSchema7);
        byte[] byteArray10 = objectMapper5.writeValueAsBytes((java.lang.Object) 10L);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher11 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig4, objectMapper5);
        java.io.File file13 = new java.io.File("hi!");
        boolean boolean14 = file13.mkdirs();
        boolean boolean17 = file13.setExecutable(false, false);
        com.metamx.druid.client.DataSegment dataSegment18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment19 = s3SegmentPusher11.push(file13, dataSegment18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, 48]");
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(joiner1);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.lang.String str1 = org.jets3t.service.S3Service.generatePostPolicyCondition_AllowAnyValue("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]" + "'", str1, "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean5 = file1.setExecutable(true, true);
        long long6 = file1.getUsableSpace();
        boolean boolean7 = file1.mkdir();
        boolean boolean8 = file1.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 80259571712L + "'", long6 == 80259571712L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties8);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        java.util.Date date17 = restS3Service13.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service9.createSignedDeleteUrl("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "s3.amazonaws.com", date17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:18:12 BRT 2021");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory22 = objectMapper20.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper18.reader(jsonNodeFactory22);
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper15.reader(jsonNodeFactory22);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher25 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        org.jets3t.service.model.StorageBucket storageBucket26 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl(storageBucket26);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(jsonNodeFactory22);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(objectReader24);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/form%3E?torrent6723591159990658532[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode7 = objectMapper6.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper6.schemaBasedReader(formatSchema8);
        byte[] byteArray11 = objectMapper6.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper6.reader(formatSchema12);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher14 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper6);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setRequesterPaysBucket("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}/?requestPayment': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objectNode7);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader13);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        java.lang.String str8 = restS3Service1.getEndpoint();
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service12.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager14 = null;
        restS3Service12.setHttpConnectionManager(httpConnectionManager14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service12.setHttpConnectionManager(httpConnectionManager16);
        boolean boolean18 = restS3Service12.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder19 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder21 = builder19.size(0L);
        org.joda.time.Interval interval22 = null;
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.interval(interval22);
        java.lang.String[] strArray27 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder21.metrics((java.util.List<java.lang.String>) strList28);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials31, "null", credentialsProvider33);
        org.jets3t.service.security.ProviderCredentials providerCredentials35 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service36 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials35);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = restS3Service36.renameMetadataKeys(strMap37);
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = restS3Service34.renameMetadataKeys(strMap37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder21.loadSpec(strMap39);
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = restS3Service12.renameMetadataKeys(strMap39);
        org.jets3t.service.acl.AccessControlList accessControlList42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload44 = restS3Service1.multipartStartUpload("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", strMap39, accessControlList42, "[\"content-length-range\", 58, 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/%5B%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.lang.String str1 = org.jets3t.service.S3Service.generatePostPolicyCondition_AllowAnyValue("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]" + "'", str1, "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        boolean boolean23 = restS3Service20.isRequesterPaysEnabled();
        s3SegmentPusher17.s3Client = restS3Service20;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray28 = restS3Service20.listObjects("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}\", \"\"]/?max-keys=1000&prefix=%5B%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D&delimiter': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.lang.String str8 = restS3Service4.getEndpoint();
        java.lang.String str11 = restS3Service4.createTorrentUrl("", "");
        java.lang.String str12 = restS3Service4.getRestMetadataPrefix();
        java.util.Date date13 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray19 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str20 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray27);
        java.lang.String str29 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = org.jets3t.service.S3Service.buildPostForm("", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", providerCredentials2, date13, strArray19, strArray27, "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str11, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "x-amz-meta-" + "'", str12, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 04 08:18:13 BRT 2021");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str20, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str28, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str29, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        long long4 = file3.getFreeSpace();
        java.io.File file6 = new java.io.File(file3, "http://s3.amazonaws.com//hi%21?torrent");
        com.metamx.emitter.EmittingLogger emittingLogger7 = com.metamx.druid.loading.S3SegmentPusher.log;
        boolean boolean8 = file3.equals((java.lang.Object) emittingLogger7);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file6.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertNotNull(emittingLogger7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper6.writer(prettyPrinter8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema11 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter12 = objectMapper10.schemaBasedWriter(formatSchema11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.setPropertyNamingStrategy(propertyNamingStrategy13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper14);
        org.jets3t.service.model.S3Object s3Object17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object18 = restS3Service1.putObjectWithSignedUrl("hi!", s3Object17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectWriter12);
        org.junit.Assert.assertNotNull(objectMapper14);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.NotificationConfig notificationConfig10 = restS3Service1.getNotificationConfig("[\"content-length-range\", 10, 47]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 10, 47]/?notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.JsonParser.Feature feature13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper8.configure(feature13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.io.File file2 = new java.io.File(":", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        boolean boolean3 = file2.isDirectory();
        org.junit.Assert.assertEquals(file2.getParent(), ":/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), ":/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        boolean boolean11 = restS3Service10.isAuthenticatedConnection();
        org.jets3t.service.acl.AccessControlList accessControlList13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service10.putObjectAclWithSignedUrl("x-amz-meta-", accessControlList13);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        boolean boolean24 = restS3Service21.isBucketAccessible("");
        java.lang.String str25 = restS3Service21.getRestMetadataPrefix();
        boolean boolean26 = restS3Service21.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = restS3Service21.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager27);
        org.jets3t.service.model.S3Bucket s3Bucket30 = null;
        java.util.Calendar calendar32 = null;
        java.util.Calendar calendar33 = null;
        java.lang.String[] strArray36 = new java.lang.String[] { "[\"content-length-range\", 58, 1]", "x-amz-" };
        java.lang.String[] strArray43 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str44 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray43);
        java.lang.String str45 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object48 = restS3Service1.getVersionedObject("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", s3Bucket30, "s3.amazonaws.com", calendar32, calendar33, strArray36, strArray43, (java.lang.Long) 967682662400L, (java.lang.Long) 967682662400L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Versioned Object cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "x-amz-meta-" + "'", str25, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str44, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str45, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializationConfig(serializationConfig15);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.jets3t.service.model.S3Bucket s3Bucket18 = null;
        java.util.Calendar calendar20 = null;
        java.util.Calendar calendar21 = null;
        java.lang.String[] strArray22 = null;
        java.lang.String[] strArray29 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str30 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray29);
        java.lang.String str31 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object34 = restS3Service1.getObject(s3Bucket18, "{\"\": \"s3.amazonaws.com\"}/hi!", calendar20, calendar21, strArray22, strArray29, (java.lang.Long) 0L, (java.lang.Long) 80259571712L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Object cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str30, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str31, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray13 = restS3Service1.listObjects("[\"content-length-range\", 58, 1]", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/?max-keys=1000&prefix=%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D&delimiter=http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.jets3t.service.Jets3tProperties jets3tProperties5 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.model.S3Bucket s3Bucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray7 = restS3Service1.listObjects(s3Bucket6);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(jets3tProperties5);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.model.S3Object s3Object17 = null;
        java.util.Calendar calendar19 = null;
        java.util.Calendar calendar20 = null;
        java.lang.String[] strArray25 = new java.lang.String[] { "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" };
        java.lang.String[] strArray28 = new java.lang.String[] { "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap29 = restS3Service12.copyVersionedObject("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "", "{\"\": \"s3.amazonaws.com\"}/hi!", s3Object17, true, calendar19, calendar20, strArray25, strArray28);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        java.lang.String str6 = file2.getCanonicalPath();
        java.lang.String str7 = file2.getPath();
        boolean boolean8 = file2.mkdirs();
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null" + "'", str6, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[\"content-length-range\", 58, 1]/null" + "'", str7, "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.io.File file2 = new java.io.File("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertEquals(file2.getParent(), "<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), "<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        java.lang.String str6 = restS3Service4.getInvokingApplicationDescription();
        java.lang.String str9 = restS3Service4.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service4.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder15.dimensions((java.util.List<java.lang.String>) strList18);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder20.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder24 = builder22.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder22.metrics((java.util.List<java.lang.String>) strList28);
        java.util.List<java.lang.String> strList32 = null;
        com.metamx.druid.shard.ShardSpec shardSpec33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment35 = new com.metamx.druid.client.DataSegment("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", interval1, "s3.amazonaws.com", strMap13, (java.util.List<java.lang.String>) strList28, strList32, shardSpec33, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        java.lang.String str6 = restS3Service4.getInvokingApplicationDescription();
        java.lang.String str9 = restS3Service4.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service4.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder15.dimensions((java.util.List<java.lang.String>) strList18);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder20.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder24 = builder22.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder24.metrics((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder32 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder32.dimensions((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder31.metrics((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.size(0L);
        org.joda.time.Interval interval42 = null;
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.interval(interval42);
        java.lang.String[] strArray47 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder41.metrics((java.util.List<java.lang.String>) strList48);
        com.metamx.druid.shard.ShardSpec shardSpec51 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment53 = new com.metamx.druid.client.DataSegment("s3.amazonaws.com", interval1, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap13, (java.util.List<java.lang.String>) strList35, (java.util.List<java.lang.String>) strList48, shardSpec51, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.disableDefaultTyping();
        java.text.DateFormat dateFormat7 = null;
        objectMapper6.setDateFormat(dateFormat7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory23 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider24 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider25 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig26 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory23, serializerProvider24, deserializerProvider25, serializationConfig26, deserializationConfig27);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = objectMapper28.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.JsonFactory jsonFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider35 = objectMapper32.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory31, serializerProvider35, deserializerProvider36);
        org.codehaus.jackson.map.SerializerFactory serializerFactory38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper37.setSerializerFactory(serializerFactory38);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig40 = objectMapper37.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider29, serializationConfig30, deserializationConfig40);
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory47 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider48 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider49 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig50 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory47, serializerProvider48, deserializerProvider49, serializationConfig50, deserializationConfig51);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = objectMapper52.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig54 = null;
        org.codehaus.jackson.JsonFactory jsonFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper56.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper56.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider59 = objectMapper56.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory55, serializerProvider59, deserializerProvider60);
        org.codehaus.jackson.map.SerializerFactory serializerFactory62 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = objectMapper61.setSerializerFactory(serializerFactory62);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig64 = objectMapper61.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider53, serializationConfig54, deserializationConfig64);
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider22, deserializerProvider53);
        org.codehaus.jackson.map.SerializationConfig serializationConfig67 = null;
        org.codehaus.jackson.JsonFactory jsonFactory68 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = objectMapper69.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = objectMapper69.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider72 = objectMapper69.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory73 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider74 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider75 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig76 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig77 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory73, serializerProvider74, deserializerProvider75, serializationConfig76, deserializationConfig77);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider79 = objectMapper78.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig80 = null;
        org.codehaus.jackson.JsonFactory jsonFactory81 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = objectMapper82.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper84 = objectMapper82.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider85 = objectMapper82.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider86 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory81, serializerProvider85, deserializerProvider86);
        org.codehaus.jackson.map.SerializerFactory serializerFactory88 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper89 = objectMapper87.setSerializerFactory(serializerFactory88);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig90 = objectMapper87.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper91 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory68, serializerProvider72, deserializerProvider79, serializationConfig80, deserializationConfig90);
        org.codehaus.jackson.map.ObjectMapper objectMapper92 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider14, deserializerProvider53, serializationConfig67, deserializationConfig90);
        org.codehaus.jackson.map.ObjectMapper objectMapper93 = objectMapper6.setDeserializerProvider(deserializerProvider53);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(deserializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(serializerProvider35);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(deserializationConfig40);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNotNull(deserializerProvider53);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(serializerProvider59);
        org.junit.Assert.assertNotNull(objectMapper63);
        org.junit.Assert.assertNotNull(deserializationConfig64);
        org.junit.Assert.assertNotNull(objectMapper70);
        org.junit.Assert.assertNotNull(objectMapper71);
        org.junit.Assert.assertNotNull(serializerProvider72);
        org.junit.Assert.assertNotNull(deserializerProvider79);
        org.junit.Assert.assertNotNull(objectMapper83);
        org.junit.Assert.assertNotNull(objectMapper84);
        org.junit.Assert.assertNotNull(serializerProvider85);
        org.junit.Assert.assertNotNull(objectMapper89);
        org.junit.Assert.assertNotNull(deserializationConfig90);
        org.junit.Assert.assertNotNull(objectMapper93);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList8 = restS3Service1.getObjectAclWithSignedUrl("null");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.IllegalArgumentException: host parameter is null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager14 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager14);
        boolean boolean16 = restS3Service10.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder17 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder19 = builder17.size(0L);
        org.joda.time.Interval interval20 = null;
        com.metamx.druid.client.DataSegment.Builder builder21 = builder19.interval(interval20);
        java.lang.String[] strArray25 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.metamx.druid.client.DataSegment.Builder builder28 = builder19.metrics((java.util.List<java.lang.String>) strList26);
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider31 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service32 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29, "null", credentialsProvider31);
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = restS3Service34.renameMetadataKeys(strMap35);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = restS3Service32.renameMetadataKeys(strMap35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder19.loadSpec(strMap37);
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = restS3Service10.renameMetadataKeys(strMap37);
        org.jets3t.service.security.ProviderCredentials providerCredentials40 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = restS3Service42.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager44 = null;
        restS3Service42.setHttpConnectionManager(httpConnectionManager44);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager46 = null;
        restS3Service42.setHttpConnectionManager(httpConnectionManager46);
        java.lang.String str50 = restS3Service42.createTorrentUrl("", "hi!");
        boolean boolean52 = restS3Service42.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date53 = restS3Service42.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = restS3Service1.createSignedPutUrl("", "{\"\": \"s3.amazonaws.com\"}", strMap39, providerCredentials40, date53, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(providerCredentials43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str50, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Thu Nov 04 08:18:16 BRT 2021");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.setReadOnly();
        java.io.File file6 = new java.io.File(file1, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        boolean boolean8 = file1.setExecutable(true);
        java.io.File file10 = new java.io.File("hi!");
        boolean boolean11 = file10.canRead();
        boolean boolean12 = file10.mkdirs();
        boolean boolean15 = file10.setExecutable(false, true);
        int int16 = file1.compareTo(file10);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file6.toString(), "hi!/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = objectMapper8.canDeserialize(javaType19);
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = objectMapper8.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping22 = null;
        org.codehaus.jackson.annotate.JsonTypeInfo.As as23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper8.enableDefaultTyping(defaultTyping22, as23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: includeAs can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(serializationConfig21);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient6 = restS3Service1.getHttpClient();
        com.metamx.druid.client.DataSegment.Builder builder11 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        java.util.List<java.lang.String> strList17 = restS3Service13.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder18 = builder11.dimensions(strList17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder11.loadSpec(strMap22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = restS3Service1.createSignedUrl("[\"content-length-range\", 10, 47]", "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "hi!/http:/s3.amazonaws.com", strMap22, providerCredentials24, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.model.S3Bucket s3Bucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList8 = restS3Service1.getObjectAcl(s3Bucket6, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        restS3Service3.setRequesterPaysEnabled(false);
        org.jets3t.service.model.MultipartUpload multipartUpload6 = null;
        org.jets3t.service.model.MultipartPart[] multipartPartArray7 = new org.jets3t.service.model.MultipartPart[] {};
        java.util.ArrayList<org.jets3t.service.model.MultipartPart> multipartPartList8 = new java.util.ArrayList<org.jets3t.service.model.MultipartPart>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jets3t.service.model.MultipartPart>) multipartPartList8, multipartPartArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartCompleted multipartCompleted10 = restS3Service3.multipartCompleteUpload(multipartUpload6, (java.util.List<org.jets3t.service.model.MultipartPart>) multipartPartList8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(multipartPartArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        boolean boolean8 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket11 = restS3Service1.createBucket("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode5 = objectMapper4.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper4.schemaBasedReader(formatSchema6);
        byte[] byteArray9 = objectMapper4.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode10 = objectMapper0.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.type.TypeReference typeReference12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.Version version13 = objectMapper0.readValue("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", typeReference12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectNode5);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode10);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        restS3Service3.setRequesterPaysEnabled(false);
        org.jets3t.service.model.StorageObject storageObject9 = null;
        java.util.Calendar calendar11 = null;
        java.util.Calendar calendar12 = null;
        java.lang.String[] strArray14 = new java.lang.String[] {};
        java.lang.String str15 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray14);
        java.lang.String[] strArray22 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray22);
        java.lang.String str24 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service3.copyObject("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", storageObject9, false, calendar11, calendar12, strArray14, strArray22);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\"\": \"\"}" + "'", str15, "{\"\": \"\"}");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str23, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str24, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object6 = restS3Service1.getObjectWithSignedUrl("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        int int18 = restS3Service1.getInternalErrorRetryMax();
        boolean boolean19 = restS3Service1.isShutdown();
        org.jets3t.service.model.StorageObject storageObject22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service1.renameObject("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "http://s3.amazonaws.com//hi%21?torrent", storageObject22);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date12 = restS3Service1.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket("{\"\": \"s3.amazonaws.com\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 04 08:18:19 BRT 2021");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.NotificationConfig notificationConfig24 = restS3Service21.getNotificationConfig("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/?notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getEndpoint();
        org.jets3t.service.model.StorageObject storageObject7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap8 = restS3Service1.renameObject("[\"content-length-range\", 58, 1]", "", storageObject7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "s3.amazonaws.com" + "'", str4, "s3.amazonaws.com");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper4.schemaBasedWriter(formatSchema5);
        org.codehaus.jackson.PrettyPrinter prettyPrinter7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper4.writer(prettyPrinter7);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = objectMapper4.getDeserializerProvider();
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper4.setSerializerFactory(serializerFactory10);
        java.io.File file13 = new java.io.File("hi!");
        java.io.File file15 = new java.io.File(file13, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file17 = new java.io.File(file15, "");
        file17.deleteOnExit();
        boolean boolean19 = file17.mkdirs();
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode20 = objectMapper4.readTree(file17);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form> (Not a directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(deserializerProvider9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "hi!");
        org.junit.Assert.assertEquals(file15.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file15.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file17.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file17.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        java.util.Calendar calendar15 = null;
        java.util.Calendar calendar16 = null;
        java.lang.String[] strArray23 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str24 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray23);
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "null", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject30 = restS3Service1.getObjectDetails("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", calendar15, calendar16, strArray23, strArray29);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str24, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str25, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray29);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper5.writer(prettyPrinter12);
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.String str18 = file17.getName();
        java.net.URL uRL19 = file17.toURL();
        org.codehaus.jackson.type.TypeReference typeReference20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file21 = null; // flaky: objectMapper5.readValue(uRL19, typeReference20);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectWriter11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(uRL19);
// flaky:         org.junit.Assert.assertEquals(uRL19.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service24.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig31 = null;
        org.codehaus.jackson.JsonFactory jsonFactory32 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig35 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider33, deserializerProvider34, serializationConfig35, deserializationConfig36);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service24, s3SegmentPusherConfig31, objectMapper37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = restS3Service24.getHttpConnectionManager();
        java.lang.String str42 = restS3Service24.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = restS3Service44.getProviderCredentials();
        boolean boolean47 = restS3Service44.isBucketAccessible("");
        java.lang.String str48 = restS3Service44.getRestMetadataPrefix();
        boolean boolean49 = restS3Service44.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager50 = restS3Service44.getHttpConnectionManager();
        restS3Service24.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setRequesterPaysEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.disableMFAForVersionedBucket("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "[\"content-length-range\", -226, -226]", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "x-amz-meta-" + "'", str30, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str42, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "x-amz-meta-" + "'", str48, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager50);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        boolean boolean4 = file1.setReadable(false, false);
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper4.reader();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectReader5);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.String str1 = org.jets3t.service.S3Service.generatePostPolicyCondition_AllowAnyValue("s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]" + "'", str1, "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service4.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient10 = null;
        restS3Service4.setHttpClient(httpClient10);
        org.jets3t.service.Jets3tProperties jets3tProperties12 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", credentialsProvider2, jets3tProperties12, hostConfiguration13);
        restS3Service14.setDevPayUserToken(":");
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jets3tProperties12);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider5, jets3tProperties11);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider2, jets3tProperties11, hostConfiguration13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object16 = restS3Service14.getObjectDetailsWithSignedUrl("hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.lang.String str8 = restS3Service4.getEndpoint();
        java.lang.String str9 = restS3Service4.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider10 = null;
        restS3Service4.setCredentialsProvider(credentialsProvider10);
        restS3Service4.setDevPayProductToken("{\"\": \"s3.amazonaws.com\"}");
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties14, hostConfiguration15);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "s3.amazonaws.com" + "'", str9, "s3.amazonaws.com");
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date12 = restS3Service1.getCurrentTimeWithOffset();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        byte[] byteArray19 = objectMapper14.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray20 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper14.disable(featureArray20);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = objectMapper14.getDeserializerProvider();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper14);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 04 08:18:20 BRT 2021");
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(deserializerProvider22);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.model.StorageBucket storageBucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageBucket storageBucket7 = restS3Service3.createBucket(storageBucket6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.io.File file1 = new java.io.File("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        java.net.URI uRI2 = file1.toURI();
        boolean boolean3 = file1.exists();
        org.junit.Assert.assertEquals(file1.getParent(), "{\"http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(uRI2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient6 = restS3Service1.getHttpClient();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig7 = null;
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher10 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig7, objectMapper9);
        org.jets3t.service.acl.AccessControlList accessControlList14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("{\"\": \"\"}", "", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", accessControlList14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient6);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.SerializationConfig serializationConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.setSerializationConfig(serializationConfig6);
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper9.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider12, deserializerProvider13);
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider19, deserializerProvider20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode23 = objectMapper22.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema24 = null;
        org.codehaus.jackson.map.ObjectReader objectReader25 = objectMapper22.schemaBasedReader(formatSchema24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode27 = objectMapper26.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema28 = null;
        org.codehaus.jackson.map.ObjectReader objectReader29 = objectMapper26.schemaBasedReader(formatSchema28);
        byte[] byteArray31 = objectMapper26.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode32 = objectMapper22.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser33 = objectMapper21.treeAsTokens(jsonNode32);
        org.codehaus.jackson.JsonNode jsonNode34 = objectMapper14.readTree(jsonParser33);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode35 = objectMapper7.readTree(jsonParser33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializerProvider19);
        org.junit.Assert.assertNotNull(objectNode23);
        org.junit.Assert.assertNotNull(objectReader25);
        org.junit.Assert.assertNotNull(objectNode27);
        org.junit.Assert.assertNotNull(objectReader29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode32);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonNode34);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject6 = restS3Service3.getObjectDetails(":", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.HandlerInstantiator handlerInstantiator30 = null;
        objectMapper0.setHandlerInstantiator(handlerInstantiator30);
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode33 = objectMapper0.readTree(inputStream32);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.HandlerInstantiator handlerInstantiator30 = null;
        objectMapper0.setHandlerInstantiator(handlerInstantiator30);
        java.io.Reader reader32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode33 = objectMapper0.readTree(reader32);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.interval(interval1);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment3 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: dataSource");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.lang.String str3 = org.jets3t.service.S3Service.generatePostPolicyCondition("[\"content-length-range\", 10, 47]", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]" + "'", str3, "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        java.lang.String str6 = file2.getCanonicalPath();
        long long7 = file2.getTotalSpace();
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null" + "'", str6, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 967682662400L + "'", long7 == 967682662400L);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper6.writer(prettyPrinter8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema11 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter12 = objectMapper10.schemaBasedWriter(formatSchema11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.setPropertyNamingStrategy(propertyNamingStrategy13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper14);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object19 = restS3Service1.getVersionedObjectDetails("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", "http://s3.amazonaws.com//?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent?versionId=%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectWriter12);
        org.junit.Assert.assertNotNull(objectMapper14);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory4 = objectMapper2.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader(jsonNodeFactory4);
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray9 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enable(featureArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper0.enable(featureArray9);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver12 = null;
        objectMapper11.setSubtypeResolver(subtypeResolver12);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(jsonNodeFactory4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager24);
        boolean boolean26 = restS3Service20.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.size(0L);
        org.joda.time.Interval interval30 = null;
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.interval(interval30);
        java.lang.String[] strArray35 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder29.metrics((java.util.List<java.lang.String>) strList36);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39, "null", credentialsProvider41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = restS3Service44.renameMetadataKeys(strMap45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = restS3Service42.renameMetadataKeys(strMap45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder29.loadSpec(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service20.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service18.renameMetadataKeys(strMap47);
        org.jets3t.service.model.S3Bucket s3Bucket51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray54 = restS3Service18.listObjects(s3Bucket51, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper5.writer(prettyPrinter7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory15 = objectMapper13.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper11.reader(jsonNodeFactory15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray20 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper17.enable(featureArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper11.enable(featureArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper9.enable(featureArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper5.disable(featureArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode26 = objectMapper25.createObjectNode();
        org.codehaus.jackson.map.ObjectWriter objectWriter27 = objectMapper25.defaultPrettyPrintingWriter();
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider34 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider35 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig36 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider34, deserializerProvider35, serializationConfig36, deserializationConfig37);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = objectMapper38.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig40 = null;
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider46);
        org.codehaus.jackson.map.SerializerFactory serializerFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.setSerializerFactory(serializerFactory48);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig50 = objectMapper47.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider39, serializationConfig40, deserializationConfig50);
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper25.setSerializerProvider(serializerProvider32);
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper24.setSerializerProvider(serializerProvider32);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(jsonNodeFactory15);
        org.junit.Assert.assertNotNull(objectReader16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectNode26);
        org.junit.Assert.assertNotNull(objectWriter27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(deserializerProvider39);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(deserializationConfig50);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper53);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        java.lang.String str16 = restS3Service1.createTorrentUrl("/", "x-amz-meta-");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList18 = restS3Service1.multipartListUploads("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent" + "'", str16, "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper2.writerWithDefaultPrettyPrinter();
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode5 = objectMapper2.readTree(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectWriter3);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode24 = objectMapper19.readTree(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageObjectsChunk storageObjectsChunk19 = restS3Service1.listObjectsChunked("[\"content-length-range\", 10, 47]", "", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", (long) (short) 100, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 10, 47]/?max-keys=100&prefix&delimiter=%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E&marker=http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2F%257B%2522%257B%2522%2522%253A%2520%2522s3.amazonaws.com%2522%257D%2522%253A%2520%2522http%253A%2F%2Fs3.amazonaws.com%2F%25257B%252522http%25253A%25252F%25252Fs3.amazonaws.com%25252Fhttp%2525253A%2525252F%2525252Fs3.amazonaws.com%2525252F%2525252F%2525253Ftorrent%25252Fhi%25252521%25253Ftorrent%252522%25253A%252520%252522x-amz-meta-%252522%25257D%2F%25253Cform%252520action%25253D%252522https%25253A%2F%2F.s3.amazonaws.com%2F%252522%252520method%25253D%252522post%252522%252520enctype%25253D%252522multipart%2Fform-data%252522%25253E%25250A%25253Cinput%252520type%25253D%252522hidden%252522%252520name%25253D%252522key%252522%252520value%25253D%252522hi%252521%252522%25253E%25250A%25253Cinput%252520name%25253D%252522file%252522%252520type%25253D%252522file%252522%25253E%25250A%25253Cbr%25253E%25250A%25253Cinput%252520type%25253D%252522submit%252522%252520value%25253D%252522Upload%252520to%252520Amazon%252520S3%252522%25253E%25250A%25253C%2Fform%25253E%253Ftorrent%252C%255B%2522content-length-range%2522%252C%252010%252C%252047%255D%252C%255B%2522content-length-range%2522%252C%252010%252C%252047%255D%252C%255B%2522content-length-range%2522%252C%25201%252C%25200%255D%2522%257D%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteObject("[\"content-length-range\", 10, 47]", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 10, 47]/%5B%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        java.lang.String str8 = restS3Service1.createTorrentUrl("s3.amazonaws.com", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList11 = restS3Service1.getObjectAcl("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D&acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str8, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, ":", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3Bucket s3Bucket21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList23 = restS3Service19.getVersionedObjectAcl("{\"\": \"\"}", s3Bucket21, "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        java.io.File file6 = new java.io.File("");
        org.codehaus.jackson.type.TypeReference typeReference7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.S3Service s3Service8 = objectMapper0.convertValue((java.lang.Object) "", typeReference7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        java.io.File file6 = new java.io.File("hi!");
        java.io.File file8 = new java.io.File(file6, "");
        java.lang.Class<?> wildcardClass9 = file6.getClass();
        org.codehaus.jackson.type.JavaType javaType10 = objectMapper4.constructType((java.lang.reflect.Type) wildcardClass9);
        com.metamx.emitter.EmittingLogger emittingLogger11 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass9);
        org.codehaus.jackson.type.JavaType javaType12 = objectMapper0.constructType((java.lang.reflect.Type) wildcardClass9);
        com.metamx.emitter.EmittingLogger emittingLogger13 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass9);
        java.lang.Throwable throwable14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory18 = objectMapper16.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory23 = objectMapper21.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper19.reader(jsonNodeFactory23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray28 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper25.enable(featureArray28);
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper19.enable(featureArray28);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper16.enable(featureArray28);
        emittingLogger13.error(throwable14, "{\"\": \"s3.amazonaws.com\"}", (java.lang.Object[]) featureArray28);
        boolean boolean33 = emittingLogger13.isTraceEnabled();
        boolean boolean34 = emittingLogger13.isTraceEnabled();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(javaType10);
        org.junit.Assert.assertNotNull(javaType12);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(jsonNodeFactory18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(jsonNodeFactory23);
        org.junit.Assert.assertNotNull(objectReader24);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        boolean boolean8 = restS3Service1.isShutdown();
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service12.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager14 = null;
        restS3Service12.setHttpConnectionManager(httpConnectionManager14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service12.setHttpConnectionManager(httpConnectionManager16);
        java.lang.String str20 = restS3Service12.createTorrentUrl("", "hi!");
        boolean boolean22 = restS3Service12.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date23 = restS3Service12.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = restS3Service1.createSignedGetUrl("", "", date23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str20, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 04 08:18:24 BRT 2021");
    }
}
