import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties10 = restS3Service1.getJetS3tProperties();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig11 = null;
        org.codehaus.jackson.JsonFactory jsonFactory12 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider13, deserializerProvider14, serializationConfig15, deserializationConfig16);
        org.codehaus.jackson.map.ObjectWriter objectWriter18 = objectMapper17.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper17.setSerializationInclusion(inclusion19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig11, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        s3SegmentPusher21.config = s3SegmentPusherConfig22;
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jets3tProperties10);
        org.junit.Assert.assertNotNull(objectWriter18);
        org.junit.Assert.assertNotNull(objectMapper20);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.JsonFactory jsonFactory11 = objectMapper8.getJsonFactory();
        org.codehaus.jackson.node.ArrayNode arrayNode12 = objectMapper8.createArrayNode();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertNotNull(arrayNode12);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        java.text.DateFormat dateFormat11 = null;
        objectMapper7.setDateFormat(dateFormat11);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        org.codehaus.jackson.PrettyPrinter prettyPrinter23 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter24 = objectMapper22.prettyPrintingWriter(prettyPrinter23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        java.io.File file29 = new java.io.File("hi!");
        java.io.File file31 = new java.io.File(file29, "");
        java.lang.Class<?> wildcardClass32 = file29.getClass();
        org.codehaus.jackson.type.JavaType javaType33 = objectMapper27.constructType((java.lang.reflect.Type) wildcardClass32);
        boolean boolean34 = objectMapper22.canDeserialize(javaType33);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService35 = objectMapper7.readValue("null", javaType33);
        org.codehaus.jackson.node.ArrayNode arrayNode36 = objectMapper7.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode38 = objectMapper37.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema39 = null;
        org.codehaus.jackson.map.ObjectReader objectReader40 = objectMapper37.schemaBasedReader(formatSchema39);
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode42 = objectMapper41.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema43 = null;
        org.codehaus.jackson.map.ObjectReader objectReader44 = objectMapper41.schemaBasedReader(formatSchema43);
        byte[] byteArray46 = objectMapper41.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode47 = objectMapper37.valueToTree((java.lang.Object) 10L);
        byte[] byteArray48 = objectMapper7.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.type.TypeReference typeReference49 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.EmittingLogger emittingLogger50 = objectMapper0.readValue(byteArray48, typeReference49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectWriter24);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "hi!");
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(javaType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(restStorageService35);
        org.junit.Assert.assertNotNull(arrayNode36);
        org.junit.Assert.assertNotNull(objectNode38);
        org.junit.Assert.assertNotNull(objectReader40);
        org.junit.Assert.assertNotNull(objectNode42);
        org.junit.Assert.assertNotNull(objectReader44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[49, 48]");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        restS3Service1.setDevPayProductToken("{\"\": \"s3.amazonaws.com\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        java.lang.String str18 = restS3Service16.getInvokingApplicationDescription();
        java.lang.String str21 = restS3Service16.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service16.renameMetadataKeys(strMap25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = restS3Service1.createSignedUrl("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "/", "[\"content-length-range\", 1, 0]", strMap26, providerCredentials27, 100L, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str21, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "");
        java.lang.Class<?> wildcardClass12 = file9.getClass();
        org.codehaus.jackson.type.JavaType javaType13 = objectMapper7.constructType((java.lang.reflect.Type) wildcardClass12);
        com.metamx.emitter.EmittingLogger emittingLogger14 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass12);
        org.codehaus.jackson.type.JavaType javaType15 = objectMapper3.constructType((java.lang.reflect.Type) wildcardClass12);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = objectMapper3.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.lang.Object obj20 = null;
        java.lang.String str21 = objectMapper17.writeValueAsString(obj20);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = objectMapper17.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider27 = objectMapper24.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory23, serializerProvider27, deserializerProvider28);
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper17.setSerializerProvider(serializerProvider27);
        org.codehaus.jackson.JsonFactory jsonFactory31 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig34 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory31, serializerProvider32, deserializerProvider33, serializationConfig34, deserializationConfig35);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider37 = objectMapper36.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper30.setDeserializerProvider(deserializerProvider37);
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper39.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider42 = objectMapper39.getSerializerProvider();
        java.text.DateFormat dateFormat43 = null;
        objectMapper39.setDateFormat(dateFormat43);
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.codehaus.jackson.map.SerializerFactory serializerFactory53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.setSerializerFactory(serializerFactory53);
        org.codehaus.jackson.PrettyPrinter prettyPrinter55 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter56 = objectMapper54.prettyPrintingWriter(prettyPrinter55);
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper57.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = objectMapper57.disableDefaultTyping();
        java.io.File file61 = new java.io.File("hi!");
        java.io.File file63 = new java.io.File(file61, "");
        java.lang.Class<?> wildcardClass64 = file61.getClass();
        org.codehaus.jackson.type.JavaType javaType65 = objectMapper59.constructType((java.lang.reflect.Type) wildcardClass64);
        boolean boolean66 = objectMapper54.canDeserialize(javaType65);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService67 = objectMapper39.readValue("null", javaType65);
        org.codehaus.jackson.node.ArrayNode arrayNode68 = objectMapper39.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode70 = objectMapper69.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema71 = null;
        org.codehaus.jackson.map.ObjectReader objectReader72 = objectMapper69.schemaBasedReader(formatSchema71);
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode74 = objectMapper73.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema75 = null;
        org.codehaus.jackson.map.ObjectReader objectReader76 = objectMapper73.schemaBasedReader(formatSchema75);
        byte[] byteArray78 = objectMapper73.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode79 = objectMapper69.valueToTree((java.lang.Object) 10L);
        byte[] byteArray80 = objectMapper39.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode81 = objectMapper38.readTree(byteArray80);
        org.codehaus.jackson.JsonNode jsonNode82 = objectMapper3.readTree(byteArray80);
        org.codehaus.jackson.type.TypeReference typeReference83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray84 = objectMapper0.readValue(jsonNode82, typeReference83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(javaType13);
        org.junit.Assert.assertNotNull(javaType15);
        org.junit.Assert.assertNotNull(deserializationConfig16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null" + "'", str21, "null");
        org.junit.Assert.assertNotNull(deserializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(serializerProvider27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(deserializerProvider37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(serializerProvider42);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(objectWriter56);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(objectMapper59);
        org.junit.Assert.assertNull("file61.getParent() == null", file61.getParent());
        org.junit.Assert.assertEquals(file61.toString(), "hi!");
        org.junit.Assert.assertNull("file63.getParent() == null", file63.getParent());
        org.junit.Assert.assertEquals(file63.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(javaType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(restStorageService67);
        org.junit.Assert.assertNotNull(arrayNode68);
        org.junit.Assert.assertNotNull(objectNode70);
        org.junit.Assert.assertNotNull(objectReader72);
        org.junit.Assert.assertNotNull(objectNode74);
        org.junit.Assert.assertNotNull(objectReader76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode81);
        org.junit.Assert.assertNotNull(jsonNode82);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        int int14 = restS3Service3.getInternalErrorRetryMax();
        org.jets3t.service.acl.AccessControlList accessControlList16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putObjectAclWithSignedUrl("[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", accessControlList16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$s3.amazonaws.com\", \"\"]': incorrect path");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object15 = restS3Service1.getObjectWithSignedUrl("x-amz-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.IllegalArgumentException: host parameter is null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.io.File file1 = new java.io.File("[\"content-length-range\", 100, 4]");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "[\"content-length-range\", 100, 4]");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        java.net.URI uRI3 = file2.toURI();
        java.io.File file4 = new java.io.File(uRI3);
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.junit.Assert.assertNotNull(uRI3);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder3.dimensions(strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder3.loadSpec(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval17 = null;
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.interval(interval17);
        com.metamx.druid.client.DataSegment.Builder builder19 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder19.dimensions((java.util.List<java.lang.String>) strList22);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder24.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder28 = builder26.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder28.metrics((java.util.List<java.lang.String>) strList32);
        org.joda.time.Interval interval36 = null;
        com.metamx.druid.client.DataSegment.Builder builder37 = builder28.interval(interval36);
        org.joda.time.Interval interval38 = null;
        com.metamx.druid.client.DataSegment.Builder builder39 = builder28.interval(interval38);
        com.metamx.druid.client.DataSegment.Builder builder40 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder42 = builder40.size(0L);
        org.joda.time.Interval interval43 = null;
        com.metamx.druid.client.DataSegment.Builder builder44 = builder42.interval(interval43);
        java.lang.String[] strArray48 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder42.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder39.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder16.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder54.dimensions((java.util.List<java.lang.String>) strList57);
        com.metamx.druid.shard.ShardSpec shardSpec60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment62 = new com.metamx.druid.client.DataSegment("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", interval1, "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", strMap14, (java.util.List<java.lang.String>) strList49, (java.util.List<java.lang.String>) strList57, shardSpec60, 80259571712L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper6.writer(prettyPrinter8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray11 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper6.enable(featureArray11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.disable(featureArray11);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = restS3Service15.getProviderCredentials();
        boolean boolean18 = restS3Service15.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service15.getProviderCredentials();
        java.lang.String str22 = restS3Service15.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean23 = restS3Service15.isShutdown();
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper13.readerForUpdating((java.lang.Object) boolean23);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull(providerCredentials16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str22, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectReader24);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper16);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.unsetNotificationConfig("{\"\": \"s3.amazonaws.com\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/?notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.model.S3Object s3Object8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload9 = restS3Service1.multipartStartUpload("[\"content-length-range\", 1, 0]", s3Object8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectWriter objectWriter7 = objectMapper5.writer();
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode9 = objectMapper5.readTree(reader8);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter7);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.io.File file5 = new java.io.File(file3, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean6 = file5.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        restS3Service1.setRequesterPaysEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList11 = restS3Service1.getObjectAcl("{\"\": \"s3.amazonaws.com\"}", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/%5B%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D?acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider5 = objectMapper2.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider5, deserializerProvider6);
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = objectMapper28.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider20, serializationConfig21, deserializationConfig31);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig41 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38, serializerProvider39, deserializerProvider40, serializationConfig41, deserializationConfig42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper43.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig45 = null;
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.codehaus.jackson.map.SerializerFactory serializerFactory53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.setSerializerFactory(serializerFactory53);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig55 = objectMapper52.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider44, serializationConfig45, deserializationConfig55);
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider13, deserializerProvider44);
        org.codehaus.jackson.map.SerializationConfig serializationConfig58 = null;
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory64 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider65 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider66 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig67 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig68 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory64, serializerProvider65, deserializerProvider66, serializationConfig67, deserializationConfig68);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider70 = objectMapper69.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig71 = null;
        org.codehaus.jackson.JsonFactory jsonFactory72 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider76 = objectMapper73.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider77 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory72, serializerProvider76, deserializerProvider77);
        org.codehaus.jackson.map.SerializerFactory serializerFactory79 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper78.setSerializerFactory(serializerFactory79);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig81 = objectMapper78.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider70, serializationConfig71, deserializationConfig81);
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider5, deserializerProvider44, serializationConfig58, deserializationConfig81);
        org.codehaus.jackson.JsonParser.Feature feature84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper86 = objectMapper83.configure(feature84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(serializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(deserializationConfig31);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(deserializationConfig55);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(deserializerProvider70);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper75);
        org.junit.Assert.assertNotNull(serializerProvider76);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(deserializationConfig81);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties10 = restS3Service1.getJetS3tProperties();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig11 = null;
        org.codehaus.jackson.JsonFactory jsonFactory12 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider13, deserializerProvider14, serializationConfig15, deserializationConfig16);
        org.codehaus.jackson.map.ObjectWriter objectWriter18 = objectMapper17.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper17.setSerializationInclusion(inclusion19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig11, objectMapper20);
        org.jets3t.service.model.MultipartUpload multipartUpload22 = null;
        org.jets3t.service.model.S3Object s3Object24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartPart multipartPart25 = restS3Service1.multipartUploadPart(multipartUpload22, (java.lang.Integer) (-57), s3Object24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jets3tProperties10);
        org.junit.Assert.assertNotNull(objectWriter18);
        org.junit.Assert.assertNotNull(objectMapper20);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher7 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper3);
        org.codehaus.jackson.JsonGenerator.Feature feature8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper3.configure(feature8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper5.setDeserializationConfig(deserializationConfig7);
        org.codehaus.jackson.FormatSchema formatSchema9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper5.schemaBasedReader(formatSchema9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher7 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper3);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service11.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = null;
        restS3Service11.setHttpConnectionManager(httpConnectionManager13);
        java.lang.String str15 = restS3Service11.getEndpoint();
        java.lang.String str18 = restS3Service11.createTorrentUrl("", "");
        java.lang.String str19 = restS3Service11.getRestMetadataPrefix();
        java.util.Date date20 = restS3Service11.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = restS3Service1.createSignedHeadUrl("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", date20, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str18, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "x-amz-meta-" + "'", str19, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Nov 04 08:18:27 BRT 2021");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher7 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper3);
        org.jets3t.service.model.S3Bucket s3Bucket9 = null;
        org.jets3t.service.model.S3Object s3Object10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("hi!/http:/s3.amazonaws.com", s3Bucket9, s3Object10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean5 = file1.setExecutable(true, true);
        long long6 = file1.getUsableSpace();
        boolean boolean7 = file1.mkdir();
        java.io.File file10 = new java.io.File("http://s3.amazonaws.com//?torrent", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        java.io.File file11 = file10.getCanonicalFile();
        boolean boolean12 = file1.equals((java.lang.Object) file11);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 80259563520L + "'", long6 == 80259563520L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(file10.getParent(), "http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file10.toString(), "http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper9.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider12, deserializerProvider13);
        org.codehaus.jackson.map.SerializerFactory serializerFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializerFactory(serializerFactory15);
        org.codehaus.jackson.PrettyPrinter prettyPrinter17 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter18 = objectMapper16.prettyPrintingWriter(prettyPrinter17);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker19 = objectMapper16.getVisibilityChecker();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        java.lang.Object obj24 = null;
        java.lang.String str25 = objectMapper21.writeValueAsString(obj24);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider26 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = objectMapper28.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider31, deserializerProvider32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper21.setSerializerProvider(serializerProvider31);
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider36 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider37 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig38 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider36, deserializerProvider37, serializationConfig38, deserializationConfig39);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider41 = objectMapper40.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper34.setDeserializerProvider(deserializerProvider41);
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider20, deserializerProvider41);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper44.setAnnotationIntrospector(annotationIntrospector45);
        java.lang.Object obj47 = null;
        byte[] byteArray48 = objectMapper46.writeValueAsBytes(obj47);
        org.codehaus.jackson.type.TypeReference typeReference51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker52 = objectMapper43.readValue(byteArray48, (int) (byte) 10, (int) '4', typeReference51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectWriter18);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "null" + "'", str25, "null");
        org.junit.Assert.assertNotNull(deserializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(serializerProvider31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(deserializerProvider41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[110, 117, 108, 108]");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date12 = restS3Service1.getCurrentTimeWithOffset();
        boolean boolean13 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.model.S3Object s3Object18 = null;
        java.util.Calendar calendar20 = null;
        java.util.Calendar calendar21 = null;
        java.lang.String[] strArray23 = new java.lang.String[] { "x-amz-meta-" };
        java.lang.String[] strArray29 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str30 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service1.copyVersionedObject("[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", s3Object18, true, calendar20, calendar21, strArray23, strArray29);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 04 08:18:28 BRT 2021");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str30, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        org.junit.Assert.assertNotNull(joiner1);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus6 = restS3Service1.getBucketLoggingStatus("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]/?logging': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.io.File file2 = new java.io.File("null", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file2.getParent(), "null/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file2.toString(), "null/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper3.enable(featureArray6);
        emittingLogger1.trace("x-amz-meta-", (java.lang.Object[]) featureArray6);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        int int13 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setRequesterPaysBucket("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//?torrent", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper2.enable(featureArray5);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider7 = null;
        objectMapper6.setFilters(filterProvider7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = objectMapper6.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9);
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.JsonFactory jsonFactory12 = null;
        org.codehaus.jackson.JsonFactory jsonFactory13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = objectMapper14.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider19, deserializerProvider20, serializationConfig21, deserializationConfig22);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = objectMapper23.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig25 = null;
        org.codehaus.jackson.JsonFactory jsonFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider30 = objectMapper27.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory26, serializerProvider30, deserializerProvider31);
        org.codehaus.jackson.map.SerializerFactory serializerFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.setSerializerFactory(serializerFactory33);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig35 = objectMapper32.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory13, serializerProvider17, deserializerProvider24, serializationConfig25, deserializationConfig35);
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper38.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper38.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = objectMapper38.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider43 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig45 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider43, deserializerProvider44, serializationConfig45, deserializationConfig46);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider48 = objectMapper47.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig49 = null;
        org.codehaus.jackson.JsonFactory jsonFactory50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider54 = objectMapper51.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory50, serializerProvider54, deserializerProvider55);
        org.codehaus.jackson.map.SerializerFactory serializerFactory57 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper56.setSerializerFactory(serializerFactory57);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig59 = objectMapper56.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider41, deserializerProvider48, serializationConfig49, deserializationConfig59);
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider17, deserializerProvider48);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider62 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider17, deserializerProvider62);
        org.codehaus.jackson.map.SerializerProvider serializerProvider64 = objectMapper63.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = objectMapper65.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = objectMapper65.disableDefaultTyping();
        java.lang.Object obj68 = null;
        java.lang.String str69 = objectMapper65.writeValueAsString(obj68);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider70 = objectMapper65.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider64, deserializerProvider70);
        org.codehaus.jackson.JsonFactory jsonFactory72 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider76 = objectMapper73.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider77 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory72, serializerProvider76, deserializerProvider77);
        org.codehaus.jackson.map.SerializerFactory serializerFactory79 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper78.setSerializerFactory(serializerFactory79);
        org.codehaus.jackson.PrettyPrinter prettyPrinter81 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter82 = objectMapper80.prettyPrintingWriter(prettyPrinter81);
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper84 = objectMapper83.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = objectMapper83.disableDefaultTyping();
        java.io.File file87 = new java.io.File("hi!");
        java.io.File file89 = new java.io.File(file87, "");
        java.lang.Class<?> wildcardClass90 = file87.getClass();
        org.codehaus.jackson.type.JavaType javaType91 = objectMapper85.constructType((java.lang.reflect.Type) wildcardClass90);
        boolean boolean92 = objectMapper80.canDeserialize(javaType91);
        org.codehaus.jackson.map.ObjectReader objectReader93 = objectMapper71.reader(javaType91);
        boolean boolean94 = objectMapper0.canDeserialize(javaType91);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(serializerProvider17);
        org.junit.Assert.assertNotNull(deserializerProvider24);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(serializerProvider30);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(deserializationConfig35);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(serializerProvider41);
        org.junit.Assert.assertNotNull(deserializerProvider48);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(serializerProvider54);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(deserializationConfig59);
        org.junit.Assert.assertNotNull(serializerProvider64);
        org.junit.Assert.assertNotNull(objectMapper66);
        org.junit.Assert.assertNotNull(objectMapper67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "null" + "'", str69, "null");
        org.junit.Assert.assertNotNull(deserializerProvider70);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper75);
        org.junit.Assert.assertNotNull(serializerProvider76);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(objectWriter82);
        org.junit.Assert.assertNotNull(objectMapper84);
        org.junit.Assert.assertNotNull(objectMapper85);
        org.junit.Assert.assertNull("file87.getParent() == null", file87.getParent());
        org.junit.Assert.assertEquals(file87.toString(), "hi!");
        org.junit.Assert.assertNull("file89.getParent() == null", file89.getParent());
        org.junit.Assert.assertEquals(file89.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(javaType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(objectReader93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties8);
        org.jets3t.service.model.S3Bucket s3Bucket10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object12 = restS3Service9.getObjectDetails(s3Bucket10, "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action getObjectDetails cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        java.io.File file7 = new java.io.File(file2, "[\"content-length-range\", 10, 47]");
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file13 = new java.io.File(file11, "");
        boolean boolean16 = file13.setReadable(false, true);
        boolean boolean18 = file13.setExecutable(true);
        boolean boolean19 = file7.renameTo(file13);
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals(file7.toString(), "[\"content-length-range\", 58, 1]/null/[\"content-length-range\", 10, 47]");
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertEquals(file11.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file11.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file13.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.unsetNotificationConfig("hi!/http:/s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 58, 1]/null", credentialsProvider2, jets3tProperties11, hostConfiguration14);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList18 = restS3Service15.getObjectAcl("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 58, 1]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        org.jets3t.service.model.MultipartUpload multipartUpload33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartCompleted multipartCompleted34 = restS3Service1.multipartCompleteUpload(multipartUpload33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher0 = new com.metamx.druid.loading.S3SegmentPusher();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = s3SegmentPusher0.s3Client;
        java.io.File file2 = null;
        com.metamx.druid.client.DataSegment dataSegment3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment4 = s3SegmentPusher0.push(file2, dataSegment3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(restS3Service1);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2, jets3tProperties8);
        boolean boolean10 = restS3Service9.isAuthenticatedConnection();
        com.metamx.druid.client.DataSegment.Builder builder13 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = restS3Service15.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager17 = null;
        restS3Service15.setHttpConnectionManager(httpConnectionManager17);
        java.util.List<java.lang.String> strList19 = restS3Service15.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder20 = builder13.dimensions(strList19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service22.renameMetadataKeys(strMap23);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder13.loadSpec(strMap24);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = restS3Service27.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager29 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager29);
        java.util.Date date31 = restS3Service27.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = restS3Service9.createSignedPutUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", strMap24, date31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(providerCredentials16);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(providerCredentials28);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 04 08:18:30 BRT 2021");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service12.getProviderCredentials();
        java.lang.String str14 = restS3Service12.getInvokingApplicationDescription();
        java.lang.String str17 = restS3Service12.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = restS3Service19.renameMetadataKeys(strMap20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service12.renameMetadataKeys(strMap21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        boolean boolean27 = restS3Service24.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = restS3Service24.getProviderCredentials();
        java.lang.String str31 = restS3Service24.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean32 = restS3Service24.isShutdown();
        java.util.Date date33 = restS3Service24.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = restS3Service1.createSignedPutUrl("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", strMap21, date33, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str17, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(providerCredentials28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str31, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 04 08:18:30 BRT 2021");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"[\"content-length-range\", 58, 1]\"]/': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.enableDefaultTyping(defaultTyping6);
        org.codehaus.jackson.map.HandlerInstantiator handlerInstantiator8 = null;
        objectMapper7.setHandlerInstantiator(handlerInstantiator8);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.io.File file2 = new java.io.File("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        org.junit.Assert.assertEquals(file2.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "null", credentialsProvider5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service6.renameMetadataKeys(strMap9);
        com.metamx.druid.client.DataSegment.Builder builder12 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder14 = builder12.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder15 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = restS3Service17.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager19 = null;
        restS3Service17.setHttpConnectionManager(httpConnectionManager19);
        java.util.List<java.lang.String> strList21 = restS3Service17.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder22 = builder15.dimensions(strList21);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder14.dimensions(strList21);
        com.metamx.druid.client.DataSegment.Builder builder24 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service26.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager28);
        java.util.List<java.lang.String> strList30 = restS3Service26.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder31 = builder24.dimensions(strList30);
        com.metamx.druid.shard.ShardSpec shardSpec32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment34 = new com.metamx.druid.client.DataSegment("hi!", interval1, "null", strMap9, strList21, strList30, shardSpec32, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(providerCredentials18);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties8);
        org.jets3t.service.model.S3Object s3Object11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload12 = restS3Service9.multipartStartUpload("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", s3Object11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.client.DataSegment.Builder builder19 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder21 = builder19.size(0L);
        org.joda.time.Interval interval22 = null;
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.interval(interval22);
        java.lang.String[] strArray27 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder21.metrics((java.util.List<java.lang.String>) strList28);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials31, "null", credentialsProvider33);
        org.jets3t.service.security.ProviderCredentials providerCredentials35 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service36 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials35);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = restS3Service36.renameMetadataKeys(strMap37);
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = restS3Service34.renameMetadataKeys(strMap37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder21.loadSpec(strMap39);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service43 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials42);
        org.jets3t.service.security.ProviderCredentials providerCredentials44 = restS3Service43.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager45 = null;
        restS3Service43.setHttpConnectionManager(httpConnectionManager45);
        java.util.Date date47 = restS3Service43.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = restS3Service1.createSignedPutUrl("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", strMap39, providerCredentials41, date47, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(providerCredentials44);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Thu Nov 04 08:18:31 BRT 2021");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.deleteBucketPolicy("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]/&policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.jsontype.NamedType[] namedTypeArray14 = new org.codehaus.jackson.map.jsontype.NamedType[] {};
        objectMapper13.registerSubtypes(namedTypeArray14);
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory20 = objectMapper18.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader21 = objectMapper16.reader(jsonNodeFactory20);
        org.codehaus.jackson.node.ObjectNode objectNode22 = objectMapper16.createObjectNode();
        org.codehaus.jackson.JsonParser jsonParser23 = objectMapper13.treeAsTokens((org.codehaus.jackson.JsonNode) objectNode22);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(namedTypeArray14);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(jsonNodeFactory20);
        org.junit.Assert.assertNotNull(objectReader21);
        org.junit.Assert.assertNotNull(objectNode22);
        org.junit.Assert.assertNotNull(jsonParser23);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.setReadOnly();
        java.io.File file6 = new java.io.File(file1, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        java.lang.String str7 = file1.getName();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file6.toString(), "hi!/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service9.renameMetadataKeys(strMap10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = restS3Service1.createSignedUrl("x-amz-", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap10, providerCredentials12, (long) 3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList22 = restS3Service18.getObjectAcl("", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        restS3Service1.setRequesterPaysEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObjectWithMFA("[\"content-length-range\", 1, 0]", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "{\"\": \"\"}", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"\"}/%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D?versionId=%5B%22content-length-range%22%2C%201%2C%200%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager24);
        boolean boolean26 = restS3Service20.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.size(0L);
        org.joda.time.Interval interval30 = null;
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.interval(interval30);
        java.lang.String[] strArray35 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder29.metrics((java.util.List<java.lang.String>) strList36);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39, "null", credentialsProvider41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = restS3Service44.renameMetadataKeys(strMap45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = restS3Service42.renameMetadataKeys(strMap45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder29.loadSpec(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service20.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service18.renameMetadataKeys(strMap47);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk58 = restS3Service18.listVersionedObjectsChunked("", "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "{\"\": \"s3.amazonaws.com\"}", 10L, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"content-length-range\", 100, 4]", false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray25 = restS3Service1.listVersionedObjects("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}/?max-keys=1000&versions&prefix=%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D&delimiter=%7B%22%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setAnnotationIntrospector(annotationIntrospector7);
        org.codehaus.jackson.map.SerializationConfig serializationConfig9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.setSerializationConfig(serializationConfig9);
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider16);
        org.codehaus.jackson.map.SerializerFactory serializerFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.setSerializerFactory(serializerFactory18);
        org.codehaus.jackson.PrettyPrinter prettyPrinter20 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter21 = objectMapper19.prettyPrintingWriter(prettyPrinter20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory26 = objectMapper24.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader27 = objectMapper22.reader(jsonNodeFactory26);
        org.codehaus.jackson.map.ObjectReader objectReader28 = objectMapper19.reader(jsonNodeFactory26);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        java.lang.Object obj32 = null;
        java.lang.String str33 = objectMapper29.writeValueAsString(obj32);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = objectMapper29.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider40);
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper29.setSerializerProvider(serializerProvider39);
        org.codehaus.jackson.JsonFactory jsonFactory43 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider44 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider45 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig46 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory43, serializerProvider44, deserializerProvider45, serializationConfig46, deserializationConfig47);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider49 = objectMapper48.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper42.setDeserializerProvider(deserializerProvider49);
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider54 = objectMapper51.getSerializerProvider();
        java.text.DateFormat dateFormat55 = null;
        objectMapper51.setDateFormat(dateFormat55);
        org.codehaus.jackson.JsonFactory jsonFactory58 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper59.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider63 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory58, serializerProvider62, deserializerProvider63);
        org.codehaus.jackson.map.SerializerFactory serializerFactory65 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = objectMapper64.setSerializerFactory(serializerFactory65);
        org.codehaus.jackson.PrettyPrinter prettyPrinter67 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter68 = objectMapper66.prettyPrintingWriter(prettyPrinter67);
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = objectMapper69.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = objectMapper69.disableDefaultTyping();
        java.io.File file73 = new java.io.File("hi!");
        java.io.File file75 = new java.io.File(file73, "");
        java.lang.Class<?> wildcardClass76 = file73.getClass();
        org.codehaus.jackson.type.JavaType javaType77 = objectMapper71.constructType((java.lang.reflect.Type) wildcardClass76);
        boolean boolean78 = objectMapper66.canDeserialize(javaType77);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService79 = objectMapper51.readValue("null", javaType77);
        org.codehaus.jackson.node.ArrayNode arrayNode80 = objectMapper51.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode82 = objectMapper81.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema83 = null;
        org.codehaus.jackson.map.ObjectReader objectReader84 = objectMapper81.schemaBasedReader(formatSchema83);
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode86 = objectMapper85.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema87 = null;
        org.codehaus.jackson.map.ObjectReader objectReader88 = objectMapper85.schemaBasedReader(formatSchema87);
        byte[] byteArray90 = objectMapper85.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode91 = objectMapper81.valueToTree((java.lang.Object) 10L);
        byte[] byteArray92 = objectMapper51.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode93 = objectMapper50.readTree(byteArray92);
        org.codehaus.jackson.JsonNode jsonNode94 = objectMapper19.readTree(byteArray92);
        org.codehaus.jackson.type.TypeReference typeReference95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = objectMapper8.readValue(jsonNode94, typeReference95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectWriter21);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(jsonNodeFactory26);
        org.junit.Assert.assertNotNull(objectReader27);
        org.junit.Assert.assertNotNull(objectReader28);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "null" + "'", str33, "null");
        org.junit.Assert.assertNotNull(deserializerProvider34);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(deserializerProvider49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(serializerProvider54);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(objectMapper66);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertNotNull(objectMapper70);
        org.junit.Assert.assertNotNull(objectMapper71);
        org.junit.Assert.assertNull("file73.getParent() == null", file73.getParent());
        org.junit.Assert.assertEquals(file73.toString(), "hi!");
        org.junit.Assert.assertNull("file75.getParent() == null", file75.getParent());
        org.junit.Assert.assertEquals(file75.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(javaType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(restStorageService79);
        org.junit.Assert.assertNotNull(arrayNode80);
        org.junit.Assert.assertNotNull(objectNode82);
        org.junit.Assert.assertNotNull(objectReader84);
        org.junit.Assert.assertNotNull(objectNode86);
        org.junit.Assert.assertNotNull(objectReader88);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode93);
        org.junit.Assert.assertNotNull(jsonNode94);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        int int10 = restS3Service1.getInternalErrorRetryMax();
        java.util.Calendar calendar13 = null;
        java.util.Calendar calendar14 = null;
        java.lang.String[] strArray20 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str21 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray20);
        java.lang.String[] strArray27 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject29 = restS3Service1.getObjectDetails("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", calendar13, calendar14, strArray20, strArray27);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str21, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str28, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2);
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.setBucketLoggingStatus("[\"content-length-range\", 10, 47]", s3BucketLoggingStatus5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setAnnotationIntrospector(annotationIntrospector10);
        java.lang.Object obj12 = null;
        byte[] byteArray13 = objectMapper11.writeValueAsBytes(obj12);
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper17.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider20, deserializerProvider21);
        org.codehaus.jackson.map.SerializerFactory serializerFactory23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.setSerializerFactory(serializerFactory23);
        org.codehaus.jackson.PrettyPrinter prettyPrinter25 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter26 = objectMapper24.prettyPrintingWriter(prettyPrinter25);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        java.io.File file31 = new java.io.File("hi!");
        java.io.File file33 = new java.io.File(file31, "");
        java.lang.Class<?> wildcardClass34 = file31.getClass();
        org.codehaus.jackson.type.JavaType javaType35 = objectMapper29.constructType((java.lang.reflect.Type) wildcardClass34);
        boolean boolean36 = objectMapper24.canDeserialize(javaType35);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Closeable closeable37 = objectMapper8.readValue(byteArray13, 32, 5, javaType35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectWriter26);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "hi!");
        org.junit.Assert.assertNull("file33.getParent() == null", file33.getParent());
        org.junit.Assert.assertEquals(file33.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(javaType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        org.jets3t.service.model.MultipartUpload multipartUpload8 = null;
        org.jets3t.service.model.S3Object s3Object10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartPart multipartPart11 = restS3Service1.multipartUploadPart(multipartUpload8, (java.lang.Integer) (-1), s3Object10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = objectMapper8.canDeserialize(javaType19);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider21 = objectMapper8.getDeserializerProvider();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(deserializerProvider21);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        org.codehaus.jackson.map.SerializationConfig.Feature feature11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = objectMapper10.isEnabled(feature11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder8 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.size(0L);
        org.joda.time.Interval interval11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder10.interval(interval11);
        java.lang.String[] strArray16 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.metamx.druid.client.DataSegment.Builder builder19 = builder10.metrics((java.util.List<java.lang.String>) strList17);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20, "null", credentialsProvider22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service25.renameMetadataKeys(strMap26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = restS3Service23.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder29 = builder10.loadSpec(strMap28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service1.renameMetadataKeys(strMap28);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object34 = restS3Service1.getVersionedObjectDetails("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "[\"content-length-range\", 1, 0]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        restS3Service1.setDevPayProductToken("{\"\": \"s3.amazonaws.com\"}");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object14 = restS3Service1.getVersionedObject("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"[\"content-length-range\", 58, 1]\"]/%5B%22starts-with%22%2C%20%22%24%7B%22%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D%22%3A%20%22%22%7D%22%2C%20%22%22%5D&versionId=%7B%22%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object8 = restS3Service1.getObjectDetails(s3Bucket6, "[\"content-length-range\", 58, 1]/null");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action getObjectDetails cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.shutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject12 = restS3Service1.getObjectDetails("{\"\": \"\"}", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"\"}/%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager24);
        boolean boolean26 = restS3Service20.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.size(0L);
        org.joda.time.Interval interval30 = null;
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.interval(interval30);
        java.lang.String[] strArray35 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder29.metrics((java.util.List<java.lang.String>) strList36);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39, "null", credentialsProvider41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = restS3Service44.renameMetadataKeys(strMap45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = restS3Service42.renameMetadataKeys(strMap45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder29.loadSpec(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service20.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service18.renameMetadataKeys(strMap47);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk58 = restS3Service18.listVersionedObjectsChunked("{\"\": \"s3.amazonaws.com\"}", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", (long) 2, "", "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/?max-keys=2&versions&prefix=%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D&delimiter=%5B%22%22%2C%20%22%24http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%2C%20%22null%22%5D&version-id-marker&key-marker': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        restS3Service1.setDevPayProductToken("{\"\": \"s3.amazonaws.com\"}");
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.suspendBucketVersioning("[\"content-length-range\", 58, 1]/null");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.enableBucketVersioningWithMFA("", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties8);
        java.lang.String str10 = restS3Service9.getDevPayUserToken();
        org.jets3t.service.model.S3Bucket s3Bucket11 = null;
        org.jets3t.service.model.S3Object s3Object12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object13 = restS3Service9.putObject(s3Bucket11, s3Object12);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory23 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider24 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider25 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig26 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory23, serializerProvider24, deserializerProvider25, serializationConfig26, deserializationConfig27);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = objectMapper28.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.JsonFactory jsonFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider35 = objectMapper32.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory31, serializerProvider35, deserializerProvider36);
        org.codehaus.jackson.map.SerializerFactory serializerFactory38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper37.setSerializerFactory(serializerFactory38);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig40 = objectMapper37.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider29, serializationConfig30, deserializationConfig40);
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory47 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider48 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider49 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig50 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory47, serializerProvider48, deserializerProvider49, serializationConfig50, deserializationConfig51);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = objectMapper52.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig54 = null;
        org.codehaus.jackson.JsonFactory jsonFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper56.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper56.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider59 = objectMapper56.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory55, serializerProvider59, deserializerProvider60);
        org.codehaus.jackson.map.SerializerFactory serializerFactory62 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = objectMapper61.setSerializerFactory(serializerFactory62);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig64 = objectMapper61.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider53, serializationConfig54, deserializationConfig64);
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider22, deserializerProvider53);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig67 = objectMapper66.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = objectMapper12.setDeserializationConfig(deserializationConfig67);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider69 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter70 = objectMapper68.filteredWriter(filterProvider69);
        org.codehaus.jackson.map.SerializationConfig.Feature feature71 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = objectMapper68.isEnabled(feature71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(deserializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(serializerProvider35);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(deserializationConfig40);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNotNull(deserializerProvider53);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(serializerProvider59);
        org.junit.Assert.assertNotNull(objectMapper63);
        org.junit.Assert.assertNotNull(deserializationConfig64);
        org.junit.Assert.assertNotNull(deserializationConfig67);
        org.junit.Assert.assertNotNull(objectMapper68);
        org.junit.Assert.assertNotNull(objectWriter70);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        restS3Service18.setRequesterPaysEnabled(true);
        org.jets3t.service.model.StorageObject storageObject24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service18.renameObject("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "hi!", storageObject24);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        java.text.DateFormat dateFormat16 = null;
        objectMapper14.setDateFormat(dateFormat16);
        org.codehaus.jackson.map.SerializationConfig serializationConfig18 = objectMapper14.copySerializationConfig();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNotNull(serializationConfig18);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "{\"\": \"s3.amazonaws.com\"}/hi!");
        long long8 = file7.getUsableSpace();
        boolean boolean10 = file7.setReadable(true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        int int10 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageOwner storageOwner11 = restS3Service1.getAccountOwner();
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: List all buckets to find account owner");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 100, 4]", "s3.amazonaws.com");
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 100, 4]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 100, 4]/s3.amazonaws.com");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = restS3Service4.renameMetadataKeys(strMap5);
        com.metamx.druid.client.DataSegment.Builder builder7 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder8 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.metamx.druid.client.DataSegment.Builder builder13 = builder8.dimensions((java.util.List<java.lang.String>) strList11);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder17 = builder15.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder18 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder18.dimensions((java.util.List<java.lang.String>) strList21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder17.metrics((java.util.List<java.lang.String>) strList21);
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder24.metrics((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder7.metrics((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder33 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = restS3Service35.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager37 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager37);
        java.util.List<java.lang.String> strList39 = restS3Service35.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder40 = builder33.dimensions(strList39);
        com.metamx.druid.shard.ShardSpec shardSpec41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment43 = new com.metamx.druid.client.DataSegment("null", interval1, "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", strMap6, (java.util.List<java.lang.String>) strList28, strList39, shardSpec41, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(providerCredentials36);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        java.lang.String str6 = file5.getAbsolutePath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRI4);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str6, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.mkdirs();
        boolean boolean5 = file1.setReadable(true, false);
        java.lang.String str6 = file1.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}" + "'", str2, "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials1 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service2 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials1);
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = restS3Service2.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service2.setHttpConnectionManager(httpConnectionManager4);
        java.util.List<java.lang.String> strList6 = restS3Service2.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.dimensions(strList6);
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.version("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder10.interval(interval11);
        com.metamx.druid.client.DataSegment.Builder builder13 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.metamx.druid.client.DataSegment.Builder builder18 = builder13.dimensions((java.util.List<java.lang.String>) strList16);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder18.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec21 = null;
        com.metamx.druid.client.DataSegment.Builder builder22 = builder18.shardSpec(shardSpec21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder18.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder35.dimensions((java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder34.metrics((java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder42 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder42.dimensions((java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder41.metrics((java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder49 = builder18.metrics((java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder50 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder50.dimensions((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder55.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder59 = builder57.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder60 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.metamx.druid.client.DataSegment.Builder builder65 = builder60.dimensions((java.util.List<java.lang.String>) strList63);
        com.metamx.druid.client.DataSegment.Builder builder66 = builder59.metrics((java.util.List<java.lang.String>) strList63);
        com.metamx.druid.client.DataSegment.Builder builder67 = builder18.dimensions((java.util.List<java.lang.String>) strList63);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder10.metrics((java.util.List<java.lang.String>) strList63);
        com.metamx.druid.client.DataSegment.Builder builder69 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder71 = builder69.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder72 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials73 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service74 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials73);
        org.jets3t.service.security.ProviderCredentials providerCredentials75 = restS3Service74.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager76 = null;
        restS3Service74.setHttpConnectionManager(httpConnectionManager76);
        java.util.List<java.lang.String> strList78 = restS3Service74.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder79 = builder72.dimensions(strList78);
        com.metamx.druid.client.DataSegment.Builder builder80 = builder71.dimensions(strList78);
        com.metamx.druid.client.DataSegment.Builder builder81 = builder10.metrics(strList78);
        com.metamx.druid.client.DataSegment.Builder builder82 = builder9.metrics(strList78);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(providerCredentials3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(providerCredentials75);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str18 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = restS3Service1.getBucketLocation("");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to parse XML document with handler class org.jets3t.service.impl.rest.XmlResponsesSaxParser$BucketLocationHandler");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.util.Calendar calendar8 = null;
        java.util.Calendar calendar9 = null;
        java.lang.String[] strArray15 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str16 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray15);
        java.lang.String[] strArray23 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str24 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray23);
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object28 = restS3Service1.getVersionedObject("[\"content-length-range\", 100, 4]", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", calendar8, calendar9, strArray15, strArray23, (java.lang.Long) 80259571712L, (java.lang.Long) (-1L));
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str16, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str24, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str25, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        org.jets3t.service.model.StorageBucket storageBucket9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageBucket storageBucket10 = restS3Service1.createBucket(storageBucket9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        boolean boolean11 = restS3Service10.isAuthenticatedConnection();
        java.lang.String str12 = restS3Service10.getDevPayUserToken();
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        java.lang.String str17 = restS3Service16.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig18 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher31 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service20, s3SegmentPusherConfig21, objectMapper28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service16, s3SegmentPusherConfig18, objectMapper28);
        int int33 = restS3Service16.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = restS3Service35.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager37 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager39);
        boolean boolean41 = restS3Service35.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder42 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder44 = builder42.size(0L);
        org.joda.time.Interval interval45 = null;
        com.metamx.druid.client.DataSegment.Builder builder46 = builder44.interval(interval45);
        java.lang.String[] strArray50 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder44.metrics((java.util.List<java.lang.String>) strList51);
        org.jets3t.service.security.ProviderCredentials providerCredentials54 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider56 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service57 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials54, "null", credentialsProvider56);
        org.jets3t.service.security.ProviderCredentials providerCredentials58 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service59 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials58);
        java.util.Map<java.lang.String, java.lang.Object> strMap60 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = restS3Service59.renameMetadataKeys(strMap60);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = restS3Service57.renameMetadataKeys(strMap60);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder44.loadSpec(strMap62);
        java.util.Map<java.lang.String, java.lang.Object> strMap64 = restS3Service35.renameMetadataKeys(strMap62);
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = restS3Service16.renameMetadataKeys(strMap64);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service67 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66);
        org.jets3t.service.security.ProviderCredentials providerCredentials68 = restS3Service67.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager69 = null;
        restS3Service67.setHttpConnectionManager(httpConnectionManager69);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager71 = null;
        restS3Service67.setHttpConnectionManager(httpConnectionManager71);
        java.lang.String str75 = restS3Service67.createTorrentUrl("", "hi!");
        boolean boolean77 = restS3Service67.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date78 = restS3Service67.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = restS3Service10.createSignedPutUrl("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", strMap64, date78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNull(providerCredentials36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(providerCredentials68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str75, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Thu Nov 04 08:18:39 BRT 2021");
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.setDevPayProductToken("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList12 = restS3Service1.getBucketAcl("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]/&acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode5 = objectMapper4.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper4.schemaBasedReader(formatSchema6);
        byte[] byteArray9 = objectMapper4.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode10 = objectMapper0.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper0.setSerializationInclusion(inclusion11);
        org.codehaus.jackson.map.SerializerFactory serializerFactory13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper0.setSerializerFactory(serializerFactory13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory17 = objectMapper15.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper15.enableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig19 = objectMapper18.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper14.setSerializationConfig(serializationConfig19);
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider25 = objectMapper22.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider25, deserializerProvider26);
        org.codehaus.jackson.map.SerializerFactory serializerFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.setSerializerFactory(serializerFactory28);
        org.codehaus.jackson.PrettyPrinter prettyPrinter30 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter31 = objectMapper29.prettyPrintingWriter(prettyPrinter30);
        org.codehaus.jackson.JsonFactory jsonFactory32 = objectMapper29.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider36 = objectMapper33.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider38 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig40 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider38, deserializerProvider39, serializationConfig40, deserializationConfig41);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider43 = objectMapper42.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider36, deserializerProvider43);
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper20.setDeserializerProvider(deserializerProvider43);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping46 = null;
        org.codehaus.jackson.annotate.JsonTypeInfo.As as47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper20.enableDefaultTyping(defaultTyping46, as47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: includeAs can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectNode5);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(jsonNodeFactory17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializationConfig19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(serializerProvider25);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectWriter31);
        org.junit.Assert.assertNotNull(jsonFactory32);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(serializerProvider36);
        org.junit.Assert.assertNotNull(deserializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper45);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service14.renameMetadataKeys(strMap23);
        org.jets3t.service.acl.AccessControlList accessControlList26 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service14.putObjectAclWithSignedUrl("[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", accessControlList26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "");
        java.lang.Class<?> wildcardClass12 = file9.getClass();
        org.codehaus.jackson.type.JavaType javaType13 = objectMapper7.constructType((java.lang.reflect.Type) wildcardClass12);
        org.codehaus.jackson.map.ObjectWriter objectWriter14 = objectMapper0.typedWriter(javaType13);
        org.codehaus.jackson.map.InjectableValues injectableValues15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper0.setInjectableValues(injectableValues15);
        org.codehaus.jackson.map.Module module17 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.registerModule(module17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(javaType13);
        org.junit.Assert.assertNotNull(objectWriter14);
        org.junit.Assert.assertNotNull(objectMapper16);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object20 = restS3Service1.getVersionedObjectDetails("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", "[\"content-length-range\", 58, 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}/%5B%22content-length-range%22%2C%2058%2C%201%5D?versionId=%5B%22%22%2C%20%22%24http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%2C%20%22null%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        org.jets3t.service.model.MultipartUpload multipartUpload33 = null;
        org.jets3t.service.model.S3Object s3Object35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartPart multipartPart36 = restS3Service1.multipartUploadPart(multipartUpload33, (java.lang.Integer) 5, s3Object35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray5 = restS3Service3.listObjects("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null/?max-keys=1000': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        int int10 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject13 = restS3Service1.getObjectDetails("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "hi!/http:/s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]/hi%21%2Fhttp%3A%2Fs3.amazonaws.com': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper0.reader(formatSchema6);
        java.text.DateFormat dateFormat8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper0.writer(dateFormat8);
        com.metamx.emitter.EmittingLogger emittingLogger11 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean12 = emittingLogger11.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper14.writer(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper14.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter22 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter23 = objectMapper20.writer(prettyPrinter22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper20.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray25 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper20.enable(featureArray25);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper14.disable(featureArray25);
        emittingLogger11.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray25);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper0.enable(featureArray25);
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials30);
        java.lang.String str32 = restS3Service31.getDevPayUserToken();
        org.codehaus.jackson.type.TypeReference typeReference33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.JsonSerializableWithType jsonSerializableWithType34 = objectMapper29.convertValue((java.lang.Object) str32, typeReference33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectWriter23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        org.jets3t.service.model.StorageObject storageObject16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service3.renameObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "x-amz-", storageObject16);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        int int14 = restS3Service3.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk22 = restS3Service3.listVersionedObjectsChunked("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "[\"content-length-range\", 58, 1]/null", (-1L), "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]/?versions&prefix=%7B%22%5B%22content-length-range%22%2C%20-226%2C%20-226%5D%22%3A%20%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%2Fhi%21%22%7D&delimiter=%5B%22content-length-range%22%2C%2058%2C%201%5D%2Fnull&version-id-marker=%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D&key-marker=%7B%22%7B%22%5B%22content-length-range%22%2C%20-226%2C%20-226%5D%22%3A%20%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%2Fhi%21%22%7D%22%3A%20%22x-amz-meta-%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", credentialsProvider2, jets3tProperties11, hostConfiguration12);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.WebsiteConfig websiteConfig15 = restS3Service13.getWebsiteConfig("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.setAnnotationIntrospector(annotationIntrospector11);
        java.io.Reader reader13 = null;
        org.codehaus.jackson.type.TypeReference typeReference14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.codehaus.jackson.JsonNode> jsonNodeIterable15 = objectMapper12.readValue(reader13, typeReference14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.lang.Class<?> wildcardClass4 = file1.getClass();
        com.metamx.emitter.EmittingLogger emittingLogger5 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass4);
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        java.lang.Object obj24 = null;
        java.lang.String str25 = objectMapper21.writeValueAsString(obj24);
        com.metamx.druid.client.DataSegment.Builder builder26 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder26.dimensions((java.util.List<java.lang.String>) strList29);
        com.metamx.emitter.EmittingLogger emittingLogger33 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray35 = new java.lang.Object[] { objectMapper11, deserializerProvider20, objectMapper21, strList29, emittingLogger33, (byte) 1 };
        emittingLogger8.error(throwable9, "{\"\": \"s3.amazonaws.com\"}", objArray35);
        java.lang.Throwable throwable37 = null;
        java.io.File file40 = new java.io.File("hi!");
        java.io.File file42 = new java.io.File(file40, "");
        java.io.File file43 = file40.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode45 = objectMapper44.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.jets3t.service.security.ProviderCredentials providerCredentials53 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service54 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials53);
        org.jets3t.service.security.ProviderCredentials providerCredentials55 = restS3Service54.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager56 = null;
        restS3Service54.setHttpConnectionManager(httpConnectionManager56);
        java.lang.Object[] objArray60 = new java.lang.Object[] { file43, objectMapper44, objectMapper52, restS3Service54, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger8.info(throwable37, "", objArray60);
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider66 = objectMapper63.getSerializerProvider();
        java.text.DateFormat dateFormat67 = null;
        objectMapper63.setDateFormat(dateFormat67);
        org.codehaus.jackson.node.ArrayNode arrayNode69 = objectMapper63.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder70 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder72 = builder70.size(0L);
        java.lang.Object[] objArray73 = new java.lang.Object[] { objectMapper63, builder70 };
        emittingLogger8.trace("null", objArray73);
        com.metamx.emitter.EmittingLogger emittingLogger77 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable78 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials80 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service81 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials80);
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode83 = objectMapper82.createObjectNode();
        java.lang.Object[] objArray84 = new java.lang.Object[] { providerCredentials80, objectMapper82 };
        emittingLogger77.info(throwable78, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray84);
        emittingLogger8.error("", objArray84);
        emittingLogger5.info("", objArray84);
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger5;
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "null" + "'", str25, "null");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "hi!");
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "hi!");
        org.junit.Assert.assertNotNull(file43);
// flaky:         org.junit.Assert.assertEquals(file43.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNull(providerCredentials55);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(serializerProvider66);
        org.junit.Assert.assertNotNull(arrayNode69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objectNode83);
        org.junit.Assert.assertNotNull(objArray84);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.map.SerializerFactory serializerFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.setSerializerFactory(serializerFactory25);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper24.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5, serializerProvider9, deserializerProvider16, serializationConfig17, deserializationConfig27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider16);
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper29.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = objectMapper29.getDeserializationConfig();
        org.codehaus.jackson.map.DeserializationConfig.Feature feature32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper29.configure(feature32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
        org.junit.Assert.assertNotNull(objectWriter30);
        org.junit.Assert.assertNotNull(deserializationConfig31);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = objectMapper0.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        java.text.DateFormat dateFormat19 = null;
        objectMapper15.setDateFormat(dateFormat19);
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        org.codehaus.jackson.PrettyPrinter prettyPrinter31 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter32 = objectMapper30.prettyPrintingWriter(prettyPrinter31);
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper33.disableDefaultTyping();
        java.io.File file37 = new java.io.File("hi!");
        java.io.File file39 = new java.io.File(file37, "");
        java.lang.Class<?> wildcardClass40 = file37.getClass();
        org.codehaus.jackson.type.JavaType javaType41 = objectMapper35.constructType((java.lang.reflect.Type) wildcardClass40);
        boolean boolean42 = objectMapper30.canDeserialize(javaType41);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService43 = objectMapper15.readValue("null", javaType41);
        org.codehaus.jackson.node.ArrayNode arrayNode44 = objectMapper15.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode46 = objectMapper45.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema47 = null;
        org.codehaus.jackson.map.ObjectReader objectReader48 = objectMapper45.schemaBasedReader(formatSchema47);
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode50 = objectMapper49.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema51 = null;
        org.codehaus.jackson.map.ObjectReader objectReader52 = objectMapper49.schemaBasedReader(formatSchema51);
        byte[] byteArray54 = objectMapper49.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode55 = objectMapper45.valueToTree((java.lang.Object) 10L);
        byte[] byteArray56 = objectMapper15.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializerProvider serializerProvider57 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory58 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper59.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider63 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory58, serializerProvider62, deserializerProvider63);
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode66 = objectMapper65.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema67 = null;
        org.codehaus.jackson.map.ObjectReader objectReader68 = objectMapper65.schemaBasedReader(formatSchema67);
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode70 = objectMapper69.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema71 = null;
        org.codehaus.jackson.map.ObjectReader objectReader72 = objectMapper69.schemaBasedReader(formatSchema71);
        byte[] byteArray74 = objectMapper69.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode75 = objectMapper65.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser76 = objectMapper64.treeAsTokens(jsonNode75);
        org.codehaus.jackson.JsonNode jsonNode77 = objectMapper15.readTree(jsonParser76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = objectMapper0.writeValueAsString((java.lang.Object) objectMapper15);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: No serializer found for class org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.codehaus.jackson.map.ObjectMapper[\"serializationConfig\"]->org.codehaus.jackson.map.SerializationConfig[\"annotationIntrospector\"])");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializationConfig14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectWriter32);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "hi!");
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(javaType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(restStorageService43);
        org.junit.Assert.assertNotNull(arrayNode44);
        org.junit.Assert.assertNotNull(objectNode46);
        org.junit.Assert.assertNotNull(objectReader48);
        org.junit.Assert.assertNotNull(objectNode50);
        org.junit.Assert.assertNotNull(objectReader52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[49, 48]");
        org.junit.Assert.assertNotNull(serializerProvider57);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(objectNode66);
        org.junit.Assert.assertNotNull(objectReader68);
        org.junit.Assert.assertNotNull(objectNode70);
        org.junit.Assert.assertNotNull(objectReader72);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode75);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonNode77);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        byte[] byteArray19 = objectMapper14.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema20 = null;
        org.codehaus.jackson.map.ObjectReader objectReader21 = objectMapper14.reader(formatSchema20);
        java.text.DateFormat dateFormat22 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter23 = objectMapper14.writer(dateFormat22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory26 = objectMapper24.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper14.setNodeFactory(jsonNodeFactory26);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper13.setNodeFactory(jsonNodeFactory26);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setAnnotationIntrospector(annotationIntrospector29);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader21);
        org.junit.Assert.assertNotNull(objectWriter23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(jsonNodeFactory26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper30);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.PrettyPrinter prettyPrinter1 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper0.prettyPrintingWriter(prettyPrinter1);
        org.codehaus.jackson.FormatSchema formatSchema3 = null;
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper0.schemaBasedReader(formatSchema3);
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5, serializerProvider9, deserializerProvider10);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.setAnnotationIntrospector(annotationIntrospector12);
        org.codehaus.jackson.FormatSchema formatSchema14 = null;
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper11.schemaBasedReader(formatSchema14);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory16 = objectMapper11.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper0.setNodeFactory(jsonNodeFactory16);
        java.io.Reader reader18 = null;
        com.google.common.base.Joiner joiner19 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger21 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable22 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode27 = objectMapper26.createObjectNode();
        java.lang.Object[] objArray28 = new java.lang.Object[] { providerCredentials24, objectMapper26 };
        emittingLogger21.info(throwable22, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray28);
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        java.io.File file34 = new java.io.File("hi!");
        java.io.File file36 = new java.io.File(file34, "");
        java.lang.Class<?> wildcardClass37 = file34.getClass();
        org.codehaus.jackson.type.JavaType javaType38 = objectMapper32.constructType((java.lang.reflect.Type) wildcardClass37);
        com.metamx.emitter.EmittingLogger emittingLogger40 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider47 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider48 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig49 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider47, deserializerProvider48, serializationConfig49, deserializationConfig50);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider52 = objectMapper51.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper53.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper53.disableDefaultTyping();
        java.lang.Object obj56 = null;
        java.lang.String str57 = objectMapper53.writeValueAsString(obj56);
        com.metamx.druid.client.DataSegment.Builder builder58 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder58.dimensions((java.util.List<java.lang.String>) strList61);
        com.metamx.emitter.EmittingLogger emittingLogger65 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray67 = new java.lang.Object[] { objectMapper43, deserializerProvider52, objectMapper53, strList61, emittingLogger65, (byte) 1 };
        emittingLogger40.error(throwable41, "{\"\": \"s3.amazonaws.com\"}", objArray67);
        java.lang.Throwable throwable69 = null;
        java.io.File file72 = new java.io.File("hi!");
        java.io.File file74 = new java.io.File(file72, "");
        java.io.File file75 = file72.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode77 = objectMapper76.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory78 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper79.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = objectMapper79.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider82 = objectMapper79.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider83 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper84 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory78, serializerProvider82, deserializerProvider83);
        org.jets3t.service.security.ProviderCredentials providerCredentials85 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service86 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials85);
        org.jets3t.service.security.ProviderCredentials providerCredentials87 = restS3Service86.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager88 = null;
        restS3Service86.setHttpConnectionManager(httpConnectionManager88);
        java.lang.Object[] objArray92 = new java.lang.Object[] { file75, objectMapper76, objectMapper84, restS3Service86, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger40.info(throwable69, "", objArray92);
        java.lang.String str94 = joiner19.join((java.lang.Object) emittingLogger21, (java.lang.Object) javaType38, objArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver95 = objectMapper17.readValue(reader18, javaType38);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectReader4);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(jsonNodeFactory16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(joiner19);
        org.junit.Assert.assertNotNull(objectNode27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNull("file34.getParent() == null", file34.getParent());
        org.junit.Assert.assertEquals(file34.toString(), "hi!");
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(javaType38);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(deserializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "null" + "'", str57, "null");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNull("file72.getParent() == null", file72.getParent());
        org.junit.Assert.assertEquals(file72.toString(), "hi!");
        org.junit.Assert.assertNull("file74.getParent() == null", file74.getParent());
        org.junit.Assert.assertEquals(file74.toString(), "hi!");
        org.junit.Assert.assertNotNull(file75);
// flaky:         org.junit.Assert.assertEquals(file75.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode77);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(objectMapper81);
        org.junit.Assert.assertNotNull(serializerProvider82);
        org.junit.Assert.assertNull(providerCredentials87);
        org.junit.Assert.assertNotNull(objArray92);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        java.util.Calendar calendar10 = null;
        java.util.Calendar calendar11 = null;
        java.lang.String[] strArray13 = new java.lang.String[] {};
        java.lang.String str14 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray13);
        java.lang.String[] strArray21 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str22 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray21);
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject24 = restS3Service1.getObjectDetails("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", calendar10, calendar11, strArray13, strArray21);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\"\": \"\"}" + "'", str14, "{\"\": \"\"}");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str22, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str23, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.io.File file2 = new java.io.File("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "");
        boolean boolean3 = file2.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file2.toString(), "{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Range((int) 'a', (int) (byte) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[\"content-length-range\", 97, 100]" + "'", str2, "[\"content-length-range\", 97, 100]");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        boolean boolean4 = file2.setReadOnly();
        boolean boolean5 = file2.isDirectory();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setAnnotationIntrospector(annotationIntrospector7);
        java.text.DateFormat dateFormat9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper6.writer(dateFormat9);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = objectMapper6.getDeserializationConfig();
        org.codehaus.jackson.JsonFactory jsonFactory12 = objectMapper6.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(deserializationConfig11);
        org.junit.Assert.assertNotNull(jsonFactory12);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder30.dimensions((java.util.List<java.lang.String>) strList33);
        java.lang.String str36 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder28.dimensions((java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder38 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service40 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = restS3Service40.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager42 = null;
        restS3Service40.setHttpConnectionManager(httpConnectionManager42);
        java.util.List<java.lang.String> strList44 = restS3Service40.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder45 = builder38.dimensions(strList44);
        com.metamx.druid.shard.ShardSpec shardSpec46 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment48 = new com.metamx.druid.client.DataSegment("{\"\": \"s3.amazonaws.com\"}/hi!", interval1, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", strMap26, (java.util.List<java.lang.String>) strList33, strList44, shardSpec46, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str36, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(providerCredentials41);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        boolean boolean6 = file1.setExecutable(false, true);
        boolean boolean7 = file1.createNewFile();
        java.io.File file9 = new java.io.File(file1, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        java.io.File file11 = new java.io.File(file9, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file9.toString(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertEquals(file11.getParent(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/http:/s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C");
        org.junit.Assert.assertEquals(file11.toString(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/http:/s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder3.dimensions(strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder3.loadSpec(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval17 = null;
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.interval(interval17);
        com.metamx.druid.client.DataSegment.Builder builder19 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder19.dimensions((java.util.List<java.lang.String>) strList22);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder24.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder28 = builder26.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder28.metrics((java.util.List<java.lang.String>) strList32);
        org.joda.time.Interval interval36 = null;
        com.metamx.druid.client.DataSegment.Builder builder37 = builder28.interval(interval36);
        org.joda.time.Interval interval38 = null;
        com.metamx.druid.client.DataSegment.Builder builder39 = builder28.interval(interval38);
        com.metamx.druid.client.DataSegment.Builder builder40 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder42 = builder40.size(0L);
        org.joda.time.Interval interval43 = null;
        com.metamx.druid.client.DataSegment.Builder builder44 = builder42.interval(interval43);
        java.lang.String[] strArray48 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder42.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder39.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder16.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder54.dimensions((java.util.List<java.lang.String>) strList57);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder59.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder63 = builder61.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder64 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.metamx.druid.client.DataSegment.Builder builder69 = builder64.dimensions((java.util.List<java.lang.String>) strList67);
        com.metamx.druid.client.DataSegment.Builder builder70 = builder63.metrics((java.util.List<java.lang.String>) strList67);
        com.metamx.druid.client.DataSegment.Builder builder71 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.metamx.druid.client.DataSegment.Builder builder76 = builder71.dimensions((java.util.List<java.lang.String>) strList74);
        com.metamx.druid.client.DataSegment.Builder builder77 = builder70.metrics((java.util.List<java.lang.String>) strList74);
        com.metamx.druid.shard.ShardSpec shardSpec78 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment80 = new com.metamx.druid.client.DataSegment("hi!/http:/s3.amazonaws.com", interval1, "{\"\": \"s3.amazonaws.com\"}", strMap14, (java.util.List<java.lang.String>) strList49, (java.util.List<java.lang.String>) strList74, shardSpec78, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        java.text.DateFormat dateFormat10 = null;
        objectMapper6.setDateFormat(dateFormat10);
        org.codehaus.jackson.JsonFactory jsonFactory13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = objectMapper14.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory13, serializerProvider17, deserializerProvider18);
        org.codehaus.jackson.map.SerializerFactory serializerFactory20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.setSerializerFactory(serializerFactory20);
        org.codehaus.jackson.PrettyPrinter prettyPrinter22 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter23 = objectMapper21.prettyPrintingWriter(prettyPrinter22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        java.io.File file28 = new java.io.File("hi!");
        java.io.File file30 = new java.io.File(file28, "");
        java.lang.Class<?> wildcardClass31 = file28.getClass();
        org.codehaus.jackson.type.JavaType javaType32 = objectMapper26.constructType((java.lang.reflect.Type) wildcardClass31);
        boolean boolean33 = objectMapper21.canDeserialize(javaType32);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService34 = objectMapper6.readValue("null", javaType32);
        org.codehaus.jackson.node.ArrayNode arrayNode35 = objectMapper6.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode37 = objectMapper36.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema38 = null;
        org.codehaus.jackson.map.ObjectReader objectReader39 = objectMapper36.schemaBasedReader(formatSchema38);
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode41 = objectMapper40.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema42 = null;
        org.codehaus.jackson.map.ObjectReader objectReader43 = objectMapper40.schemaBasedReader(formatSchema42);
        byte[] byteArray45 = objectMapper40.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode46 = objectMapper36.valueToTree((java.lang.Object) 10L);
        byte[] byteArray47 = objectMapper6.writeValueAsBytes((java.lang.Object) 10L);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher48 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper6);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(serializerProvider17);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectWriter23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNull("file28.getParent() == null", file28.getParent());
        org.junit.Assert.assertEquals(file28.toString(), "hi!");
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(javaType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(restStorageService34);
        org.junit.Assert.assertNotNull(arrayNode35);
        org.junit.Assert.assertNotNull(objectNode37);
        org.junit.Assert.assertNotNull(objectReader39);
        org.junit.Assert.assertNotNull(objectNode41);
        org.junit.Assert.assertNotNull(objectReader43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[49, 48]");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray9 = restS3Service1.getObjectVersions("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", ":");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
        org.codehaus.jackson.map.HandlerInstantiator handlerInstantiator3 = null;
        objectMapper0.setHandlerInstantiator(handlerInstantiator3);
        org.codehaus.jackson.Version version5 = objectMapper0.version();
        org.codehaus.jackson.map.Module module6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.withModule(module6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.deleteWebsiteConfig("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}\", \"\"]/?website': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        boolean boolean6 = file1.delete();
        boolean boolean8 = file1.setExecutable(false);
        boolean boolean9 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.size(0L);
        org.joda.time.Interval interval3 = null;
        com.metamx.druid.client.DataSegment.Builder builder4 = builder2.interval(interval3);
        java.lang.String[] strArray8 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.metamx.druid.client.DataSegment.Builder builder11 = builder2.metrics((java.util.List<java.lang.String>) strList9);
        com.metamx.druid.client.DataSegment.Builder builder13 = builder11.dataSource("{\"\": \"s3.amazonaws.com\"}/hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment14 = builder13.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: interval");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.io.File file2 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "hi!");
        long long3 = file2.getUsableSpace();
        java.lang.String str4 = file2.getPath();
        boolean boolean5 = file2.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{\"\": \"s3.amazonaws.com\"}/hi!" + "'", str4, "{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service4.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient10 = null;
        restS3Service4.setHttpClient(httpClient10);
        org.jets3t.service.Jets3tProperties jets3tProperties12 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", credentialsProvider2, jets3tProperties12, hostConfiguration13);
        org.jets3t.service.model.S3Bucket s3Bucket16 = null;
        org.jets3t.service.model.S3Object s3Object17 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service14.putVersionedObjectAcl("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", s3Bucket16, s3Object17);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jets3tProperties12);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2, jets3tProperties8);
        boolean boolean10 = restS3Service9.isAuthenticatedConnection();
        org.jets3t.service.model.StorageBucket storageBucket11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service9.deleteBucket(storageBucket11);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        org.codehaus.jackson.PrettyPrinter prettyPrinter7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper0.writer(prettyPrinter7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper0.enableDefaultTyping();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(objectMapper9);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        org.jets3t.service.model.StorageObject storageObject13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service1.updateObjectMetadata("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", storageObject13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.acl.AccessControlList accessControlList20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", ":", "[\"content-length-range\", 100, 4]", accessControlList20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver2 = null;
        objectMapper1.setSubtypeResolver(subtypeResolver2);
        java.io.File file4 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = restS3Service6.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager8 = null;
        restS3Service6.setHttpConnectionManager(httpConnectionManager8);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper1.writeValue(file4, (java.lang.Object) restS3Service6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials7);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service1.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.model.StorageObject storageObject7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap8 = restS3Service1.updateObjectMetadata("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", storageObject7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        java.lang.String str8 = restS3Service1.getEndpoint();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject11 = restS3Service1.getObjectDetails("[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$s3.amazonaws.com\", \"\"]/%7B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D%22%3A%20%22%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        int int8 = restS3Service1.checkBucketStatus("x-amz-meta-");
        boolean boolean9 = restS3Service1.isHttpsOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray13 = restS3Service1.listObjects("null", "{\"\": \"s3.amazonaws.com\"}/hi!", "[\"content-length-range\", 1, 0]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper7.reader(jsonNodeFactory11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray16 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enable(featureArray16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper7.enable(featureArray16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.util.Calendar calendar23 = null;
        java.util.Calendar calendar24 = null;
        java.lang.String[] strArray30 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str31 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "[\"content-length-range\", 58, 1]" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object37 = restS3Service1.getVersionedObjectDetails("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"content-length-range\", 58, 1]/null", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", calendar23, calendar24, strArray30, strArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/null/http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent?versionId=%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str31, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties8);
        java.util.Calendar calendar13 = null;
        java.util.Calendar calendar14 = null;
        java.lang.String[] strArray20 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str21 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray20);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.lang.String str24 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object25 = restS3Service9.getVersionedObjectDetails("http://s3.amazonaws.com//hi%21?torrent", "[\"content-length-range\", 100, 4]", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", calendar13, calendar14, strArray20, strArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 100, 4]/http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent?versionId=http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str21, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\"\": \"\"}" + "'", str24, "{\"\": \"\"}");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver3 = objectMapper2.getSubtypeResolver();
        java.io.Writer writer4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema7 = null;
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper5.schemaBasedReader(formatSchema7);
        byte[] byteArray10 = objectMapper5.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema11 = null;
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper5.reader(formatSchema11);
        java.text.DateFormat dateFormat13 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter14 = objectMapper5.writer(dateFormat13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory17 = objectMapper15.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper5.setNodeFactory(jsonNodeFactory17);
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        java.lang.Object obj22 = null;
        java.lang.String str23 = objectMapper19.writeValueAsString(obj22);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider29, deserializerProvider30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper19.setSerializerProvider(serializerProvider29);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig33 = objectMapper19.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper5.setDeserializationConfig(deserializationConfig33);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper2.writeValue(writer4, (java.lang.Object) objectMapper34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(subtypeResolver3);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(objectWriter14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(jsonNodeFactory17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "null" + "'", str23, "null");
        org.junit.Assert.assertNotNull(deserializerProvider24);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializationConfig33);
        org.junit.Assert.assertNotNull(objectMapper34);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"content-length-range\", 58, 1]");
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger1;
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.model.StorageBucket storageBucket7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl(storageBucket7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = objectMapper5.getSerializerProvider();
        java.text.DateFormat dateFormat9 = null;
        objectMapper5.setDateFormat(dateFormat9);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper5.enableDefaultTyping(defaultTyping11);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher13 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig4, objectMapper12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList18 = restS3Service1.multipartListUploads("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", (java.lang.Integer) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}\", \"\"]/?max-uploads=100&upload-id-marker=http%3A%2F%2Fs3.amazonaws.com.s3.amazonaws.com%2F%3Ftorrent&key-marker=%7B%22%5B%22content-length-range%22%2C%20-226%2C%20-226%5D%22%3A%20%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%2Fhi%21%22%7D&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(serializerProvider8);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        boolean boolean16 = restS3Service1.isShutdown();
        org.jets3t.service.model.MultipartUpload multipartUpload17 = null;
        org.jets3t.service.model.S3Object s3Object19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartPart multipartPart20 = restS3Service1.multipartUploadPart(multipartUpload17, (java.lang.Integer) 4, s3Object19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.model.StorageBucket storageBucket19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.putBucketAcl(storageBucket19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider5 = objectMapper2.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider5, deserializerProvider6);
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = objectMapper28.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider20, serializationConfig21, deserializationConfig31);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig41 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38, serializerProvider39, deserializerProvider40, serializationConfig41, deserializationConfig42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper43.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig45 = null;
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.codehaus.jackson.map.SerializerFactory serializerFactory53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.setSerializerFactory(serializerFactory53);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig55 = objectMapper52.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider44, serializationConfig45, deserializationConfig55);
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider13, deserializerProvider44);
        org.codehaus.jackson.map.SerializationConfig serializationConfig58 = null;
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory64 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider65 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider66 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig67 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig68 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory64, serializerProvider65, deserializerProvider66, serializationConfig67, deserializationConfig68);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider70 = objectMapper69.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig71 = null;
        org.codehaus.jackson.JsonFactory jsonFactory72 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider76 = objectMapper73.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider77 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory72, serializerProvider76, deserializerProvider77);
        org.codehaus.jackson.map.SerializerFactory serializerFactory79 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper78.setSerializerFactory(serializerFactory79);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig81 = objectMapper78.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider70, serializationConfig71, deserializationConfig81);
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider5, deserializerProvider44, serializationConfig58, deserializationConfig81);
        org.codehaus.jackson.map.ObjectWriter objectWriter84 = objectMapper83.writerWithDefaultPrettyPrinter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter85 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter86 = objectMapper83.prettyPrintingWriter(prettyPrinter85);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(serializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(deserializationConfig31);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(deserializationConfig55);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(deserializerProvider70);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper75);
        org.junit.Assert.assertNotNull(serializerProvider76);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(deserializationConfig81);
        org.junit.Assert.assertNotNull(objectWriter84);
        org.junit.Assert.assertNotNull(objectWriter86);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        boolean boolean24 = restS3Service21.isBucketAccessible("");
        java.lang.String str25 = restS3Service21.getRestMetadataPrefix();
        boolean boolean26 = restS3Service21.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = restS3Service21.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager27);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service33 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials32);
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = restS3Service33.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager35 = null;
        restS3Service33.setHttpConnectionManager(httpConnectionManager35);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager37 = null;
        restS3Service33.setHttpConnectionManager(httpConnectionManager37);
        java.lang.String str41 = restS3Service33.createTorrentUrl("", "hi!");
        boolean boolean43 = restS3Service33.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date44 = restS3Service33.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = restS3Service1.createSignedGetUrl("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "{\"\": \"s3.amazonaws.com\"}", providerCredentials31, date44, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "x-amz-meta-" + "'", str25, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager27);
        org.junit.Assert.assertNull(providerCredentials34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str41, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Thu Nov 04 08:18:47 BRT 2021");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.util.Comparator<com.metamx.druid.client.DataSegment> dataSegmentComparator0 = com.metamx.druid.client.DataSegment.bucketMonthComparator();
        org.junit.Assert.assertNotNull(dataSegmentComparator0);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        java.io.File file11 = new java.io.File("hi!");
        java.io.File file13 = new java.io.File(file11, "");
        java.lang.Class<?> wildcardClass14 = file11.getClass();
        org.codehaus.jackson.type.JavaType javaType15 = objectMapper9.constructType((java.lang.reflect.Type) wildcardClass14);
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper6.writerWithType(javaType15);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = objectMapper0.readValue("[\"content-length-range\", 100, 4]", javaType15);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Can not deserialize instance of java.io.File out of START_ARRAY token? at [Source: java.io.StringReader@380e076b; line: 1, column: 1]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(javaType15);
        org.junit.Assert.assertNotNull(objectWriter16);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig9 = objectMapper6.copyDeserializationConfig();
        org.codehaus.jackson.Version version10 = objectMapper6.version();
        java.io.File file12 = new java.io.File("hi!");
        java.io.File file14 = new java.io.File(file12, "");
        java.io.File file16 = new java.io.File(file14, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.codehaus.jackson.type.TypeReference typeReference17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.S3Service s3Service18 = objectMapper6.readValue(file14, typeReference17);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(deserializationConfig9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "hi!");
        org.junit.Assert.assertEquals(file16.getParent(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file16.toString(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        org.jets3t.service.Jets3tProperties jets3tProperties18 = restS3Service14.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "", credentialsProvider12, jets3tProperties18, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider9, jets3tProperties18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider6, jets3tProperties18);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager28);
        boolean boolean30 = restS3Service24.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder31 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder33 = builder31.size(0L);
        org.joda.time.Interval interval34 = null;
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.interval(interval34);
        java.lang.String[] strArray39 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder33.metrics((java.util.List<java.lang.String>) strList40);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider45 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service46 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43, "null", credentialsProvider45);
        org.jets3t.service.security.ProviderCredentials providerCredentials47 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service48 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service48.renameMetadataKeys(strMap49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = restS3Service46.renameMetadataKeys(strMap49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder33.loadSpec(strMap51);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service24.renameMetadataKeys(strMap51);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service22.renameMetadataKeys(strMap51);
        org.jets3t.service.security.ProviderCredentials providerCredentials55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = org.jets3t.service.S3Service.createSignedUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", strMap51, providerCredentials55, 0L, false, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(jets3tProperties18);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        org.jets3t.service.Jets3tProperties jets3tProperties18 = restS3Service14.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "", credentialsProvider12, jets3tProperties18, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider9, jets3tProperties18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider6, jets3tProperties18);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager28);
        boolean boolean30 = restS3Service24.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder31 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder33 = builder31.size(0L);
        org.joda.time.Interval interval34 = null;
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.interval(interval34);
        java.lang.String[] strArray39 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder33.metrics((java.util.List<java.lang.String>) strList40);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider45 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service46 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43, "null", credentialsProvider45);
        org.jets3t.service.security.ProviderCredentials providerCredentials47 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service48 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service48.renameMetadataKeys(strMap49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = restS3Service46.renameMetadataKeys(strMap49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder33.loadSpec(strMap51);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service24.renameMetadataKeys(strMap51);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service22.renameMetadataKeys(strMap51);
        org.jets3t.service.security.ProviderCredentials providerCredentials55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = org.jets3t.service.S3Service.createSignedUrl("[\"content-length-range\", -226, -226]", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap54, providerCredentials55, 100L, false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(jets3tProperties18);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.codehaus.jackson.map.SerializerFactory serializerFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory0);
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper1.prettyPrintingWriter(prettyPrinter2);
        org.codehaus.jackson.type.TypeReference typeReference5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.String> strCollection6 = objectMapper1.readValue("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", typeReference5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter3);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service21.deleteVersionedObject("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "[\"content-length-range\", 100, 4]", "http://s3.amazonaws.com//?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 100, 4]/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent?versionId=%5B%22starts-with%22%2C%20%22%24%7B%22%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D%22%3A%20%22%22%7D%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        int int8 = restS3Service1.checkBucketStatus("x-amz-meta-");
        boolean boolean9 = restS3Service1.isHttpsOnly();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteObjectWithSignedUrl("[\"starts-with\", \"$s3.amazonaws.com\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$s3.amazonaws.com\", \"\"]': incorrect path");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        org.jets3t.service.model.S3Object s3Object36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap38 = restS3Service1.copyVersionedObject("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", s3Object36, true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", credentialsProvider2);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider4 = restS3Service3.getCredentialsProvider();
        org.jets3t.service.model.StorageObject storageObject6 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putObjectMaybeAsMultipart("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", storageObject6, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(credentialsProvider4);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service1.getObject("hi!/http:/s3.amazonaws.com", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.jets3t.service.acl.AccessControlList accessControlList9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", accessControlList9);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The object '[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("hi!");
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper5.reader(jsonNodeFactory9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray14 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper11.enable(featureArray14);
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper5.enable(featureArray14);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper3.enable(featureArray14);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.service.AlertBuilder alertBuilder18 = emittingLogger1.makeAlert("s3.amazonaws.com", (java.lang.Object[]) featureArray14);
            org.junit.Assert.fail("Expected exception of type com.metamx.common.ISE; message: Emitter not initialized!  Cannot alert.  Please make sure to call class com.metamx.emitter.EmittingLogger.registerEmitter()");
        } catch (com.metamx.common.ISE e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectReader10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.io.File file2 = new java.io.File(":", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        java.io.File file4 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        java.nio.file.Path path5 = file4.toPath();
        boolean boolean6 = file4.createNewFile();
        boolean boolean7 = file2.renameTo(file4);
        org.junit.Assert.assertEquals(file2.getParent(), ":/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), ":/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertNotNull(path5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.JsonGenerator jsonGenerator13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode22 = objectMapper21.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema23 = null;
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper21.schemaBasedReader(formatSchema23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode26 = objectMapper25.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema27 = null;
        org.codehaus.jackson.map.ObjectReader objectReader28 = objectMapper25.schemaBasedReader(formatSchema27);
        byte[] byteArray30 = objectMapper25.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode31 = objectMapper21.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser32 = objectMapper20.treeAsTokens(jsonNode31);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper8.writeTree(jsonGenerator13, jsonNode31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not pass null serializerFactory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectNode22);
        org.junit.Assert.assertNotNull(objectReader24);
        org.junit.Assert.assertNotNull(objectNode26);
        org.junit.Assert.assertNotNull(objectReader28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode31);
        org.junit.Assert.assertNotNull(jsonParser32);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager8 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager8);
        boolean boolean10 = restS3Service4.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder13 = builder11.size(0L);
        org.joda.time.Interval interval14 = null;
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.interval(interval14);
        java.lang.String[] strArray19 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder13.metrics((java.util.List<java.lang.String>) strList20);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23, "null", credentialsProvider25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service28.renameMetadataKeys(strMap29);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service26.renameMetadataKeys(strMap29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder13.loadSpec(strMap31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service4.renameMetadataKeys(strMap31);
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder35.dimensions((java.util.List<java.lang.String>) strList38);
        java.lang.String str41 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder42 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder42.dimensions((java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder49 = builder47.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder51 = builder49.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder52 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder52.dimensions((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder51.metrics((java.util.List<java.lang.String>) strList55);
        org.joda.time.Interval interval59 = null;
        com.metamx.druid.client.DataSegment.Builder builder60 = builder51.interval(interval59);
        org.joda.time.Interval interval61 = null;
        com.metamx.druid.client.DataSegment.Builder builder62 = builder51.interval(interval61);
        com.metamx.druid.client.DataSegment.Builder builder63 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder65 = builder63.size(0L);
        org.joda.time.Interval interval66 = null;
        com.metamx.druid.client.DataSegment.Builder builder67 = builder65.interval(interval66);
        java.lang.String[] strArray71 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.metamx.druid.client.DataSegment.Builder builder74 = builder65.metrics((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder62.metrics((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.shard.ShardSpec shardSpec76 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment78 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", -226, -226]", interval1, "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", strMap31, (java.util.List<java.lang.String>) strList38, (java.util.List<java.lang.String>) strList72, shardSpec76, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str41, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray24 = restS3Service19.listObjects(s3Bucket20, "", "", (-1L));
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject22 = restS3Service19.getObjectDetails("[\"content-length-range\", 58, 1]/null", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/null/http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2F%257B%2522%257B%2522%2522%253A%2520%2522s3.amazonaws.com%2522%257D%2522%253A%2520%2522http%253A%2F%2Fs3.amazonaws.com%2F%25257B%252522http%25253A%25252F%25252Fs3.amazonaws.com%25252Fhttp%2525253A%2525252F%2525252Fs3.amazonaws.com%2525252F%2525252F%2525253Ftorrent%25252Fhi%25252521%25253Ftorrent%252522%25253A%252520%252522x-amz-meta-%252522%25257D%2F%25253Cform%252520action%25253D%252522https%25253A%2F%2F.s3.amazonaws.com%2F%252522%252520method%25253D%252522post%252522%252520enctype%25253D%252522multipart%2Fform-data%252522%25253E%25250A%25253Cinput%252520type%25253D%252522hidden%252522%252520name%25253D%252522key%252522%252520value%25253D%252522hi%252521%252522%25253E%25250A%25253Cinput%252520name%25253D%252522file%252522%252520type%25253D%252522file%252522%25253E%25250A%25253Cbr%25253E%25250A%25253Cinput%252520type%25253D%252522submit%252522%252520value%25253D%252522Upload%252520to%252520Amazon%252520S3%252522%25253E%25250A%25253C%2Fform%25253E%253Ftorrent%252C%255B%2522content-length-range%2522%252C%252010%252C%252047%255D%252C%255B%2522content-length-range%2522%252C%252010%252C%252047%255D%252C%255B%2522content-length-range%2522%252C%25201%252C%25200%255D%2522%257D%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializationConfig(serializationConfig15);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver18 = objectMapper14.getSubtypeResolver();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(subtypeResolver18);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2);
        org.jets3t.service.model.StorageObject storageObject5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putObjectMaybeAsMultipart("", storageObject5, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.io.File file1 = new java.io.File("x-amz-meta-");
        java.io.File file3 = new java.io.File(file1, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        boolean boolean5 = file3.setLastModified((long) 4);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "x-amz-meta-");
        org.junit.Assert.assertEquals(file3.getParent(), "x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file3.toString(), "x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder1 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.metamx.druid.client.DataSegment.Builder builder6 = builder1.dimensions((java.util.List<java.lang.String>) strList4);
        com.metamx.druid.client.DataSegment.Builder builder8 = builder6.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder11.dimensions((java.util.List<java.lang.String>) strList14);
        com.metamx.druid.client.DataSegment.Builder builder17 = builder10.metrics((java.util.List<java.lang.String>) strList14);
        com.metamx.druid.client.DataSegment.Builder builder18 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder18.dimensions((java.util.List<java.lang.String>) strList21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder17.metrics((java.util.List<java.lang.String>) strList21);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder0.metrics((java.util.List<java.lang.String>) strList21);
        com.metamx.druid.shard.ShardSpec shardSpec26 = null;
        com.metamx.druid.client.DataSegment.Builder builder27 = builder25.shardSpec(shardSpec26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.acl.AccessControlList accessControlList19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAclWithSignedUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", accessControlList19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.IllegalArgumentException: host parameter is null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper16);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioningAndMFA("x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", credentialsProvider2, jets3tProperties11);
        boolean boolean15 = restS3Service14.isHttpsOnly();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service14.deleteBucketPolicy("x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder8 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.size(0L);
        org.joda.time.Interval interval11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder10.interval(interval11);
        java.lang.String[] strArray16 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.metamx.druid.client.DataSegment.Builder builder19 = builder10.metrics((java.util.List<java.lang.String>) strList17);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20, "null", credentialsProvider22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service25.renameMetadataKeys(strMap26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = restS3Service23.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder29 = builder10.loadSpec(strMap28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service1.renameMetadataKeys(strMap28);
        java.lang.String str31 = restS3Service1.getDevPayUserToken();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        java.lang.String str7 = restS3Service5.getInvokingApplicationDescription();
        java.lang.String str10 = restS3Service5.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = restS3Service5.renameMetadataKeys(strMap14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = org.jets3t.service.S3Service.createSignedUrl("http://s3.amazonaws.com//?torrent", "[\"content-length-range\", 10, 47]", "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "hi!/http:/s3.amazonaws.com", strMap14, providerCredentials16, (long) ':', false, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str10, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        java.io.File file24 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        java.net.URI uRI25 = file24.toURI();
        com.metamx.druid.client.DataSegment dataSegment26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment27 = s3SegmentPusher21.push(file24, dataSegment26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertEquals(file24.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file24.toString(), "http:/s3.amazonaws.com/hi%21?torrent/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.junit.Assert.assertNotNull(uRI25);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service1.renameMetadataKeys(strMap10);
        boolean boolean12 = restS3Service1.isRequesterPaysEnabled();
        java.util.Calendar calendar15 = null;
        java.util.Calendar calendar16 = null;
        java.lang.String[] strArray22 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray22);
        java.lang.String[] strArray30 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str31 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray30);
        java.lang.String str32 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject33 = restS3Service1.getObjectDetails("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "", calendar15, calendar16, strArray22, strArray30);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str23, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str31, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str32, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        java.io.File file18 = new java.io.File("hi!");
        java.io.File file20 = new java.io.File(file18, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file22 = new java.io.File(file20, "");
        file22.deleteOnExit();
        org.codehaus.jackson.type.TypeReference typeReference24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Watchable watchable25 = objectMapper12.readValue(file22, typeReference24);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form> (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "hi!");
        org.junit.Assert.assertEquals(file20.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file20.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file22.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file22.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper4.schemaBasedWriter(formatSchema5);
        java.text.DateFormat dateFormat7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper4.writer(dateFormat7);
        org.codehaus.jackson.map.SerializerFactory serializerFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper4.setSerializerFactory(serializerFactory9);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(objectMapper10);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper0.defaultPrettyPrintingWriter();
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider10 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig11 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider9, deserializerProvider10, serializationConfig11, deserializationConfig12);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = objectMapper13.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper17.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider20, deserializerProvider21);
        org.codehaus.jackson.map.SerializerFactory serializerFactory23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.setSerializerFactory(serializerFactory23);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig25 = objectMapper22.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider14, serializationConfig15, deserializationConfig25);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.setSerializerProvider(serializerProvider7);
        org.codehaus.jackson.map.ObjectWriter objectWriter28 = objectMapper0.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider29 = null;
        objectMapper0.setFilters(filterProvider29);
        java.io.Reader reader31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode32 = objectMapper0.readTree(reader31);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(deserializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(deserializationConfig25);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectWriter28);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service4.getProviderCredentials();
        java.lang.String str11 = restS3Service4.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean12 = restS3Service4.isShutdown();
        java.util.Date date13 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray14 = new java.lang.String[] {};
        java.lang.String[] strArray20 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str21 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = org.jets3t.service.S3Service.buildPostForm("[\"content-length-range\", 97, 100]", "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", providerCredentials2, date13, strArray14, strArray20, "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str11, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 04 08:18:52 BRT 2021");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str21, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        boolean boolean8 = file1.createNewFile();
        java.io.File file9 = file1.getAbsoluteFile();
        java.lang.String str10 = file1.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        int int18 = restS3Service1.getInternalErrorRetryMax();
        org.jets3t.service.model.S3Bucket s3Bucket19 = null;
        org.jets3t.service.model.S3Object s3Object20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object21 = restS3Service1.putObject(s3Bucket19, s3Object20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.InjectableValues injectableValues5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper0.reader(injectableValues5);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectReader6);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory4 = objectMapper2.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader(jsonNodeFactory4);
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray9 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enable(featureArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper0.enable(featureArray9);
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper11.writer(prettyPrinter12);
        org.codehaus.jackson.map.ObjectWriter objectWriter14 = objectMapper11.defaultPrettyPrintingWriter();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(jsonNodeFactory4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter14);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher7 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper3);
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode9 = objectMapper3.readTree(reader8);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.model.MultipartUpload multipartUpload7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartPart> multipartPartList8 = restS3Service1.multipartListParts(multipartUpload7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setAnnotationIntrospector(annotationIntrospector10);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig12 = objectMapper9.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory17 = objectMapper15.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader18 = objectMapper13.reader(jsonNodeFactory17);
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper9.reader(jsonNodeFactory17);
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode21 = objectMapper20.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema22 = null;
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper20.schemaBasedReader(formatSchema22);
        byte[] byteArray25 = objectMapper20.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema26 = null;
        org.codehaus.jackson.map.ObjectReader objectReader27 = objectMapper20.reader(formatSchema26);
        java.text.DateFormat dateFormat28 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter29 = objectMapper20.writer(dateFormat28);
        com.metamx.emitter.EmittingLogger emittingLogger31 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean32 = emittingLogger31.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter36 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter37 = objectMapper34.writer(prettyPrinter36);
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper34.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader39 = objectMapper34.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter42 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter43 = objectMapper40.writer(prettyPrinter42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper40.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray45 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper40.enable(featureArray45);
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper34.disable(featureArray45);
        emittingLogger31.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray45);
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper20.enable(featureArray45);
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper9.enable(featureArray45);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.error("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", (java.lang.Object[]) featureArray45);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = '2'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializationConfig12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(jsonNodeFactory17);
        org.junit.Assert.assertNotNull(objectReader18);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(objectNode21);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader27);
        org.junit.Assert.assertNotNull(objectWriter29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectWriter37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectReader39);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectWriter43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(objectMapper50);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = restS3Service1.checkBucketStatus("http://s3.amazonaws.com//?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper8.reader();
        org.codehaus.jackson.map.InjectableValues injectableValues14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper8.setInjectableValues(injectableValues14);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNotNull(objectMapper15);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        restS3Service18.setRequesterPaysEnabled(true);
        org.jets3t.service.model.S3Object s3Object26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap28 = restS3Service18.copyVersionedObject("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", s3Object26, false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager11);
        boolean boolean13 = restS3Service7.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder14 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder16 = builder14.size(0L);
        org.joda.time.Interval interval17 = null;
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.interval(interval17);
        java.lang.String[] strArray22 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder16.metrics((java.util.List<java.lang.String>) strList23);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26, "null", credentialsProvider28);
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials30);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service31.renameMetadataKeys(strMap32);
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = restS3Service29.renameMetadataKeys(strMap32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder16.loadSpec(strMap34);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = restS3Service7.renameMetadataKeys(strMap34);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload37 = restS3Service3.multipartStartUpload("[\"content-length-range\", 100, 4]", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", strMap34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 100, 4]/http%3A%2F%2Fs3.amazonaws.com%2F%255B%2522starts-with%2522%252C%2520%2522%2524%252Fhome%252FCIN%252Flmps2%252Fsemantic-conflict-study%252FSMAT%252Foutput-test-dest%252Fdruid%252F05168808c278c080c59c19e858d9471b316cd1f5%252Frandoop-modified_4%252Fhi%2521%2522%252C%2520%2522%2522%255D%2Fhttp%253A%2F%2Fs3.amazonaws.com%2F%25257B%252522http%25253A%25252F%25252Fs3.amazonaws.com%25252Fhttp%2525253A%2525252F%2525252Fs3.amazonaws.com%2525252F%2525252F%2525253Ftorrent%25252Fhi%25252521%25253Ftorrent%252522%25253A%252520%252522x-amz-meta-%252522%25257D%2F%25253Cform%252520action%25253D%252522https%25253A%2F%2F.s3.amazonaws.com%2F%252522%252520method%25253D%252522post%252522%252520enctype%25253D%252522multipart%2Fform-data%252522%25253E%25250A%25253Cinput%252520type%25253D%252522hidden%252522%252520name%25253D%252522key%252522%252520value%25253D%252522hi%252521%252522%25253E%25250A%25253Cinput%252520name%25253D%252522file%252522%252520type%25253D%252522file%252522%25253E%25250A%25253Cbr%25253E%25250A%25253Cinput%252520type%25253D%252522submit%252522%252520value%25253D%252522Upload%252520to%252520Amazon%252520S3%252522%25253E%25250A%25253C%2Fform%25253E%253Ftorrent%3Ftorrent?uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "null", credentialsProvider8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service9.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = restS3Service1.renameMetadataKeys(strMap14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = restS3Service19.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager21 = null;
        restS3Service19.setHttpConnectionManager(httpConnectionManager21);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager23 = null;
        restS3Service19.setHttpConnectionManager(httpConnectionManager23);
        java.lang.String str27 = restS3Service19.createTorrentUrl("", "hi!");
        boolean boolean29 = restS3Service19.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date30 = restS3Service19.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = restS3Service1.createSignedHeadUrl("[\"content-length-range\", 97, 100]", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", date30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(providerCredentials20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str27, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Thu Nov 04 08:18:55 BRT 2021");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        java.io.File file4 = file2.getAbsoluteFile();
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5, "s3.amazonaws.com", credentialsProvider7);
        org.apache.commons.httpclient.HttpMethod httpMethod9 = null;
        restS3Service8.authorizeHttpRequest(httpMethod9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service12.getProviderCredentials();
        boolean boolean15 = restS3Service12.isBucketAccessible("");
        java.lang.String str16 = restS3Service12.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient17 = restS3Service12.getHttpClient();
        restS3Service8.setHttpClient(httpClient17);
        boolean boolean19 = file4.equals((java.lang.Object) restS3Service8);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "x-amz-meta-" + "'", str16, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        long long3 = file2.getUsableSpace();
        long long4 = file2.length();
        boolean boolean5 = file2.createNewFile();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 80259559424L + "'", long3 == 80259559424L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 4096L + "'", long4 == 4096L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        java.text.DateFormat dateFormat10 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper9.writer(dateFormat10);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectWriter11);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteObject("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]/%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = restS3Service15.getProviderCredentials();
        boolean boolean18 = restS3Service15.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service15.getProviderCredentials();
        java.lang.String str22 = restS3Service15.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean23 = restS3Service15.isShutdown();
        java.util.Date date24 = restS3Service15.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = restS3Service1.createSignedGetUrl("", "[\"content-length-range\", 97, 100]", date24, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(providerCredentials16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str22, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Thu Nov 04 08:18:56 BRT 2021");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.io.File file2 = new java.io.File("x-amz-meta-", "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals(file2.getParent(), "x-amz-meta-/[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-/[\"content-length-range\", 58, 1]/null");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        boolean boolean16 = restS3Service1.isShutdown();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray21 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper18.enable(featureArray21);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.setSerializationInclusion(inclusion23);
        org.codehaus.jackson.node.ArrayNode arrayNode25 = objectMapper24.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode27 = objectMapper26.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema28 = null;
        org.codehaus.jackson.map.ObjectReader objectReader29 = objectMapper26.schemaBasedReader(formatSchema28);
        byte[] byteArray31 = objectMapper26.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema32 = null;
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper26.reader(formatSchema32);
        java.text.DateFormat dateFormat34 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter35 = objectMapper26.writer(dateFormat34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory38 = objectMapper36.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper26.setNodeFactory(jsonNodeFactory38);
        org.codehaus.jackson.map.ObjectReader objectReader40 = objectMapper24.readerForUpdating((java.lang.Object) objectMapper39);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher41 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper24);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(arrayNode25);
        org.junit.Assert.assertNotNull(objectNode27);
        org.junit.Assert.assertNotNull(objectReader29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectWriter35);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(jsonNodeFactory38);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(objectReader40);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder3.dimensions(strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder3.loadSpec(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder19 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager23 = null;
        restS3Service21.setHttpConnectionManager(httpConnectionManager23);
        java.util.List<java.lang.String> strList25 = restS3Service21.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder26 = builder19.dimensions(strList25);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder18.dimensions(strList25);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder30 = builder28.size(0L);
        org.joda.time.Interval interval31 = null;
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.interval(interval31);
        java.lang.String[] strArray36 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder30.metrics((java.util.List<java.lang.String>) strList37);
        com.metamx.druid.shard.ShardSpec shardSpec40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment42 = new com.metamx.druid.client.DataSegment("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", interval1, "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", strMap14, strList25, (java.util.List<java.lang.String>) strList37, shardSpec40, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.MultipartUpload multipartUpload20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.multipartAbortUpload(multipartUpload20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk15 = restS3Service1.listVersionedObjectsChunked("hi!/http:/s3.amazonaws.com", "[\"content-length-range\", 97, 100]", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", (long) (-57), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectWriter objectWriter7 = objectMapper5.writer();
        java.io.File file9 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean11 = file9.setLastModified((long) (short) 10);
        java.io.File file12 = file9.getAbsoluteFile();
        java.net.URL uRL13 = file9.toURL();
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode14 = objectMapper5.readTree(uRL13);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21 (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter7);
        org.junit.Assert.assertEquals(file9.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file9.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(file12);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertNotNull(uRL13);
// flaky:         org.junit.Assert.assertEquals(uRL13.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getEndpoint();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.unsetNotificationConfig("[\"content-length-range\", 1, 0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/?notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "s3.amazonaws.com" + "'", str4, "s3.amazonaws.com");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory4 = objectMapper2.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader(jsonNodeFactory4);
        org.codehaus.jackson.map.InjectableValues injectableValues6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.setInjectableValues(injectableValues6);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper7.reader(jsonNodeFactory8);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(jsonNodeFactory4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectReader9);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        java.io.File file6 = new java.io.File("hi!");
        boolean boolean7 = file6.canRead();
        boolean boolean8 = file6.mkdirs();
        boolean boolean11 = file6.setExecutable(false, true);
        boolean boolean12 = file6.createNewFile();
        java.io.File file14 = new java.io.File(file6, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        java.io.File file15 = file14.getAbsoluteFile();
        java.io.File file17 = new java.io.File("hi!");
        java.io.File file19 = new java.io.File(file17, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean20 = file17.createNewFile();
        boolean boolean22 = file17.setExecutable(true);
        java.lang.String str23 = file17.getParent();
        boolean boolean24 = file17.mkdir();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.writeValue(file14, (java.lang.Object) file17);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"] (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file14.toString(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertNotNull(file15);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertEquals(file19.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file19.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        java.lang.String str4 = restS3Service1.getDevPayUserToken();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.unsetNotificationConfig("[\"content-length-range\", 10, 47]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 10, 47]/?notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker7 = objectMapper6.getVisibilityChecker();
        java.lang.Class<?> wildcardClass8 = objectMapper6.getClass();
        com.metamx.emitter.EmittingLogger emittingLogger9 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass8);
        java.lang.Throwable throwable10 = null;
        com.metamx.emitter.EmittingLogger emittingLogger13 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean14 = emittingLogger13.isInfoEnabled();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        emittingLogger13.debug("http://s3.amazonaws.com//hi%21?torrent", objArray16);
        java.lang.Throwable throwable18 = null;
        com.metamx.emitter.EmittingLogger emittingLogger21 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger24 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig33 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider31, deserializerProvider32, serializationConfig33, deserializationConfig34);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper37.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper37.disableDefaultTyping();
        java.lang.Object obj40 = null;
        java.lang.String str41 = objectMapper37.writeValueAsString(obj40);
        com.metamx.druid.client.DataSegment.Builder builder42 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder42.dimensions((java.util.List<java.lang.String>) strList45);
        com.metamx.emitter.EmittingLogger emittingLogger49 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray51 = new java.lang.Object[] { objectMapper27, deserializerProvider36, objectMapper37, strList45, emittingLogger49, (byte) 1 };
        emittingLogger24.error(throwable25, "{\"\": \"s3.amazonaws.com\"}", objArray51);
        emittingLogger21.debug("http://s3.amazonaws.com//hi%21?torrent", objArray51);
        emittingLogger13.trace(throwable18, "[\"content-length-range\", 100, 4]", objArray51);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.service.AlertBuilder alertBuilder55 = emittingLogger9.makeAlert(throwable10, "[\"content-length-range\", 97, 100]", objArray51);
            org.junit.Assert.fail("Expected exception of type com.metamx.common.ISE; message: Emitter not initialized!  Cannot alert.  Please make sure to call class com.metamx.emitter.EmittingLogger.registerEmitter()");
        } catch (com.metamx.common.ISE e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(deserializerProvider36);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "null" + "'", str41, "null");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(objArray51);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.io.File file1 = new java.io.File("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean2 = file1.mkdir();
        boolean boolean3 = file1.mkdirs();
        org.junit.Assert.assertEquals(file1.getParent(), "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file1.toString(), "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk27 = restS3Service19.listVersionedObjectsChunked("[\"content-length-range\", -226, -226]", "x-amz-", "[\"content-length-range\", 97, 100]", 80259575808L, "[\"content-length-range\", 58, 1]/null", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", -226, -226]/?max-keys=80259575808&versions&prefix=x-amz-&delimiter=%5B%22content-length-range%22%2C%2097%2C%20100%5D&version-id-marker=%7B%22%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D%22%3A%20%22%22%7D&key-marker=%5B%22content-length-range%22%2C%2058%2C%201%5D%2Fnull': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        boolean boolean13 = restS3Service10.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = restS3Service10.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service10.renameMetadataKeys(strMap23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = restS3Service1.createSignedUrl("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", strMap23, providerCredentials25, (long) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(credentialsProvider14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper13.setDeserializerProvider(deserializerProvider20);
        org.codehaus.jackson.type.TypeReference typeReference23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date24 = objectMapper13.readValue("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", typeReference23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper21);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.lang.String str3 = org.jets3t.service.S3Service.generatePostPolicyCondition("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "http://s3.amazonaws.com//hi%21?torrent", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]" + "'", str3, "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Range(0, 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[\"content-length-range\", 0, 100]" + "'", str2, "[\"content-length-range\", 0, 100]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.delete();
        java.io.File file4 = file1.getCanonicalFile();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        boolean boolean11 = restS3Service8.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service8.getProviderCredentials();
        java.lang.String str15 = restS3Service8.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean16 = restS3Service8.isShutdown();
        java.util.Date date17 = restS3Service8.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service1.createSignedGetUrl("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", date17, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str15, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:19:00 BRT 2021");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper6.writer(prettyPrinter8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema11 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter12 = objectMapper10.schemaBasedWriter(formatSchema11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.setPropertyNamingStrategy(propertyNamingStrategy13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper14);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = restS3Service1.isObjectInBucket("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"[\"content-length-range\", 58, 1]\"]/hi%21': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectWriter12);
        org.junit.Assert.assertNotNull(objectMapper14);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.PrettyPrinter prettyPrinter1 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper0.prettyPrintingWriter(prettyPrinter1);
        org.codehaus.jackson.FormatSchema formatSchema3 = null;
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper0.schemaBasedReader(formatSchema3);
        java.io.InputStream inputStream5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        java.lang.Object obj9 = null;
        java.lang.String str10 = objectMapper6.writeValueAsString(obj9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        org.codehaus.jackson.map.ObjectWriter objectWriter20 = objectMapper6.typedWriter(javaType19);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.SerializationConfig serializationConfig21 = objectMapper0.readValue(inputStream5, javaType19);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectReader4);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "null" + "'", str10, "null");
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertNotNull(objectWriter20);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode19 = objectMapper18.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema20 = null;
        org.codehaus.jackson.map.ObjectReader objectReader21 = objectMapper18.schemaBasedReader(formatSchema20);
        byte[] byteArray23 = objectMapper18.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode24 = objectMapper14.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser25 = objectMapper13.treeAsTokens(jsonNode24);
        org.codehaus.jackson.JsonNode jsonNode26 = objectMapper6.readTree(jsonParser25);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper6.getDeserializationConfig();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(objectNode19);
        org.junit.Assert.assertNotNull(objectReader21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode24);
        org.junit.Assert.assertNotNull(jsonParser25);
        org.junit.Assert.assertNotNull(jsonNode26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.codehaus.jackson.map.SerializerFactory serializerFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory0);
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper1.writer();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        java.lang.Object obj8 = null;
        java.lang.String str9 = objectMapper5.writeValueAsString(obj8);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider10 = objectMapper5.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper5.setSerializerProvider(serializerProvider15);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig19 = objectMapper5.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper3.setDeserializationConfig(deserializationConfig19);
        org.codehaus.jackson.map.type.TypeFactory typeFactory21 = objectMapper20.getTypeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper1.setTypeFactory(typeFactory21);
        org.codehaus.jackson.map.DeserializationConfig.Feature feature23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper1.configure(feature23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "null" + "'", str9, "null");
        org.junit.Assert.assertNotNull(deserializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(deserializationConfig19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(typeFactory21);
        org.junit.Assert.assertNotNull(objectMapper22);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.model.S3Bucket s3Bucket11 = null;
        java.util.Calendar calendar13 = null;
        java.util.Calendar calendar14 = null;
        java.lang.String[] strArray21 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str22 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray21);
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray21);
        java.lang.String[] strArray28 = new java.lang.String[] { "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", "s3.amazonaws.com" };
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object29 = restS3Service1.getVersionedObjectDetails("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", s3Bucket11, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", calendar13, calendar14, strArray21, strArray28);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Versioned Object Details cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str22, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str23, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        int int8 = restS3Service1.checkBucketStatus("x-amz-meta-");
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        java.lang.String str17 = restS3Service13.getEndpoint();
        java.lang.String str20 = restS3Service13.createTorrentUrl("", "");
        java.lang.String str21 = restS3Service13.getRestMetadataPrefix();
        java.util.Date date22 = restS3Service13.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = restS3Service1.createSignedGetUrl("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/", providerCredentials11, date22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "s3.amazonaws.com" + "'", str17, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str20, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "x-amz-meta-" + "'", str21, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Nov 04 08:19:01 BRT 2021");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        org.jets3t.service.model.StorageBucket storageBucket8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageBucket storageBucket9 = restS3Service1.createBucket(storageBucket8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory22 = objectMapper20.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper18.reader(jsonNodeFactory22);
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper15.reader(jsonNodeFactory22);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher25 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = restS3Service27.renameMetadataKeys(strMap28);
        s3SegmentPusher25.s3Client = restS3Service27;
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(jsonNodeFactory22);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(objectReader24);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        java.lang.String str8 = restS3Service1.getEndpoint();
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service12.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager14 = null;
        restS3Service12.setHttpConnectionManager(httpConnectionManager14);
        java.lang.String str16 = restS3Service12.getEndpoint();
        java.lang.String str19 = restS3Service12.createTorrentUrl("", "");
        java.lang.String str20 = restS3Service12.getRestMetadataPrefix();
        java.util.Date date21 = restS3Service12.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = restS3Service1.createSignedGetUrl("x-amz-", "", date21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "s3.amazonaws.com" + "'", str16, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "x-amz-meta-" + "'", str20, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Nov 04 08:19:02 BRT 2021");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode19 = objectMapper18.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema20 = null;
        org.codehaus.jackson.map.ObjectReader objectReader21 = objectMapper18.schemaBasedReader(formatSchema20);
        byte[] byteArray23 = objectMapper18.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode24 = objectMapper14.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser25 = objectMapper13.treeAsTokens(jsonNode24);
        org.codehaus.jackson.JsonNode jsonNode26 = objectMapper6.readTree(jsonParser25);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = objectMapper6.getDeserializerProvider();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(objectNode19);
        org.junit.Assert.assertNotNull(objectReader21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode24);
        org.junit.Assert.assertNotNull(jsonParser25);
        org.junit.Assert.assertNotNull(jsonNode26);
        org.junit.Assert.assertNotNull(deserializerProvider27);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder10.dimensions((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder9.metrics((java.util.List<java.lang.String>) strList13);
        org.joda.time.Interval interval17 = null;
        com.metamx.druid.client.DataSegment.Builder builder18 = builder9.interval(interval17);
        org.joda.time.Interval interval19 = null;
        com.metamx.druid.client.DataSegment.Builder builder20 = builder9.interval(interval19);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment21 = builder20.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: interval");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        org.jets3t.service.model.StorageObject storageObject16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("{\"\": \"s3.amazonaws.com\"}/hi!", storageObject16);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        java.lang.Throwable throwable2 = null;
        com.google.common.base.Joiner joiner5 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.metamx.druid.loading.S3SegmentPusher.JOINER = joiner5;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory14 = objectMapper12.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper10.reader(jsonNodeFactory14);
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray19 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper16.enable(featureArray19);
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper10.enable(featureArray19);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper7.enable(featureArray19);
        java.lang.String str23 = joiner5.join((java.lang.Object[]) featureArray19);
        emittingLogger1.error(throwable2, "{\"\": \"\"}", (java.lang.Object[]) featureArray19);
        com.metamx.emitter.EmittingLogger emittingLogger27 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean28 = emittingLogger27.isInfoEnabled();
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        emittingLogger27.debug("http://s3.amazonaws.com//hi%21?torrent", objArray30);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.wtf("[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", objArray30);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = '2'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(jsonNodeFactory14);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper7.reader(jsonNodeFactory11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray16 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enable(featureArray16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper7.enable(featureArray16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioningAndMFA("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.model.StorageObject storageObject19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject20 = restS3Service1.putObject("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", storageObject19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Create Object in bucket {\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"} cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper6.writer(prettyPrinter8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema11 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter12 = objectMapper10.schemaBasedWriter(formatSchema11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.setPropertyNamingStrategy(propertyNamingStrategy13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper14);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList17 = restS3Service1.getBucketAcl("hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectWriter12);
        org.junit.Assert.assertNotNull(objectMapper14);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.lang.String str5 = restS3Service4.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper16);
        int int21 = restS3Service4.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager27);
        boolean boolean29 = restS3Service23.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.size(0L);
        org.joda.time.Interval interval33 = null;
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.interval(interval33);
        java.lang.String[] strArray38 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder32.metrics((java.util.List<java.lang.String>) strList39);
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider44 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials42, "null", credentialsProvider44);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service47 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service47.renameMetadataKeys(strMap48);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service45.renameMetadataKeys(strMap48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder32.loadSpec(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = restS3Service23.renameMetadataKeys(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service4.renameMetadataKeys(strMap52);
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder56 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder56.dimensions((java.util.List<java.lang.String>) strList59);
        java.lang.String str62 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder54.dimensions((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder64 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials65 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service66 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials65);
        org.jets3t.service.security.ProviderCredentials providerCredentials67 = restS3Service66.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager68 = null;
        restS3Service66.setHttpConnectionManager(httpConnectionManager68);
        java.util.List<java.lang.String> strList70 = restS3Service66.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder71 = builder64.dimensions(strList70);
        com.metamx.druid.shard.ShardSpec shardSpec72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment74 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 100, 4]", interval1, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", strMap52, (java.util.List<java.lang.String>) strList59, strList70, shardSpec72, (long) (-57));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str62, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(providerCredentials67);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"\": \"\"}");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        java.io.File file4 = file2.getAbsoluteFile();
        boolean boolean7 = file4.setExecutable(true, true);
        java.io.File file9 = new java.io.File(file4, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig19 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider17, deserializerProvider18, serializationConfig19, deserializationConfig20);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig23 = null;
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.SerializerFactory serializerFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.setSerializerFactory(serializerFactory31);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig33 = objectMapper30.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider22, serializationConfig23, deserializationConfig33);
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider42 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig43 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider41, deserializerProvider42, serializationConfig43, deserializationConfig44);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = objectMapper45.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig47 = null;
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper49.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider52, deserializerProvider53);
        org.codehaus.jackson.map.SerializerFactory serializerFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.setSerializerFactory(serializerFactory55);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig57 = objectMapper54.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider46, serializationConfig47, deserializationConfig57);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider15, deserializerProvider46);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider15, deserializerProvider60);
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper61.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        java.lang.Object obj66 = null;
        java.lang.String str67 = objectMapper63.writeValueAsString(obj66);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider68 = objectMapper63.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider62, deserializerProvider68);
        org.jets3t.service.security.ProviderCredentials providerCredentials70 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider72 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials73 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider75 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials76 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service77 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials76);
        org.jets3t.service.security.ProviderCredentials providerCredentials78 = restS3Service77.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager79 = null;
        restS3Service77.setHttpConnectionManager(httpConnectionManager79);
        org.jets3t.service.Jets3tProperties jets3tProperties81 = restS3Service77.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration82 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service83 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials73, "", credentialsProvider75, jets3tProperties81, hostConfiguration82);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service84 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials70, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", credentialsProvider72, jets3tProperties81);
        boolean boolean85 = restS3Service84.isHttpsOnly();
        org.codehaus.jackson.type.TypeReference typeReference86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file87 = objectMapper69.convertValue((java.lang.Object) boolean85, typeReference86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(deserializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializationConfig33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(deserializerProvider46);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(serializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(deserializationConfig57);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "null" + "'", str67, "null");
        org.junit.Assert.assertNotNull(deserializerProvider68);
        org.junit.Assert.assertNull(providerCredentials78);
        org.junit.Assert.assertNotNull(jets3tProperties81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21, "null", credentialsProvider23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = restS3Service26.renameMetadataKeys(strMap27);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = restS3Service24.renameMetadataKeys(strMap27);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service20.renameMetadataKeys(strMap29);
        org.jets3t.service.acl.AccessControlList accessControlList31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload33 = restS3Service3.multipartStartUpload("http://s3.amazonaws.com//?torrent", "[\"content-length-range\", 10, 47]", strMap30, accessControlList31, "hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.google.common.base.Joiner joiner2 = joiner1.skipNulls();
        java.lang.StringBuilder stringBuilder3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter6 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter7 = objectMapper4.writer(prettyPrinter6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper4.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper4.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper10.writer(prettyPrinter12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray15 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper10.enable(featureArray15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper4.disable(featureArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder18 = joiner2.appendTo(stringBuilder3, (java.lang.Object[]) featureArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(joiner2);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectWriter7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.model.StorageObject storageObject10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", storageObject10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.StorageObject storageObject23 = null;
        java.util.Calendar calendar25 = null;
        java.util.Calendar calendar26 = null;
        java.lang.String[] strArray28 = new java.lang.String[] {};
        java.lang.String str29 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str37 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray36);
        java.lang.String str38 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap39 = restS3Service19.copyObject("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "hi!", storageObject23, true, calendar25, calendar26, strArray28, strArray36);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\"\": \"\"}" + "'", str29, "{\"\": \"\"}");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str37, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str38, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.io.File file32 = new java.io.File("hi!");
        boolean boolean33 = file32.canRead();
        java.io.File file35 = new java.io.File("hi!");
        java.io.File file37 = new java.io.File(file35, "");
        boolean boolean38 = file32.renameTo(file37);
        long long39 = file37.getUsableSpace();
        long long40 = file37.getTotalSpace();
        java.lang.String str41 = file37.getName();
        com.metamx.druid.client.DataSegment dataSegment42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment43 = s3SegmentPusher30.push(file37, dataSegment42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "hi!");
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 80259538944L + "'", long39 == 80259538944L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 967682662400L + "'", long40 == 967682662400L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList12 = restS3Service1.getObjectAcl("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", ":");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/%3A?acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        restS3Service1.setDevPayProductToken("{\"\": \"s3.amazonaws.com\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        java.lang.String str16 = restS3Service14.getInvokingApplicationDescription();
        java.lang.String str19 = restS3Service14.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service21.renameMetadataKeys(strMap22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service14.renameMetadataKeys(strMap23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = restS3Service27.getProviderCredentials();
        boolean boolean30 = restS3Service27.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = restS3Service27.getProviderCredentials();
        java.lang.String str34 = restS3Service27.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean35 = restS3Service27.isShutdown();
        java.util.Date date36 = restS3Service27.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = restS3Service1.createSignedPutUrl("[\"content-length-range\", 97, 100]", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", strMap23, providerCredentials25, date36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str19, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(providerCredentials28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(providerCredentials31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str34, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Thu Nov 04 08:19:06 BRT 2021");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean5 = file1.setExecutable(true, true);
        boolean boolean6 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        com.metamx.druid.client.DataSegment.delimiter = "{\"\": \"s3.amazonaws.com\"}/hi!";
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        org.jets3t.service.model.StorageBucket storageBucket14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket(storageBucket14);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory15 = objectMapper13.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper11.reader(jsonNodeFactory15);
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper8.reader(jsonNodeFactory15);
        org.codehaus.jackson.map.type.TypeFactory typeFactory18 = objectMapper8.getTypeFactory();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(jsonNodeFactory15);
        org.junit.Assert.assertNotNull(objectReader16);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(typeFactory18);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        java.util.Calendar calendar36 = null;
        java.util.Calendar calendar37 = null;
        java.lang.String[] strArray43 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str44 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray43);
        java.lang.String[] strArray51 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str52 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray51);
        java.lang.String str53 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object54 = restS3Service1.getVersionedObjectDetails("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 97, 100]", calendar36, calendar37, strArray43, strArray51);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str44, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str52, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str53, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.size(0L);
        org.joda.time.Interval interval3 = null;
        com.metamx.druid.client.DataSegment.Builder builder4 = builder2.interval(interval3);
        java.lang.String[] strArray8 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.metamx.druid.client.DataSegment.Builder builder11 = builder2.metrics((java.util.List<java.lang.String>) strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "null", credentialsProvider14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = restS3Service17.renameMetadataKeys(strMap18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = restS3Service15.renameMetadataKeys(strMap18);
        com.metamx.druid.client.DataSegment.Builder builder21 = builder2.loadSpec(strMap20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder35.dimensions((java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder34.metrics((java.util.List<java.lang.String>) strList38);
        java.lang.String str42 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder23.metrics((java.util.List<java.lang.String>) strList38);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str42, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder8 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.size(0L);
        org.joda.time.Interval interval11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder10.interval(interval11);
        java.lang.String[] strArray16 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.metamx.druid.client.DataSegment.Builder builder19 = builder10.metrics((java.util.List<java.lang.String>) strList17);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20, "null", credentialsProvider22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service25.renameMetadataKeys(strMap26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = restS3Service23.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder29 = builder10.loadSpec(strMap28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service1.renameMetadataKeys(strMap28);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.suspendBucketVersioningWithMFA("http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3Object s3Object21 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.putObjectAcl("hi!", s3Object21);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig2 = objectMapper0.getSerializationConfig();
        java.io.Reader reader3 = null;
        org.codehaus.jackson.type.TypeReference typeReference4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.MapperConfig<org.codehaus.jackson.map.DeserializationConfig> deserializationConfigMapperConfig5 = objectMapper0.readValue(reader3, typeReference4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(serializationConfig2);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper13.setDeserializerProvider(deserializerProvider20);
        org.codehaus.jackson.FormatSchema formatSchema22 = null;
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper21.schemaBasedReader(formatSchema22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = restS3Service25.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service25.setHttpConnectionManager(httpConnectionManager27);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager29 = null;
        restS3Service25.setHttpConnectionManager(httpConnectionManager29);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = restS3Service25.getHttpConnectionManager();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = objectMapper21.writeValueAsString((java.lang.Object) restS3Service25);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Host must be set to create a host URL (through reference chain: org.jets3t.service.impl.rest.httpclient.RestS3Service[\"httpClient\"]->org.apache.commons.httpclient.HttpClient[\"hostConfiguration\"]->org.apache.commons.httpclient.HostConfiguration[\"hostURL\"])");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNull(providerCredentials26);
        org.junit.Assert.assertNull(httpConnectionManager31);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.io.File file1 = new java.io.File("x-amz-meta-");
        java.io.File file3 = new java.io.File(file1, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        long long4 = file3.lastModified();
        java.io.File file5 = file3.getAbsoluteFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "x-amz-meta-");
        org.junit.Assert.assertEquals(file3.getParent(), "x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file3.toString(), "x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(file5);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        org.codehaus.jackson.Version version13 = objectMapper9.version();
        org.codehaus.jackson.map.ObjectWriter objectWriter14 = objectMapper9.writer();
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider19, deserializerProvider20);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver22 = null;
        objectMapper21.setSubtypeResolver(subtypeResolver22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider27 = objectMapper24.getSerializerProvider();
        java.text.DateFormat dateFormat28 = null;
        objectMapper24.setDateFormat(dateFormat28);
        org.codehaus.jackson.node.ArrayNode arrayNode30 = objectMapper24.createArrayNode();
        org.codehaus.jackson.JsonParser jsonParser31 = objectMapper21.treeAsTokens((org.codehaus.jackson.JsonNode) arrayNode30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        java.io.File file38 = new java.io.File("hi!");
        java.io.File file40 = new java.io.File(file38, "");
        java.lang.Class<?> wildcardClass41 = file38.getClass();
        org.codehaus.jackson.type.JavaType javaType42 = objectMapper36.constructType((java.lang.reflect.Type) wildcardClass41);
        com.metamx.emitter.EmittingLogger emittingLogger43 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass41);
        org.codehaus.jackson.type.JavaType javaType44 = objectMapper32.constructType((java.lang.reflect.Type) wildcardClass41);
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        java.io.File file51 = new java.io.File("hi!");
        java.io.File file53 = new java.io.File(file51, "");
        java.lang.Class<?> wildcardClass54 = file51.getClass();
        org.codehaus.jackson.type.JavaType javaType55 = objectMapper49.constructType((java.lang.reflect.Type) wildcardClass54);
        com.metamx.emitter.EmittingLogger emittingLogger56 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass54);
        org.codehaus.jackson.type.JavaType javaType57 = objectMapper45.constructType((java.lang.reflect.Type) wildcardClass54);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig58 = objectMapper45.getDeserializationConfig();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<java.lang.String> strList59 = objectMapper9.readValue(jsonParser31, javaType44, deserializationConfig58);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Can not deserialize instance of java.io.File out of START_ARRAY token? at [Source: N/A; line: -1, column: -1]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(objectWriter14);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(serializerProvider27);
        org.junit.Assert.assertNotNull(arrayNode30);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "hi!");
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(javaType42);
        org.junit.Assert.assertNotNull(javaType44);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNull("file51.getParent() == null", file51.getParent());
        org.junit.Assert.assertEquals(file51.toString(), "hi!");
        org.junit.Assert.assertNull("file53.getParent() == null", file53.getParent());
        org.junit.Assert.assertEquals(file53.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(javaType55);
        org.junit.Assert.assertNotNull(javaType57);
        org.junit.Assert.assertNotNull(deserializationConfig58);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = restS3Service1.getProviderCredentials();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(providerCredentials18);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"content-length-range\", 10, 47]", "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}" + "'", str2, "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}");
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        java.io.File file7 = new java.io.File(file2, "[\"content-length-range\", 10, 47]");
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file13 = new java.io.File(file11, "");
        file13.deleteOnExit();
        boolean boolean15 = file13.mkdirs();
        int int16 = file7.compareTo(file13);
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals(file7.toString(), "[\"content-length-range\", 58, 1]/null/[\"content-length-range\", 10, 47]");
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertEquals(file11.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file11.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file13.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-13) + "'", int16 == (-13));
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.setReadOnly();
        java.lang.String str5 = file1.getPath();
        java.net.URL uRL6 = file1.toURL();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(uRL6);
// flaky:         org.junit.Assert.assertEquals(uRL6.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.setDevPayProductToken("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = restS3Service1.createUnsignedObjectUrl("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", ":", true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        org.jets3t.service.model.S3Bucket s3Bucket10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray13 = restS3Service1.listObjects(s3Bucket10, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket20 = restS3Service18.createBucket("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.util.Date date8 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray15 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str16 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray15);
        java.lang.String str17 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray15);
        java.lang.String[] strArray24 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray24);
        java.lang.String str26 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = org.jets3t.service.S3Service.buildPostForm("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", providerCredentials2, date8, strArray15, strArray24, "x-amz-", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Nov 04 08:19:08 BRT 2021");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str16, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str17, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str25, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str26, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.io.File file1 = new java.io.File("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        java.net.URI uRI2 = file1.toURI();
        java.io.File file3 = new java.io.File(uRI2);
        java.io.File file4 = new java.io.File(uRI2);
        boolean boolean6 = file4.setReadable(false);
        boolean boolean9 = file4.setExecutable(true, true);
        org.junit.Assert.assertEquals(file1.getParent(), "{\"http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(uRI2);
// flaky:         org.junit.Assert.assertEquals(file3.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        java.lang.String str4 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.model.StorageObject storageObject8 = null;
        java.util.Calendar calendar10 = null;
        java.util.Calendar calendar11 = null;
        java.lang.String[] strArray18 = new java.lang.String[] { "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "[\"content-length-range\", 0, 100]", "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]", "http://s3.amazonaws.com//hi%21?torrent", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]" };
        java.lang.String[] strArray24 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service1.copyObject("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]", "[\"content-length-range\", 58, 1]/null", storageObject8, true, calendar10, calendar11, strArray18, strArray24);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str25, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.io.File file1 = new java.io.File("x-amz-meta-");
        boolean boolean3 = file1.setLastModified(1L);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        java.io.File file4 = file2.getAbsoluteFile();
        java.net.URI uRI5 = file4.toURI();
        file4.deleteOnExit();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNotNull(uRI5);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList7 = restS3Service1.getObjectAclWithSignedUrl("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service24.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig31 = null;
        org.codehaus.jackson.JsonFactory jsonFactory32 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig35 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider33, deserializerProvider34, serializationConfig35, deserializationConfig36);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service24, s3SegmentPusherConfig31, objectMapper37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = restS3Service24.getHttpConnectionManager();
        java.lang.String str42 = restS3Service24.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = restS3Service44.getProviderCredentials();
        boolean boolean47 = restS3Service44.isBucketAccessible("");
        java.lang.String str48 = restS3Service44.getRestMetadataPrefix();
        boolean boolean49 = restS3Service44.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager50 = restS3Service44.getHttpConnectionManager();
        restS3Service24.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setHttpConnectionManager(httpConnectionManager50);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus54 = restS3Service1.getBucketLoggingStatus("[\"content-length-range\", 100, 4]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 100, 4]/?logging': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "x-amz-meta-" + "'", str30, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str42, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "x-amz-meta-" + "'", str48, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager50);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.io.File file2 = new java.io.File("", "s3.amazonaws.com");
        java.io.File file4 = new java.io.File(file2, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file4.getParent(), "/s3.amazonaws.com/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file4.toString(), "/s3.amazonaws.com/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder38.metrics((java.util.List<java.lang.String>) strList42);
        java.lang.String str46 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList42);
        com.metamx.druid.client.DataSegment.Builder builder47 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder47.dimensions((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder52.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder56 = builder54.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder57 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder57.dimensions((java.util.List<java.lang.String>) strList60);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder56.metrics((java.util.List<java.lang.String>) strList60);
        org.joda.time.Interval interval64 = null;
        com.metamx.druid.client.DataSegment.Builder builder65 = builder56.interval(interval64);
        org.joda.time.Interval interval66 = null;
        com.metamx.druid.client.DataSegment.Builder builder67 = builder56.interval(interval66);
        com.metamx.druid.client.DataSegment.Builder builder68 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder70 = builder68.size(0L);
        org.joda.time.Interval interval71 = null;
        com.metamx.druid.client.DataSegment.Builder builder72 = builder70.interval(interval71);
        java.lang.String[] strArray76 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.metamx.druid.client.DataSegment.Builder builder79 = builder70.metrics((java.util.List<java.lang.String>) strList77);
        com.metamx.druid.client.DataSegment.Builder builder80 = builder67.metrics((java.util.List<java.lang.String>) strList77);
        com.metamx.druid.shard.ShardSpec shardSpec81 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment83 = new com.metamx.druid.client.DataSegment("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", interval1, "[\"content-length-range\", 1, 0]", strMap26, (java.util.List<java.lang.String>) strList42, (java.util.List<java.lang.String>) strList77, shardSpec81, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str46, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider14);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver16 = null;
        objectMapper15.setSubtypeResolver(subtypeResolver16);
        com.metamx.emitter.EmittingLogger emittingLogger19 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean20 = emittingLogger19.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter24 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter25 = objectMapper22.writer(prettyPrinter24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper22.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader27 = objectMapper22.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter30 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter31 = objectMapper28.writer(prettyPrinter30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper28.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray33 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper28.enable(featureArray33);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper22.disable(featureArray33);
        emittingLogger19.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray33);
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper15.disable(featureArray33);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper15);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectReader27);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectWriter31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper37);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.io.File file1 = new java.io.File("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertEquals(file1.getParent(), "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file1.toString(), "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager8 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager8);
        boolean boolean10 = restS3Service4.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder13 = builder11.size(0L);
        org.joda.time.Interval interval14 = null;
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.interval(interval14);
        java.lang.String[] strArray19 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder13.metrics((java.util.List<java.lang.String>) strList20);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23, "null", credentialsProvider25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service28.renameMetadataKeys(strMap29);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service26.renameMetadataKeys(strMap29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder13.loadSpec(strMap31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service4.renameMetadataKeys(strMap31);
        com.metamx.druid.client.DataSegment.Builder builder34 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder35.dimensions((java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder40.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder44 = builder42.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder45 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder45.dimensions((java.util.List<java.lang.String>) strList48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder44.metrics((java.util.List<java.lang.String>) strList48);
        com.metamx.druid.client.DataSegment.Builder builder52 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder52.dimensions((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder51.metrics((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder34.metrics((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.client.DataSegment.Builder builder61 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder63 = builder61.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder64 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials65 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service66 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials65);
        org.jets3t.service.security.ProviderCredentials providerCredentials67 = restS3Service66.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager68 = null;
        restS3Service66.setHttpConnectionManager(httpConnectionManager68);
        java.util.List<java.lang.String> strList70 = restS3Service66.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder71 = builder64.dimensions(strList70);
        com.metamx.druid.client.DataSegment.Builder builder72 = builder63.dimensions(strList70);
        java.lang.String str73 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strList70);
        com.metamx.druid.shard.ShardSpec shardSpec74 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment76 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 100, 4]", interval1, "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", strMap31, (java.util.List<java.lang.String>) strList55, strList70, shardSpec74, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(providerCredentials67);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}" + "'", str73, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket6 = restS3Service1.createBucket("[\"content-length-range\", 97, 100]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter5 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper4.writer(prettyPrinter5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        java.text.DateFormat dateFormat11 = null;
        objectMapper7.setDateFormat(dateFormat11);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        org.codehaus.jackson.PrettyPrinter prettyPrinter23 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter24 = objectMapper22.prettyPrintingWriter(prettyPrinter23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        java.io.File file29 = new java.io.File("hi!");
        java.io.File file31 = new java.io.File(file29, "");
        java.lang.Class<?> wildcardClass32 = file29.getClass();
        org.codehaus.jackson.type.JavaType javaType33 = objectMapper27.constructType((java.lang.reflect.Type) wildcardClass32);
        boolean boolean34 = objectMapper22.canDeserialize(javaType33);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService35 = objectMapper7.readValue("null", javaType33);
        org.codehaus.jackson.map.ObjectReader objectReader36 = objectMapper4.reader(javaType33);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectWriter24);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "hi!");
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(javaType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(restStorageService35);
        org.junit.Assert.assertNotNull(objectReader36);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        restS3Service18.shutdown();
        java.util.Calendar calendar23 = null;
        java.util.Calendar calendar24 = null;
        java.lang.String[] strArray26 = new java.lang.String[] { "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" };
        java.lang.String[] strArray28 = new java.lang.String[] {};
        java.lang.String str29 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object32 = restS3Service18.getVersionedObject("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", calendar23, calendar24, strArray26, strArray28, (java.lang.Long) 80259567616L, (java.lang.Long) 80259559424L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D&versionId=%5B%22starts-with%22%2C%20%22%24%7B%22%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D%22%3A%20%22%22%7D%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\"\": \"\"}" + "'", str29, "{\"\": \"\"}");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket21 = restS3Service19.getBucket("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig18 = null;
        org.codehaus.jackson.JsonFactory jsonFactory19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider23 = objectMapper20.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory19, serializerProvider23, deserializerProvider24);
        org.codehaus.jackson.map.SerializerFactory serializerFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.setSerializerFactory(serializerFactory26);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher28 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service17, s3SegmentPusherConfig18, objectMapper25);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig29 = null;
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig33 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider31, deserializerProvider32, serializationConfig33, deserializationConfig34);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode37 = objectMapper35.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service17, s3SegmentPusherConfig29, objectMapper35);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service40 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = restS3Service40.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager42 = null;
        restS3Service40.setHttpConnectionManager(httpConnectionManager42);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager44 = null;
        restS3Service40.setHttpConnectionManager(httpConnectionManager44);
        java.lang.String str46 = restS3Service40.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig47 = null;
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider49 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider50 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig51 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig52 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider49, deserializerProvider50, serializationConfig51, deserializationConfig52);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher54 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service40, s3SegmentPusherConfig47, objectMapper53);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager55 = restS3Service40.getHttpConnectionManager();
        java.lang.String str58 = restS3Service40.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service60 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials59);
        org.jets3t.service.security.ProviderCredentials providerCredentials61 = restS3Service60.getProviderCredentials();
        boolean boolean63 = restS3Service60.isBucketAccessible("");
        java.lang.String str64 = restS3Service60.getRestMetadataPrefix();
        boolean boolean65 = restS3Service60.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager66 = restS3Service60.getHttpConnectionManager();
        restS3Service40.setHttpConnectionManager(httpConnectionManager66);
        restS3Service17.setHttpConnectionManager(httpConnectionManager66);
        restS3Service1.setHttpConnectionManager(httpConnectionManager66);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageObjectsChunk storageObjectsChunk76 = restS3Service1.listObjectsChunked("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (long) (-57), "s3.amazonaws.com", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/?prefix=%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-&delimiter=%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D&marker=s3.amazonaws.com': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(serializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(deserializerProvider36);
        org.junit.Assert.assertNotNull(arrayNode37);
        org.junit.Assert.assertNull(providerCredentials41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "x-amz-meta-" + "'", str46, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str58, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "x-amz-meta-" + "'", str64, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager66);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service14.renameMetadataKeys(strMap23);
        org.jets3t.service.model.S3Object s3Object26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object27 = restS3Service14.putObject("[\"content-length-range\", 58, 1]", s3Object26);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket [\"content-length-range\", 58, 1] cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service4.getProviderCredentials();
        java.lang.String str11 = restS3Service4.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean12 = restS3Service4.isShutdown();
        java.util.Date date13 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray19 = new java.lang.String[] { ":", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "[\"content-length-range\", 0, 100]", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent" };
        java.lang.String[] strArray26 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str27 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray26);
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = org.jets3t.service.S3Service.buildPostForm("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "{\"\": \"s3.amazonaws.com\"}/hi!", providerCredentials2, date13, strArray19, strArray26, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", true, false, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str11, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 04 08:19:10 BRT 2021");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str27, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str28, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver3 = objectMapper2.getSubtypeResolver();
        org.codehaus.jackson.PrettyPrinter prettyPrinter4 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter5 = objectMapper2.prettyPrintingWriter(prettyPrinter4);
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory10 = objectMapper8.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper6.reader(jsonNodeFactory10);
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper2.setNodeFactory(jsonNodeFactory10);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(subtypeResolver3);
        org.junit.Assert.assertNotNull(objectWriter5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(jsonNodeFactory10);
        org.junit.Assert.assertNotNull(objectReader11);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        boolean boolean6 = file1.setExecutable(false, true);
        boolean boolean7 = file1.createNewFile();
        java.io.File file9 = new java.io.File(file1, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        boolean boolean11 = file1.setLastModified((long) 100);
        boolean boolean12 = file1.mkdirs();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file9.toString(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.lang.String str2 = org.jets3t.service.S3Service.buildPostForm("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "x-amz-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str2, "<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig31 = s3SegmentPusher30.config;
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(s3SegmentPusherConfig31);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.size(0L);
        org.joda.time.Interval interval3 = null;
        com.metamx.druid.client.DataSegment.Builder builder4 = builder2.interval(interval3);
        com.metamx.druid.client.DataSegment.Builder builder6 = builder4.size((long) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider5 = objectMapper2.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider5, deserializerProvider6);
        org.codehaus.jackson.map.SerializerFactory serializerFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.setSerializerFactory(serializerFactory8);
        org.codehaus.jackson.PrettyPrinter prettyPrinter10 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper9.prettyPrintingWriter(prettyPrinter10);
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory16 = objectMapper14.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper12.reader(jsonNodeFactory16);
        org.codehaus.jackson.map.ObjectReader objectReader18 = objectMapper9.reader(jsonNodeFactory16);
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        java.lang.Object obj22 = null;
        java.lang.String str23 = objectMapper19.writeValueAsString(obj22);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider29, deserializerProvider30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper19.setSerializerProvider(serializerProvider29);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider34 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider35 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig36 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider34, deserializerProvider35, serializationConfig36, deserializationConfig37);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = objectMapper38.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper32.setDeserializerProvider(deserializerProvider39);
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider44 = objectMapper41.getSerializerProvider();
        java.text.DateFormat dateFormat45 = null;
        objectMapper41.setDateFormat(dateFormat45);
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper49.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider52, deserializerProvider53);
        org.codehaus.jackson.map.SerializerFactory serializerFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.setSerializerFactory(serializerFactory55);
        org.codehaus.jackson.PrettyPrinter prettyPrinter57 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter58 = objectMapper56.prettyPrintingWriter(prettyPrinter57);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.disableDefaultTyping();
        java.io.File file63 = new java.io.File("hi!");
        java.io.File file65 = new java.io.File(file63, "");
        java.lang.Class<?> wildcardClass66 = file63.getClass();
        org.codehaus.jackson.type.JavaType javaType67 = objectMapper61.constructType((java.lang.reflect.Type) wildcardClass66);
        boolean boolean68 = objectMapper56.canDeserialize(javaType67);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService69 = objectMapper41.readValue("null", javaType67);
        org.codehaus.jackson.node.ArrayNode arrayNode70 = objectMapper41.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode72 = objectMapper71.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema73 = null;
        org.codehaus.jackson.map.ObjectReader objectReader74 = objectMapper71.schemaBasedReader(formatSchema73);
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode76 = objectMapper75.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema77 = null;
        org.codehaus.jackson.map.ObjectReader objectReader78 = objectMapper75.schemaBasedReader(formatSchema77);
        byte[] byteArray80 = objectMapper75.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode81 = objectMapper71.valueToTree((java.lang.Object) 10L);
        byte[] byteArray82 = objectMapper41.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode83 = objectMapper40.readTree(byteArray82);
        org.codehaus.jackson.JsonNode jsonNode84 = objectMapper9.readTree(byteArray82);
        java.lang.String str85 = joiner0.join((java.lang.Iterable<org.codehaus.jackson.JsonNode>) jsonNode84);
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(serializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectWriter11);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(jsonNodeFactory16);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(objectReader18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "null" + "'", str23, "null");
        org.junit.Assert.assertNotNull(deserializerProvider24);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializerProvider39);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(serializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(serializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(objectWriter58);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNull("file63.getParent() == null", file63.getParent());
        org.junit.Assert.assertEquals(file63.toString(), "hi!");
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(javaType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(restStorageService69);
        org.junit.Assert.assertNotNull(arrayNode70);
        org.junit.Assert.assertNotNull(objectNode72);
        org.junit.Assert.assertNotNull(objectReader74);
        org.junit.Assert.assertNotNull(objectNode76);
        org.junit.Assert.assertNotNull(objectReader78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode83);
        org.junit.Assert.assertNotNull(jsonNode84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageObjectsChunk storageObjectsChunk9 = restS3Service3.listObjectsChunked("x-amz-", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", 4096L, "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = null;
        restS3Service8.setHttpConnectionManager(httpConnectionManager10);
        java.util.Date date12 = restS3Service8.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = restS3Service3.createSignedDeleteUrl("", "{\"\": \"s3.amazonaws.com\"}/hi!", providerCredentials6, date12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 04 08:19:11 BRT 2021");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        org.jets3t.service.model.S3Bucket s3Bucket8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray9 = restS3Service1.listObjects(s3Bucket8);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper7.writer(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper7.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper11.schemaBasedWriter(formatSchema12);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper11.setPropertyNamingStrategy(propertyNamingStrategy14);
        java.lang.String str16 = objectMapper6.writeValueAsString((java.lang.Object) propertyNamingStrategy14);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null" + "'", str16, "null");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.google.common.base.Joiner.MapJoiner mapJoiner2 = joiner0.withKeyValueSeparator("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        java.lang.StringBuilder stringBuilder3 = null;
        com.google.common.base.Joiner joiner5 = com.google.common.base.Joiner.on('/');
        com.google.common.base.Joiner joiner7 = joiner5.useForNull("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode9 = objectMapper8.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema10 = null;
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper8.schemaBasedReader(formatSchema10);
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode13 = objectMapper12.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema14 = null;
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper12.schemaBasedReader(formatSchema14);
        byte[] byteArray17 = objectMapper12.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode18 = objectMapper8.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper8.setSerializationInclusion(inclusion19);
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider25 = objectMapper22.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider25, deserializerProvider26);
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode36 = objectMapper35.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema37 = null;
        org.codehaus.jackson.map.ObjectReader objectReader38 = objectMapper35.schemaBasedReader(formatSchema37);
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode40 = objectMapper39.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema41 = null;
        org.codehaus.jackson.map.ObjectReader objectReader42 = objectMapper39.schemaBasedReader(formatSchema41);
        byte[] byteArray44 = objectMapper39.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode45 = objectMapper35.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser46 = objectMapper34.treeAsTokens(jsonNode45);
        org.codehaus.jackson.JsonNode jsonNode47 = objectMapper27.readTree(jsonParser46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper48.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper48.disableDefaultTyping();
        java.io.File file52 = new java.io.File("hi!");
        java.io.File file54 = new java.io.File(file52, "");
        java.lang.Class<?> wildcardClass55 = file52.getClass();
        org.codehaus.jackson.type.JavaType javaType56 = objectMapper50.constructType((java.lang.reflect.Type) wildcardClass55);
        org.codehaus.jackson.map.MappingIterator<java.util.Collection<java.lang.String>> strCollectionItor57 = objectMapper8.readValues(jsonParser46, javaType56);
        java.lang.String str58 = joiner5.join((java.util.Iterator<java.util.Collection<java.lang.String>>) strCollectionItor57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder59 = joiner0.appendTo(stringBuilder3, (java.util.Iterator<java.util.Collection<java.lang.String>>) strCollectionItor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(mapJoiner2);
        org.junit.Assert.assertNotNull(joiner5);
        org.junit.Assert.assertNotNull(joiner7);
        org.junit.Assert.assertNotNull(objectNode9);
        org.junit.Assert.assertNotNull(objectReader11);
        org.junit.Assert.assertNotNull(objectNode13);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(serializerProvider25);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectNode36);
        org.junit.Assert.assertNotNull(objectReader38);
        org.junit.Assert.assertNotNull(objectNode40);
        org.junit.Assert.assertNotNull(objectReader42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode45);
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertNotNull(jsonNode47);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "hi!");
        org.junit.Assert.assertNull("file54.getParent() == null", file54.getParent());
        org.junit.Assert.assertEquals(file54.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(javaType56);
        org.junit.Assert.assertNotNull(strCollectionItor57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList7 = restS3Service3.getVersionedObjectAcl(":", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", "[\"content-length-range\", 58, 1]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        file1.deleteOnExit();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRI4);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageOwner storageOwner22 = restS3Service1.getAccountOwner();
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: List all buckets to find account owner");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean2 = emittingLogger1.isInfoEnabled();
        com.metamx.emitter.EmittingLogger emittingLogger5 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig14 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider12, deserializerProvider13, serializationConfig14, deserializationConfig15);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider17 = objectMapper16.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        com.metamx.druid.client.DataSegment.Builder builder23 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.metamx.druid.client.DataSegment.Builder builder28 = builder23.dimensions((java.util.List<java.lang.String>) strList26);
        com.metamx.emitter.EmittingLogger emittingLogger30 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray32 = new java.lang.Object[] { objectMapper8, deserializerProvider17, objectMapper18, strList26, emittingLogger30, (byte) 1 };
        emittingLogger5.error(throwable6, "{\"\": \"s3.amazonaws.com\"}", objArray32);
        java.lang.Throwable throwable34 = null;
        java.io.File file37 = new java.io.File("hi!");
        java.io.File file39 = new java.io.File(file37, "");
        java.io.File file40 = file37.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode42 = objectMapper41.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory43 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper44.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper44.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider47 = objectMapper44.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory43, serializerProvider47, deserializerProvider48);
        org.jets3t.service.security.ProviderCredentials providerCredentials50 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service51 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials50);
        org.jets3t.service.security.ProviderCredentials providerCredentials52 = restS3Service51.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager53 = null;
        restS3Service51.setHttpConnectionManager(httpConnectionManager53);
        java.lang.Object[] objArray57 = new java.lang.Object[] { file40, objectMapper41, objectMapper49, restS3Service51, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger5.info(throwable34, "", objArray57);
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        java.text.DateFormat dateFormat64 = null;
        objectMapper60.setDateFormat(dateFormat64);
        org.codehaus.jackson.node.ArrayNode arrayNode66 = objectMapper60.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder67 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder69 = builder67.size(0L);
        java.lang.Object[] objArray70 = new java.lang.Object[] { objectMapper60, builder67 };
        emittingLogger5.trace("null", objArray70);
        emittingLogger1.trace("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", objArray70);
        java.lang.Throwable throwable73 = null;
        java.lang.Object[] objArray75 = null;
        emittingLogger1.error(throwable73, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", objArray75);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(deserializerProvider17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "hi!");
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "hi!");
        org.junit.Assert.assertNotNull(file40);
// flaky:         org.junit.Assert.assertEquals(file40.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode42);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(serializerProvider47);
        org.junit.Assert.assertNull(providerCredentials52);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(arrayNode66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(objArray70);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        boolean boolean4 = file1.isHidden();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.setReadOnly();
        boolean boolean4 = file1.setWritable(true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.io.File file2 = new java.io.File("{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertEquals(file2.getParent(), "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file2.toString(), "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}/http:/s3.amazonaws.com/hi%21?torrent");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        int int20 = restS3Service18.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList23 = restS3Service18.getObjectAcl("{\"\": \"s3.amazonaws.com\"}/hi!", ":");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/hi!/%3A?acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.setSerializationInclusion(inclusion5);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver7 = objectMapper4.getSubtypeResolver();
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "");
        boolean boolean13 = file9.setWritable(false);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        java.lang.Object obj17 = null;
        java.lang.String str18 = objectMapper14.writeValueAsString(obj17);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = objectMapper14.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper14.disableDefaultTyping();
        com.google.common.base.Joiner joiner21 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger23 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable24 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode29 = objectMapper28.createObjectNode();
        java.lang.Object[] objArray30 = new java.lang.Object[] { providerCredentials26, objectMapper28 };
        emittingLogger23.info(throwable24, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        java.io.File file36 = new java.io.File("hi!");
        java.io.File file38 = new java.io.File(file36, "");
        java.lang.Class<?> wildcardClass39 = file36.getClass();
        org.codehaus.jackson.type.JavaType javaType40 = objectMapper34.constructType((java.lang.reflect.Type) wildcardClass39);
        com.metamx.emitter.EmittingLogger emittingLogger42 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable43 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider49 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider50 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig51 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig52 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider49, deserializerProvider50, serializationConfig51, deserializationConfig52);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider54 = objectMapper53.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper55.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper55.disableDefaultTyping();
        java.lang.Object obj58 = null;
        java.lang.String str59 = objectMapper55.writeValueAsString(obj58);
        com.metamx.druid.client.DataSegment.Builder builder60 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.metamx.druid.client.DataSegment.Builder builder65 = builder60.dimensions((java.util.List<java.lang.String>) strList63);
        com.metamx.emitter.EmittingLogger emittingLogger67 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray69 = new java.lang.Object[] { objectMapper45, deserializerProvider54, objectMapper55, strList63, emittingLogger67, (byte) 1 };
        emittingLogger42.error(throwable43, "{\"\": \"s3.amazonaws.com\"}", objArray69);
        java.lang.Throwable throwable71 = null;
        java.io.File file74 = new java.io.File("hi!");
        java.io.File file76 = new java.io.File(file74, "");
        java.io.File file77 = file74.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode79 = objectMapper78.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory80 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = objectMapper81.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = objectMapper81.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider84 = objectMapper81.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider85 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory80, serializerProvider84, deserializerProvider85);
        org.jets3t.service.security.ProviderCredentials providerCredentials87 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service88 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials87);
        org.jets3t.service.security.ProviderCredentials providerCredentials89 = restS3Service88.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager90 = null;
        restS3Service88.setHttpConnectionManager(httpConnectionManager90);
        java.lang.Object[] objArray94 = new java.lang.Object[] { file77, objectMapper78, objectMapper86, restS3Service88, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger42.info(throwable71, "", objArray94);
        java.lang.String str96 = joiner21.join((java.lang.Object) emittingLogger23, (java.lang.Object) javaType40, objArray94);
        boolean boolean97 = objectMapper20.canDeserialize(javaType40);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.base.Joiner.MapJoiner mapJoiner98 = objectMapper4.convertValue((java.lang.Object) file9, javaType40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Cannot cast java.io.File to com.google.common.base.Joiner$MapJoiner");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(subtypeResolver7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "null" + "'", str18, "null");
        org.junit.Assert.assertNotNull(deserializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(joiner21);
        org.junit.Assert.assertNotNull(objectNode29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "hi!");
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(javaType40);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(deserializerProvider54);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "null" + "'", str59, "null");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNull("file74.getParent() == null", file74.getParent());
        org.junit.Assert.assertEquals(file74.toString(), "hi!");
        org.junit.Assert.assertNull("file76.getParent() == null", file76.getParent());
        org.junit.Assert.assertEquals(file76.toString(), "hi!");
        org.junit.Assert.assertNotNull(file77);
// flaky:         org.junit.Assert.assertEquals(file77.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file77.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode79);
        org.junit.Assert.assertNotNull(objectMapper82);
        org.junit.Assert.assertNotNull(objectMapper83);
        org.junit.Assert.assertNotNull(serializerProvider84);
        org.junit.Assert.assertNull(providerCredentials89);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray20 = restS3Service1.listVersionedObjects("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null/?max-keys=1000&versions&prefix=%5B%22%5B%22content-length-range%22%2C%2010%2C%2047%5D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D%22%2C%20%22%5B%22starts-with%22%2C%20%22%24%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D%22%2C%20%22%22%5D%22%5D&delimiter=%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.acl.AccessControlList accessControlList9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAclWithSignedUrl("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", accessControlList9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}\", \"\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.io.File file1 = new java.io.File("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = file1.createNewFile();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(file1.getParent(), "[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider8, jets3tProperties17);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider5, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties17, hostConfiguration22);
        org.jets3t.service.model.S3Object s3Object28 = null;
        java.util.Calendar calendar30 = null;
        java.util.Calendar calendar31 = null;
        java.lang.String[] strArray38 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str39 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray38);
        java.lang.String str40 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray38);
        java.lang.String[] strArray46 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str47 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap48 = restS3Service23.copyVersionedObject("http://s3.amazonaws.com//hi%21?torrent", "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", "[\"content-length-range\", 97, 100]", "hi!", s3Object28, false, calendar30, calendar31, strArray38, strArray46);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str39, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str40, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str47, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.setSerializationInclusion(inclusion3);
        org.codehaus.jackson.map.ObjectWriter objectWriter5 = objectMapper0.writer();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectWriter5);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        java.io.File file24 = new java.io.File("hi!");
        java.io.File file26 = new java.io.File(file24, "");
        boolean boolean28 = file24.setWritable(false);
        java.io.File file30 = new java.io.File(file24, "http://s3.amazonaws.com//?torrent");
        file24.deleteOnExit();
        com.metamx.druid.client.DataSegment dataSegment32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment33 = s3SegmentPusher5.push(file24, dataSegment32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNull("file26.getParent() == null", file26.getParent());
        org.junit.Assert.assertEquals(file26.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file30.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service12.getProviderCredentials();
        java.lang.String str14 = restS3Service12.getInvokingApplicationDescription();
        java.lang.String str17 = restS3Service12.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = restS3Service19.renameMetadataKeys(strMap20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service12.renameMetadataKeys(strMap21);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload23 = restS3Service1.multipartStartUpload("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "[\"content-length-range\", 100, 4]", strMap21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/%5B%22content-length-range%22%2C%20100%2C%204%5D?uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str17, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, ":", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//?torrent", credentialsProvider2, jets3tProperties17);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service23.enableBucketVersioningAndMFA("[\"content-length-range\", 97, 100]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", credentialsProvider2);
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.setBucketLoggingStatus("[\"content-length-range\", -226, -226]", s3BucketLoggingStatus5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.size(0L);
        org.joda.time.Interval interval3 = null;
        com.metamx.druid.client.DataSegment.Builder builder4 = builder2.interval(interval3);
        java.lang.Class<?> wildcardClass5 = builder2.getClass();
        com.metamx.emitter.EmittingLogger emittingLogger6 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "null", credentialsProvider5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service6.renameMetadataKeys(strMap9);
        com.metamx.druid.client.DataSegment.Builder builder12 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder13 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.metamx.druid.client.DataSegment.Builder builder18 = builder13.dimensions((java.util.List<java.lang.String>) strList16);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder18.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder22 = builder20.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder23 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.metamx.druid.client.DataSegment.Builder builder28 = builder23.dimensions((java.util.List<java.lang.String>) strList26);
        com.metamx.druid.client.DataSegment.Builder builder29 = builder22.metrics((java.util.List<java.lang.String>) strList26);
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder30.dimensions((java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder29.metrics((java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder12.metrics((java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        java.lang.String str45 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList42);
        com.metamx.druid.shard.ShardSpec shardSpec46 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment48 = new com.metamx.druid.client.DataSegment("", interval1, "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", strMap11, (java.util.List<java.lang.String>) strList33, (java.util.List<java.lang.String>) strList42, shardSpec46, (long) (-57));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str45, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        com.metamx.druid.client.DataSegment.Builder builder4 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = restS3Service6.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager8 = null;
        restS3Service6.setHttpConnectionManager(httpConnectionManager8);
        java.util.List<java.lang.String> strList10 = restS3Service6.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder11 = builder4.dimensions(strList10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = restS3Service13.renameMetadataKeys(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder4.loadSpec(strMap15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = org.jets3t.service.S3Service.createSignedUrl("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "", "x-amz-meta-", strMap15, providerCredentials17, (long) 100, true, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(providerCredentials7);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.enableDefaultTyping(defaultTyping5);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        boolean boolean9 = restS3Service1.isRequesterPaysEnabled();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList14 = restS3Service1.multipartListUploads("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "[\"content-length-range\", 10, 47]", (java.lang.Integer) 5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper4.schemaBasedWriter(formatSchema5);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper4.setPropertyNamingStrategy(propertyNamingStrategy7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.writer(prettyPrinter9);
        org.codehaus.jackson.map.SerializationConfig.Feature feature11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = objectMapper8.isEnabled(feature11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties8);
        java.lang.String str10 = restS3Service9.getDevPayUserToken();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service9.getJetS3tProperties();
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        org.apache.commons.httpclient.HttpMethod httpMethod9 = null;
        restS3Service1.authorizeHttpRequest(httpMethod9);
        org.jets3t.service.model.StorageBucket storageBucket11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl(storageBucket11);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.setSerializationInclusion(inclusion3);
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode6 = objectMapper4.readTree(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper4);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.io.File file2 = new java.io.File("", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
        org.junit.Assert.assertEquals(file2.getParent(), "/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file2.toString(), "/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        java.io.File file6 = new java.io.File("hi!");
        java.io.File file8 = new java.io.File(file6, "");
        java.lang.Class<?> wildcardClass9 = file6.getClass();
        org.codehaus.jackson.type.JavaType javaType10 = objectMapper4.constructType((java.lang.reflect.Type) wildcardClass9);
        com.metamx.emitter.EmittingLogger emittingLogger11 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass9);
        org.codehaus.jackson.type.JavaType javaType12 = objectMapper0.constructType((java.lang.reflect.Type) wildcardClass9);
        com.metamx.emitter.EmittingLogger emittingLogger13 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass9);
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger13;
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger13;
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(javaType10);
        org.junit.Assert.assertNotNull(javaType12);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper5.writer(prettyPrinter7);
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper5.writer();
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(objectWriter9);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        java.lang.String str8 = file1.getCanonicalPath();
        java.io.File file10 = new java.io.File(file1, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        boolean boolean12 = file10.setReadable(false);
        long long13 = file10.length();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str8, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file10.toString(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode5 = objectMapper4.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper4.schemaBasedReader(formatSchema6);
        byte[] byteArray9 = objectMapper4.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode10 = objectMapper0.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode13 = objectMapper12.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema14 = null;
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper12.schemaBasedReader(formatSchema14);
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode17 = objectMapper16.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema18 = null;
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper16.schemaBasedReader(formatSchema18);
        byte[] byteArray21 = objectMapper16.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode22 = objectMapper12.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper12.setSerializationInclusion(inclusion23);
        org.codehaus.jackson.JsonFactory jsonFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider29, deserializerProvider30);
        org.codehaus.jackson.JsonFactory jsonFactory32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider36 = objectMapper33.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider36, deserializerProvider37);
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode40 = objectMapper39.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema41 = null;
        org.codehaus.jackson.map.ObjectReader objectReader42 = objectMapper39.schemaBasedReader(formatSchema41);
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode44 = objectMapper43.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema45 = null;
        org.codehaus.jackson.map.ObjectReader objectReader46 = objectMapper43.schemaBasedReader(formatSchema45);
        byte[] byteArray48 = objectMapper43.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode49 = objectMapper39.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser50 = objectMapper38.treeAsTokens(jsonNode49);
        org.codehaus.jackson.JsonNode jsonNode51 = objectMapper31.readTree(jsonParser50);
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper52.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.disableDefaultTyping();
        java.io.File file56 = new java.io.File("hi!");
        java.io.File file58 = new java.io.File(file56, "");
        java.lang.Class<?> wildcardClass59 = file56.getClass();
        org.codehaus.jackson.type.JavaType javaType60 = objectMapper54.constructType((java.lang.reflect.Type) wildcardClass59);
        org.codehaus.jackson.map.MappingIterator<java.util.Collection<java.lang.String>> strCollectionItor61 = objectMapper12.readValues(jsonParser50, javaType60);
        org.codehaus.jackson.map.MappingIterator<com.google.common.base.Joiner> joinerItor62 = objectMapper0.readValues(jsonParser11, javaType60);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectNode5);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode10);
        org.junit.Assert.assertNotNull(objectNode13);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(objectNode17);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(serializerProvider36);
        org.junit.Assert.assertNotNull(objectNode40);
        org.junit.Assert.assertNotNull(objectReader42);
        org.junit.Assert.assertNotNull(objectNode44);
        org.junit.Assert.assertNotNull(objectReader46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode49);
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonNode51);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "hi!");
        org.junit.Assert.assertNull("file58.getParent() == null", file58.getParent());
        org.junit.Assert.assertEquals(file58.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(javaType60);
        org.junit.Assert.assertNotNull(strCollectionItor61);
        org.junit.Assert.assertNotNull(joinerItor62);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper7.reader(jsonNodeFactory11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray16 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enable(featureArray16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper7.enable(featureArray16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray23 = restS3Service1.listObjects("hi!/http:/s3.amazonaws.com", "[\"content-length-range\", 1, 0]", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper5.setDeserializationConfig(deserializationConfig7);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.node.ObjectNode objectNode9 = objectMapper5.createObjectNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.setDevPayProductToken("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket("");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties8);
        org.jets3t.service.model.S3Object s3Object11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service9.putObjectAcl("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", s3Object11);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.lang.String str2 = org.jets3t.service.S3Service.buildPostForm("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "x-amz-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<form action=\"https://{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str2, "<form action=\"https://{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.delete();
        java.io.File file5 = file1.getCanonicalFile();
        boolean boolean8 = file1.setReadable(false, false);
        boolean boolean9 = file1.canRead();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        int int18 = restS3Service1.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager24);
        boolean boolean26 = restS3Service20.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.size(0L);
        org.joda.time.Interval interval30 = null;
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.interval(interval30);
        java.lang.String[] strArray35 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder29.metrics((java.util.List<java.lang.String>) strList36);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39, "null", credentialsProvider41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = restS3Service44.renameMetadataKeys(strMap45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = restS3Service42.renameMetadataKeys(strMap45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder29.loadSpec(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service20.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service1.renameMetadataKeys(strMap49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = restS3Service1.createUnsignedObjectUrl("http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", false, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.model.S3Bucket s3Bucket14 = null;
        java.util.Calendar calendar16 = null;
        java.util.Calendar calendar17 = null;
        java.lang.String[] strArray19 = new java.lang.String[] {};
        java.lang.String str20 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray19);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object26 = restS3Service12.getVersionedObject("http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", s3Bucket14, "[\"content-length-range\", -226, -226]", calendar16, calendar17, strArray19, strArray22, (java.lang.Long) 0L, (java.lang.Long) 80259567616L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Versioned Object cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\"\": \"\"}" + "'", str20, "{\"\": \"\"}");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"\": \"\"}" + "'", str23, "{\"\": \"\"}");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        boolean boolean8 = restS3Service1.isShutdown();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        boolean boolean6 = file1.delete();
        boolean boolean9 = file1.setWritable(true, false);
        java.lang.String str10 = file1.getAbsolutePath();
        boolean boolean11 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str10, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray7 = restS3Service3.listObjects(s3Bucket4, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray21 = restS3Service1.listVersionedObjects("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}/&max-keys=1000&versions&prefix=http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent&delimiter=%5B%22%5B%22content-length-range%22%2C%2010%2C%2047%5D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D%22%2C%20%22%5B%22starts-with%22%2C%20%22%24%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D%22%2C%20%22%22%5D%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str8 = restS3Service1.createTorrentUrl("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11, "null", credentialsProvider13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service16.renameMetadataKeys(strMap17);
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = restS3Service14.renameMetadataKeys(strMap17);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager23 = null;
        restS3Service21.setHttpConnectionManager(httpConnectionManager23);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service21.setHttpConnectionManager(httpConnectionManager25);
        java.lang.String str29 = restS3Service21.createTorrentUrl("", "hi!");
        boolean boolean31 = restS3Service21.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date32 = restS3Service21.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = restS3Service1.createSignedPutUrl("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", "hi!/http:/s3.amazonaws.com", strMap19, date32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" + "'", str8, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str29, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Thu Nov 04 08:19:17 BRT 2021");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.io.File file1 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        java.nio.file.Path path2 = file1.toPath();
        java.net.URI uRI3 = file1.toURI();
        java.io.File file4 = new java.io.File(uRI3);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertNotNull(path2);
        org.junit.Assert.assertNotNull(uRI3);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"\": \"s3.amazonaws.com\"}");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder32 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials33);
        org.jets3t.service.security.ProviderCredentials providerCredentials35 = restS3Service34.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager36 = null;
        restS3Service34.setHttpConnectionManager(httpConnectionManager36);
        java.util.List<java.lang.String> strList38 = restS3Service34.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder39 = builder32.dimensions(strList38);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder31.dimensions(strList38);
        java.lang.String str41 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strList38);
        com.metamx.druid.client.DataSegment.Builder builder42 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = restS3Service44.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager46 = null;
        restS3Service44.setHttpConnectionManager(httpConnectionManager46);
        java.util.List<java.lang.String> strList48 = restS3Service44.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder49 = builder42.dimensions(strList48);
        org.joda.time.Interval interval50 = null;
        com.metamx.druid.client.DataSegment.Builder builder51 = builder42.interval(interval50);
        com.metamx.druid.client.DataSegment.Builder builder52 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder52.dimensions((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder57.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder61 = builder59.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder62 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.metamx.druid.client.DataSegment.Builder builder67 = builder62.dimensions((java.util.List<java.lang.String>) strList65);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder61.metrics((java.util.List<java.lang.String>) strList65);
        com.metamx.druid.client.DataSegment.Builder builder69 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.metamx.druid.client.DataSegment.Builder builder74 = builder69.dimensions((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder68.metrics((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.client.DataSegment.Builder builder76 = builder51.dimensions((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.shard.ShardSpec shardSpec77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment79 = new com.metamx.druid.client.DataSegment("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", interval1, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", strMap26, strList38, (java.util.List<java.lang.String>) strList72, shardSpec77, (long) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(providerCredentials35);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}" + "'", str41, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(providerCredentials45);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "{\"\": \"s3.amazonaws.com\"}/hi!");
        long long8 = file7.getUsableSpace();
        boolean boolean9 = file7.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2, jets3tProperties14);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.deleteWebsiteConfig("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.lang.Object obj20 = null;
        java.lang.String str21 = objectMapper17.writeValueAsString(obj20);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.emitter.EmittingLogger emittingLogger29 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray31 = new java.lang.Object[] { objectMapper7, deserializerProvider16, objectMapper17, strList25, emittingLogger29, (byte) 1 };
        emittingLogger4.error(throwable5, "{\"\": \"s3.amazonaws.com\"}", objArray31);
        java.lang.Throwable throwable33 = null;
        java.io.File file36 = new java.io.File("hi!");
        java.io.File file38 = new java.io.File(file36, "");
        java.io.File file39 = file36.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode41 = objectMapper40.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider47);
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = restS3Service50.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager52 = null;
        restS3Service50.setHttpConnectionManager(httpConnectionManager52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { file39, objectMapper40, objectMapper48, restS3Service50, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger4.info(throwable33, "", objArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper59.getSerializerProvider();
        java.text.DateFormat dateFormat63 = null;
        objectMapper59.setDateFormat(dateFormat63);
        org.codehaus.jackson.node.ArrayNode arrayNode65 = objectMapper59.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder66 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder68 = builder66.size(0L);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objectMapper59, builder66 };
        emittingLogger4.trace("null", objArray69);
        emittingLogger1.error("[\"content-length-range\", 58, 1]", objArray69);
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger1;
        boolean boolean73 = emittingLogger1.isTraceEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = objectMapper75.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter77 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter78 = objectMapper75.writer(prettyPrinter77);
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = objectMapper75.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader80 = objectMapper75.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = objectMapper81.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter83 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter84 = objectMapper81.writer(prettyPrinter83);
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = objectMapper81.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray86 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = objectMapper81.enable(featureArray86);
        org.codehaus.jackson.map.ObjectMapper objectMapper88 = objectMapper75.disable(featureArray86);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.service.AlertBuilder alertBuilder89 = emittingLogger1.makeAlert("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", (java.lang.Object[]) featureArray86);
            org.junit.Assert.fail("Expected exception of type com.metamx.common.ISE; message: Emitter not initialized!  Cannot alert.  Please make sure to call class com.metamx.emitter.EmittingLogger.registerEmitter()");
        } catch (com.metamx.common.ISE e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null" + "'", str21, "null");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "hi!");
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "hi!");
        org.junit.Assert.assertNotNull(file39);
// flaky:         org.junit.Assert.assertEquals(file39.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode41);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNull(providerCredentials51);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(arrayNode65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectMapper76);
        org.junit.Assert.assertNotNull(objectWriter78);
        org.junit.Assert.assertNotNull(objectMapper79);
        org.junit.Assert.assertNotNull(objectReader80);
        org.junit.Assert.assertNotNull(objectMapper82);
        org.junit.Assert.assertNotNull(objectWriter84);
        org.junit.Assert.assertNotNull(objectMapper85);
        org.junit.Assert.assertNotNull(featureArray86);
        org.junit.Assert.assertNotNull(objectMapper87);
        org.junit.Assert.assertNotNull(objectMapper88);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str32 = restS3Service1.getRestHeaderPrefix();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "x-amz-" + "'", str32, "x-amz-");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.io.File file1 = new java.io.File("x-amz-meta-");
        java.io.File file3 = new java.io.File(file1, "hi!");
        boolean boolean4 = file1.mkdir();
        java.lang.String str5 = file1.getName();
        boolean boolean7 = file1.setWritable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "x-amz-meta-");
        org.junit.Assert.assertEquals(file3.getParent(), "x-amz-meta-");
        org.junit.Assert.assertEquals(file3.toString(), "x-amz-meta-/hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger2 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode8 = objectMapper7.createObjectNode();
        java.lang.Object[] objArray9 = new java.lang.Object[] { providerCredentials5, objectMapper7 };
        emittingLogger2.info(throwable3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        com.metamx.emitter.EmittingLogger emittingLogger21 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider28, deserializerProvider29, serializationConfig30, deserializationConfig31);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = objectMapper32.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        java.lang.Object obj37 = null;
        java.lang.String str38 = objectMapper34.writeValueAsString(obj37);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.emitter.EmittingLogger emittingLogger46 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray48 = new java.lang.Object[] { objectMapper24, deserializerProvider33, objectMapper34, strList42, emittingLogger46, (byte) 1 };
        emittingLogger21.error(throwable22, "{\"\": \"s3.amazonaws.com\"}", objArray48);
        java.lang.Throwable throwable50 = null;
        java.io.File file53 = new java.io.File("hi!");
        java.io.File file55 = new java.io.File(file53, "");
        java.io.File file56 = file53.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode58 = objectMapper57.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service67 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66);
        org.jets3t.service.security.ProviderCredentials providerCredentials68 = restS3Service67.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager69 = null;
        restS3Service67.setHttpConnectionManager(httpConnectionManager69);
        java.lang.Object[] objArray73 = new java.lang.Object[] { file56, objectMapper57, objectMapper65, restS3Service67, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger21.info(throwable50, "", objArray73);
        java.lang.String str75 = joiner0.join((java.lang.Object) emittingLogger2, (java.lang.Object) javaType19, objArray73);
        com.google.common.base.Joiner joiner77 = joiner0.useForNull("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        com.google.common.base.Joiner.MapJoiner mapJoiner79 = joiner0.withKeyValueSeparator("[\"content-length-range\", 1, 0]");
        com.google.common.base.Joiner joiner80 = joiner0.skipNulls();
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(objectNode8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "null" + "'", str38, "null");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNull("file53.getParent() == null", file53.getParent());
        org.junit.Assert.assertEquals(file53.toString(), "hi!");
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "hi!");
        org.junit.Assert.assertNotNull(file56);
// flaky:         org.junit.Assert.assertEquals(file56.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode58);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNull(providerCredentials68);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(joiner77);
        org.junit.Assert.assertNotNull(mapJoiner79);
        org.junit.Assert.assertNotNull(joiner80);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper5.writer(prettyPrinter7);
        java.io.Reader reader9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10);
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        java.io.File file16 = new java.io.File("hi!");
        java.io.File file18 = new java.io.File(file16, "");
        java.lang.Class<?> wildcardClass19 = file16.getClass();
        org.codehaus.jackson.type.JavaType javaType20 = objectMapper14.constructType((java.lang.reflect.Type) wildcardClass19);
        org.codehaus.jackson.map.ObjectWriter objectWriter21 = objectMapper11.writerWithType(javaType20);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray22 = objectMapper5.readValue(reader9, javaType20);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "hi!");
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(javaType20);
        org.junit.Assert.assertNotNull(objectWriter21);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        boolean boolean9 = restS3Service1.isRequesterPaysEnabled();
        java.util.Calendar calendar13 = null;
        java.util.Calendar calendar14 = null;
        java.lang.String[] strArray21 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str22 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray21);
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        java.lang.String str26 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object29 = restS3Service1.getVersionedObject("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "", calendar13, calendar14, strArray21, strArray25, (java.lang.Long) 0L, (java.lang.Long) 4096L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null/?versionId=%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str22, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str23, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\"\": \"\"}" + "'", str26, "{\"\": \"\"}");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient6 = restS3Service1.getHttpClient();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioning("{\"\": \"\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient6);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.io.File file5 = new java.io.File(file3, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean6 = file3.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        org.jets3t.service.model.StorageObject storageObject7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", storageObject7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = restS3Service3.getAWSCredentials();
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        java.util.Calendar calendar7 = null;
        java.util.Calendar calendar8 = null;
        java.lang.String[] strArray13 = new java.lang.String[] { "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", "[\"content-length-range\", 1, 0]" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str20 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object21 = restS3Service3.getObjectDetails(s3Bucket5, "[\"content-length-range\", 100, 4]", calendar7, calendar8, strArray13, strArray19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Object Details cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials4);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str20, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.metamx.druid.loading.S3SegmentPusher.JOINER = joiner1;
        com.google.common.base.Joiner.MapJoiner mapJoiner4 = joiner1.withKeyValueSeparator("http://s3.amazonaws.com//hi%21?torrent");
        com.google.common.base.Joiner joiner5 = joiner1.skipNulls();
        java.lang.StringBuilder stringBuilder6 = null;
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("hi!");
        com.metamx.emitter.EmittingLogger emittingLogger11 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig20 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider18, deserializerProvider19, serializationConfig20, deserializationConfig21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper22.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        java.lang.Object obj27 = null;
        java.lang.String str28 = objectMapper24.writeValueAsString(obj27);
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        com.metamx.emitter.EmittingLogger emittingLogger36 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray38 = new java.lang.Object[] { objectMapper14, deserializerProvider23, objectMapper24, strList32, emittingLogger36, (byte) 1 };
        emittingLogger11.error(throwable12, "{\"\": \"s3.amazonaws.com\"}", objArray38);
        boolean boolean40 = emittingLogger11.isInfoEnabled();
        java.lang.Throwable throwable41 = null;
        com.metamx.emitter.EmittingLogger emittingLogger44 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean45 = emittingLogger44.isInfoEnabled();
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        emittingLogger44.debug("http://s3.amazonaws.com//hi%21?torrent", objArray47);
        emittingLogger11.error(throwable41, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", objArray47);
        emittingLogger8.trace("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", objArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder51 = joiner5.appendTo(stringBuilder6, objArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(mapJoiner4);
        org.junit.Assert.assertNotNull(joiner5);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "null" + "'", str28, "null");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = restS3Service35.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager37 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager39);
        java.lang.String str43 = restS3Service35.createTorrentUrl("", "hi!");
        boolean boolean45 = restS3Service35.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date46 = restS3Service35.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = restS3Service1.createSignedGetUrl("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", date46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(providerCredentials36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str43, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Thu Nov 04 08:19:19 BRT 2021");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig9 = objectMapper6.copyDeserializationConfig();
        org.codehaus.jackson.map.Module module10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper6.withModule(module10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(deserializationConfig9);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider5, jets3tProperties11);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11, hostConfiguration13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket17 = restS3Service14.createBucket("[\"content-length-range\", 0, 100]", "/");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory16 = objectMapper14.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper12.reader(jsonNodeFactory16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray21 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper18.enable(featureArray21);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper12.enable(featureArray21);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper9.enable(featureArray21);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper0.disable(featureArray21);
        java.io.InputStream inputStream26 = null;
        org.codehaus.jackson.type.TypeReference typeReference27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file28 = objectMapper0.readValue(inputStream26, typeReference27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(deserializerProvider8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(jsonNodeFactory16);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.deleteBucketPolicy("[\"content-length-range\", 97, 100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 97, 100]/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory4 = objectMapper2.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader(jsonNodeFactory4);
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray9 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enable(featureArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper0.enable(featureArray9);
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper11.writer(prettyPrinter12);
        org.codehaus.jackson.map.SerializationConfig serializationConfig14 = objectMapper11.copySerializationConfig();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(jsonNodeFactory4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(serializationConfig14);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        java.lang.String str8 = restS3Service1.getEndpoint();
        java.lang.String str9 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig14 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider12, deserializerProvider13, serializationConfig14, deserializationConfig15);
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper16.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter18 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter19 = objectMapper16.writer(prettyPrinter18);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig10, objectMapper16);
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean25 = file22.setReadOnly();
        java.lang.String str26 = file22.getPath();
        com.metamx.druid.client.DataSegment dataSegment27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment28 = s3SegmentPusher20.push(file22, dataSegment27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectWriter19);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertEquals(file24.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file24.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper0.enableDefaultTyping();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2, jets3tProperties11, hostConfiguration12);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.WebsiteConfig websiteConfig15 = restS3Service13.getWebsiteConfig("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]/?website': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", credentialsProvider2);
        org.jets3t.service.model.StorageBucket storageBucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putBucketAcl(storageBucket4);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        boolean boolean8 = file1.createNewFile();
        file1.deleteOnExit();
        long long10 = file1.getFreeSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 129486516224L + "'", long10 == 129486516224L);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        boolean boolean16 = restS3Service1.isBucketAccessible("hi!/http:/s3.amazonaws.com");
        java.lang.String str17 = restS3Service1.getRestHeaderPrefix();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-" + "'", str17, "x-amz-");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        java.io.File file6 = new java.io.File(uRI4);
        java.io.File file8 = new java.io.File(file6, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean9 = file6.createNewFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRI4);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager4);
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", accessControlList7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The bucket '[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.net.URI uRI3 = file2.toURI();
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/hi%21?torrent/<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertNotNull(uRI3);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.map.SerializerFactory serializerFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.setSerializerFactory(serializerFactory25);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper24.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5, serializerProvider9, deserializerProvider16, serializationConfig17, deserializationConfig27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider16);
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper29.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = objectMapper29.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray35 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper32.enable(featureArray35);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider37 = null;
        objectMapper36.setFilters(filterProvider37);
        org.codehaus.jackson.JsonFactory jsonFactory39 = objectMapper36.getJsonFactory();
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider44 = objectMapper41.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider44, deserializerProvider45);
        org.codehaus.jackson.map.SerializerFactory serializerFactory47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper46.setSerializerFactory(serializerFactory47);
        org.codehaus.jackson.PrettyPrinter prettyPrinter49 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter50 = objectMapper48.prettyPrintingWriter(prettyPrinter49);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker51 = objectMapper48.getVisibilityChecker();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper48.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper53.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper53.disableDefaultTyping();
        java.lang.Object obj56 = null;
        java.lang.String str57 = objectMapper53.writeValueAsString(obj56);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider58 = objectMapper53.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = objectMapper53.setSerializerProvider(serializerProvider63);
        org.codehaus.jackson.JsonFactory jsonFactory67 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider68 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider69 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig70 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig71 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper72 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory67, serializerProvider68, deserializerProvider69, serializationConfig70, deserializationConfig71);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider73 = objectMapper72.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper66.setDeserializerProvider(deserializerProvider73);
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory39, serializerProvider52, deserializerProvider73);
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = objectMapper29.setDeserializerProvider(deserializerProvider73);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
        org.junit.Assert.assertNotNull(objectWriter30);
        org.junit.Assert.assertNotNull(deserializationConfig31);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(jsonFactory39);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(serializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker51);
        org.junit.Assert.assertNotNull(serializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "null" + "'", str57, "null");
        org.junit.Assert.assertNotNull(deserializerProvider58);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(objectMapper66);
        org.junit.Assert.assertNotNull(deserializerProvider73);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper76);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = restS3Service1.getHttpClient();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(httpClient7);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.Date date5 = restS3Service1.getCurrentTimeWithOffset();
        org.jets3t.service.Jets3tProperties jets3tProperties6 = restS3Service1.getJetS3tProperties();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 04 08:19:21 BRT 2021");
        org.junit.Assert.assertNotNull(jets3tProperties6);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        org.codehaus.jackson.map.ObjectReader objectReader25 = objectMapper0.updatingReader((java.lang.Object) objectMapper20);
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper20.getSerializerProvider();
        java.io.File file28 = new java.io.File("hi!");
        java.io.File file30 = new java.io.File(file28, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean31 = file28.createNewFile();
        boolean boolean33 = file28.setLastModified((long) 2);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode34 = objectMapper20.readTree(file28);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectReader25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNull("file28.getParent() == null", file28.getParent());
        org.junit.Assert.assertEquals(file28.toString(), "hi!");
        org.junit.Assert.assertEquals(file30.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file30.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = restS3Service1.getBucketLocation("[\"starts-with\", \"$s3.amazonaws.com\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$s3.amazonaws.com\", \"\"]/?location': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        boolean boolean13 = restS3Service10.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service10.getProviderCredentials();
        java.lang.String str17 = restS3Service10.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean18 = restS3Service10.isShutdown();
        java.util.Date date19 = restS3Service10.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = restS3Service1.createSignedGetUrl("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", providerCredentials8, date19, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str17, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 04 08:19:22 BRT 2021");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode7 = objectMapper6.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper6.schemaBasedReader(formatSchema8);
        byte[] byteArray11 = objectMapper6.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper6.reader(formatSchema12);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher14 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper6);
        org.jets3t.service.model.MultipartUpload multipartUpload15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartCompleted multipartCompleted16 = restS3Service1.multipartCompleteUpload(multipartUpload15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objectNode7);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader13);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        boolean boolean4 = restS3Service3.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager18 = null;
        restS3Service16.setHttpConnectionManager(httpConnectionManager18);
        org.jets3t.service.Jets3tProperties jets3tProperties20 = restS3Service16.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "", credentialsProvider14, jets3tProperties20, hostConfiguration21);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider11, jets3tProperties20);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24, "null", credentialsProvider26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service29.renameMetadataKeys(strMap30);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = restS3Service27.renameMetadataKeys(strMap30);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = restS3Service23.renameMetadataKeys(strMap32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = restS3Service3.createSignedUrl("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", strMap33, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertNotNull(jets3tProperties20);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.io.File file2 = new java.io.File("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals(file2.getParent(), "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http:/s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http:/s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder3.dimensions(strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder3.loadSpec(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.metamx.druid.client.DataSegment.Builder builder21 = builder16.dimensions((java.util.List<java.lang.String>) strList19);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder25 = builder23.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder26 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder26.dimensions((java.util.List<java.lang.String>) strList29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder25.metrics((java.util.List<java.lang.String>) strList29);
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials33);
        org.jets3t.service.security.ProviderCredentials providerCredentials35 = restS3Service34.getProviderCredentials();
        java.lang.String str36 = restS3Service34.getInvokingApplicationDescription();
        java.util.List<java.lang.String> strList37 = restS3Service34.getResourceParameterNames();
        com.metamx.druid.shard.ShardSpec shardSpec38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment40 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 1, 0]", interval1, "{\"\": \"s3.amazonaws.com\"}/hi!", strMap14, (java.util.List<java.lang.String>) strList29, strList37, shardSpec38, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(providerCredentials35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service0 = null;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        java.io.File file8 = new java.io.File("hi!");
        java.io.File file10 = new java.io.File(file8, "");
        java.lang.Class<?> wildcardClass11 = file8.getClass();
        org.codehaus.jackson.type.JavaType javaType12 = objectMapper6.constructType((java.lang.reflect.Type) wildcardClass11);
        com.metamx.emitter.EmittingLogger emittingLogger13 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass11);
        org.codehaus.jackson.type.JavaType javaType14 = objectMapper2.constructType((java.lang.reflect.Type) wildcardClass11);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig15 = objectMapper2.getDeserializationConfig();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service0, s3SegmentPusherConfig1, objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "hi!");
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(javaType12);
        org.junit.Assert.assertNotNull(javaType14);
        org.junit.Assert.assertNotNull(deserializationConfig15);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = restS3Service4.renameMetadataKeys(strMap5);
        com.metamx.druid.client.DataSegment.Builder builder8 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.metamx.druid.client.DataSegment.Builder builder13 = builder8.dimensions((java.util.List<java.lang.String>) strList11);
        java.lang.String str14 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList11);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder19 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager23 = null;
        restS3Service21.setHttpConnectionManager(httpConnectionManager23);
        java.util.List<java.lang.String> strList25 = restS3Service21.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder26 = builder19.dimensions(strList25);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder18.dimensions(strList25);
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strList25);
        com.metamx.druid.shard.ShardSpec shardSpec29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment31 = new com.metamx.druid.client.DataSegment("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", interval1, "[\"content-length-range\", 1, 0]", strMap6, (java.util.List<java.lang.String>) strList11, strList25, shardSpec29, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str14, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}" + "'", str28, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper0.enableDefaultTyping();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        org.jets3t.service.Jets3tProperties jets3tProperties18 = restS3Service14.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "", credentialsProvider12, jets3tProperties18, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider9, jets3tProperties18);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "", credentialsProvider6, jets3tProperties18, hostConfiguration22);
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper3.readerForUpdating((java.lang.Object) restS3Service23);
        boolean boolean25 = restS3Service23.isRequesterPaysEnabled();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(jets3tProperties18);
        org.junit.Assert.assertNotNull(objectReader24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        java.lang.String str6 = file2.getCanonicalPath();
        long long7 = file2.lastModified();
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null" + "'", str6, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1636024695000L + "'", long7 == 1636024695000L);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        java.lang.Object obj38 = null;
        java.lang.String str39 = objectMapper35.writeValueAsString(obj38);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper35.setSerializerProvider(serializerProvider45);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig49 = objectMapper35.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper33.setDeserializationConfig(deserializationConfig49);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher51 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig32, objectMapper50);
        restS3Service1.setRequesterPaysEnabled(true);
        org.jets3t.service.Jets3tProperties jets3tProperties54 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.model.S3Bucket s3Bucket55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray58 = restS3Service1.listObjects(s3Bucket55, "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null" + "'", str39, "null");
        org.junit.Assert.assertNotNull(deserializerProvider40);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(deserializationConfig49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(jets3tProperties54);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray15 = restS3Service1.listObjects(s3Bucket11, "[\"content-length-range\", 100, 4]", "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.jets3t.service.model.S3Bucket s3Bucket7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteObject(s3Bucket7, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action deleteObject cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper0.writer();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper3.enable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.SerializationConfig.Feature feature9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = objectMapper8.isEnabled(feature9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger2 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode8 = objectMapper7.createObjectNode();
        java.lang.Object[] objArray9 = new java.lang.Object[] { providerCredentials5, objectMapper7 };
        emittingLogger2.info(throwable3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        com.metamx.emitter.EmittingLogger emittingLogger21 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider28, deserializerProvider29, serializationConfig30, deserializationConfig31);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = objectMapper32.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        java.lang.Object obj37 = null;
        java.lang.String str38 = objectMapper34.writeValueAsString(obj37);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.emitter.EmittingLogger emittingLogger46 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray48 = new java.lang.Object[] { objectMapper24, deserializerProvider33, objectMapper34, strList42, emittingLogger46, (byte) 1 };
        emittingLogger21.error(throwable22, "{\"\": \"s3.amazonaws.com\"}", objArray48);
        java.lang.Throwable throwable50 = null;
        java.io.File file53 = new java.io.File("hi!");
        java.io.File file55 = new java.io.File(file53, "");
        java.io.File file56 = file53.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode58 = objectMapper57.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service67 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66);
        org.jets3t.service.security.ProviderCredentials providerCredentials68 = restS3Service67.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager69 = null;
        restS3Service67.setHttpConnectionManager(httpConnectionManager69);
        java.lang.Object[] objArray73 = new java.lang.Object[] { file56, objectMapper57, objectMapper65, restS3Service67, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger21.info(throwable50, "", objArray73);
        java.lang.String str75 = joiner0.join((java.lang.Object) emittingLogger2, (java.lang.Object) javaType19, objArray73);
        com.google.common.base.Joiner joiner77 = joiner0.useForNull("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        java.lang.StringBuilder stringBuilder78 = null;
        java.lang.Iterable<org.codehaus.jackson.JsonNode> jsonNodeIterable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder80 = joiner0.appendTo(stringBuilder78, jsonNodeIterable79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(objectNode8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "null" + "'", str38, "null");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNull("file53.getParent() == null", file53.getParent());
        org.junit.Assert.assertEquals(file53.toString(), "hi!");
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "hi!");
        org.junit.Assert.assertNotNull(file56);
// flaky:         org.junit.Assert.assertEquals(file56.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode58);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNull(providerCredentials68);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(joiner77);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        org.jets3t.service.model.StorageBucket storageBucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageBucket storageBucket7 = restS3Service1.createBucket(storageBucket6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket10 = restS3Service1.createBucket("x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema7 = null;
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper5.schemaBasedReader(formatSchema7);
        byte[] byteArray10 = objectMapper5.writeValueAsBytes((java.lang.Object) 10L);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher11 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig4, objectMapper5);
        org.jets3t.service.model.WebsiteConfig websiteConfig13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setWebsiteConfig("http://s3.amazonaws.com//?torrent", websiteConfig13);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build WebsiteConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, 48]");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        com.metamx.druid.client.DataSegment.Builder builder20 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = restS3Service22.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager24);
        java.util.List<java.lang.String> strList26 = restS3Service22.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder27 = builder20.dimensions(strList26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service29.renameMetadataKeys(strMap30);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder20.loadSpec(strMap31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = restS3Service1.createSignedUrl("x-amz-", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "x-amz-", "http://s3.amazonaws.com//hi%21?torrent", strMap31, 0L, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(providerCredentials23);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        int int3 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioning("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties8);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object11 = restS3Service9.getObjectWithSignedUrl("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode5 = objectMapper4.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper4.schemaBasedReader(formatSchema6);
        byte[] byteArray9 = objectMapper4.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode10 = objectMapper0.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper0.setSerializationInclusion(inclusion11);
        java.text.DateFormat dateFormat13 = null;
        objectMapper12.setDateFormat(dateFormat13);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectNode5);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode10);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service1.authorizeHttpRequest(httpMethod4);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageObjectsChunk storageObjectsChunk11 = restS3Service1.listObjectsChunked("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 1, 0]", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", (long) (short) 100, "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/&max-keys=100&prefix=%5B%22content-length-range%22%2C%201%2C%200%5D&delimiter=%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D&marker=%5B%22%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D%22%2C%20%22%24http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%2C%20%22%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        java.io.File file4 = file1.getAbsoluteFile();
        java.io.File file6 = new java.io.File(file4, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        boolean boolean7 = file6.isHidden();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema7 = null;
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper5.schemaBasedReader(formatSchema7);
        byte[] byteArray10 = objectMapper5.writeValueAsBytes((java.lang.Object) 10L);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher11 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig4, objectMapper5);
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketLoggingStatus("{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", s3BucketLoggingStatus13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, 48]");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        boolean boolean11 = restS3Service10.isAuthenticatedConnection();
        java.lang.String str12 = restS3Service10.getDevPayUserToken();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service10.suspendBucketVersioning("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        byte[] byteArray19 = objectMapper14.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema20 = null;
        org.codehaus.jackson.map.ObjectReader objectReader21 = objectMapper14.reader(formatSchema20);
        java.text.DateFormat dateFormat22 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter23 = objectMapper14.writer(dateFormat22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory26 = objectMapper24.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper14.setNodeFactory(jsonNodeFactory26);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper13.setNodeFactory(jsonNodeFactory26);
        org.codehaus.jackson.JsonGenerator jsonGenerator29 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials30);
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = restS3Service31.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager33 = null;
        restS3Service31.setHttpConnectionManager(httpConnectionManager33);
        java.lang.String str35 = restS3Service31.getEndpoint();
        java.lang.String str36 = restS3Service31.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod37 = null;
        restS3Service31.authorizeHttpRequest(httpMethod37);
        boolean boolean39 = restS3Service31.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties40 = restS3Service31.getJetS3tProperties();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter43 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter44 = objectMapper41.writer(prettyPrinter43);
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper41.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema46 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter47 = objectMapper45.schemaBasedWriter(formatSchema46);
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48);
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper50.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper50.disableDefaultTyping();
        java.io.File file54 = new java.io.File("hi!");
        java.io.File file56 = new java.io.File(file54, "");
        java.lang.Class<?> wildcardClass57 = file54.getClass();
        org.codehaus.jackson.type.JavaType javaType58 = objectMapper52.constructType((java.lang.reflect.Type) wildcardClass57);
        org.codehaus.jackson.map.ObjectWriter objectWriter59 = objectMapper49.writerWithType(javaType58);
        org.codehaus.jackson.map.ObjectWriter objectWriter60 = objectMapper45.typedWriter(javaType58);
        org.codehaus.jackson.map.SerializationConfig serializationConfig61 = objectMapper45.getSerializationConfig();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper28.writeValue(jsonGenerator29, (java.lang.Object) jets3tProperties40, serializationConfig61);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader21);
        org.junit.Assert.assertNotNull(objectWriter23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(jsonNodeFactory26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNull(providerCredentials32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "s3.amazonaws.com" + "'", str35, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "s3.amazonaws.com" + "'", str36, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jets3tProperties40);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectWriter44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(objectWriter47);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNull("file54.getParent() == null", file54.getParent());
        org.junit.Assert.assertEquals(file54.toString(), "hi!");
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(javaType58);
        org.junit.Assert.assertNotNull(objectWriter59);
        org.junit.Assert.assertNotNull(objectWriter60);
        org.junit.Assert.assertNotNull(serializationConfig61);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        boolean boolean8 = file1.createNewFile();
        long long9 = file1.getUsableSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 80259543040L + "'", long9 == 80259543040L);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper3.getSerializerProvider();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        int int18 = restS3Service1.getInternalErrorRetryMax();
        java.lang.String str21 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.jets3t.service.model.S3Bucket s3Bucket23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList25 = restS3Service1.getVersionedObjectAcl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", s3Bucket23, "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent" + "'", str21, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2);
        restS3Service3.setDevPayUserToken("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.jets3t.service.model.S3Bucket s3Bucket7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList9 = restS3Service3.getVersionedObjectAcl("", s3Bucket7, "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", credentialsProvider2);
        boolean boolean4 = restS3Service3.isRequesterPaysEnabled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = restS3Service1.checkBucketStatus("[\"content-length-range\", 100, 4]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 100, 4]/?max-keys=0': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList5 = restS3Service3.getBucketAcl(s3Bucket4);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        int int8 = restS3Service1.checkBucketStatus("x-amz-meta-");
        org.jets3t.service.model.S3Bucket s3Bucket9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray13 = restS3Service1.listObjects(s3Bucket9, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", 0L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = restS3Service4.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "null", credentialsProvider11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = restS3Service14.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service12.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service4.renameMetadataKeys(strMap17);
        com.metamx.druid.client.DataSegment.Builder builder19 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder19.dimensions((java.util.List<java.lang.String>) strList22);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder24.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec27 = null;
        com.metamx.druid.client.DataSegment.Builder builder28 = builder24.shardSpec(shardSpec27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder24.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder31 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder31.dimensions((java.util.List<java.lang.String>) strList34);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder40 = builder38.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder41 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder41.dimensions((java.util.List<java.lang.String>) strList44);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder40.metrics((java.util.List<java.lang.String>) strList44);
        com.metamx.druid.client.DataSegment.Builder builder48 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder48.dimensions((java.util.List<java.lang.String>) strList51);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder47.metrics((java.util.List<java.lang.String>) strList51);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder24.metrics((java.util.List<java.lang.String>) strList51);
        com.metamx.druid.client.DataSegment.Builder builder56 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials57 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service58 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials57);
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = restS3Service58.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager60 = null;
        restS3Service58.setHttpConnectionManager(httpConnectionManager60);
        java.util.List<java.lang.String> strList62 = restS3Service58.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder63 = builder56.dimensions(strList62);
        org.joda.time.Interval interval64 = null;
        com.metamx.druid.client.DataSegment.Builder builder65 = builder56.interval(interval64);
        com.metamx.druid.client.DataSegment.Builder builder66 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.metamx.druid.client.DataSegment.Builder builder71 = builder66.dimensions((java.util.List<java.lang.String>) strList69);
        com.metamx.druid.client.DataSegment.Builder builder73 = builder71.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder75 = builder73.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder76 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        com.metamx.druid.client.DataSegment.Builder builder81 = builder76.dimensions((java.util.List<java.lang.String>) strList79);
        com.metamx.druid.client.DataSegment.Builder builder82 = builder75.metrics((java.util.List<java.lang.String>) strList79);
        com.metamx.druid.client.DataSegment.Builder builder83 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray85 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.metamx.druid.client.DataSegment.Builder builder88 = builder83.dimensions((java.util.List<java.lang.String>) strList86);
        com.metamx.druid.client.DataSegment.Builder builder89 = builder82.metrics((java.util.List<java.lang.String>) strList86);
        com.metamx.druid.client.DataSegment.Builder builder90 = builder65.dimensions((java.util.List<java.lang.String>) strList86);
        com.metamx.druid.shard.ShardSpec shardSpec91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment93 = new com.metamx.druid.client.DataSegment("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", interval1, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent", strMap17, (java.util.List<java.lang.String>) strList51, (java.util.List<java.lang.String>) strList86, shardSpec91, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(credentialsProvider8);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(providerCredentials59);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service24.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig31 = null;
        org.codehaus.jackson.JsonFactory jsonFactory32 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig35 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider33, deserializerProvider34, serializationConfig35, deserializationConfig36);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service24, s3SegmentPusherConfig31, objectMapper37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = restS3Service24.getHttpConnectionManager();
        java.lang.String str42 = restS3Service24.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = restS3Service44.getProviderCredentials();
        boolean boolean47 = restS3Service44.isBucketAccessible("");
        java.lang.String str48 = restS3Service44.getRestMetadataPrefix();
        boolean boolean49 = restS3Service44.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager50 = restS3Service44.getHttpConnectionManager();
        restS3Service24.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setRequesterPaysEnabled(true);
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus56 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketLoggingStatus("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", s3BucketLoggingStatus56, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "x-amz-meta-" + "'", str30, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str42, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "x-amz-meta-" + "'", str48, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager50);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file5 = new java.io.File(file3, "");
        boolean boolean8 = file5.setReadable(false, true);
        boolean boolean10 = file5.setExecutable(true);
        java.lang.String str11 = file5.getCanonicalPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str11, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.Date date5 = restS3Service1.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk13 = restS3Service1.listVersionedObjectsChunked("hi!/http:/s3.amazonaws.com", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "/", 967682662400L, "[\"content-length-range\", 0, 100]", "[\"content-length-range\", 10, 47]", true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 04 08:19:25 BRT 2021");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        java.lang.String str6 = file2.getCanonicalPath();
        java.lang.String str7 = file2.getPath();
        boolean boolean8 = file2.delete();
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null" + "'", str6, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[\"content-length-range\", 58, 1]/null" + "'", str7, "[\"content-length-range\", 58, 1]/null");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.delete();
        java.io.File file5 = file1.getCanonicalFile();
        long long6 = file1.length();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = file1.setLastModified((long) (-57));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative time");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        restS3Service3.setRequesterPaysEnabled(false);
        boolean boolean6 = restS3Service3.isHttpsOnly();
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder11.dimensions((java.util.List<java.lang.String>) strList14);
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec19 = null;
        com.metamx.druid.client.DataSegment.Builder builder20 = builder16.shardSpec(shardSpec19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder16.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder24 = builder16.dataSource("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        com.metamx.druid.client.DataSegment.Builder builder26 = builder24.dataSource("");
        com.metamx.druid.client.DataSegment.Builder builder28 = builder26.dataSource("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = restS3Service30.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager32 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager32);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager34 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager34);
        boolean boolean36 = restS3Service30.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder37 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder39 = builder37.size(0L);
        org.joda.time.Interval interval40 = null;
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.interval(interval40);
        java.lang.String[] strArray45 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder39.metrics((java.util.List<java.lang.String>) strList46);
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider51 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service52 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49, "null", credentialsProvider51);
        org.jets3t.service.security.ProviderCredentials providerCredentials53 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service54 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials53);
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = restS3Service54.renameMetadataKeys(strMap55);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service52.renameMetadataKeys(strMap55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder39.loadSpec(strMap57);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = restS3Service30.renameMetadataKeys(strMap57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder26.loadSpec(strMap59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = restS3Service3.createSignedUrl("[\"content-length-range\", 58, 1]/null", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", "{\"\": \"s3.amazonaws.com\"}/hi!", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", strMap59, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(providerCredentials31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getEndpoint();
        org.jets3t.service.acl.AccessControlList accessControlList6 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAclWithSignedUrl("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", accessControlList6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "s3.amazonaws.com" + "'", str4, "s3.amazonaws.com");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.mkdirs();
        boolean boolean5 = file1.setReadable(true, false);
        long long6 = file1.length();
        boolean boolean7 = file1.mkdir();
        long long8 = file1.getFreeSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4096L + "'", long6 == 4096L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 129486516224L + "'", long8 == 129486516224L);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.metamx.druid.client.DataSegment.Builder builder8 = builder3.dimensions((java.util.List<java.lang.String>) strList6);
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder8.shardSpec(shardSpec11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder8.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder16 = builder8.dataSource("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.dataSource("");
        com.metamx.druid.client.DataSegment.Builder builder20 = builder18.dataSource("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = restS3Service22.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager24);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager26);
        boolean boolean28 = restS3Service22.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.size(0L);
        org.joda.time.Interval interval32 = null;
        com.metamx.druid.client.DataSegment.Builder builder33 = builder31.interval(interval32);
        java.lang.String[] strArray37 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder31.metrics((java.util.List<java.lang.String>) strList38);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials41, "null", credentialsProvider43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service46 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = restS3Service46.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service44.renameMetadataKeys(strMap47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder31.loadSpec(strMap49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = restS3Service22.renameMetadataKeys(strMap49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder18.loadSpec(strMap51);
        java.util.List<java.lang.String> strList53 = null;
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder56 = builder54.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder57 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials58 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service59 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials58);
        org.jets3t.service.security.ProviderCredentials providerCredentials60 = restS3Service59.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager61 = null;
        restS3Service59.setHttpConnectionManager(httpConnectionManager61);
        java.util.List<java.lang.String> strList63 = restS3Service59.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder64 = builder57.dimensions(strList63);
        com.metamx.druid.client.DataSegment.Builder builder65 = builder56.dimensions(strList63);
        com.metamx.druid.shard.ShardSpec shardSpec66 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment68 = new com.metamx.druid.client.DataSegment("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", interval1, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", strMap51, strList53, strList63, shardSpec66, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(providerCredentials23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(providerCredentials60);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getDevPayProductToken();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service21.getProviderCredentials();
        boolean boolean24 = restS3Service21.isBucketAccessible("");
        java.lang.String str25 = restS3Service21.getRestMetadataPrefix();
        boolean boolean26 = restS3Service21.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = restS3Service21.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager27);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioningAndMFA("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "x-amz-meta-" + "'", str25, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager27);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"content-length-range\", 58, 1]/null", credentialsProvider5, jets3tProperties14, hostConfiguration17);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2, jets3tProperties14);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.deleteObject("s3.amazonaws.com", "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        file1.deleteOnExit();
        java.lang.String str9 = file1.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject10 = restS3Service1.getObjectDetails("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "[\"content-length-range\", 10, 47]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]/%5B%22content-length-range%22%2C%2010%2C%2047%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.enableDefaultTyping(defaultTyping6);
        java.io.Writer writer8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider14);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver16 = null;
        objectMapper15.setSubtypeResolver(subtypeResolver16);
        org.codehaus.jackson.map.SerializationConfig serializationConfig18 = objectMapper15.getSerializationConfig();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper7.writeValue(writer8, (java.lang.Object) serializationConfig18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(serializationConfig18);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.codehaus.jackson.map.SerializerFactory serializerFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory0);
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper1.writer();
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper11.prettyPrintingWriter(prettyPrinter12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory18 = objectMapper16.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper14.reader(jsonNodeFactory18);
        org.codehaus.jackson.map.ObjectReader objectReader20 = objectMapper11.reader(jsonNodeFactory18);
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        java.lang.Object obj24 = null;
        java.lang.String str25 = objectMapper21.writeValueAsString(obj24);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider26 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = objectMapper28.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider31, deserializerProvider32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper21.setSerializerProvider(serializerProvider31);
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider36 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider37 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig38 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider36, deserializerProvider37, serializationConfig38, deserializationConfig39);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider41 = objectMapper40.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper34.setDeserializerProvider(deserializerProvider41);
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        java.text.DateFormat dateFormat47 = null;
        objectMapper43.setDateFormat(dateFormat47);
        org.codehaus.jackson.JsonFactory jsonFactory50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider54 = objectMapper51.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory50, serializerProvider54, deserializerProvider55);
        org.codehaus.jackson.map.SerializerFactory serializerFactory57 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper56.setSerializerFactory(serializerFactory57);
        org.codehaus.jackson.PrettyPrinter prettyPrinter59 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter60 = objectMapper58.prettyPrintingWriter(prettyPrinter59);
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper61.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = objectMapper61.disableDefaultTyping();
        java.io.File file65 = new java.io.File("hi!");
        java.io.File file67 = new java.io.File(file65, "");
        java.lang.Class<?> wildcardClass68 = file65.getClass();
        org.codehaus.jackson.type.JavaType javaType69 = objectMapper63.constructType((java.lang.reflect.Type) wildcardClass68);
        boolean boolean70 = objectMapper58.canDeserialize(javaType69);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService71 = objectMapper43.readValue("null", javaType69);
        org.codehaus.jackson.node.ArrayNode arrayNode72 = objectMapper43.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode74 = objectMapper73.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema75 = null;
        org.codehaus.jackson.map.ObjectReader objectReader76 = objectMapper73.schemaBasedReader(formatSchema75);
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode78 = objectMapper77.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema79 = null;
        org.codehaus.jackson.map.ObjectReader objectReader80 = objectMapper77.schemaBasedReader(formatSchema79);
        byte[] byteArray82 = objectMapper77.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode83 = objectMapper73.valueToTree((java.lang.Object) 10L);
        byte[] byteArray84 = objectMapper43.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode85 = objectMapper42.readTree(byteArray84);
        org.codehaus.jackson.JsonNode jsonNode86 = objectMapper11.readTree(byteArray84);
        org.codehaus.jackson.type.TypeReference typeReference89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageService storageService90 = objectMapper1.readValue(byteArray84, (int) (short) 0, (-57), typeReference89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(jsonNodeFactory18);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(objectReader20);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "null" + "'", str25, "null");
        org.junit.Assert.assertNotNull(deserializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(serializerProvider31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(deserializerProvider41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(serializerProvider54);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(objectWriter60);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(objectMapper63);
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "hi!");
        org.junit.Assert.assertNull("file67.getParent() == null", file67.getParent());
        org.junit.Assert.assertEquals(file67.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(javaType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(restStorageService71);
        org.junit.Assert.assertNotNull(arrayNode72);
        org.junit.Assert.assertNotNull(objectNode74);
        org.junit.Assert.assertNotNull(objectReader76);
        org.junit.Assert.assertNotNull(objectNode78);
        org.junit.Assert.assertNotNull(objectReader80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode85);
        org.junit.Assert.assertNotNull(jsonNode86);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig18 = null;
        org.codehaus.jackson.JsonFactory jsonFactory19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider23 = objectMapper20.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory19, serializerProvider23, deserializerProvider24);
        org.codehaus.jackson.map.SerializerFactory serializerFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.setSerializerFactory(serializerFactory26);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher28 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service17, s3SegmentPusherConfig18, objectMapper25);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig29 = null;
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig33 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider31, deserializerProvider32, serializationConfig33, deserializationConfig34);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode37 = objectMapper35.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service17, s3SegmentPusherConfig29, objectMapper35);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service40 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = restS3Service40.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager42 = null;
        restS3Service40.setHttpConnectionManager(httpConnectionManager42);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager44 = null;
        restS3Service40.setHttpConnectionManager(httpConnectionManager44);
        java.lang.String str46 = restS3Service40.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig47 = null;
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider49 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider50 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig51 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig52 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider49, deserializerProvider50, serializationConfig51, deserializationConfig52);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher54 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service40, s3SegmentPusherConfig47, objectMapper53);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager55 = restS3Service40.getHttpConnectionManager();
        java.lang.String str58 = restS3Service40.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service60 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials59);
        org.jets3t.service.security.ProviderCredentials providerCredentials61 = restS3Service60.getProviderCredentials();
        boolean boolean63 = restS3Service60.isBucketAccessible("");
        java.lang.String str64 = restS3Service60.getRestMetadataPrefix();
        boolean boolean65 = restS3Service60.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager66 = restS3Service60.getHttpConnectionManager();
        restS3Service40.setHttpConnectionManager(httpConnectionManager66);
        restS3Service17.setHttpConnectionManager(httpConnectionManager66);
        restS3Service1.setHttpConnectionManager(httpConnectionManager66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = restS3Service1.createUnsignedObjectUrl("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "{\"\": \"s3.amazonaws.com\"}/hi!", true, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(serializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(deserializerProvider36);
        org.junit.Assert.assertNotNull(arrayNode37);
        org.junit.Assert.assertNull(providerCredentials41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "x-amz-meta-" + "'", str46, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str58, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "x-amz-meta-" + "'", str64, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager66);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray5 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.enable(featureArray5);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker7 = objectMapper6.getVisibilityChecker();
        java.lang.Class<?> wildcardClass8 = objectMapper6.getClass();
        com.metamx.emitter.EmittingLogger emittingLogger9 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass8);
        boolean boolean10 = emittingLogger9.isDebugEnabled();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload26 = restS3Service19.multipartStartUpload("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", strMap25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}\", \"\"]/%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%2F%3Cform%20action%3D%22https%3A%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E?uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.jets3t.service.Jets3tProperties jets3tProperties5 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.model.S3Bucket s3Bucket7 = null;
        org.jets3t.service.model.S3Object s3Object8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", s3Bucket7, s3Object8);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(jets3tProperties5);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service0 = null;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher3 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service0, s3SegmentPusherConfig1, objectMapper2);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = s3SegmentPusher3.config;
        java.io.File file6 = new java.io.File("hi!");
        java.io.File file8 = new java.io.File(file6, "");
        java.lang.String str9 = file8.getName();
        java.net.URL uRL10 = file8.toURL();
        boolean boolean11 = file8.mkdir();
        boolean boolean12 = file8.createNewFile();
        com.metamx.druid.client.DataSegment dataSegment13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment14 = s3SegmentPusher3.push(file8, dataSegment13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(s3SegmentPusherConfig4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray11 = restS3Service1.listObjects("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}/&max-keys=1000': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider2, jets3tProperties11);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        boolean boolean19 = restS3Service16.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = restS3Service16.getProviderCredentials();
        java.lang.String str23 = restS3Service16.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean24 = restS3Service16.isShutdown();
        java.util.Date date25 = restS3Service16.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = restS3Service12.createSignedGetUrl("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", date25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(providerCredentials20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str23, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Nov 04 08:19:31 BRT 2021");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.createNewFile();
        boolean boolean6 = file1.setExecutable(true);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = null;
        restS3Service8.setHttpConnectionManager(httpConnectionManager10);
        java.lang.String str12 = restS3Service8.getEndpoint();
        java.lang.String str13 = restS3Service8.getEndpoint();
        boolean boolean14 = restS3Service8.isAuthenticatedConnection();
        boolean boolean15 = file1.equals((java.lang.Object) restS3Service8);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "s3.amazonaws.com" + "'", str12, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "s3.amazonaws.com" + "'", str13, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher7 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper3);
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper3.reader(formatSchema8);
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
        org.junit.Assert.assertNotNull(objectReader9);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = emittingLogger1.isInfoEnabled();
        java.lang.Throwable throwable3 = null;
        com.metamx.emitter.EmittingLogger emittingLogger6 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger9 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider16 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider17 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig18 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider16, deserializerProvider17, serializationConfig18, deserializationConfig19);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider21 = objectMapper20.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.disableDefaultTyping();
        java.lang.Object obj25 = null;
        java.lang.String str26 = objectMapper22.writeValueAsString(obj25);
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder27.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.emitter.EmittingLogger emittingLogger34 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray36 = new java.lang.Object[] { objectMapper12, deserializerProvider21, objectMapper22, strList30, emittingLogger34, (byte) 1 };
        emittingLogger9.error(throwable10, "{\"\": \"s3.amazonaws.com\"}", objArray36);
        emittingLogger6.debug("http://s3.amazonaws.com//hi%21?torrent", objArray36);
        emittingLogger1.wtf(throwable3, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", objArray36);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(deserializerProvider21);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "null" + "'", str26, "null");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(objArray36);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket(s3Bucket6);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper17.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig24 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider22, deserializerProvider23, serializationConfig24, deserializationConfig25);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = objectMapper26.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig28 = null;
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.SerializerFactory serializerFactory36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.setSerializerFactory(serializerFactory36);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig38 = objectMapper35.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider20, deserializerProvider27, serializationConfig28, deserializationConfig38);
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = objectMapper8.writeValueAsString((java.lang.Object) deserializerProvider27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not pass null serializerFactory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(deserializerProvider27);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(deserializationConfig38);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        restS3Service1.setRequesterPaysEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.StorageObjectsChunk storageObjectsChunk14 = restS3Service1.listObjectsChunked("x-amz-", "[\"content-length-range\", 0, 100]", "[\"content-length-range\", 97, 100]", (long) ':', "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpClient httpClient8 = restS3Service1.getHttpClient();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray13 = restS3Service1.listObjects("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "", "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/&prefix&delimiter=%5B%22starts-with%22%2C%20%22%24%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(httpClient8);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = restS3Service1.getCredentialsProvider();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList8 = restS3Service1.getObjectAclWithSignedUrl("hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.IllegalArgumentException: host parameter is null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(credentialsProvider6);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder10.dimensions((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder7.metrics((java.util.List<java.lang.String>) strList13);
        org.joda.time.Interval interval17 = null;
        com.metamx.druid.client.DataSegment.Builder builder18 = builder7.interval(interval17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder7.version("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "null", credentialsProvider8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service9.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = restS3Service1.renameMetadataKeys(strMap14);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageOwner storageOwner16 = restS3Service1.getAccountOwner();
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: List all buckets to find account owner");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioningWithMFA(":", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketLoggingStatus("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", s3BucketLoggingStatus11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider11, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider5, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties17, hostConfiguration22);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig24 = null;
        org.codehaus.jackson.JsonFactory jsonFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider29, deserializerProvider30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode33 = objectMapper32.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema34 = null;
        org.codehaus.jackson.map.ObjectReader objectReader35 = objectMapper32.schemaBasedReader(formatSchema34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode37 = objectMapper36.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema38 = null;
        org.codehaus.jackson.map.ObjectReader objectReader39 = objectMapper36.schemaBasedReader(formatSchema38);
        byte[] byteArray41 = objectMapper36.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode42 = objectMapper32.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser43 = objectMapper31.treeAsTokens(jsonNode42);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher44 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service23, s3SegmentPusherConfig24, objectMapper31);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray48 = restS3Service23.listVersionedObjects("<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 97, 100]", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"x-amz-\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/&max-keys=1000&versions&prefix=%5B%22content-length-range%22%2C%2097%2C%20100%5D&delimiter=%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectNode33);
        org.junit.Assert.assertNotNull(objectReader35);
        org.junit.Assert.assertNotNull(objectNode37);
        org.junit.Assert.assertNotNull(objectReader39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode42);
        org.junit.Assert.assertNotNull(jsonParser43);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        java.lang.Object obj11 = null;
        java.lang.String str12 = objectMapper8.writeValueAsString(obj11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper8.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver15 = objectMapper14.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper14.setSerializationInclusion(inclusion16);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker18 = objectMapper17.getVisibilityChecker();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig7, objectMapper17);
        java.io.OutputStream outputStream20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray24 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper21.enable(featureArray24);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider26 = null;
        objectMapper25.setFilters(filterProvider26);
        org.codehaus.jackson.JsonFactory jsonFactory28 = objectMapper25.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28);
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider34 = objectMapper31.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider34, deserializerProvider35);
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode38 = objectMapper37.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema39 = null;
        org.codehaus.jackson.map.ObjectReader objectReader40 = objectMapper37.schemaBasedReader(formatSchema39);
        byte[] byteArray42 = objectMapper37.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray43 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper37.disable(featureArray43);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider45 = objectMapper37.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory48 = objectMapper46.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper46.enableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig50 = objectMapper49.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper53.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper53.disableDefaultTyping();
        java.io.File file57 = new java.io.File("hi!");
        java.io.File file59 = new java.io.File(file57, "");
        java.lang.Class<?> wildcardClass60 = file57.getClass();
        org.codehaus.jackson.type.JavaType javaType61 = objectMapper55.constructType((java.lang.reflect.Type) wildcardClass60);
        com.metamx.emitter.EmittingLogger emittingLogger62 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass60);
        org.codehaus.jackson.type.JavaType javaType63 = objectMapper51.constructType((java.lang.reflect.Type) wildcardClass60);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig64 = objectMapper51.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider34, deserializerProvider45, serializationConfig50, deserializationConfig64);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper17.writeValue(outputStream20, (java.lang.Object) deserializerProvider45);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: No serializer found for class org.codehaus.jackson.map.deser.StdDeserializerProvider and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null" + "'", str12, "null");
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(subtypeResolver15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(jsonFactory28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(serializerProvider34);
        org.junit.Assert.assertNotNull(objectNode38);
        org.junit.Assert.assertNotNull(objectReader40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(deserializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(jsonNodeFactory48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializationConfig50);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNull("file57.getParent() == null", file57.getParent());
        org.junit.Assert.assertEquals(file57.toString(), "hi!");
        org.junit.Assert.assertNull("file59.getParent() == null", file59.getParent());
        org.junit.Assert.assertEquals(file59.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(javaType61);
        org.junit.Assert.assertNotNull(javaType63);
        org.junit.Assert.assertNotNull(deserializationConfig64);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        java.util.Calendar calendar22 = null;
        java.util.Calendar calendar23 = null;
        java.lang.String[] strArray25 = new java.lang.String[] {};
        java.lang.String str26 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray25);
        java.lang.String[] strArray32 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str33 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object36 = restS3Service18.getVersionedObject("hi!/http:/s3.amazonaws.com", s3Bucket20, "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", calendar22, calendar23, strArray25, strArray32, (java.lang.Long) 1L, (java.lang.Long) 80259571712L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Versioned Object cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\"\": \"\"}" + "'", str26, "{\"\": \"\"}");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str33, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service1.renameMetadataKeys(strMap10);
        boolean boolean12 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpMethod httpMethod13 = null;
        restS3Service1.authorizeHttpRequest(httpMethod13);
        org.jets3t.service.acl.AccessControlList accessControlList17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket18 = restS3Service1.createBucket("[\"content-length-range\", 1, 0]", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", accessControlList17);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.io.File file2 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        java.io.File file4 = new java.io.File("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        int int5 = file2.compareTo(file4);
        org.junit.Assert.assertEquals(file2.getParent(), "{\"\": \"s3.amazonaws.com\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "{\"\": \"s3.amazonaws.com\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals(file4.getParent(), "<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file4.toString(), "<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 63 + "'", int5 == 63);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties10 = restS3Service1.getJetS3tProperties();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig11 = null;
        org.codehaus.jackson.JsonFactory jsonFactory12 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider13, deserializerProvider14, serializationConfig15, deserializationConfig16);
        org.codehaus.jackson.map.ObjectWriter objectWriter18 = objectMapper17.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper17.setSerializationInclusion(inclusion19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig11, objectMapper20);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object24 = restS3Service1.getObject(":", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jets3tProperties10);
        org.junit.Assert.assertNotNull(objectWriter18);
        org.junit.Assert.assertNotNull(objectMapper20);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        java.io.File file4 = new java.io.File(file1, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        long long5 = file1.getFreeSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file4.toString(), "hi!/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 129486516224L + "'", long5 == 129486516224L);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        boolean boolean7 = restS3Service1.isAuthenticatedConnection();
        org.jets3t.service.acl.AccessControlList accessControlList10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("null", "x-amz-meta-", accessControlList10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The object 'x-amz-meta-' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager18 = null;
        restS3Service16.setHttpConnectionManager(httpConnectionManager18);
        org.jets3t.service.Jets3tProperties jets3tProperties20 = restS3Service16.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "", credentialsProvider14, jets3tProperties20, hostConfiguration21);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider11, jets3tProperties20);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider8, jets3tProperties20);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider5, jets3tProperties20, hostConfiguration25);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties20, hostConfiguration27);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = restS3Service28.checkBucketStatus("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]/?max-keys=0': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertNotNull(jets3tProperties20);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode31 = objectMapper30.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema32 = null;
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper30.schemaBasedReader(formatSchema32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode35 = objectMapper34.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectReader objectReader37 = objectMapper34.schemaBasedReader(formatSchema36);
        byte[] byteArray39 = objectMapper34.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode40 = objectMapper30.valueToTree((java.lang.Object) 10L);
        byte[] byteArray41 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider42 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter43 = objectMapper0.filteredWriter(filterProvider42);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
        org.junit.Assert.assertNotNull(objectNode31);
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectNode35);
        org.junit.Assert.assertNotNull(objectReader37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(objectWriter43);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.JsonGenerator.Feature feature2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = objectMapper0.isEnabled(feature2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        boolean boolean26 = restS3Service23.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service23.getProviderCredentials();
        java.lang.String str30 = restS3Service23.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean31 = restS3Service23.isShutdown();
        java.util.Date date32 = restS3Service23.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = restS3Service1.createSignedHeadUrl("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", date32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str30, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Thu Nov 04 08:19:35 BRT 2021");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = null;
        restS3Service5.setHttpConnectionManager(httpConnectionManager7);
        java.util.List<java.lang.String> strList9 = restS3Service5.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder10 = builder3.dimensions(strList9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service12.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder3.loadSpec(strMap14);
        com.metamx.druid.client.DataSegment.Builder builder16 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder17 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval18 = null;
        com.metamx.druid.client.DataSegment.Builder builder19 = builder17.interval(interval18);
        com.metamx.druid.client.DataSegment.Builder builder20 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder20.dimensions((java.util.List<java.lang.String>) strList23);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder25.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder30.dimensions((java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder29.metrics((java.util.List<java.lang.String>) strList33);
        org.joda.time.Interval interval37 = null;
        com.metamx.druid.client.DataSegment.Builder builder38 = builder29.interval(interval37);
        org.joda.time.Interval interval39 = null;
        com.metamx.druid.client.DataSegment.Builder builder40 = builder29.interval(interval39);
        com.metamx.druid.client.DataSegment.Builder builder41 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.size(0L);
        org.joda.time.Interval interval44 = null;
        com.metamx.druid.client.DataSegment.Builder builder45 = builder43.interval(interval44);
        java.lang.String[] strArray49 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder43.metrics((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder40.metrics((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder17.metrics((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder16.dimensions((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder56 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder56.dimensions((java.util.List<java.lang.String>) strList59);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder61.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec64 = null;
        com.metamx.druid.client.DataSegment.Builder builder65 = builder61.shardSpec(shardSpec64);
        com.metamx.druid.client.DataSegment.Builder builder67 = builder61.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder68 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.metamx.druid.client.DataSegment.Builder builder73 = builder68.dimensions((java.util.List<java.lang.String>) strList71);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder73.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder77 = builder75.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder78 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        com.metamx.druid.client.DataSegment.Builder builder83 = builder78.dimensions((java.util.List<java.lang.String>) strList81);
        com.metamx.druid.client.DataSegment.Builder builder84 = builder77.metrics((java.util.List<java.lang.String>) strList81);
        com.metamx.druid.client.DataSegment.Builder builder85 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray87 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        com.metamx.druid.client.DataSegment.Builder builder90 = builder85.dimensions((java.util.List<java.lang.String>) strList88);
        com.metamx.druid.client.DataSegment.Builder builder91 = builder84.metrics((java.util.List<java.lang.String>) strList88);
        com.metamx.druid.client.DataSegment.Builder builder92 = builder61.metrics((java.util.List<java.lang.String>) strList88);
        com.metamx.druid.shard.ShardSpec shardSpec93 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment95 = new com.metamx.druid.client.DataSegment("x-amz-meta-", interval1, "<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", strMap14, (java.util.List<java.lang.String>) strList50, (java.util.List<java.lang.String>) strList88, shardSpec93, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", credentialsProvider2);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.lang.String str5 = restS3Service4.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper16);
        int int21 = restS3Service4.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager27);
        boolean boolean29 = restS3Service23.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.size(0L);
        org.joda.time.Interval interval33 = null;
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.interval(interval33);
        java.lang.String[] strArray38 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder32.metrics((java.util.List<java.lang.String>) strList39);
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider44 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials42, "null", credentialsProvider44);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service47 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service47.renameMetadataKeys(strMap48);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service45.renameMetadataKeys(strMap48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder32.loadSpec(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = restS3Service23.renameMetadataKeys(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service4.renameMetadataKeys(strMap52);
        com.metamx.druid.client.DataSegment.Builder builder55 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder55.dimensions((java.util.List<java.lang.String>) strList58);
        java.lang.String str61 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder62 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.metamx.druid.client.DataSegment.Builder builder67 = builder62.dimensions((java.util.List<java.lang.String>) strList65);
        com.metamx.druid.client.DataSegment.Builder builder69 = builder67.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder71 = builder69.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder72 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.metamx.druid.client.DataSegment.Builder builder77 = builder72.dimensions((java.util.List<java.lang.String>) strList75);
        com.metamx.druid.client.DataSegment.Builder builder78 = builder69.metrics((java.util.List<java.lang.String>) strList75);
        com.metamx.druid.shard.ShardSpec shardSpec79 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment81 = new com.metamx.druid.client.DataSegment("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", interval1, "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", strMap53, (java.util.List<java.lang.String>) strList58, (java.util.List<java.lang.String>) strList75, shardSpec79, 129486516224L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str61, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        int int13 = restS3Service1.getInternalErrorRetryMax();
        org.jets3t.service.model.S3Bucket s3Bucket14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteObject(s3Bucket14, "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action deleteObject cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager24);
        boolean boolean26 = restS3Service20.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.size(0L);
        org.joda.time.Interval interval30 = null;
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.interval(interval30);
        java.lang.String[] strArray35 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder29.metrics((java.util.List<java.lang.String>) strList36);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39, "null", credentialsProvider41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = restS3Service44.renameMetadataKeys(strMap45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = restS3Service42.renameMetadataKeys(strMap45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder29.loadSpec(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service20.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service18.renameMetadataKeys(strMap47);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object52 = restS3Service18.getObjectDetailsWithSignedUrl("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider22 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider25 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider28 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials29);
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = restS3Service30.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager32 = null;
        restS3Service30.setHttpConnectionManager(httpConnectionManager32);
        org.jets3t.service.Jets3tProperties jets3tProperties34 = restS3Service30.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration35 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service36 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26, "", credentialsProvider28, jets3tProperties34, hostConfiguration35);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service37 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider25, jets3tProperties34);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service38 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider22, jets3tProperties34);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service40 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = restS3Service40.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager42 = null;
        restS3Service40.setHttpConnectionManager(httpConnectionManager42);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager44 = null;
        restS3Service40.setHttpConnectionManager(httpConnectionManager44);
        boolean boolean46 = restS3Service40.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder47 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder49 = builder47.size(0L);
        org.joda.time.Interval interval50 = null;
        com.metamx.druid.client.DataSegment.Builder builder51 = builder49.interval(interval50);
        java.lang.String[] strArray55 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder49.metrics((java.util.List<java.lang.String>) strList56);
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider61 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service62 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials59, "null", credentialsProvider61);
        org.jets3t.service.security.ProviderCredentials providerCredentials63 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service64 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials63);
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap66 = restS3Service64.renameMetadataKeys(strMap65);
        java.util.Map<java.lang.String, java.lang.Object> strMap67 = restS3Service62.renameMetadataKeys(strMap65);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder49.loadSpec(strMap67);
        java.util.Map<java.lang.String, java.lang.Object> strMap69 = restS3Service40.renameMetadataKeys(strMap67);
        java.util.Map<java.lang.String, java.lang.Object> strMap70 = restS3Service38.renameMetadataKeys(strMap67);
        org.jets3t.service.acl.AccessControlList accessControlList71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload73 = restS3Service1.multipartStartUpload("[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", strMap70, accessControlList71, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(providerCredentials31);
        org.junit.Assert.assertNotNull(jets3tProperties34);
        org.junit.Assert.assertNull(providerCredentials41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket6 = restS3Service3.createBucket("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str6 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        int int25 = restS3Service8.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = restS3Service27.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager29 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager29);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager31);
        boolean boolean33 = restS3Service27.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.size(0L);
        org.joda.time.Interval interval37 = null;
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.interval(interval37);
        java.lang.String[] strArray42 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder36.metrics((java.util.List<java.lang.String>) strList43);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider48 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service49 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46, "null", credentialsProvider48);
        org.jets3t.service.security.ProviderCredentials providerCredentials50 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service51 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service51.renameMetadataKeys(strMap52);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service49.renameMetadataKeys(strMap52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder36.loadSpec(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = restS3Service27.renameMetadataKeys(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service8.renameMetadataKeys(strMap56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = restS3Service1.renameMetadataKeys(strMap56);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket61 = restS3Service1.getOrCreateBucket("", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get or Create Bucket with location");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "x-amz-meta-" + "'", str6, "x-amz-meta-");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNull(providerCredentials28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.map.DeserializationConfig.Feature feature13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper12.configure(feature13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList5 = restS3Service3.getBucketAcl(s3Bucket4);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        java.util.Calendar calendar7 = null;
        java.util.Calendar calendar8 = null;
        java.lang.String[] strArray14 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str15 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray14);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        java.lang.String str18 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object21 = restS3Service3.getVersionedObject("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", s3Bucket5, ":", calendar7, calendar8, strArray14, strArray17, (java.lang.Long) 0L, (java.lang.Long) 100L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Versioned Object cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str15, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\"\": \"\"}" + "'", str18, "{\"\": \"\"}");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder10.dimensions((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder9.metrics((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder18 = builder9.size((long) 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory7 = objectMapper5.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper3.reader(jsonNodeFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray12 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper9.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper3.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper0.enable(featureArray12);
        java.io.File file17 = new java.io.File("hi!");
        java.io.File file19 = new java.io.File(file17, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.net.URL uRL20 = file19.toURL();
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode21 = objectMapper15.readTree(uRL20);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form> (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonNodeFactory7);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertEquals(file19.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file19.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials1 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service2 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials1);
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = restS3Service2.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service2.setHttpConnectionManager(httpConnectionManager4);
        java.util.List<java.lang.String> strList6 = restS3Service2.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.dimensions(strList6);
        org.joda.time.Interval interval8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder0.interval(interval8);
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder10.dimensions((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder17 = builder15.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder19 = builder17.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder20 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder20.dimensions((java.util.List<java.lang.String>) strList23);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder19.metrics((java.util.List<java.lang.String>) strList23);
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder27.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder26.metrics((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder9.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.shard.ShardSpec shardSpec35 = null;
        com.metamx.druid.client.DataSegment.Builder builder36 = builder9.shardSpec(shardSpec35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(providerCredentials3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        java.text.DateFormat dateFormat8 = null;
        objectMapper4.setDateFormat(dateFormat8);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        boolean boolean6 = file1.setExecutable(false, true);
        boolean boolean8 = file1.setExecutable(true);
        long long9 = file1.lastModified();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1636024766000L + "'", long9 == 1636024766000L);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.io.File file2 = new java.io.File("s3.amazonaws.com", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent");
        boolean boolean3 = file2.mkdirs();
        org.junit.Assert.assertEquals(file2.getParent(), "s3.amazonaws.com/http:/s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A/s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent");
        org.junit.Assert.assertEquals(file2.toString(), "s3.amazonaws.com/http:/s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A/s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com//?torrent");
        java.lang.StringBuilder stringBuilder2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode8 = objectMapper7.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema9 = null;
        org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper7.schemaBasedReader(formatSchema9);
        byte[] byteArray12 = objectMapper7.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode13 = objectMapper3.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper3.setSerializationInclusion(inclusion14);
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper17.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider20, deserializerProvider21);
        org.codehaus.jackson.JsonFactory jsonFactory23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider27 = objectMapper24.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory23, serializerProvider27, deserializerProvider28);
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode31 = objectMapper30.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema32 = null;
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper30.schemaBasedReader(formatSchema32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode35 = objectMapper34.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectReader objectReader37 = objectMapper34.schemaBasedReader(formatSchema36);
        byte[] byteArray39 = objectMapper34.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode40 = objectMapper30.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser41 = objectMapper29.treeAsTokens(jsonNode40);
        org.codehaus.jackson.JsonNode jsonNode42 = objectMapper22.readTree(jsonParser41);
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        java.io.File file47 = new java.io.File("hi!");
        java.io.File file49 = new java.io.File(file47, "");
        java.lang.Class<?> wildcardClass50 = file47.getClass();
        org.codehaus.jackson.type.JavaType javaType51 = objectMapper45.constructType((java.lang.reflect.Type) wildcardClass50);
        org.codehaus.jackson.map.MappingIterator<java.util.Collection<java.lang.String>> strCollectionItor52 = objectMapper3.readValues(jsonParser41, javaType51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder53 = joiner1.appendTo(stringBuilder2, (java.util.Iterator<java.util.Collection<java.lang.String>>) strCollectionItor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
        org.junit.Assert.assertNotNull(objectNode8);
        org.junit.Assert.assertNotNull(objectReader10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode13);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(serializerProvider27);
        org.junit.Assert.assertNotNull(objectNode31);
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectNode35);
        org.junit.Assert.assertNotNull(objectReader37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode40);
        org.junit.Assert.assertNotNull(jsonParser41);
        org.junit.Assert.assertNotNull(jsonNode42);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNull("file47.getParent() == null", file47.getParent());
        org.junit.Assert.assertEquals(file47.toString(), "hi!");
        org.junit.Assert.assertNull("file49.getParent() == null", file49.getParent());
        org.junit.Assert.assertEquals(file49.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(javaType51);
        org.junit.Assert.assertNotNull(strCollectionItor52);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2, jets3tProperties8);
        boolean boolean10 = restS3Service9.isAuthenticatedConnection();
        org.jets3t.service.model.S3Object s3Object12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service9.putObjectAcl("[\"content-length-range\", 1, 0]", s3Object12);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service1.renameMetadataKeys(strMap10);
        boolean boolean12 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpMethod httpMethod13 = null;
        restS3Service1.authorizeHttpRequest(httpMethod13);
        org.jets3t.service.model.MultipartUpload multipartUpload15 = null;
        org.jets3t.service.model.MultipartPart[] multipartPartArray16 = new org.jets3t.service.model.MultipartPart[] {};
        java.util.ArrayList<org.jets3t.service.model.MultipartPart> multipartPartList17 = new java.util.ArrayList<org.jets3t.service.model.MultipartPart>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.jets3t.service.model.MultipartPart>) multipartPartList17, multipartPartArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartCompleted multipartCompleted19 = restS3Service1.multipartCompleteUpload(multipartUpload15, (java.util.List<org.jets3t.service.model.MultipartPart>) multipartPartList17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(multipartPartArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service1.authorizeHttpRequest(httpMethod4);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider6);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object10 = restS3Service1.getObject("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]\": \"\"}/%7B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D%22%3A%20%22%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        java.lang.String str5 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioning("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "[\"content-length-range\", -226, -226]", credentialsProvider6);
        boolean boolean8 = restS3Service7.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        boolean boolean13 = restS3Service10.isBucketAccessible("");
        java.lang.String str14 = restS3Service10.getRestMetadataPrefix();
        java.lang.String str15 = restS3Service10.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        java.lang.String str18 = restS3Service17.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig19 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.JsonFactory jsonFactory23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider27 = objectMapper24.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory23, serializerProvider27, deserializerProvider28);
        org.codehaus.jackson.map.SerializerFactory serializerFactory30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.setSerializerFactory(serializerFactory30);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service21, s3SegmentPusherConfig22, objectMapper29);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher33 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service17, s3SegmentPusherConfig19, objectMapper29);
        int int34 = restS3Service17.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials35 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service36 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials35);
        org.jets3t.service.security.ProviderCredentials providerCredentials37 = restS3Service36.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager38 = null;
        restS3Service36.setHttpConnectionManager(httpConnectionManager38);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager40 = null;
        restS3Service36.setHttpConnectionManager(httpConnectionManager40);
        boolean boolean42 = restS3Service36.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder43 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder45 = builder43.size(0L);
        org.joda.time.Interval interval46 = null;
        com.metamx.druid.client.DataSegment.Builder builder47 = builder45.interval(interval46);
        java.lang.String[] strArray51 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder45.metrics((java.util.List<java.lang.String>) strList52);
        org.jets3t.service.security.ProviderCredentials providerCredentials55 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider57 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service58 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials55, "null", credentialsProvider57);
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service60 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials59);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = restS3Service60.renameMetadataKeys(strMap61);
        java.util.Map<java.lang.String, java.lang.Object> strMap63 = restS3Service58.renameMetadataKeys(strMap61);
        com.metamx.druid.client.DataSegment.Builder builder64 = builder45.loadSpec(strMap63);
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = restS3Service36.renameMetadataKeys(strMap63);
        java.util.Map<java.lang.String, java.lang.Object> strMap66 = restS3Service17.renameMetadataKeys(strMap65);
        java.util.Map<java.lang.String, java.lang.Object> strMap67 = restS3Service10.renameMetadataKeys(strMap65);
        java.util.Map<java.lang.String, java.lang.Object> strMap68 = restS3Service7.renameMetadataKeys(strMap65);
        org.jets3t.service.security.ProviderCredentials providerCredentials69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = org.jets3t.service.S3Service.createSignedUrl("{\"\": \"s3.amazonaws.com\"}", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", strMap68, providerCredentials69, (long) (short) 10, false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "x-amz-meta-" + "'", str14, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "x-amz-meta-" + "'", str15, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(serializerProvider27);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNull(providerCredentials37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strMap68);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver7 = null;
        objectMapper6.setSubtypeResolver(subtypeResolver7);
        com.metamx.emitter.EmittingLogger emittingLogger10 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean11 = emittingLogger10.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper13.writer(prettyPrinter15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader18 = objectMapper13.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter21 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter22 = objectMapper19.writer(prettyPrinter21);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray24 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper19.enable(featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper13.disable(featureArray24);
        emittingLogger10.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper6.disable(featureArray24);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider29 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper28.writer(filterProvider29);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectReader18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectWriter22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectWriter30);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.io.File file4 = file1.getAbsoluteFile();
        java.lang.String str5 = file4.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str5, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service4.getProviderCredentials();
        java.lang.String str11 = restS3Service4.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean12 = restS3Service4.isShutdown();
        java.util.Date date13 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray19 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str20 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray27);
        java.lang.String str29 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"content-length-range\", 97, 100]", strArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = org.jets3t.service.S3Service.buildPostForm("/", "[\"content-length-range\", 58, 1]", providerCredentials2, date13, strArray19, strArray27, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str11, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 04 08:19:38 BRT 2021");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str20, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str28, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str29, "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.lang.String str1 = org.jets3t.service.S3Service.generatePostPolicyCondition_AllowAnyValue("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]" + "'", str1, "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload10 = restS3Service1.multipartStartUpload("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", strMap9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/http%3A%2F%2Fs3.amazonaws.com%2F%252F%2Fx-amz-meta-%3Ftorrent?uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider4 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        boolean boolean11 = restS3Service8.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service8.getProviderCredentials();
        java.lang.String str15 = restS3Service8.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean16 = restS3Service8.isShutdown();
        java.util.Date date17 = restS3Service8.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service1.createSignedHeadUrl("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"content-length-range\", 97, 100]", date17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNull(credentialsProvider4);
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str15, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:19:39 BRT 2021");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 58, 1]/null", credentialsProvider2, jets3tProperties11, hostConfiguration14);
        org.jets3t.service.model.StorageObject storageObject17 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service15.putObjectAcl("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", storageObject17);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider2, jets3tProperties14);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory22 = objectMapper20.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory27 = objectMapper25.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader28 = objectMapper23.reader(jsonNodeFactory27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray32 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper29.enable(featureArray32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper23.enable(featureArray32);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper20.enable(featureArray32);
        org.codehaus.jackson.map.SerializationConfig serializationConfig36 = objectMapper35.getSerializationConfig();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher37 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service18, s3SegmentPusherConfig19, objectMapper35);
        java.io.File file39 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean40 = file39.canRead();
        boolean boolean42 = file39.setReadable(false);
        java.io.File file43 = null;
        java.io.File file45 = new java.io.File(file43, "x-amz-meta-");
        boolean boolean46 = file39.renameTo(file45);
        java.io.File file48 = new java.io.File(file39, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        com.metamx.druid.client.DataSegment dataSegment49 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment50 = s3SegmentPusher37.push(file48, dataSegment49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(jsonNodeFactory22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(jsonNodeFactory27);
        org.junit.Assert.assertNotNull(objectReader28);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(serializationConfig36);
        org.junit.Assert.assertEquals(file39.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file39.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull("file45.getParent() == null", file45.getParent());
        org.junit.Assert.assertEquals(file45.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals(file48.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file48.toString(), "http:/s3.amazonaws.com/hi%21?torrent/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        boolean boolean8 = file1.createNewFile();
        file1.deleteOnExit();
        boolean boolean10 = file1.canRead();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        java.lang.String str15 = restS3Service13.getInvokingApplicationDescription();
        java.lang.String str18 = restS3Service13.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service13.renameMetadataKeys(strMap22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = restS3Service1.createSignedUrl("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "http://s3.amazonaws.com//?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", strMap23, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str18, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.io.File file1 = new java.io.File("hi!");
        java.net.URI uRI2 = file1.toURI();
        java.io.File file3 = new java.io.File(uRI2);
        java.io.File file4 = new java.io.File(uRI2);
        java.io.File file5 = new java.io.File(uRI2);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNotNull(uRI2);
// flaky:         org.junit.Assert.assertEquals(file3.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider8, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2, jets3tProperties17, hostConfiguration23);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder5 = builder3.size(0L);
        org.joda.time.Interval interval6 = null;
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.interval(interval6);
        java.lang.String[] strArray11 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder5.metrics((java.util.List<java.lang.String>) strList12);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder5.loadSpec(strMap23);
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder31 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder33 = builder31.size(0L);
        org.joda.time.Interval interval34 = null;
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.interval(interval34);
        java.lang.String[] strArray39 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder33.metrics((java.util.List<java.lang.String>) strList40);
        com.metamx.druid.shard.ShardSpec shardSpec43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment45 = new com.metamx.druid.client.DataSegment("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", interval1, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", strMap23, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList40, shardSpec43, 80259571712L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent");
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A/s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A/s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider5, jets3tProperties17);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager27);
        boolean boolean29 = restS3Service23.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.size(0L);
        org.joda.time.Interval interval33 = null;
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.interval(interval33);
        java.lang.String[] strArray38 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder32.metrics((java.util.List<java.lang.String>) strList39);
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider44 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials42, "null", credentialsProvider44);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service47 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service47.renameMetadataKeys(strMap48);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service45.renameMetadataKeys(strMap48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder32.loadSpec(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = restS3Service23.renameMetadataKeys(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service21.renameMetadataKeys(strMap50);
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder56 = builder54.size(0L);
        org.joda.time.Interval interval57 = null;
        com.metamx.druid.client.DataSegment.Builder builder58 = builder56.interval(interval57);
        java.lang.String[] strArray62 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.metamx.druid.client.DataSegment.Builder builder65 = builder56.metrics((java.util.List<java.lang.String>) strList63);
        java.lang.String[] strArray69 = new java.lang.String[] { "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "[\"content-length-range\", 1, 0]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.metamx.druid.shard.ShardSpec shardSpec72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment74 = new com.metamx.druid.client.DataSegment("hi!/http:/s3.amazonaws.com", interval1, "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", strMap50, (java.util.List<java.lang.String>) strList63, (java.util.List<java.lang.String>) strList70, shardSpec72, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        java.lang.Object obj11 = null;
        java.lang.String str12 = objectMapper8.writeValueAsString(obj11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper8.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver15 = objectMapper14.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper14.setSerializationInclusion(inclusion16);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker18 = objectMapper17.getVisibilityChecker();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig7, objectMapper17);
        java.io.File file20 = null;
        java.io.File file22 = new java.io.File(file20, "x-amz-meta-");
        long long23 = file22.getUsableSpace();
        java.io.File file24 = file22.getCanonicalFile();
        long long25 = file22.lastModified();
        com.metamx.druid.client.DataSegment dataSegment26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment27 = s3SegmentPusher19.push(file22, dataSegment26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null" + "'", str12, "null");
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(subtypeResolver15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker18);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 80259510272L + "'", long23 == 80259510272L);
        org.junit.Assert.assertNotNull(file24);
// flaky:         org.junit.Assert.assertEquals(file24.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file24.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.setReadOnly();
        java.lang.String str5 = file1.getPath();
        boolean boolean7 = file1.setReadable(true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver3 = objectMapper2.getSubtypeResolver();
        java.io.InputStream inputStream4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray8 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper5.enable(featureArray8);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider10 = null;
        objectMapper9.setFilters(filterProvider10);
        org.codehaus.jackson.JsonFactory jsonFactory12 = objectMapper9.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider20 = objectMapper17.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig24 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider22, deserializerProvider23, serializationConfig24, deserializationConfig25);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = objectMapper26.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig28 = null;
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.SerializerFactory serializerFactory36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.setSerializerFactory(serializerFactory36);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig38 = objectMapper35.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider20, deserializerProvider27, serializationConfig28, deserializationConfig38);
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider44 = objectMapper41.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory45 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider47 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig48 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig49 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory45, serializerProvider46, deserializerProvider47, serializationConfig48, deserializationConfig49);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = objectMapper50.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig52 = null;
        org.codehaus.jackson.JsonFactory jsonFactory53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper54.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider57 = objectMapper54.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider58 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory53, serializerProvider57, deserializerProvider58);
        org.codehaus.jackson.map.SerializerFactory serializerFactory60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.setSerializerFactory(serializerFactory60);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig62 = objectMapper59.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider44, deserializerProvider51, serializationConfig52, deserializationConfig62);
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider20, deserializerProvider51);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider65 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider20, deserializerProvider65);
        org.codehaus.jackson.map.SerializerProvider serializerProvider67 = objectMapper66.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = objectMapper68.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = objectMapper68.disableDefaultTyping();
        java.lang.Object obj71 = null;
        java.lang.String str72 = objectMapper68.writeValueAsString(obj71);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider73 = objectMapper68.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider67, deserializerProvider73);
        org.codehaus.jackson.JsonFactory jsonFactory75 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = objectMapper76.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = objectMapper76.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider79 = objectMapper76.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider80 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory75, serializerProvider79, deserializerProvider80);
        org.codehaus.jackson.map.SerializerFactory serializerFactory82 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = objectMapper81.setSerializerFactory(serializerFactory82);
        org.codehaus.jackson.PrettyPrinter prettyPrinter84 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter85 = objectMapper83.prettyPrintingWriter(prettyPrinter84);
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = objectMapper86.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper88 = objectMapper86.disableDefaultTyping();
        java.io.File file90 = new java.io.File("hi!");
        java.io.File file92 = new java.io.File(file90, "");
        java.lang.Class<?> wildcardClass93 = file90.getClass();
        org.codehaus.jackson.type.JavaType javaType94 = objectMapper88.constructType((java.lang.reflect.Type) wildcardClass93);
        boolean boolean95 = objectMapper83.canDeserialize(javaType94);
        org.codehaus.jackson.map.ObjectReader objectReader96 = objectMapper74.reader(javaType94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass97 = objectMapper2.readValue(inputStream4, javaType94);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(subtypeResolver3);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(featureArray8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(serializerProvider20);
        org.junit.Assert.assertNotNull(deserializerProvider27);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(deserializationConfig38);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(serializerProvider44);
        org.junit.Assert.assertNotNull(deserializerProvider51);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(serializerProvider57);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(deserializationConfig62);
        org.junit.Assert.assertNotNull(serializerProvider67);
        org.junit.Assert.assertNotNull(objectMapper69);
        org.junit.Assert.assertNotNull(objectMapper70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "null" + "'", str72, "null");
        org.junit.Assert.assertNotNull(deserializerProvider73);
        org.junit.Assert.assertNotNull(objectMapper77);
        org.junit.Assert.assertNotNull(objectMapper78);
        org.junit.Assert.assertNotNull(serializerProvider79);
        org.junit.Assert.assertNotNull(objectMapper83);
        org.junit.Assert.assertNotNull(objectWriter85);
        org.junit.Assert.assertNotNull(objectMapper87);
        org.junit.Assert.assertNotNull(objectMapper88);
        org.junit.Assert.assertNull("file90.getParent() == null", file90.getParent());
        org.junit.Assert.assertEquals(file90.toString(), "hi!");
        org.junit.Assert.assertNull("file92.getParent() == null", file92.getParent());
        org.junit.Assert.assertEquals(file92.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(javaType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(objectReader96);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        boolean boolean4 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpMethod httpMethod5 = null;
        restS3Service1.authorizeHttpRequest(httpMethod5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = restS3Service1.isObjectInBucket("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/hi%21': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObjectWithMFA("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "hi!/http:/s3.amazonaws.com", "{\"\": \"s3.amazonaws.com\"}/hi!", "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/hi!/%7B%22%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?versionId=http%3A%2F%2Fs3.amazonaws.com.s3.amazonaws.com%2F%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.joda.time.DateTime dateTime1 = null;
        org.joda.time.DateTime dateTime2 = null;
        com.metamx.druid.shard.ShardSpec shardSpec4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = com.metamx.druid.client.DataSegment.makeDataSegmentIdentifier("/", dateTime1, dateTime2, "[\"content-length-range\", 58, 1]", shardSpec4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getProviderCredentials();
        boolean boolean21 = restS3Service18.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = restS3Service18.getProviderCredentials();
        java.lang.String str25 = restS3Service18.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean26 = restS3Service18.isShutdown();
        java.util.Date date27 = restS3Service18.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = restS3Service3.createSignedDeleteUrl("http://s3.amazonaws.com//?torrent", "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]", providerCredentials16, date27, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(providerCredentials22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str25, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Thu Nov 04 08:19:41 BRT 2021");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, ":");
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), ":");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider11, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider5, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties17, hostConfiguration22);
        org.jets3t.service.acl.AccessControlList accessControlList26 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service23.putObjectAcl("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "[\"content-length-range\", -226, -226]", accessControlList26);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The object '[\"content-length-range\", -226, -226]' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.io.File file1 = new java.io.File("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
        long long2 = file1.getTotalSpace();
        org.junit.Assert.assertEquals(file1.getParent(), "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file1.toString(), "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        java.io.File file4 = file1.getAbsoluteFile();
        java.net.URL uRL5 = file1.toURL();
        boolean boolean6 = file1.isDirectory();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str6 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        int int25 = restS3Service8.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = restS3Service27.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager29 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager29);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager31);
        boolean boolean33 = restS3Service27.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.size(0L);
        org.joda.time.Interval interval37 = null;
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.interval(interval37);
        java.lang.String[] strArray42 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder36.metrics((java.util.List<java.lang.String>) strList43);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider48 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service49 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46, "null", credentialsProvider48);
        org.jets3t.service.security.ProviderCredentials providerCredentials50 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service51 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service51.renameMetadataKeys(strMap52);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service49.renameMetadataKeys(strMap52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder36.loadSpec(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = restS3Service27.renameMetadataKeys(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service8.renameMetadataKeys(strMap56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = restS3Service1.renameMetadataKeys(strMap56);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray61 = restS3Service1.getObjectVersions(":", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "x-amz-meta-" + "'", str6, "x-amz-meta-");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNull(providerCredentials28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("hi!/http:/s3.amazonaws.com", "http://s3.amazonaws.com//hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/s3.amazonaws.com4568489253318603094http:/s3.amazonaws.com/hi%21?torrent");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        java.io.File file4 = file1.getAbsoluteFile();
        boolean boolean6 = file1.setLastModified((long) 'a');
        java.io.File file8 = new java.io.File("hi!");
        java.io.File file10 = new java.io.File(file8, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = file1.equals((java.lang.Object) uRL11);
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file10.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }
}
