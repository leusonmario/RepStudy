import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        java.lang.String str7 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.model.S3Object s3Object9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object10 = restS3Service1.putObjectWithSignedUrl("hi!", s3Object9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = restS3Service3.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList9 = restS3Service3.multipartListUploads("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", (java.lang.Integer) (-226));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]/&max-uploads=-226&upload-id-marker=%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2F%5B%22content-length-range%22%2C%2058%2C%201%5D%2Fnull&key-marker=http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials4);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider11, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider5, jets3tProperties17);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", credentialsProvider2, jets3tProperties17);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isShutdown();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketPolicy("http://s3.amazonaws.com//hi%21?torrent", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper5.writer(prettyPrinter12);
        org.codehaus.jackson.JsonParser.Feature feature14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper5.configure(feature14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectWriter11);
        org.junit.Assert.assertNotNull(objectWriter13);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = restS3Service1.getBucketLocation("[\"content-length-range\", 58, 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/?location': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper6.writer(prettyPrinter8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray11 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper6.enable(featureArray11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.disable(featureArray11);
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setAnnotationIntrospector(annotationIntrospector21);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig23 = objectMapper20.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory28 = objectMapper26.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader29 = objectMapper24.reader(jsonNodeFactory28);
        org.codehaus.jackson.map.ObjectReader objectReader30 = objectMapper20.reader(jsonNodeFactory28);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode32 = objectMapper31.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema33 = null;
        org.codehaus.jackson.map.ObjectReader objectReader34 = objectMapper31.schemaBasedReader(formatSchema33);
        byte[] byteArray36 = objectMapper31.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema37 = null;
        org.codehaus.jackson.map.ObjectReader objectReader38 = objectMapper31.reader(formatSchema37);
        java.text.DateFormat dateFormat39 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter40 = objectMapper31.writer(dateFormat39);
        com.metamx.emitter.EmittingLogger emittingLogger42 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean43 = emittingLogger42.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter47 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter48 = objectMapper45.writer(prettyPrinter47);
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper45.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader50 = objectMapper45.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter53 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter54 = objectMapper51.writer(prettyPrinter53);
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper51.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray56 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper51.enable(featureArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper45.disable(featureArray56);
        emittingLogger42.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper31.enable(featureArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper20.enable(featureArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper0.enable(featureArray56);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(deserializationConfig23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(jsonNodeFactory28);
        org.junit.Assert.assertNotNull(objectReader29);
        org.junit.Assert.assertNotNull(objectReader30);
        org.junit.Assert.assertNotNull(objectNode32);
        org.junit.Assert.assertNotNull(objectReader34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader38);
        org.junit.Assert.assertNotNull(objectWriter40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(objectWriter48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(objectReader50);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectWriter54);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket15 = null;
        java.util.Calendar calendar17 = null;
        java.util.Calendar calendar18 = null;
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.String[] strArray27 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray27);
        java.lang.String str29 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"content-length-range\", 97, 100]", strArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object32 = restS3Service1.getVersionedObject("http://s3.amazonaws.com//?torrent", s3Bucket15, "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", calendar17, calendar18, strArray20, strArray27, (java.lang.Long) 129486516224L, (java.lang.Long) 1636024658000L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Versioned Object cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str28, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str29, "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = restS3Service1.createSignedUrl(":", "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]", strMap20, (-1L), true, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2);
        org.codehaus.jackson.map.ObjectWriter objectWriter4 = objectMapper3.writer();
        org.codehaus.jackson.JsonFactory jsonFactory5 = objectMapper3.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5);
        org.junit.Assert.assertNotNull(objectWriter4);
        org.junit.Assert.assertNotNull(jsonFactory5);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isRequesterPaysEnabled();
        java.lang.String str5 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageOwner storageOwner6 = restS3Service1.getAccountOwner();
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: List all buckets to find account owner");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        java.lang.String str7 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.model.S3Bucket s3Bucket8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object10 = restS3Service1.getObject(s3Bucket8, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action getObject cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        int int10 = restS3Service1.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager18 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager18);
        boolean boolean20 = restS3Service14.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder21 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.size(0L);
        org.joda.time.Interval interval24 = null;
        com.metamx.druid.client.DataSegment.Builder builder25 = builder23.interval(interval24);
        java.lang.String[] strArray29 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder23.metrics((java.util.List<java.lang.String>) strList30);
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider35 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service36 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials33, "null", credentialsProvider35);
        org.jets3t.service.security.ProviderCredentials providerCredentials37 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service38 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials37);
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = restS3Service38.renameMetadataKeys(strMap39);
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = restS3Service36.renameMetadataKeys(strMap39);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder23.loadSpec(strMap41);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = restS3Service14.renameMetadataKeys(strMap41);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload44 = restS3Service1.multipartStartUpload("[\"content-length-range\", 58, 1]/null", "", strMap41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/null/?uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper19.setSerializationInclusion(inclusion23);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNotNull(objectMapper24);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str18 = restS3Service1.getDevPayProductToken();
        org.jets3t.service.model.S3Bucket s3Bucket19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList20 = restS3Service1.getBucketAcl(s3Bucket19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setRequesterPaysBucket("[\"content-length-range\", 1, 0]", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/?requestPayment': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        restS3Service3.setRequesterPaysEnabled(false);
        org.jets3t.service.model.S3Bucket s3Bucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray10 = restS3Service3.listObjects(s3Bucket6, "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", (long) 100);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        int int8 = restS3Service1.checkBucketStatus("x-amz-meta-");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper10.writer(prettyPrinter12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper10.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray15 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper10.enable(featureArray15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17);
        java.lang.String str19 = restS3Service18.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig20 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig23 = null;
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.SerializerFactory serializerFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.setSerializerFactory(serializerFactory31);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher33 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service22, s3SegmentPusherConfig23, objectMapper30);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher34 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service18, s3SegmentPusherConfig20, objectMapper30);
        org.codehaus.jackson.map.ObjectReader objectReader35 = objectMapper10.updatingReader((java.lang.Object) objectMapper30);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher36 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig9, objectMapper10);
        org.jets3t.service.model.StorageObject storageObject39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap40 = restS3Service1.renameObject("[\"content-length-range\", 100, 4]", "<form action=\"https://{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", storageObject39);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectReader35);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object23 = restS3Service19.getVersionedObject("", "[\"content-length-range\", 1, 0]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%2F%3Cform%20action%3D%22https%3A%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E?versionId': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        java.io.File file6 = new java.io.File(uRI4);
        java.io.File file8 = new java.io.File(file6, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean9 = file8.canExecute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRI4);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "null", credentialsProvider2);
        java.lang.String str4 = restS3Service3.getRestHeaderPrefix();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service3.getCredentialsProvider();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-" + "'", str4, "x-amz-");
        org.junit.Assert.assertNull(credentialsProvider5);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.WebsiteConfig websiteConfig21 = restS3Service19.getWebsiteConfig("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = null;
        restS3Service8.setHttpConnectionManager(httpConnectionManager10);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service8.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str16 = restS3Service8.createTorrentUrl("", "hi!");
        boolean boolean18 = restS3Service8.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date19 = restS3Service8.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = restS3Service3.createSignedGetUrl("http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", providerCredentials6, date19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str16, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 04 08:19:44 BRT 2021");
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder5 = builder3.size(0L);
        org.joda.time.Interval interval6 = null;
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.interval(interval6);
        java.lang.String[] strArray11 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder5.metrics((java.util.List<java.lang.String>) strList12);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder5.loadSpec(strMap23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service26.getProviderCredentials();
        java.lang.String str28 = restS3Service26.getInvokingApplicationDescription();
        java.util.List<java.lang.String> strList29 = restS3Service26.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval31 = null;
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.interval(interval31);
        com.metamx.druid.client.DataSegment.Builder builder33 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder33.dimensions((java.util.List<java.lang.String>) strList36);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder38.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec41 = null;
        com.metamx.druid.client.DataSegment.Builder builder42 = builder38.shardSpec(shardSpec41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder38.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder45 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder45.dimensions((java.util.List<java.lang.String>) strList48);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder50.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder54 = builder52.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder55 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder55.dimensions((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder54.metrics((java.util.List<java.lang.String>) strList58);
        com.metamx.druid.client.DataSegment.Builder builder62 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.metamx.druid.client.DataSegment.Builder builder67 = builder62.dimensions((java.util.List<java.lang.String>) strList65);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder61.metrics((java.util.List<java.lang.String>) strList65);
        com.metamx.druid.client.DataSegment.Builder builder69 = builder38.metrics((java.util.List<java.lang.String>) strList65);
        com.metamx.druid.client.DataSegment.Builder builder70 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder70.dimensions((java.util.List<java.lang.String>) strList73);
        com.metamx.druid.client.DataSegment.Builder builder77 = builder75.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder79 = builder77.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder80 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        com.metamx.druid.client.DataSegment.Builder builder85 = builder80.dimensions((java.util.List<java.lang.String>) strList83);
        com.metamx.druid.client.DataSegment.Builder builder86 = builder79.metrics((java.util.List<java.lang.String>) strList83);
        com.metamx.druid.client.DataSegment.Builder builder87 = builder38.dimensions((java.util.List<java.lang.String>) strList83);
        com.metamx.druid.client.DataSegment.Builder builder88 = builder30.metrics((java.util.List<java.lang.String>) strList83);
        com.metamx.druid.shard.ShardSpec shardSpec89 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment91 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 1, 0]", interval1, "[\"content-length-range\", 100, 4]", strMap23, strList29, (java.util.List<java.lang.String>) strList83, shardSpec89, (long) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        java.lang.String str6 = restS3Service4.getInvokingApplicationDescription();
        java.lang.String str9 = restS3Service4.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service4.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder15.dimensions((java.util.List<java.lang.String>) strList18);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder20.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec23 = null;
        com.metamx.druid.client.DataSegment.Builder builder24 = builder20.shardSpec(shardSpec23);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder20.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder27.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder37 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder37.dimensions((java.util.List<java.lang.String>) strList40);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder36.metrics((java.util.List<java.lang.String>) strList40);
        com.metamx.druid.client.DataSegment.Builder builder44 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.metamx.druid.client.DataSegment.Builder builder49 = builder44.dimensions((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder43.metrics((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder20.metrics((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder52 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder52.dimensions((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.shard.ShardSpec shardSpec58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment60 = new com.metamx.druid.client.DataSegment("[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", interval1, "[\"content-length-range\", 97, 100]", strMap13, (java.util.List<java.lang.String>) strList47, (java.util.List<java.lang.String>) strList55, shardSpec58, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str6 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        int int25 = restS3Service8.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = restS3Service27.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager29 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager29);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager31);
        boolean boolean33 = restS3Service27.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.size(0L);
        org.joda.time.Interval interval37 = null;
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.interval(interval37);
        java.lang.String[] strArray42 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder36.metrics((java.util.List<java.lang.String>) strList43);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider48 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service49 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46, "null", credentialsProvider48);
        org.jets3t.service.security.ProviderCredentials providerCredentials50 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service51 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service51.renameMetadataKeys(strMap52);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service49.renameMetadataKeys(strMap52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder36.loadSpec(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = restS3Service27.renameMetadataKeys(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service8.renameMetadataKeys(strMap56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = restS3Service1.renameMetadataKeys(strMap56);
        org.jets3t.service.model.S3Bucket s3Bucket59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray60 = restS3Service1.listObjects(s3Bucket59);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "x-amz-meta-" + "'", str6, "x-amz-meta-");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNull(providerCredentials28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider4 = restS3Service1.getCredentialsProvider();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = restS3Service1.isObjectInBucket("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]/%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNull(credentialsProvider4);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver7 = null;
        objectMapper6.setSubtypeResolver(subtypeResolver7);
        com.metamx.emitter.EmittingLogger emittingLogger10 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean11 = emittingLogger10.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper13.writer(prettyPrinter15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader18 = objectMapper13.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter21 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter22 = objectMapper19.writer(prettyPrinter21);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray24 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper19.enable(featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper13.disable(featureArray24);
        emittingLogger10.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper6.disable(featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper31.disableDefaultTyping();
        java.io.File file35 = new java.io.File("hi!");
        java.io.File file37 = new java.io.File(file35, "");
        java.lang.Class<?> wildcardClass38 = file35.getClass();
        org.codehaus.jackson.type.JavaType javaType39 = objectMapper33.constructType((java.lang.reflect.Type) wildcardClass38);
        com.metamx.emitter.EmittingLogger emittingLogger40 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass38);
        org.codehaus.jackson.type.JavaType javaType41 = objectMapper29.constructType((java.lang.reflect.Type) wildcardClass38);
        com.metamx.emitter.EmittingLogger emittingLogger42 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass38);
        java.lang.Throwable throwable43 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory47 = objectMapper45.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper48.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper50.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory52 = objectMapper50.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader53 = objectMapper48.reader(jsonNodeFactory52);
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper54.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray57 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper54.enable(featureArray57);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = objectMapper48.enable(featureArray57);
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper45.enable(featureArray57);
        emittingLogger42.error(throwable43, "{\"\": \"s3.amazonaws.com\"}", (java.lang.Object[]) featureArray57);
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper6.enable(featureArray57);
        org.codehaus.jackson.Version version63 = objectMapper62.version();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectReader18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectWriter22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "hi!");
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(javaType39);
        org.junit.Assert.assertNotNull(javaType41);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(jsonNodeFactory47);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(jsonNodeFactory52);
        org.junit.Assert.assertNotNull(objectReader53);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(objectMapper59);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(version63);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList6 = restS3Service1.getBucketAcl(s3Bucket5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver2 = null;
        objectMapper1.setSubtypeResolver(subtypeResolver2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray7 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper4.enable(featureArray7);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider9 = null;
        objectMapper8.setFilters(filterProvider9);
        org.codehaus.jackson.JsonFactory jsonFactory11 = objectMapper8.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11);
        org.codehaus.jackson.JsonFactory jsonFactory13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory20 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider21 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig23 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory20, serializerProvider21, deserializerProvider22, serializationConfig23, deserializationConfig24);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider26 = objectMapper25.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig27 = null;
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.SerializerFactory serializerFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.setSerializerFactory(serializerFactory35);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = objectMapper34.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider19, deserializerProvider26, serializationConfig27, deserializationConfig37);
        org.codehaus.jackson.JsonFactory jsonFactory39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider43 = objectMapper40.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory44 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig47 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory44, serializerProvider45, deserializerProvider46, serializationConfig47, deserializationConfig48);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider50 = objectMapper49.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig51 = null;
        org.codehaus.jackson.JsonFactory jsonFactory52 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper53.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper53.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider56 = objectMapper53.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider57 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory52, serializerProvider56, deserializerProvider57);
        org.codehaus.jackson.map.SerializerFactory serializerFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper58.setSerializerFactory(serializerFactory59);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig61 = objectMapper58.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory39, serializerProvider43, deserializerProvider50, serializationConfig51, deserializationConfig61);
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider19, deserializerProvider50);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory13, serializerProvider19, deserializerProvider64);
        org.codehaus.jackson.map.SerializerProvider serializerProvider66 = objectMapper65.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = objectMapper67.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = objectMapper67.disableDefaultTyping();
        java.lang.Object obj70 = null;
        java.lang.String str71 = objectMapper67.writeValueAsString(obj70);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider72 = objectMapper67.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider66, deserializerProvider72);
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper1.setDeserializerProvider(deserializerProvider72);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializerProvider19);
        org.junit.Assert.assertNotNull(deserializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializationConfig37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(serializerProvider43);
        org.junit.Assert.assertNotNull(deserializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNotNull(serializerProvider56);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(deserializationConfig61);
        org.junit.Assert.assertNotNull(serializerProvider66);
        org.junit.Assert.assertNotNull(objectMapper68);
        org.junit.Assert.assertNotNull(objectMapper69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "null" + "'", str71, "null");
        org.junit.Assert.assertNotNull(deserializerProvider72);
        org.junit.Assert.assertNotNull(objectMapper74);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        java.lang.String str8 = restS3Service1.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isHttpsOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList12 = restS3Service1.multipartListUploads("[\"content-length-range\", 1, 0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/?max-uploads=1000&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str8, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider2, jets3tProperties14);
        boolean boolean19 = restS3Service18.isHttpsOnly();
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service1.renameMetadataKeys(strMap10);
        boolean boolean12 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider13 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "[\"content-length-range\", -226, -226]", credentialsProvider20);
        boolean boolean22 = restS3Service21.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        boolean boolean27 = restS3Service24.isBucketAccessible("");
        java.lang.String str28 = restS3Service24.getRestMetadataPrefix();
        java.lang.String str29 = restS3Service24.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials30);
        java.lang.String str32 = restS3Service31.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig33 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig36 = null;
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper38.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper38.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = objectMapper38.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider41, deserializerProvider42);
        org.codehaus.jackson.map.SerializerFactory serializerFactory44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.setSerializerFactory(serializerFactory44);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher46 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service35, s3SegmentPusherConfig36, objectMapper43);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher47 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service31, s3SegmentPusherConfig33, objectMapper43);
        int int48 = restS3Service31.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = restS3Service50.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager52 = null;
        restS3Service50.setHttpConnectionManager(httpConnectionManager52);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager54 = null;
        restS3Service50.setHttpConnectionManager(httpConnectionManager54);
        boolean boolean56 = restS3Service50.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder57 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder59 = builder57.size(0L);
        org.joda.time.Interval interval60 = null;
        com.metamx.druid.client.DataSegment.Builder builder61 = builder59.interval(interval60);
        java.lang.String[] strArray65 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder59.metrics((java.util.List<java.lang.String>) strList66);
        org.jets3t.service.security.ProviderCredentials providerCredentials69 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider71 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service72 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials69, "null", credentialsProvider71);
        org.jets3t.service.security.ProviderCredentials providerCredentials73 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service74 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials73);
        java.util.Map<java.lang.String, java.lang.Object> strMap75 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap76 = restS3Service74.renameMetadataKeys(strMap75);
        java.util.Map<java.lang.String, java.lang.Object> strMap77 = restS3Service72.renameMetadataKeys(strMap75);
        com.metamx.druid.client.DataSegment.Builder builder78 = builder59.loadSpec(strMap77);
        java.util.Map<java.lang.String, java.lang.Object> strMap79 = restS3Service50.renameMetadataKeys(strMap77);
        java.util.Map<java.lang.String, java.lang.Object> strMap80 = restS3Service31.renameMetadataKeys(strMap79);
        java.util.Map<java.lang.String, java.lang.Object> strMap81 = restS3Service24.renameMetadataKeys(strMap79);
        java.util.Map<java.lang.String, java.lang.Object> strMap82 = restS3Service21.renameMetadataKeys(strMap79);
        org.jets3t.service.security.ProviderCredentials providerCredentials83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = restS3Service1.createSignedUrl("[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", "", "[\"content-length-range\", -226, -226]", "{\"\": \"s3.amazonaws.com\"}/hi!", strMap82, providerCredentials83, (long) 11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(credentialsProvider13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "x-amz-meta-" + "'", str28, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "x-amz-meta-" + "'", str29, "x-amz-meta-");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(serializerProvider41);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNull(providerCredentials51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        restS3Service1.shutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object19 = restS3Service1.getVersionedObject("[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"content-length-range\", 58, 1]/null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}/%5B%22content-length-range%22%2C%2058%2C%201%5D%2Fnull&versionId=%5B%22starts-with%22%2C%20%22%24s3.amazonaws.com%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider7);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object10 = restS3Service1.getObjectWithSignedUrl("{\"\": \"s3.amazonaws.com\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\"\": \"s3.amazonaws.com\"}': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.deleteVersionedObjectWithMFA("{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", "[\"content-length-range\", 97, 100]", "", "http://s3.amazonaws.com//?torrent", "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action deleteVersionedObjectWithMFA cannot be performed with an invalid object key name: ");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializationConfig(serializationConfig15);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        java.io.File file19 = new java.io.File("hi!");
        java.io.File file21 = new java.io.File(file19, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        long long22 = file21.getFreeSpace();
        java.io.File file23 = file21.getCanonicalFile();
        long long24 = file23.getFreeSpace();
        com.metamx.druid.client.DataSegment dataSegment25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment26 = s3SegmentPusher17.push(file23, dataSegment25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "hi!");
        org.junit.Assert.assertEquals(file21.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file21.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(file23);
// flaky:         org.junit.Assert.assertEquals(file23.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.io.File file2 = null;
        java.io.File file4 = new java.io.File(file2, "x-amz-meta-");
        boolean boolean5 = file4.setReadOnly();
        java.io.File file6 = file4.getAbsoluteFile();
        boolean boolean9 = file6.setExecutable(true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("hi!/http:/s3.amazonaws.com", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", file6);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/s3.amazonaws.com8738091710263474708http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service26.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service26.getEndpoint();
        java.lang.String str33 = restS3Service26.createTorrentUrl("", "");
        java.lang.String str34 = restS3Service26.getRestMetadataPrefix();
        java.util.Date date35 = restS3Service26.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = restS3Service21.createSignedDeleteUrl("{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\": \"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,http://s3.amazonaws.com//?torrent\"}", "[\"content-length-range\", 10, 47]", date35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "s3.amazonaws.com" + "'", str30, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str33, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "x-amz-meta-" + "'", str34, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 04 08:19:46 BRT 2021");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"\": \"s3.amazonaws.com\"}");
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger1;
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        java.io.File file4 = file2.getAbsoluteFile();
        java.net.URI uRI5 = file4.toURI();
        java.io.File file7 = new java.io.File(file4, "x-amz-meta-");
        boolean boolean9 = file7.setLastModified((long) 11);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNotNull(uRI5);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.lang.String str4 = file3.getName();
        java.net.URL uRL5 = file3.toURL();
        boolean boolean8 = file3.setExecutable(false, true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        org.jets3t.service.model.S3Bucket s3Bucket13 = null;
        org.jets3t.service.model.S3Object s3Object14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("<form action=\"https://{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", s3Bucket13, s3Object14);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
        java.lang.Object obj3 = null;
        byte[] byteArray4 = objectMapper2.writeValueAsBytes(obj3);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper2.setSerializationInclusion(inclusion5);
        org.codehaus.jackson.JsonGenerator jsonGenerator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectMapper6.writeValue(jsonGenerator7, (java.lang.Object) 80259575808L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(objectMapper6);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, ":", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.enableBucketVersioning("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.joda.time.DateTime dateTime1 = null;
        org.joda.time.DateTime dateTime2 = null;
        com.metamx.druid.shard.ShardSpec shardSpec4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = com.metamx.druid.client.DataSegment.makeDataSegmentIdentifier("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", dateTime1, dateTime2, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", shardSpec4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper13.writer(prettyPrinter15);
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = objectMapper13.getSerializerProvider();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher18 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig12, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = null;
        s3SegmentPusher18.s3Client = restS3Service19;
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(serializerProvider17);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        java.lang.Object obj38 = null;
        java.lang.String str39 = objectMapper35.writeValueAsString(obj38);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper35.setSerializerProvider(serializerProvider45);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig49 = objectMapper35.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper33.setDeserializationConfig(deserializationConfig49);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher51 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig32, objectMapper50);
        restS3Service1.setRequesterPaysEnabled(true);
        org.jets3t.service.Jets3tProperties jets3tProperties54 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.security.ProviderCredentials providerCredentials57 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service58 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials57);
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = restS3Service58.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager60 = null;
        restS3Service58.setHttpConnectionManager(httpConnectionManager60);
        java.util.Date date62 = restS3Service58.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = restS3Service1.createSignedHeadUrl("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", date62, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null" + "'", str39, "null");
        org.junit.Assert.assertNotNull(deserializerProvider40);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(deserializationConfig49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(jets3tProperties54);
        org.junit.Assert.assertNull(providerCredentials59);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Thu Nov 04 08:19:48 BRT 2021");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.type.JavaType javaType2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper1.typedWriter(javaType2);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter12 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper5.writer(prettyPrinter12);
        org.codehaus.jackson.map.ObjectReader objectReader14 = objectMapper5.reader();
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectWriter11);
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectReader14);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.enableDefaultTyping(defaultTyping6);
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, ":", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2, jets3tProperties17, hostConfiguration23);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27);
        org.jets3t.service.security.ProviderCredentials providerCredentials29 = restS3Service28.getProviderCredentials();
        java.lang.String str30 = restS3Service28.getInvokingApplicationDescription();
        java.lang.String str33 = restS3Service28.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = restS3Service35.renameMetadataKeys(strMap36);
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = restS3Service28.renameMetadataKeys(strMap37);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        java.util.Date date40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = restS3Service24.createSignedPutUrl("[\"content-length-range\", 100, 4]", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", strMap37, providerCredentials39, date40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
        org.junit.Assert.assertNull(providerCredentials29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str33, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.deleteObject("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider5, jets3tProperties11);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties11, hostConfiguration13);
        org.jets3t.service.model.S3Bucket s3Bucket15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray18 = restS3Service14.listObjects(s3Bucket15, "/", "{\"\": \"s3.amazonaws.com\"}/hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService28 = objectMapper0.readValue("null", javaType26);
        org.codehaus.jackson.node.ArrayNode arrayNode29 = objectMapper0.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode31 = objectMapper30.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema32 = null;
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper30.schemaBasedReader(formatSchema32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode35 = objectMapper34.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema36 = null;
        org.codehaus.jackson.map.ObjectReader objectReader37 = objectMapper34.schemaBasedReader(formatSchema36);
        byte[] byteArray39 = objectMapper34.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode40 = objectMapper30.valueToTree((java.lang.Object) 10L);
        byte[] byteArray41 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory44 = objectMapper42.getNodeFactory();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = objectMapper0.writeValueAsBytes((java.lang.Object) jsonNodeFactory44);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: No serializer found for class org.codehaus.jackson.node.JsonNodeFactory and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(restStorageService28);
        org.junit.Assert.assertNotNull(arrayNode29);
        org.junit.Assert.assertNotNull(objectNode31);
        org.junit.Assert.assertNotNull(objectReader33);
        org.junit.Assert.assertNotNull(objectNode35);
        org.junit.Assert.assertNotNull(objectReader37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(jsonNodeFactory44);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket[] s3BucketArray4 = restS3Service3.listAllBuckets();
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: List all buckets");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.shutdown();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioningWithMFA("<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 0, 100]", "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        java.util.Calendar calendar6 = null;
        java.util.Calendar calendar7 = null;
        java.lang.String[] strArray14 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str15 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray14);
        java.lang.String str16 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray14);
        java.lang.String[] strArray23 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str24 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray23);
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"content-length-range\", 97, 100]", strArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject26 = restS3Service3.getObjectDetails("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", calendar6, calendar7, strArray14, strArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/%7B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D%22%3A%20%22%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str15, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str16, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str24, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str25, "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider9);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties8);
        java.lang.String str10 = restS3Service9.getDevPayUserToken();
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service9.getProviderCredentials();
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(providerCredentials11);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializationConfig(serializationConfig15);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.jets3t.service.acl.AccessControlList accessControlList19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", accessControlList19);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The bucket '[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(objectMapper16);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger2 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode8 = objectMapper7.createObjectNode();
        java.lang.Object[] objArray9 = new java.lang.Object[] { providerCredentials5, objectMapper7 };
        emittingLogger2.info(throwable3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        com.metamx.emitter.EmittingLogger emittingLogger21 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider28, deserializerProvider29, serializationConfig30, deserializationConfig31);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = objectMapper32.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        java.lang.Object obj37 = null;
        java.lang.String str38 = objectMapper34.writeValueAsString(obj37);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.emitter.EmittingLogger emittingLogger46 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray48 = new java.lang.Object[] { objectMapper24, deserializerProvider33, objectMapper34, strList42, emittingLogger46, (byte) 1 };
        emittingLogger21.error(throwable22, "{\"\": \"s3.amazonaws.com\"}", objArray48);
        java.lang.Throwable throwable50 = null;
        java.io.File file53 = new java.io.File("hi!");
        java.io.File file55 = new java.io.File(file53, "");
        java.io.File file56 = file53.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode58 = objectMapper57.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service67 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66);
        org.jets3t.service.security.ProviderCredentials providerCredentials68 = restS3Service67.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager69 = null;
        restS3Service67.setHttpConnectionManager(httpConnectionManager69);
        java.lang.Object[] objArray73 = new java.lang.Object[] { file56, objectMapper57, objectMapper65, restS3Service67, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger21.info(throwable50, "", objArray73);
        java.lang.String str75 = joiner0.join((java.lang.Object) emittingLogger2, (java.lang.Object) javaType19, objArray73);
        com.google.common.base.Joiner joiner77 = null; // flaky: joiner0.useForNull("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        java.lang.StringBuilder stringBuilder78 = null;
        org.codehaus.jackson.JsonFactory jsonFactory79 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = objectMapper80.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = objectMapper80.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider83 = objectMapper80.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider84 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory79, serializerProvider83, deserializerProvider84);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver86 = null;
        objectMapper85.setSubtypeResolver(subtypeResolver86);
        org.codehaus.jackson.map.ObjectMapper objectMapper88 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper89 = objectMapper88.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper90 = objectMapper88.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider91 = objectMapper88.getSerializerProvider();
        java.text.DateFormat dateFormat92 = null;
        objectMapper88.setDateFormat(dateFormat92);
        org.codehaus.jackson.node.ArrayNode arrayNode94 = objectMapper88.createArrayNode();
        org.codehaus.jackson.JsonParser jsonParser95 = objectMapper85.treeAsTokens((org.codehaus.jackson.JsonNode) arrayNode94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder96 = joiner77.appendTo(stringBuilder78, (java.lang.Iterable<org.codehaus.jackson.JsonNode>) arrayNode94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(objectNode8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "null" + "'", str38, "null");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNull("file53.getParent() == null", file53.getParent());
        org.junit.Assert.assertEquals(file53.toString(), "hi!");
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "hi!");
        org.junit.Assert.assertNotNull(file56);
// flaky:         org.junit.Assert.assertEquals(file56.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode58);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNull(providerCredentials68);
        org.junit.Assert.assertNotNull(objArray73);
// flaky:         org.junit.Assert.assertNotNull(joiner77);
        org.junit.Assert.assertNotNull(objectMapper81);
        org.junit.Assert.assertNotNull(objectMapper82);
        org.junit.Assert.assertNotNull(serializerProvider83);
        org.junit.Assert.assertNotNull(objectMapper89);
        org.junit.Assert.assertNotNull(objectMapper90);
        org.junit.Assert.assertNotNull(serializerProvider91);
        org.junit.Assert.assertNotNull(arrayNode94);
        org.junit.Assert.assertNotNull(jsonParser95);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com//?torrent", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        java.io.File file3 = file2.getCanonicalFile();
        boolean boolean5 = file3.setReadable(true);
        java.io.File file7 = new java.io.File(file3, "[\"content-length-range\", 100, 4]");
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        org.junit.Assert.assertNotNull(file3);
// flaky:         org.junit.Assert.assertEquals(file3.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]/[\"content-length-range\", 100, 4]");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setAnnotationIntrospector(annotationIntrospector7);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig9 = objectMapper6.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory14 = objectMapper12.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper10.reader(jsonNodeFactory14);
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper6.reader(jsonNodeFactory14);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode18 = objectMapper17.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema19 = null;
        org.codehaus.jackson.map.ObjectReader objectReader20 = objectMapper17.schemaBasedReader(formatSchema19);
        byte[] byteArray22 = objectMapper17.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema23 = null;
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper17.reader(formatSchema23);
        java.text.DateFormat dateFormat25 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter26 = objectMapper17.writer(dateFormat25);
        com.metamx.emitter.EmittingLogger emittingLogger28 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean29 = emittingLogger28.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter33 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter34 = objectMapper31.writer(prettyPrinter33);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper31.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader36 = objectMapper31.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper37.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter39 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter40 = objectMapper37.writer(prettyPrinter39);
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper37.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray42 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper37.enable(featureArray42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper31.disable(featureArray42);
        emittingLogger28.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray42);
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper17.enable(featureArray42);
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper6.enable(featureArray42);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver48 = objectMapper6.getSubtypeResolver();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(deserializationConfig9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(jsonNodeFactory14);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(objectReader16);
        org.junit.Assert.assertNotNull(objectNode18);
        org.junit.Assert.assertNotNull(objectReader20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader24);
        org.junit.Assert.assertNotNull(objectWriter26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectWriter34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectReader36);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectWriter40);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(subtypeResolver48);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service24.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig31 = null;
        org.codehaus.jackson.JsonFactory jsonFactory32 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig35 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider33, deserializerProvider34, serializationConfig35, deserializationConfig36);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service24, s3SegmentPusherConfig31, objectMapper37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = restS3Service24.getHttpConnectionManager();
        java.lang.String str42 = restS3Service24.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = restS3Service44.getProviderCredentials();
        boolean boolean47 = restS3Service44.isBucketAccessible("");
        java.lang.String str48 = restS3Service44.getRestMetadataPrefix();
        boolean boolean49 = restS3Service44.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager50 = restS3Service44.getHttpConnectionManager();
        restS3Service24.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setRequesterPaysEnabled(true);
        java.lang.String str55 = restS3Service1.getRestMetadataPrefix();
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "x-amz-meta-" + "'", str30, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str42, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "x-amz-meta-" + "'", str48, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "x-amz-meta-" + "'", str55, "x-amz-meta-");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service1.renameMetadataKeys(strMap10);
        boolean boolean12 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpMethod httpMethod13 = null;
        restS3Service1.authorizeHttpRequest(httpMethod13);
        java.lang.String str17 = restS3Service1.createTorrentUrl("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObject("{\"\": \"s3.amazonaws.com\"}/hi!", "{\"\": \"s3.amazonaws.com\"}/hi!", "");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action deleteVersionedObject cannot be performed with an invalid object key name: ");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent" + "'", str17, "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.String str2 = file1.getParent();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent" + "'", str2, "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider2, jets3tProperties14);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.setBucketPolicy("", ":");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper0.enableDefaultTyping();
        java.io.File file10 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        java.nio.file.Path path11 = file10.toPath();
        boolean boolean13 = file10.setWritable(false);
        long long14 = file10.length();
        java.lang.Object obj15 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.writeValue(file10, obj15);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: {\"\": \"s3.amazonaws.com\"} (Permission denied)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertNotNull(path11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.lang.String str3 = org.jets3t.service.S3Service.generatePostPolicyCondition("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent", "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]" + "'", str3, "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList35 = restS3Service1.getVersionedObjectAcl("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D?versionId=%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D&acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String str5 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray4);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.info("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", (java.lang.Object[]) strArray4);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = 'F'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{\"\": \"\"}" + "'", str5, "{\"\": \"\"}");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        java.lang.StringBuilder stringBuilder2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        byte[] byteArray8 = objectMapper3.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema9 = null;
        org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper3.reader(formatSchema9);
        java.text.DateFormat dateFormat11 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter12 = objectMapper3.writer(dateFormat11);
        com.metamx.emitter.EmittingLogger emittingLogger14 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean15 = emittingLogger14.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter19 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter20 = objectMapper17.writer(prettyPrinter19);
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper17.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader22 = objectMapper17.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter25 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter26 = objectMapper23.writer(prettyPrinter25);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper23.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray28 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper23.enable(featureArray28);
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper17.disable(featureArray28);
        emittingLogger14.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray28);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper3.enable(featureArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder33 = joiner1.appendTo(stringBuilder2, (java.lang.Object[]) featureArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader10);
        org.junit.Assert.assertNotNull(objectWriter12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectWriter20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectReader22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectWriter26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper32);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        boolean boolean4 = restS3Service3.isRequesterPaysEnabled();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray7 = restS3Service3.getObjectVersions("[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]/&max-keys=1000&versions&prefix=http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.setSerializationInclusion(inclusion5);
        org.codehaus.jackson.node.ArrayNode arrayNode7 = objectMapper6.createArrayNode();
        org.codehaus.jackson.Version version8 = objectMapper6.version();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(arrayNode7);
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.setAnnotationIntrospector(annotationIntrospector11);
        org.codehaus.jackson.JsonFactory jsonFactory13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider28, deserializerProvider29, serializationConfig30, deserializationConfig31);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = objectMapper32.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig34 = null;
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider40);
        org.codehaus.jackson.map.SerializerFactory serializerFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper41.setSerializerFactory(serializerFactory42);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig44 = objectMapper41.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider33, serializationConfig34, deserializationConfig44);
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory51 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig54 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory51, serializerProvider52, deserializerProvider53, serializationConfig54, deserializationConfig55);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider57 = objectMapper56.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig58 = null;
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.codehaus.jackson.map.SerializerFactory serializerFactory66 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = objectMapper65.setSerializerFactory(serializerFactory66);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig68 = objectMapper65.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider57, serializationConfig58, deserializationConfig68);
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider26, deserializerProvider57);
        org.codehaus.jackson.map.SerializationConfig serializationConfig71 = null;
        org.codehaus.jackson.JsonFactory jsonFactory72 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider76 = objectMapper73.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory77 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider78 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider79 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig80 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig81 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory77, serializerProvider78, deserializerProvider79, serializationConfig80, deserializationConfig81);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider83 = objectMapper82.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig84 = null;
        org.codehaus.jackson.JsonFactory jsonFactory85 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = objectMapper86.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper88 = objectMapper86.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider89 = objectMapper86.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider90 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper91 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory85, serializerProvider89, deserializerProvider90);
        org.codehaus.jackson.map.SerializerFactory serializerFactory92 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper93 = objectMapper91.setSerializerFactory(serializerFactory92);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig94 = objectMapper91.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper95 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory72, serializerProvider76, deserializerProvider83, serializationConfig84, deserializationConfig94);
        org.codehaus.jackson.map.ObjectMapper objectMapper96 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory13, serializerProvider18, deserializerProvider57, serializationConfig71, deserializationConfig94);
        org.codehaus.jackson.map.ObjectMapper objectMapper97 = objectMapper12.setSerializerProvider(serializerProvider18);
        org.codehaus.jackson.map.InjectableValues injectableValues98 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper99 = objectMapper97.setInjectableValues(injectableValues98);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(deserializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(deserializationConfig44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(deserializerProvider57);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(objectMapper67);
        org.junit.Assert.assertNotNull(deserializationConfig68);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper75);
        org.junit.Assert.assertNotNull(serializerProvider76);
        org.junit.Assert.assertNotNull(deserializerProvider83);
        org.junit.Assert.assertNotNull(objectMapper87);
        org.junit.Assert.assertNotNull(objectMapper88);
        org.junit.Assert.assertNotNull(serializerProvider89);
        org.junit.Assert.assertNotNull(objectMapper93);
        org.junit.Assert.assertNotNull(deserializationConfig94);
        org.junit.Assert.assertNotNull(objectMapper97);
        org.junit.Assert.assertNotNull(objectMapper99);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.setSerializationInclusion(inclusion5);
        org.codehaus.jackson.node.ArrayNode arrayNode7 = objectMapper6.createArrayNode();
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper6.reader(formatSchema8);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(arrayNode7);
        org.junit.Assert.assertNotNull(objectReader9);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3BucketVersioningStatus s3BucketVersioningStatus5 = restS3Service3.getBucketVersioningStatus("<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"x-amz-\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/&versioning': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object21 = restS3Service18.getObjectWithSignedUrl("s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.IllegalArgumentException: host parameter is null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.util.Date date8 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str15 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray14);
        java.lang.String[] strArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = org.jets3t.service.S3Service.buildPostForm("[\"content-length-range\", 58, 1]", "[\"content-length-range\", 0, 100]", providerCredentials2, date8, strArray14, strArray16, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Nov 04 08:19:50 BRT 2021");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str15, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 1, 0]", credentialsProvider2);
        org.jets3t.service.model.StorageObject storageObject5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putObjectAcl("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", storageObject5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.lang.String str1 = org.jets3t.service.S3Service.generatePostPolicyCondition_AllowAnyValue("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]" + "'", str1, "[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper0.enableDefaultTyping();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        org.jets3t.service.Jets3tProperties jets3tProperties18 = restS3Service14.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "", credentialsProvider12, jets3tProperties18, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider9, jets3tProperties18);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "", credentialsProvider6, jets3tProperties18, hostConfiguration22);
        org.codehaus.jackson.map.ObjectReader objectReader24 = objectMapper3.readerForUpdating((java.lang.Object) restS3Service23);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object26 = restS3Service23.getObjectWithSignedUrl("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(jets3tProperties18);
        org.junit.Assert.assertNotNull(objectReader24);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 58, 1]/null", credentialsProvider2, jets3tProperties11, hostConfiguration14);
        restS3Service15.setDevPayUserToken("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22, "null", credentialsProvider24);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = restS3Service27.renameMetadataKeys(strMap28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = restS3Service25.renameMetadataKeys(strMap28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = restS3Service15.createSignedUrl("<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 97, 100]", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "{\"\": \"s3.amazonaws.com\"}", strMap30, 80259563520L, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object17 = restS3Service1.getObjectDetailsWithSignedUrl("<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean3 = file2.canExecute();
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com.s3.amazonaws.com/?torrent/http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com.s3.amazonaws.com/?torrent/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        boolean boolean6 = file1.delete();
        boolean boolean9 = file1.setWritable(true, false);
        boolean boolean10 = file1.canExecute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        java.lang.Object obj11 = null;
        java.lang.String str12 = objectMapper8.writeValueAsString(obj11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper8.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver15 = objectMapper14.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper14.setSerializationInclusion(inclusion16);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker18 = objectMapper17.getVisibilityChecker();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig7, objectMapper17);
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = s3SegmentPusher19.jsonMapper;
        java.io.File file22 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        java.nio.file.Path path23 = file22.toPath();
        boolean boolean24 = file22.delete();
        com.metamx.druid.client.DataSegment dataSegment25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment26 = s3SegmentPusher19.push(file22, dataSegment25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null" + "'", str12, "null");
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(subtypeResolver15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertNotNull(path23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.model.StorageObject storageObject24 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectMaybeAsMultipart("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", storageObject24, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        boolean boolean4 = restS3Service3.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        java.util.Date date13 = restS3Service9.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = restS3Service3.createSignedHeadUrl(":", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", providerCredentials7, date13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 04 08:19:51 BRT 2021");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = restS3Service1.isObjectInBucket("http://s3.amazonaws.com//hi%21?torrent", "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        int int13 = restS3Service1.getInternalErrorRetryMax();
        org.jets3t.service.model.NotificationConfig notificationConfig15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setNotificationConfig("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", notificationConfig15);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build NotificationConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = restS3Service19.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager21 = null;
        restS3Service19.setHttpConnectionManager(httpConnectionManager21);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager23 = null;
        restS3Service19.setHttpConnectionManager(httpConnectionManager23);
        java.lang.String str27 = restS3Service19.createTorrentUrl("", "hi!");
        boolean boolean29 = restS3Service19.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date30 = restS3Service19.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = restS3Service1.createSignedHeadUrl("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"content-length-range\", 1, 0]", providerCredentials17, date30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
        org.junit.Assert.assertNull(providerCredentials20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str27, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Thu Nov 04 08:19:52 BRT 2021");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        org.apache.commons.httpclient.HttpMethod httpMethod9 = null;
        restS3Service1.authorizeHttpRequest(httpMethod9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = restS3Service1.createUnsignedObjectUrl("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", false, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setAnnotationIntrospector(annotationIntrospector7);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig9 = objectMapper6.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory14 = objectMapper12.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper10.reader(jsonNodeFactory14);
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper6.reader(jsonNodeFactory14);
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper6.disable(featureArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(deserializationConfig9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(jsonNodeFactory14);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(objectReader16);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        org.jets3t.service.model.S3Object s3Object6 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putVersionedObjectAcl("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", s3Bucket5, s3Object6);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str6 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.lang.String str9 = restS3Service8.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher23 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service12, s3SegmentPusherConfig13, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher24 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig10, objectMapper20);
        int int25 = restS3Service8.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = restS3Service27.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager29 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager29);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager31 = null;
        restS3Service27.setHttpConnectionManager(httpConnectionManager31);
        boolean boolean33 = restS3Service27.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder36 = builder34.size(0L);
        org.joda.time.Interval interval37 = null;
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.interval(interval37);
        java.lang.String[] strArray42 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder36.metrics((java.util.List<java.lang.String>) strList43);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider48 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service49 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46, "null", credentialsProvider48);
        org.jets3t.service.security.ProviderCredentials providerCredentials50 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service51 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service51.renameMetadataKeys(strMap52);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service49.renameMetadataKeys(strMap52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder36.loadSpec(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = restS3Service27.renameMetadataKeys(strMap54);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = restS3Service8.renameMetadataKeys(strMap56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = restS3Service1.renameMetadataKeys(strMap56);
        org.jets3t.service.acl.AccessControlList accessControlList60 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl("[\"content-length-range\", 10, 47]", accessControlList60);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The bucket '[\"content-length-range\", 10, 47]' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "x-amz-meta-" + "'", str6, "x-amz-meta-");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNull(providerCredentials28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger1;
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.SerializerFactory serializerFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.setSerializerFactory(serializerFactory35);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = objectMapper34.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper27.setDeserializationConfig(deserializationConfig37);
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.setAnnotationIntrospector(annotationIntrospector40);
        java.lang.Object obj42 = null;
        byte[] byteArray43 = objectMapper41.writeValueAsBytes(obj42);
        org.codehaus.jackson.type.TypeReference typeReference44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement annotatedElement45 = objectMapper27.readValue(byteArray43, typeReference44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializationConfig37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[110, 117, 108, 108]");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus9 = restS3Service1.getBucketLoggingStatus("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/&logging': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service1.getJetS3tProperties();
        java.lang.String str9 = restS3Service1.getRestHeaderPrefix();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-" + "'", str9, "x-amz-");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = restS3Service4.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "null", credentialsProvider11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = restS3Service14.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service12.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service4.renameMetadataKeys(strMap17);
        com.metamx.druid.client.DataSegment.Builder builder20 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder20.dimensions((java.util.List<java.lang.String>) strList23);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder25.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder30.dimensions((java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder29.metrics((java.util.List<java.lang.String>) strList33);
        java.lang.String str37 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList33);
        com.metamx.druid.client.DataSegment.Builder builder38 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval39 = null;
        com.metamx.druid.client.DataSegment.Builder builder40 = builder38.interval(interval39);
        com.metamx.druid.client.DataSegment.Builder builder41 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder41.dimensions((java.util.List<java.lang.String>) strList44);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder46.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec49 = null;
        com.metamx.druid.client.DataSegment.Builder builder50 = builder46.shardSpec(shardSpec49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder46.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder53 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder53.dimensions((java.util.List<java.lang.String>) strList56);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder58.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder62 = builder60.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder63 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder63.dimensions((java.util.List<java.lang.String>) strList66);
        com.metamx.druid.client.DataSegment.Builder builder69 = builder62.metrics((java.util.List<java.lang.String>) strList66);
        com.metamx.druid.client.DataSegment.Builder builder70 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder70.dimensions((java.util.List<java.lang.String>) strList73);
        com.metamx.druid.client.DataSegment.Builder builder76 = builder69.metrics((java.util.List<java.lang.String>) strList73);
        com.metamx.druid.client.DataSegment.Builder builder77 = builder46.metrics((java.util.List<java.lang.String>) strList73);
        com.metamx.druid.client.DataSegment.Builder builder78 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        com.metamx.druid.client.DataSegment.Builder builder83 = builder78.dimensions((java.util.List<java.lang.String>) strList81);
        com.metamx.druid.client.DataSegment.Builder builder85 = builder83.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder87 = builder85.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder88 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        com.metamx.druid.client.DataSegment.Builder builder93 = builder88.dimensions((java.util.List<java.lang.String>) strList91);
        com.metamx.druid.client.DataSegment.Builder builder94 = builder87.metrics((java.util.List<java.lang.String>) strList91);
        com.metamx.druid.client.DataSegment.Builder builder95 = builder46.dimensions((java.util.List<java.lang.String>) strList91);
        com.metamx.druid.client.DataSegment.Builder builder96 = builder38.metrics((java.util.List<java.lang.String>) strList91);
        com.metamx.druid.shard.ShardSpec shardSpec97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment99 = new com.metamx.druid.client.DataSegment("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", interval1, "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", strMap17, (java.util.List<java.lang.String>) strList33, (java.util.List<java.lang.String>) strList91, shardSpec97, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(credentialsProvider8);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str37, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        java.lang.String str16 = restS3Service1.createTorrentUrl("/", "x-amz-meta-");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.SerializerFactory serializerFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory18);
        org.codehaus.jackson.map.ObjectWriter objectWriter20 = objectMapper19.writer();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        java.lang.Object obj26 = null;
        java.lang.String str27 = objectMapper23.writeValueAsString(obj26);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = objectMapper23.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper23.setSerializerProvider(serializerProvider33);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = objectMapper23.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper21.setDeserializationConfig(deserializationConfig37);
        org.codehaus.jackson.map.type.TypeFactory typeFactory39 = objectMapper38.getTypeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper19.setTypeFactory(typeFactory39);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper19.enableDefaultTypingAsProperty(defaultTyping41, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher44 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper43);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent" + "'", str16, "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
        org.junit.Assert.assertNotNull(objectWriter20);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "null" + "'", str27, "null");
        org.junit.Assert.assertNotNull(deserializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializationConfig37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(typeFactory39);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(objectMapper43);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        boolean boolean11 = restS3Service10.isAuthenticatedConnection();
        java.lang.String str12 = restS3Service10.getDevPayUserToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray16 = restS3Service10.listVersionedObjects("http://s3.amazonaws.com//?torrent", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Calendar calendar5 = null;
        java.util.Calendar calendar6 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str13 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        java.lang.String str17 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray16);
        java.lang.String str18 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", strArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object21 = restS3Service1.getVersionedObject("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", calendar5, calendar6, strArray12, strArray16, (java.lang.Long) 80259559424L, (java.lang.Long) 4096L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]/%7B%22%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D&versionId=%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fx-amz-meta-': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str13, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\"\": \"\"}" + "'", str17, "{\"\": \"\"}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}" + "'", str18, "{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray13 = restS3Service1.listObjects("{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", "", (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}/?max-keys=32&prefix=%5B%22starts-with%22%2C%20%22%24s3.amazonaws.com%22%2C%20%22%22%5D&delimiter': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.enableDefaultTyping();
        java.text.DateFormat dateFormat9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper7.writer(dateFormat9);
        org.codehaus.jackson.JsonGenerator jsonGenerator11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager18 = null;
        restS3Service16.setHttpConnectionManager(httpConnectionManager18);
        org.jets3t.service.Jets3tProperties jets3tProperties20 = restS3Service16.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "", credentialsProvider14, jets3tProperties20, hostConfiguration21);
        boolean boolean23 = restS3Service22.isAuthenticatedConnection();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper7.writeValue(jsonGenerator11, (java.lang.Object) boolean23);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertNotNull(jets3tProperties20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver7 = objectMapper6.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper6.setSerializationInclusion(inclusion8);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker10 = objectMapper9.getVisibilityChecker();
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper9.reader();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(subtypeResolver7);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker10);
        org.junit.Assert.assertNotNull(objectReader11);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider5, jets3tProperties11);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11, hostConfiguration13);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = restS3Service19.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager21 = null;
        restS3Service19.setHttpConnectionManager(httpConnectionManager21);
        java.lang.String str23 = restS3Service19.getEndpoint();
        java.lang.String str26 = restS3Service19.createTorrentUrl("", "");
        java.lang.String str27 = restS3Service19.getRestMetadataPrefix();
        java.util.Date date28 = restS3Service19.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = restS3Service14.createSignedGetUrl("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]", providerCredentials17, date28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNull(providerCredentials20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "s3.amazonaws.com" + "'", str23, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str26, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "x-amz-meta-" + "'", str27, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Thu Nov 04 08:19:55 BRT 2021");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date12 = restS3Service1.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.shutdown();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 04 08:19:55 BRT 2021");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.jets3t.service.Jets3tProperties jets3tProperties7 = restS3Service1.getJetS3tProperties();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertNotNull(jets3tProperties7);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on('/');
        com.google.common.base.Joiner joiner3 = joiner1.useForNull("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        java.lang.StringBuilder stringBuilder4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema7 = null;
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper5.schemaBasedReader(formatSchema7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode10 = objectMapper9.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema11 = null;
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper9.schemaBasedReader(formatSchema11);
        byte[] byteArray14 = objectMapper9.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode15 = objectMapper5.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper5.setSerializationInclusion(inclusion16);
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.JsonFactory jsonFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider29, deserializerProvider30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode33 = objectMapper32.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema34 = null;
        org.codehaus.jackson.map.ObjectReader objectReader35 = objectMapper32.schemaBasedReader(formatSchema34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode37 = objectMapper36.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema38 = null;
        org.codehaus.jackson.map.ObjectReader objectReader39 = objectMapper36.schemaBasedReader(formatSchema38);
        byte[] byteArray41 = objectMapper36.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode42 = objectMapper32.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser43 = objectMapper31.treeAsTokens(jsonNode42);
        org.codehaus.jackson.JsonNode jsonNode44 = objectMapper24.readTree(jsonParser43);
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper45.disableDefaultTyping();
        java.io.File file49 = new java.io.File("hi!");
        java.io.File file51 = new java.io.File(file49, "");
        java.lang.Class<?> wildcardClass52 = file49.getClass();
        org.codehaus.jackson.type.JavaType javaType53 = objectMapper47.constructType((java.lang.reflect.Type) wildcardClass52);
        org.codehaus.jackson.map.MappingIterator<java.util.Collection<java.lang.String>> strCollectionItor54 = objectMapper5.readValues(jsonParser43, javaType53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder55 = joiner1.appendTo(stringBuilder4, (java.util.Iterator<java.util.Collection<java.lang.String>>) strCollectionItor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(joiner3);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(objectNode10);
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(objectNode33);
        org.junit.Assert.assertNotNull(objectReader35);
        org.junit.Assert.assertNotNull(objectNode37);
        org.junit.Assert.assertNotNull(objectReader39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode42);
        org.junit.Assert.assertNotNull(jsonParser43);
        org.junit.Assert.assertNotNull(jsonNode44);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNull("file49.getParent() == null", file49.getParent());
        org.junit.Assert.assertEquals(file49.toString(), "hi!");
        org.junit.Assert.assertNull("file51.getParent() == null", file51.getParent());
        org.junit.Assert.assertEquals(file51.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(javaType53);
        org.junit.Assert.assertNotNull(strCollectionItor54);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.io.File file1 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        java.nio.file.Path path2 = file1.toPath();
        boolean boolean4 = file1.setWritable(false);
        long long5 = file1.length();
        boolean boolean6 = file1.canExecute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertNotNull(path2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        org.jets3t.service.model.StorageObject storageObject10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service1.renameObject("http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "/", storageObject10);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.io.File file2 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "hi!");
        long long3 = file2.getFreeSpace();
        boolean boolean4 = file2.mkdirs();
        org.junit.Assert.assertEquals(file2.getParent(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.io.File file2 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "hi!");
        java.net.URI uRI3 = file2.toURI();
        java.io.File file4 = new java.io.File(uRI3);
        boolean boolean5 = file4.setReadOnly();
        org.junit.Assert.assertEquals(file2.getParent(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertNotNull(uRI3);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"\": \"s3.amazonaws.com\"}");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.io.File file1 = new java.io.File("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals(file1.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file1.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.delete();
        java.io.File file5 = file1.getCanonicalFile();
        long long6 = file1.length();
        file1.deleteOnExit();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(file5);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = restS3Service3.isBucketAccessible("[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]/': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", credentialsProvider2);
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putVersionedObjectAcl("http://s3.amazonaws.com//hi%21?torrent", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", accessControlList7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket8 = restS3Service1.createBucket("", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", accessControlList7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        org.jets3t.service.model.StorageBucket storageBucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageBucket storageBucket5 = restS3Service1.createBucket(storageBucket4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper16);
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        boolean boolean26 = file22.setWritable(false);
        java.io.File file28 = new java.io.File(file22, "http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment dataSegment29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment30 = s3SegmentPusher20.push(file28, dataSegment29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file28.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper4.schemaBasedWriter(formatSchema5);
        org.codehaus.jackson.PrettyPrinter prettyPrinter7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper4.writer(prettyPrinter7);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = objectMapper4.getDeserializerProvider();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper4.setSerializationInclusion(inclusion10);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(deserializerProvider9);
        org.junit.Assert.assertNotNull(objectMapper11);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.deleteObjectWithSignedUrl("/");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.JsonFactory jsonFactory2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider6 = objectMapper3.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper12.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig14 = null;
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider19, deserializerProvider20);
        org.codehaus.jackson.map.SerializerFactory serializerFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.setSerializerFactory(serializerFactory22);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig24 = objectMapper21.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory2, serializerProvider6, deserializerProvider13, serializationConfig14, deserializationConfig24);
        org.codehaus.jackson.JsonFactory jsonFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider30 = objectMapper27.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory31 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig34 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory31, serializerProvider32, deserializerProvider33, serializationConfig34, deserializationConfig35);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider37 = objectMapper36.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig38 = null;
        org.codehaus.jackson.JsonFactory jsonFactory39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider43 = objectMapper40.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory39, serializerProvider43, deserializerProvider44);
        org.codehaus.jackson.map.SerializerFactory serializerFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper45.setSerializerFactory(serializerFactory46);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig48 = objectMapper45.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory26, serializerProvider30, deserializerProvider37, serializationConfig38, deserializationConfig48);
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider6, deserializerProvider37);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider6, deserializerProvider51);
        org.codehaus.jackson.map.SerializerProvider serializerProvider53 = objectMapper52.getSerializerProvider();
        org.codehaus.jackson.FormatSchema formatSchema54 = null;
        org.codehaus.jackson.map.ObjectReader objectReader55 = objectMapper52.schemaBasedReader(formatSchema54);
        org.codehaus.jackson.map.InjectableValues injectableValues56 = null;
        org.codehaus.jackson.map.ObjectReader objectReader57 = objectMapper52.reader(injectableValues56);
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = objectMapper58.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper58.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider61 = objectMapper58.getSerializerProvider();
        java.text.DateFormat dateFormat62 = null;
        objectMapper58.setDateFormat(dateFormat62);
        org.codehaus.jackson.node.ArrayNode arrayNode64 = objectMapper58.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger66 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable67 = null;
        com.metamx.emitter.EmittingLogger emittingLogger70 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable71 = null;
        com.metamx.emitter.EmittingLogger emittingLogger74 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable75 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = objectMapper77.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = objectMapper77.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray80 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = objectMapper77.enable(featureArray80);
        emittingLogger74.warn(throwable75, "", (java.lang.Object[]) featureArray80);
        emittingLogger70.trace(throwable71, "/", (java.lang.Object[]) featureArray80);
        emittingLogger66.trace(throwable67, "x-amz-meta-", (java.lang.Object[]) featureArray80);
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = objectMapper58.enable(featureArray80);
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = objectMapper52.disable(featureArray80);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(serializerProvider6);
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(deserializationConfig24);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(serializerProvider30);
        org.junit.Assert.assertNotNull(deserializerProvider37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(serializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(deserializationConfig48);
        org.junit.Assert.assertNotNull(serializerProvider53);
        org.junit.Assert.assertNotNull(objectReader55);
        org.junit.Assert.assertNotNull(objectReader57);
        org.junit.Assert.assertNotNull(objectMapper59);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(serializerProvider61);
        org.junit.Assert.assertNotNull(arrayNode64);
        org.junit.Assert.assertNotNull(objectMapper78);
        org.junit.Assert.assertNotNull(objectMapper79);
        org.junit.Assert.assertNotNull(featureArray80);
        org.junit.Assert.assertNotNull(objectMapper81);
        org.junit.Assert.assertNotNull(objectMapper85);
        org.junit.Assert.assertNotNull(objectMapper86);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 1, 0]", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray7 = restS3Service3.listObjects(s3Bucket4, "hi!", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder5.shardSpec(shardSpec8);
        com.metamx.druid.client.DataSegment.Builder builder11 = builder5.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder12 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.metamx.druid.client.DataSegment.Builder builder17 = builder12.dimensions((java.util.List<java.lang.String>) strList15);
        com.metamx.druid.client.DataSegment.Builder builder19 = builder17.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder21 = builder19.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.druid.client.DataSegment.Builder builder28 = builder21.metrics((java.util.List<java.lang.String>) strList25);
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder29.dimensions((java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder35 = builder28.metrics((java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder5.metrics((java.util.List<java.lang.String>) strList32);
        com.metamx.druid.client.DataSegment.Builder builder37 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder37.dimensions((java.util.List<java.lang.String>) strList40);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder42.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder46 = builder44.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder47 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder47.dimensions((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder53 = builder46.metrics((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder5.dimensions((java.util.List<java.lang.String>) strList50);
        com.metamx.druid.shard.ShardSpec shardSpec55 = null;
        com.metamx.druid.client.DataSegment.Builder builder56 = builder5.shardSpec(shardSpec55);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        java.io.File file4 = file1.getAbsoluteFile();
        long long5 = file1.getFreeSpace();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        java.lang.String str5 = restS3Service1.getInvokingApplicationDescription();
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAclWithSignedUrl("null", accessControlList7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.IllegalArgumentException: host parameter is null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.io.File file1 = new java.io.File("hi!");
        java.net.URI uRI2 = file1.toURI();
        java.io.File file3 = new java.io.File(uRI2);
        java.io.File file4 = new java.io.File(uRI2);
        boolean boolean5 = file4.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNotNull(uRI2);
// flaky:         org.junit.Assert.assertEquals(file3.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        java.io.File file4 = file2.getAbsoluteFile();
        java.net.URI uRI5 = file4.toURI();
        java.io.File file6 = new java.io.File(uRI5);
        boolean boolean8 = file6.setReadable(false);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNotNull(uRI5);
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        boolean boolean5 = file2.setExecutable(false, false);
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.lang.String str4 = file3.getName();
        java.net.URL uRL5 = file3.toURL();
        boolean boolean6 = file3.mkdir();
        java.nio.file.Path path7 = file3.toPath();
        boolean boolean8 = file3.canExecute();
        boolean boolean11 = file3.setWritable(false, true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/");
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str18 = restS3Service1.getDevPayProductToken();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.suspendBucketVersioning("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider10 = restS3Service1.getCredentialsProvider();
        java.lang.String str13 = restS3Service1.createTorrentUrl("s3.amazonaws.com", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.jets3t.service.model.StorageObject storageObject15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject16 = restS3Service1.putObject("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", storageObject15);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Create Object in bucket {\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"} cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertNull(credentialsProvider10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" + "'", str13, "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.SerializationConfig serializationConfig9 = objectMapper8.getSerializationConfig();
        org.codehaus.jackson.FormatSchema formatSchema10 = null;
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper8.schemaBasedReader(formatSchema10);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializationConfig9);
        org.junit.Assert.assertNotNull(objectReader11);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper7.reader(jsonNodeFactory11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray16 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enable(featureArray16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper7.enable(featureArray16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList21 = restS3Service1.multipartListUploads("[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]/&max-uploads=1000&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = file1.canRead();
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.JsonFactory jsonFactory4 = null;
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.map.SerializerFactory serializerFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.setSerializerFactory(serializerFactory25);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper24.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5, serializerProvider9, deserializerProvider16, serializationConfig17, deserializationConfig27);
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory34 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider35 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig37 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory34, serializerProvider35, deserializerProvider36, serializationConfig37, deserializationConfig38);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = objectMapper39.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig41 = null;
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider47);
        org.codehaus.jackson.map.SerializerFactory serializerFactory49 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper48.setSerializerFactory(serializerFactory49);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig51 = objectMapper48.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider40, serializationConfig41, deserializationConfig51);
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory4, serializerProvider9, deserializerProvider40);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider54 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider9, deserializerProvider54);
        org.codehaus.jackson.map.SerializerProvider serializerProvider56 = objectMapper55.getSerializerProvider();
        org.codehaus.jackson.FormatSchema formatSchema57 = null;
        org.codehaus.jackson.map.ObjectReader objectReader58 = objectMapper55.schemaBasedReader(formatSchema57);
        org.codehaus.jackson.map.InjectableValues injectableValues59 = null;
        org.codehaus.jackson.map.ObjectReader objectReader60 = objectMapper55.reader(injectableValues59);
        boolean boolean61 = file1.equals((java.lang.Object) injectableValues59);
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(deserializerProvider40);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(deserializationConfig51);
        org.junit.Assert.assertNotNull(serializerProvider56);
        org.junit.Assert.assertNotNull(objectReader58);
        org.junit.Assert.assertNotNull(objectReader60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file5 = new java.io.File(file3, "");
        java.io.File file6 = file3.getParentFile();
        java.io.File file7 = file6.getAbsoluteFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart");
        org.junit.Assert.assertEquals(file6.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider11, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties17, hostConfiguration19);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider5, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, ":", credentialsProvider2, jets3tProperties17, hostConfiguration22);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider5, jets3tProperties17);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager27);
        boolean boolean29 = restS3Service23.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.size(0L);
        org.joda.time.Interval interval33 = null;
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.interval(interval33);
        java.lang.String[] strArray38 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder32.metrics((java.util.List<java.lang.String>) strList39);
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider44 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials42, "null", credentialsProvider44);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service47 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service47.renameMetadataKeys(strMap48);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service45.renameMetadataKeys(strMap48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder32.loadSpec(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = restS3Service23.renameMetadataKeys(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service21.renameMetadataKeys(strMap50);
        org.jets3t.service.security.ProviderCredentials providerCredentials54 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service55 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials54);
        org.jets3t.service.security.ProviderCredentials providerCredentials56 = restS3Service55.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig57 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher59 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service55, s3SegmentPusherConfig57, objectMapper58);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher62 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service55, s3SegmentPusherConfig60, objectMapper61);
        java.lang.String str63 = restS3Service55.getRestMetadataPrefix();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider64 = restS3Service55.getCredentialsProvider();
        java.util.List<java.lang.String> strList65 = restS3Service55.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder66 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.metamx.druid.client.DataSegment.Builder builder71 = builder66.dimensions((java.util.List<java.lang.String>) strList69);
        com.metamx.druid.client.DataSegment.Builder builder73 = builder71.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder75 = builder73.size((-1L));
        com.metamx.druid.client.DataSegment.Builder builder76 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        com.metamx.druid.client.DataSegment.Builder builder81 = builder76.dimensions((java.util.List<java.lang.String>) strList79);
        com.metamx.druid.client.DataSegment.Builder builder82 = builder73.metrics((java.util.List<java.lang.String>) strList79);
        com.metamx.druid.shard.ShardSpec shardSpec83 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment85 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", -226, -226]", interval1, "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", strMap50, strList65, (java.util.List<java.lang.String>) strList79, shardSpec83, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(providerCredentials56);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "x-amz-meta-" + "'", str63, "x-amz-meta-");
        org.junit.Assert.assertNull(credentialsProvider64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = file1.canRead();
        boolean boolean4 = file1.setReadable(false);
        java.io.File file6 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(file6.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file6.toString(), "http:/s3.amazonaws.com/hi%21?torrent/http:/s3.amazonaws.com/?torrent");
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder5 = builder3.size(0L);
        org.joda.time.Interval interval6 = null;
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.interval(interval6);
        java.lang.String[] strArray11 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder5.metrics((java.util.List<java.lang.String>) strList12);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder5.loadSpec(strMap23);
        com.metamx.druid.client.DataSegment.Builder builder26 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder28 = builder26.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder29 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials30);
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = restS3Service31.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager33 = null;
        restS3Service31.setHttpConnectionManager(httpConnectionManager33);
        java.util.List<java.lang.String> strList35 = restS3Service31.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder36 = builder29.dimensions(strList35);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder28.dimensions(strList35);
        java.lang.String str38 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strList35);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder44.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder48 = builder46.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder49 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder49.dimensions((java.util.List<java.lang.String>) strList52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder48.metrics((java.util.List<java.lang.String>) strList52);
        com.metamx.druid.client.DataSegment.Builder builder57 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder59 = builder57.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder60 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials61 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service62 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials61);
        org.jets3t.service.security.ProviderCredentials providerCredentials63 = restS3Service62.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager64 = null;
        restS3Service62.setHttpConnectionManager(httpConnectionManager64);
        java.util.List<java.lang.String> strList66 = restS3Service62.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder67 = builder60.dimensions(strList66);
        com.metamx.druid.client.DataSegment.Builder builder68 = builder59.dimensions(strList66);
        java.lang.String str69 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strList66);
        com.metamx.druid.client.DataSegment.Builder builder70 = builder48.metrics(strList66);
        com.metamx.druid.shard.ShardSpec shardSpec71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment73 = new com.metamx.druid.client.DataSegment("<form action=\"https://{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", interval1, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", strMap23, strList35, strList66, shardSpec71, (long) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(providerCredentials32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}" + "'", str38, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(providerCredentials63);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}" + "'", str69, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.lang.Object obj20 = null;
        java.lang.String str21 = objectMapper17.writeValueAsString(obj20);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.emitter.EmittingLogger emittingLogger29 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray31 = new java.lang.Object[] { objectMapper7, deserializerProvider16, objectMapper17, strList25, emittingLogger29, (byte) 1 };
        emittingLogger4.error(throwable5, "{\"\": \"s3.amazonaws.com\"}", objArray31);
        java.lang.Throwable throwable33 = null;
        java.io.File file36 = new java.io.File("hi!");
        java.io.File file38 = new java.io.File(file36, "");
        java.io.File file39 = file36.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode41 = objectMapper40.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider47);
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = restS3Service50.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager52 = null;
        restS3Service50.setHttpConnectionManager(httpConnectionManager52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { file39, objectMapper40, objectMapper48, restS3Service50, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger4.info(throwable33, "", objArray56);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper59.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper59.getSerializerProvider();
        java.text.DateFormat dateFormat63 = null;
        objectMapper59.setDateFormat(dateFormat63);
        org.codehaus.jackson.node.ArrayNode arrayNode65 = objectMapper59.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder66 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder68 = builder66.size(0L);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objectMapper59, builder66 };
        emittingLogger4.trace("null", objArray69);
        emittingLogger1.error("[\"content-length-range\", 58, 1]", objArray69);
        boolean boolean72 = emittingLogger1.isDebugEnabled();
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null" + "'", str21, "null");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "hi!");
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "hi!");
        org.junit.Assert.assertNotNull(file39);
// flaky:         org.junit.Assert.assertEquals(file39.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode41);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNull(providerCredentials51);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(arrayNode65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper0.reader(formatSchema6);
        java.text.DateFormat dateFormat8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper0.writer(dateFormat8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory12 = objectMapper10.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setNodeFactory(jsonNodeFactory12);
        org.codehaus.jackson.map.jsontype.NamedType namedType14 = null;
        org.codehaus.jackson.map.jsontype.NamedType[] namedTypeArray15 = new org.codehaus.jackson.map.jsontype.NamedType[] { namedType14 };
        objectMapper0.registerSubtypes(namedTypeArray15);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(jsonNodeFactory12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(namedTypeArray15);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "null", credentialsProvider8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service9.renameMetadataKeys(strMap12);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager18 = null;
        restS3Service16.setHttpConnectionManager(httpConnectionManager18);
        java.lang.String str20 = restS3Service16.getEndpoint();
        java.lang.String str23 = restS3Service16.createTorrentUrl("", "");
        java.lang.String str24 = restS3Service16.getRestMetadataPrefix();
        boolean boolean25 = restS3Service16.isShutdown();
        java.util.Date date26 = restS3Service16.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = restS3Service3.createSignedPutUrl("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", strMap14, date26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "s3.amazonaws.com" + "'", str20, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str23, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "x-amz-meta-" + "'", str24, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Nov 04 08:19:57 BRT 2021");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 58, 1]/null", credentialsProvider2, jets3tProperties11, hostConfiguration14);
        restS3Service15.setDevPayUserToken("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = restS3Service15.getAWSCredentials();
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNull(providerCredentials18);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper19.createArrayNode();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher22 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper19);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service24.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig31 = null;
        org.codehaus.jackson.JsonFactory jsonFactory32 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig35 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider33, deserializerProvider34, serializationConfig35, deserializationConfig36);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher38 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service24, s3SegmentPusherConfig31, objectMapper37);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = restS3Service24.getHttpConnectionManager();
        java.lang.String str42 = restS3Service24.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = restS3Service44.getProviderCredentials();
        boolean boolean47 = restS3Service44.isBucketAccessible("");
        java.lang.String str48 = restS3Service44.getRestMetadataPrefix();
        boolean boolean49 = restS3Service44.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager50 = restS3Service44.getHttpConnectionManager();
        restS3Service24.setHttpConnectionManager(httpConnectionManager50);
        restS3Service1.setHttpConnectionManager(httpConnectionManager50);
        java.lang.String str53 = restS3Service1.getInvokingApplicationDescription();
        org.jets3t.service.security.ProviderCredentials providerCredentials56 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials57 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service58 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials57);
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = restS3Service58.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager60 = null;
        restS3Service58.setHttpConnectionManager(httpConnectionManager60);
        java.lang.String str62 = restS3Service58.getEndpoint();
        java.lang.String str65 = restS3Service58.createTorrentUrl("", "");
        java.lang.String str66 = restS3Service58.getRestMetadataPrefix();
        boolean boolean67 = restS3Service58.isShutdown();
        java.util.Date date68 = restS3Service58.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = restS3Service1.createSignedHeadUrl("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", providerCredentials56, date68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "x-amz-meta-" + "'", str30, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str42, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "x-amz-meta-" + "'", str48, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(providerCredentials59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "s3.amazonaws.com" + "'", str62, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str65, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "x-amz-meta-" + "'", str66, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date68);
// flaky:         org.junit.Assert.assertEquals(date68.toString(), "Thu Nov 04 08:19:57 BRT 2021");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        java.util.Calendar calendar20 = null;
        java.util.Calendar calendar21 = null;
        java.lang.String[] strArray27 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray27);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.lang.String str31 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object34 = restS3Service1.getVersionedObject("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", "x-amz-meta-", calendar20, calendar21, strArray27, strArray30, (java.lang.Long) 0L, (java.lang.Long) 80259510272L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str28, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\"\": \"\"}" + "'", str31, "{\"\": \"\"}");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.google.common.base.Joiner.MapJoiner mapJoiner2 = null; // flaky: joiner0.withKeyValueSeparator("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        com.google.common.base.Joiner joiner3 = joiner0.skipNulls();
        org.junit.Assert.assertNotNull(joiner0);
// flaky:         org.junit.Assert.assertNotNull(mapJoiner2);
        org.junit.Assert.assertNotNull(joiner3);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider11, deserializerProvider12, serializationConfig13, deserializationConfig14);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = objectMapper15.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.lang.Object obj20 = null;
        java.lang.String str21 = objectMapper17.writeValueAsString(obj20);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.emitter.EmittingLogger emittingLogger29 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray31 = new java.lang.Object[] { objectMapper7, deserializerProvider16, objectMapper17, strList25, emittingLogger29, (byte) 1 };
        emittingLogger4.error(throwable5, "{\"\": \"s3.amazonaws.com\"}", objArray31);
        emittingLogger1.debug("http://s3.amazonaws.com//hi%21?torrent", objArray31);
        java.lang.Throwable throwable34 = null;
        com.metamx.emitter.EmittingLogger emittingLogger37 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean38 = emittingLogger37.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter42 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter43 = objectMapper40.writer(prettyPrinter42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper40.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader45 = objectMapper40.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter48 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter49 = objectMapper46.writer(prettyPrinter48);
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper46.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray51 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper46.enable(featureArray51);
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper40.disable(featureArray51);
        emittingLogger37.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray51);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.service.AlertBuilder alertBuilder55 = emittingLogger1.makeAlert(throwable34, "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", (java.lang.Object[]) featureArray51);
            org.junit.Assert.fail("Expected exception of type com.metamx.common.ISE; message: Emitter not initialized!  Cannot alert.  Please make sure to call class com.metamx.emitter.EmittingLogger.registerEmitter()");
        } catch (com.metamx.common.ISE e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(deserializerProvider16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null" + "'", str21, "null");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectWriter43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectReader45);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(objectWriter49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper53);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        restS3Service1.setRequesterPaysEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket10 = restS3Service1.getOrCreateBucket("hi!/http:/s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get or Create Bucket with location");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.delete();
        java.io.File file5 = new java.io.File(file1, "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(file5.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file5.toString(), "http:/s3.amazonaws.com/hi%21?torrent/http:/s3.amazonaws.com/hi%21?torrent");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        boolean boolean6 = file1.setExecutable(false, true);
        boolean boolean7 = file1.createNewFile();
        java.io.File file9 = new java.io.File(file1, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        long long10 = file1.lastModified();
        java.lang.String str11 = file1.getName();
        java.io.File file12 = file1.getCanonicalFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file9.toString(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1636024796000L + "'", long10 == 1636024796000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(file12);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        java.lang.String str11 = restS3Service7.getEndpoint();
        java.lang.String str14 = restS3Service7.createTorrentUrl("", "");
        java.lang.String str15 = restS3Service7.getRestMetadataPrefix();
        java.util.Date date16 = restS3Service7.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service3.createSignedDeleteUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", date16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "s3.amazonaws.com" + "'", str11, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str14, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "x-amz-meta-" + "'", str15, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 04 08:19:58 BRT 2021");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray21 = restS3Service19.listObjects(s3Bucket20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory33 = objectMapper18.getNodeFactory();
        org.codehaus.jackson.JsonGenerator jsonGenerator34 = null;
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder35.dimensions((java.util.List<java.lang.String>) strList38);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = restS3Service42.getProviderCredentials();
        boolean boolean45 = restS3Service42.isBucketAccessible("");
        java.lang.String str46 = restS3Service42.getRestMetadataPrefix();
        boolean boolean47 = restS3Service42.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager48 = restS3Service42.getHttpConnectionManager();
        java.lang.String str49 = restS3Service42.getEndpoint();
        java.lang.String str50 = restS3Service42.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig51 = null;
        org.codehaus.jackson.JsonFactory jsonFactory52 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider53 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider54 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig55 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig56 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory52, serializerProvider53, deserializerProvider54, serializationConfig55, deserializationConfig56);
        org.codehaus.jackson.map.ObjectWriter objectWriter58 = objectMapper57.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter59 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter60 = objectMapper57.writer(prettyPrinter59);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher61 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service42, s3SegmentPusherConfig51, objectMapper57);
        org.codehaus.jackson.map.SerializationConfig serializationConfig62 = objectMapper57.copySerializationConfig();
        // The following exception was thrown during execution in test generation
        try {
            objectMapper18.writeValue(jsonGenerator34, (java.lang.Object) strList38, serializationConfig62);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: [no message for java.lang.NullPointerException]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(jsonNodeFactory33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(providerCredentials43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "x-amz-meta-" + "'", str46, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "s3.amazonaws.com" + "'", str49, "s3.amazonaws.com");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(objectWriter58);
        org.junit.Assert.assertNotNull(objectWriter60);
        org.junit.Assert.assertNotNull(serializationConfig62);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        long long4 = file1.length();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        java.lang.String str8 = restS3Service4.getRestMetadataPrefix();
        boolean boolean9 = restS3Service4.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager10 = restS3Service4.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2, jets3tProperties11, hostConfiguration12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jets3t.service.model.MultipartUpload> multipartUploadList15 = restS3Service13.multipartListUploads("http://s3.amazonaws.com/%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error: java.lang.NullPointerException");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-amz-meta-" + "'", str8, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager10);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable2 = null;
        java.lang.String[] strArray10 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str11 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray10);
        java.lang.String str12 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"content-length-range\", 97, 100]", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.emitter.service.AlertBuilder alertBuilder13 = emittingLogger1.makeAlert(throwable2, "s3.amazonaws.com", (java.lang.Object[]) strArray10);
            org.junit.Assert.fail("Expected exception of type com.metamx.common.ISE; message: Emitter not initialized!  Cannot alert.  Please make sure to call class com.metamx.emitter.EmittingLogger.registerEmitter()");
        } catch (com.metamx.common.ISE e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str11, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str12, "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "");
        java.lang.Class<?> wildcardClass12 = file9.getClass();
        org.codehaus.jackson.type.JavaType javaType13 = objectMapper7.constructType((java.lang.reflect.Type) wildcardClass12);
        org.codehaus.jackson.map.ObjectWriter objectWriter14 = objectMapper0.typedWriter(javaType13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        java.text.DateFormat dateFormat19 = null;
        objectMapper15.setDateFormat(dateFormat19);
        org.codehaus.jackson.node.ArrayNode arrayNode21 = objectMapper15.createArrayNode();
        org.codehaus.jackson.JsonParser jsonParser22 = objectMapper0.treeAsTokens((org.codehaus.jackson.JsonNode) arrayNode21);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(javaType13);
        org.junit.Assert.assertNotNull(objectWriter14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(arrayNode21);
        org.junit.Assert.assertNotNull(jsonParser22);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        boolean boolean6 = file1.setExecutable(false, true);
        boolean boolean7 = file1.createNewFile();
        java.lang.String str8 = file1.getAbsolutePath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str8, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        boolean boolean6 = file1.setExecutable(false, true);
        boolean boolean7 = file1.createNewFile();
        java.io.File file9 = new java.io.File(file1, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        java.io.File file10 = file9.getAbsoluteFile();
        java.lang.String str11 = file10.getCanonicalPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file9.toString(), "hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]" + "'", str11, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"content-length-range\", -226, -226]");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean5 = emittingLogger4.isInfoEnabled();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        java.lang.Object obj24 = null;
        java.lang.String str25 = objectMapper21.writeValueAsString(obj24);
        com.metamx.druid.client.DataSegment.Builder builder26 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder26.dimensions((java.util.List<java.lang.String>) strList29);
        com.metamx.emitter.EmittingLogger emittingLogger33 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray35 = new java.lang.Object[] { objectMapper11, deserializerProvider20, objectMapper21, strList29, emittingLogger33, (byte) 1 };
        emittingLogger8.error(throwable9, "{\"\": \"s3.amazonaws.com\"}", objArray35);
        java.lang.Throwable throwable37 = null;
        java.io.File file40 = new java.io.File("hi!");
        java.io.File file42 = new java.io.File(file40, "");
        java.io.File file43 = file40.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode45 = objectMapper44.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.jets3t.service.security.ProviderCredentials providerCredentials53 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service54 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials53);
        org.jets3t.service.security.ProviderCredentials providerCredentials55 = restS3Service54.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager56 = null;
        restS3Service54.setHttpConnectionManager(httpConnectionManager56);
        java.lang.Object[] objArray60 = new java.lang.Object[] { file43, objectMapper44, objectMapper52, restS3Service54, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger8.info(throwable37, "", objArray60);
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider66 = objectMapper63.getSerializerProvider();
        java.text.DateFormat dateFormat67 = null;
        objectMapper63.setDateFormat(dateFormat67);
        org.codehaus.jackson.node.ArrayNode arrayNode69 = objectMapper63.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder70 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder72 = builder70.size(0L);
        java.lang.Object[] objArray73 = new java.lang.Object[] { objectMapper63, builder70 };
        emittingLogger8.trace("null", objArray73);
        emittingLogger4.trace("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", objArray73);
        emittingLogger1.wtf("s3.amazonaws.com", objArray73);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "null" + "'", str25, "null");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "hi!");
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "hi!");
        org.junit.Assert.assertNotNull(file43);
// flaky:         org.junit.Assert.assertEquals(file43.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNull(providerCredentials55);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(serializerProvider66);
        org.junit.Assert.assertNotNull(arrayNode69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(objArray73);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient6 = restS3Service1.getHttpClient();
        java.util.Calendar calendar9 = null;
        java.util.Calendar calendar10 = null;
        java.lang.String[] strArray15 = new java.lang.String[] { "[\"content-length-range\", 1, 0]", "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" };
        java.lang.String[] strArray21 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str22 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object25 = restS3Service1.getObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", ":", calendar9, calendar10, strArray15, strArray21, (java.lang.Long) 0L, (java.lang.Long) 80259510272L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str22, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver7 = null;
        objectMapper6.setSubtypeResolver(subtypeResolver7);
        com.metamx.emitter.EmittingLogger emittingLogger10 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean11 = emittingLogger10.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper13.writer(prettyPrinter15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader18 = objectMapper13.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter21 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter22 = objectMapper19.writer(prettyPrinter21);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray24 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper19.enable(featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper13.disable(featureArray24);
        emittingLogger10.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper6.disable(featureArray24);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        java.lang.Object obj32 = null;
        java.lang.String str33 = objectMapper29.writeValueAsString(obj32);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = objectMapper29.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider40);
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper29.setSerializerProvider(serializerProvider39);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver43 = objectMapper29.getSubtypeResolver();
        objectMapper6.setSubtypeResolver(subtypeResolver43);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectReader18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectWriter22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "null" + "'", str33, "null");
        org.junit.Assert.assertNotNull(deserializerProvider34);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(subtypeResolver43);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        java.lang.String str8 = file1.getCanonicalPath();
        java.io.File file10 = new java.io.File(file1, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        java.lang.String str11 = file1.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!" + "'", str8, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file10.toString(), "hi!/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2);
        restS3Service3.setDevPayUserToken("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = restS3Service3.createUnsignedObjectUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 100, 4]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.disableMFAForVersionedBucket("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "{\"\": \"s3.amazonaws.com\"}/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.String str3 = file2.getPath();
        boolean boolean5 = file2.setWritable(true);
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str3, "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        boolean boolean7 = file1.renameTo(file6);
        java.lang.String str8 = file6.getName();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.lang.String str2 = org.jets3t.service.S3Service.buildPostForm("<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 100, 4]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<form action=\"https://<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str2, "<form action=\"https://<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger7 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory13 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig16 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory13, serializerProvider14, deserializerProvider15, serializationConfig16, deserializationConfig17);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        java.lang.Object obj23 = null;
        java.lang.String str24 = objectMapper20.writeValueAsString(obj23);
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.emitter.EmittingLogger emittingLogger32 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray34 = new java.lang.Object[] { objectMapper10, deserializerProvider19, objectMapper20, strList28, emittingLogger32, (byte) 1 };
        emittingLogger7.error(throwable8, "{\"\": \"s3.amazonaws.com\"}", objArray34);
        emittingLogger4.debug("http://s3.amazonaws.com//hi%21?torrent", objArray34);
        emittingLogger1.trace("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", objArray34);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(deserializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "null" + "'", str24, "null");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(objArray34);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper5.setSerializationInclusion(inclusion7);
        java.text.DateFormat dateFormat9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.writer(dateFormat9);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig19 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider17, deserializerProvider18, serializationConfig19, deserializationConfig20);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig23 = null;
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.SerializerFactory serializerFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.setSerializerFactory(serializerFactory31);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig33 = objectMapper30.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider22, serializationConfig23, deserializationConfig33);
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider42 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig43 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider41, deserializerProvider42, serializationConfig43, deserializationConfig44);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = objectMapper45.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig47 = null;
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper49.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider52, deserializerProvider53);
        org.codehaus.jackson.map.SerializerFactory serializerFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.setSerializerFactory(serializerFactory55);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig57 = objectMapper54.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider46, serializationConfig47, deserializationConfig57);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider15, deserializerProvider46);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider15, deserializerProvider60);
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper61.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        java.lang.Object obj66 = null;
        java.lang.String str67 = objectMapper63.writeValueAsString(obj66);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider68 = objectMapper63.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider62, deserializerProvider68);
        org.codehaus.jackson.FormatSchema formatSchema70 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter71 = objectMapper69.writer(formatSchema70);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker72 = objectMapper69.getVisibilityChecker();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(deserializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializationConfig33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(deserializerProvider46);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(serializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(deserializationConfig57);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "null" + "'", str67, "null");
        org.junit.Assert.assertNotNull(deserializerProvider68);
        org.junit.Assert.assertNotNull(objectWriter71);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker72);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        boolean boolean6 = file1.delete();
        java.net.URI uRI7 = file1.toURI();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putVersionedObjectAcl("{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}", "hi!/http:/s3.amazonaws.com", "hi!/http:/s3.amazonaws.com", accessControlList7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.io.File file2 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "hi!");
        long long3 = file2.getUsableSpace();
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        java.lang.String str7 = restS3Service5.getInvokingApplicationDescription();
        restS3Service5.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider16);
        org.codehaus.jackson.map.SerializerFactory serializerFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.setSerializerFactory(serializerFactory18);
        org.codehaus.jackson.PrettyPrinter prettyPrinter20 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter21 = objectMapper19.prettyPrintingWriter(prettyPrinter20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.disableDefaultTyping();
        java.io.File file26 = new java.io.File("hi!");
        java.io.File file28 = new java.io.File(file26, "");
        java.lang.Class<?> wildcardClass29 = file26.getClass();
        org.codehaus.jackson.type.JavaType javaType30 = objectMapper24.constructType((java.lang.reflect.Type) wildcardClass29);
        boolean boolean31 = objectMapper19.canDeserialize(javaType30);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider32 = null;
        objectMapper19.setFilters(filterProvider32);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher34 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig10, objectMapper19);
        java.lang.String str35 = restS3Service5.getInvokingApplicationDescription();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper37.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper39.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.disableDefaultTyping();
        java.lang.Object obj42 = null;
        java.lang.String str43 = objectMapper39.writeValueAsString(obj42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper39.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider49 = objectMapper46.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory45, serializerProvider49, deserializerProvider50);
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper39.setSerializerProvider(serializerProvider49);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig53 = objectMapper39.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper37.setDeserializationConfig(deserializationConfig53);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher55 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig36, objectMapper54);
        restS3Service5.setRequesterPaysEnabled(true);
        boolean boolean58 = file2.equals((java.lang.Object) true);
        org.junit.Assert.assertEquals(file2.getParent(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"\": \"s3.amazonaws.com\"}/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 80259506176L + "'", long3 == 80259506176L);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectWriter21);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNull("file26.getParent() == null", file26.getParent());
        org.junit.Assert.assertEquals(file26.toString(), "hi!");
        org.junit.Assert.assertNull("file28.getParent() == null", file28.getParent());
        org.junit.Assert.assertEquals(file28.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(javaType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null" + "'", str43, "null");
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(serializerProvider49);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(deserializationConfig53);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider5 = objectMapper2.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider5, deserializerProvider6);
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = objectMapper28.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider20, serializationConfig21, deserializationConfig31);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig41 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38, serializerProvider39, deserializerProvider40, serializationConfig41, deserializationConfig42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper43.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig45 = null;
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.codehaus.jackson.map.SerializerFactory serializerFactory53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.setSerializerFactory(serializerFactory53);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig55 = objectMapper52.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider44, serializationConfig45, deserializationConfig55);
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider13, deserializerProvider44);
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider5, deserializerProvider44);
        java.lang.Class<?> wildcardClass59 = deserializerProvider44.getClass();
        com.metamx.emitter.EmittingLogger emittingLogger60 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass59);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(serializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(deserializationConfig31);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(deserializationConfig55);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder5 = builder3.size(0L);
        org.joda.time.Interval interval6 = null;
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.interval(interval6);
        java.lang.String[] strArray11 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder5.metrics((java.util.List<java.lang.String>) strList12);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "null", credentialsProvider17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service18.renameMetadataKeys(strMap21);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder5.loadSpec(strMap23);
        java.util.List<java.lang.String> strList25 = null;
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder27.dimensions((java.util.List<java.lang.String>) strList30);
        java.lang.String str33 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList30);
        com.metamx.druid.shard.ShardSpec shardSpec34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment36 = new com.metamx.druid.client.DataSegment("[\"content-length-range\", 10, 47]", interval1, "hi!", strMap23, strList25, (java.util.List<java.lang.String>) strList30, shardSpec34, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str33, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider14);
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode17 = objectMapper16.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema18 = null;
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper16.schemaBasedReader(formatSchema18);
        byte[] byteArray21 = objectMapper16.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper16.disable(featureArray22);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = objectMapper16.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory27 = objectMapper25.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper25.enableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig29 = objectMapper28.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        java.io.File file36 = new java.io.File("hi!");
        java.io.File file38 = new java.io.File(file36, "");
        java.lang.Class<?> wildcardClass39 = file36.getClass();
        org.codehaus.jackson.type.JavaType javaType40 = objectMapper34.constructType((java.lang.reflect.Type) wildcardClass39);
        com.metamx.emitter.EmittingLogger emittingLogger41 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass39);
        org.codehaus.jackson.type.JavaType javaType42 = objectMapper30.constructType((java.lang.reflect.Type) wildcardClass39);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig43 = objectMapper30.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider13, deserializerProvider24, serializationConfig29, deserializationConfig43);
        org.codehaus.jackson.JsonFactory jsonFactory45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider49 = objectMapper46.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider54 = objectMapper51.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory55 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider56 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider57 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig58 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory55, serializerProvider56, deserializerProvider57, serializationConfig58, deserializationConfig59);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider61 = objectMapper60.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig62 = null;
        org.codehaus.jackson.JsonFactory jsonFactory63 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper64.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = objectMapper64.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider67 = objectMapper64.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider68 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory63, serializerProvider67, deserializerProvider68);
        org.codehaus.jackson.map.SerializerFactory serializerFactory70 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = objectMapper69.setSerializerFactory(serializerFactory70);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig72 = objectMapper69.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory50, serializerProvider54, deserializerProvider61, serializationConfig62, deserializationConfig72);
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory45, serializerProvider49, deserializerProvider61);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider75 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = objectMapper76.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig78 = objectMapper76.getSerializationConfig();
        org.codehaus.jackson.JsonFactory jsonFactory79 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = objectMapper80.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = objectMapper80.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider83 = objectMapper80.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider84 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory79, serializerProvider83, deserializerProvider84);
        org.codehaus.jackson.map.SerializerFactory serializerFactory86 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = objectMapper85.setSerializerFactory(serializerFactory86);
        org.codehaus.jackson.PrettyPrinter prettyPrinter88 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter89 = objectMapper87.prettyPrintingWriter(prettyPrinter88);
        org.codehaus.jackson.JsonFactory jsonFactory90 = objectMapper87.getJsonFactory();
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig91 = objectMapper87.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper92 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider49, deserializerProvider75, serializationConfig78, deserializationConfig91);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(objectNode17);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(deserializerProvider24);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(jsonNodeFactory27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializationConfig29);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "hi!");
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(javaType40);
        org.junit.Assert.assertNotNull(javaType42);
        org.junit.Assert.assertNotNull(deserializationConfig43);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(serializerProvider49);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(serializerProvider54);
        org.junit.Assert.assertNotNull(deserializerProvider61);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(objectMapper66);
        org.junit.Assert.assertNotNull(serializerProvider67);
        org.junit.Assert.assertNotNull(objectMapper71);
        org.junit.Assert.assertNotNull(deserializationConfig72);
        org.junit.Assert.assertNotNull(objectMapper77);
        org.junit.Assert.assertNotNull(serializationConfig78);
        org.junit.Assert.assertNotNull(objectMapper81);
        org.junit.Assert.assertNotNull(objectMapper82);
        org.junit.Assert.assertNotNull(serializerProvider83);
        org.junit.Assert.assertNotNull(objectMapper87);
        org.junit.Assert.assertNotNull(objectWriter89);
        org.junit.Assert.assertNotNull(jsonFactory90);
        org.junit.Assert.assertNotNull(deserializationConfig91);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema4 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter5 = objectMapper3.writer(formatSchema4);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper3.setSerializationInclusion(inclusion6);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectWriter5);
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        java.lang.Object obj26 = null;
        java.lang.String str27 = objectMapper23.writeValueAsString(obj26);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = objectMapper23.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper23.setSerializerProvider(serializerProvider33);
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider38 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig40 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider38, deserializerProvider39, serializationConfig40, deserializationConfig41);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider43 = objectMapper42.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper36.setDeserializerProvider(deserializerProvider43);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher45 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig22, objectMapper36);
        java.lang.String str46 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service52 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials51);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = restS3Service52.renameMetadataKeys(strMap53);
        org.jets3t.service.security.ProviderCredentials providerCredentials55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = restS3Service1.createSignedUrl("[\"content-length-range\", 100, 4]", "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", strMap54, providerCredentials55, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "null" + "'", str27, "null");
        org.junit.Assert.assertNotNull(deserializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strMap54);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        java.lang.String str5 = restS3Service1.getInvokingApplicationDescription();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getInvokingApplicationDescription();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        org.jets3t.service.Jets3tProperties jets3tProperties9 = restS3Service1.getJetS3tProperties();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider10 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider10);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jets3tProperties9);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on('/');
        org.codehaus.jackson.JsonFactory jsonFactory2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider6 = objectMapper3.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory2, serializerProvider6, deserializerProvider7);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver9 = null;
        objectMapper8.setSubtypeResolver(subtypeResolver9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        java.text.DateFormat dateFormat15 = null;
        objectMapper11.setDateFormat(dateFormat15);
        org.codehaus.jackson.node.ArrayNode arrayNode17 = objectMapper11.createArrayNode();
        org.codehaus.jackson.JsonParser jsonParser18 = objectMapper8.treeAsTokens((org.codehaus.jackson.JsonNode) arrayNode17);
        java.lang.String str19 = joiner1.join((java.lang.Iterable<org.codehaus.jackson.JsonNode>) arrayNode17);
        com.google.common.base.Joiner.MapJoiner mapJoiner21 = joiner1.withKeyValueSeparator("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent");
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(serializerProvider6);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(arrayNode17);
        org.junit.Assert.assertNotNull(jsonParser18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(mapJoiner21);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        boolean boolean4 = file2.setLastModified(1636024766000L);
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com.s3.amazonaws.com/?torrent/http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com.s3.amazonaws.com/?torrent/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file5 = new java.io.File(file3, "");
        file5.deleteOnExit();
        boolean boolean7 = file5.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper7.reader(jsonNodeFactory11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray16 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enable(featureArray16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper7.enable(featureArray16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.io.File file21 = new java.io.File("hi!");
        java.io.File file23 = new java.io.File(file21, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file25 = new java.io.File(file23, "");
        file25.deleteOnExit();
        boolean boolean27 = file25.canExecute();
        com.metamx.druid.client.DataSegment dataSegment28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment29 = s3SegmentPusher19.push(file25, dataSegment28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "hi!");
        org.junit.Assert.assertEquals(file23.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file23.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file25.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file25.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        boolean boolean7 = file1.renameTo(file6);
        long long8 = file6.getFreeSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = file1.canRead();
        boolean boolean4 = file1.setReadable(false);
        java.io.File file5 = null;
        java.io.File file7 = new java.io.File(file5, "x-amz-meta-");
        boolean boolean8 = file1.renameTo(file7);
        java.io.File file10 = new java.io.File(file1, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        long long11 = file10.getFreeSpace();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(file10.getParent(), "http:/s3.amazonaws.com/hi%21?torrent/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file10.toString(), "http:/s3.amazonaws.com/hi%21?torrent/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 0, 100]", credentialsProvider2);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11);
        java.lang.String str15 = restS3Service14.getRestHeaderPrefix();
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "x-amz-" + "'", str15, "x-amz-");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.Version version8 = objectMapper0.version();
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.SerializationConfig serializationConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.setSerializationConfig(serializationConfig6);
        org.codehaus.jackson.map.SerializationConfig.Feature feature8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.configure(feature8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.acl.AccessControlList accessControlList22 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.putVersionedObjectAcl("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}", accessControlList22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.io.File file1 = new java.io.File("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        boolean boolean2 = file1.canRead();
        java.lang.String str3 = file1.getCanonicalPath();
        boolean boolean6 = file1.setExecutable(true, false);
        org.junit.Assert.assertEquals(file1.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file1.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-" + "'", str3, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 100, 4]", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object5 = restS3Service3.getObjectDetailsWithSignedUrl("hi!/http:/s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: Request Error: java.lang.IllegalArgumentException: host parameter is null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = restS3Service3.getAWSCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        boolean boolean12 = restS3Service9.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service9.getProviderCredentials();
        java.lang.String str16 = restS3Service9.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean17 = restS3Service9.isShutdown();
        java.util.Date date18 = restS3Service9.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = restS3Service3.createSignedDeleteUrl("<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", providerCredentials7, date18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials4);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str16, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 04 08:20:03 BRT 2021");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.delete();
        long long4 = file2.length();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        boolean boolean20 = restS3Service19.isHttpsOnly();
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider27 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider30 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider33 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service35 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials34);
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = restS3Service35.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager37 = null;
        restS3Service35.setHttpConnectionManager(httpConnectionManager37);
        org.jets3t.service.Jets3tProperties jets3tProperties39 = restS3Service35.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration40 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service41 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials31, "", credentialsProvider33, jets3tProperties39, hostConfiguration40);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider30, jets3tProperties39);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service43 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider27, jets3tProperties39);
        org.jets3t.service.security.ProviderCredentials providerCredentials44 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials44);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = restS3Service45.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager47 = null;
        restS3Service45.setHttpConnectionManager(httpConnectionManager47);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager49 = null;
        restS3Service45.setHttpConnectionManager(httpConnectionManager49);
        boolean boolean51 = restS3Service45.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder52 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder54 = builder52.size(0L);
        org.joda.time.Interval interval55 = null;
        com.metamx.druid.client.DataSegment.Builder builder56 = builder54.interval(interval55);
        java.lang.String[] strArray60 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder54.metrics((java.util.List<java.lang.String>) strList61);
        org.jets3t.service.security.ProviderCredentials providerCredentials64 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider66 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service67 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials64, "null", credentialsProvider66);
        org.jets3t.service.security.ProviderCredentials providerCredentials68 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service69 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials68);
        java.util.Map<java.lang.String, java.lang.Object> strMap70 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap71 = restS3Service69.renameMetadataKeys(strMap70);
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = restS3Service67.renameMetadataKeys(strMap70);
        com.metamx.druid.client.DataSegment.Builder builder73 = builder54.loadSpec(strMap72);
        java.util.Map<java.lang.String, java.lang.Object> strMap74 = restS3Service45.renameMetadataKeys(strMap72);
        java.util.Map<java.lang.String, java.lang.Object> strMap75 = restS3Service43.renameMetadataKeys(strMap72);
        org.jets3t.service.security.ProviderCredentials providerCredentials76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = restS3Service19.createSignedUrl("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "[\"content-length-range\", 58, 1]", "<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", strMap72, providerCredentials76, 80259563520L, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(providerCredentials36);
        org.junit.Assert.assertNotNull(jets3tProperties39);
        org.junit.Assert.assertNull(providerCredentials46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strMap75);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode7 = objectMapper6.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper6.schemaBasedReader(formatSchema8);
        byte[] byteArray11 = objectMapper6.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper6.reader(formatSchema12);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher14 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper6);
        java.lang.Class<?> wildcardClass15 = objectMapper6.getClass();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objectNode7);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        java.io.File file4 = new java.io.File(file1, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        boolean boolean5 = file1.mkdir();
        java.lang.String str6 = file1.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file4.toString(), "hi!/{\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider5 = objectMapper2.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig9 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider7, deserializerProvider8, serializationConfig9, deserializationConfig10);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = objectMapper11.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig13 = null;
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider18 = objectMapper15.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider18, deserializerProvider19);
        org.codehaus.jackson.map.SerializerFactory serializerFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.setSerializerFactory(serializerFactory21);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig23 = objectMapper20.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider5, deserializerProvider12, serializationConfig13, deserializationConfig23);
        org.codehaus.jackson.JsonFactory jsonFactory25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider29 = objectMapper26.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig33 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider31, deserializerProvider32, serializationConfig33, deserializationConfig34);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig37 = null;
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper39.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider42 = objectMapper39.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider43 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38, serializerProvider42, deserializerProvider43);
        org.codehaus.jackson.map.SerializerFactory serializerFactory45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper44.setSerializerFactory(serializerFactory45);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig47 = objectMapper44.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider29, deserializerProvider36, serializationConfig37, deserializationConfig47);
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider5, deserializerProvider36);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig50 = objectMapper49.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper49.getSerializerProvider();
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(serializerProvider5);
        org.junit.Assert.assertNotNull(deserializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(serializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(deserializationConfig23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(serializerProvider29);
        org.junit.Assert.assertNotNull(deserializerProvider36);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(serializerProvider42);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(deserializationConfig47);
        org.junit.Assert.assertNotNull(deserializationConfig50);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(serializerProvider52);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.io.File file1 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        java.nio.file.Path path2 = file1.toPath();
        boolean boolean3 = file1.createNewFile();
        java.io.File file5 = new java.io.File(file1, "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
        java.net.URL uRL6 = file5.toURL();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertNotNull(path2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(file5.getParent(), "{\"\": \"s3.amazonaws.com\"}/[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file5.toString(), "{\"\": \"s3.amazonaws.com\"}/[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
        org.junit.Assert.assertNotNull(uRL6);
// flaky:         org.junit.Assert.assertEquals(uRL6.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"\": \"s3.amazonaws.com\"}/[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        restS3Service18.setRequesterPaysEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk29 = restS3Service18.listVersionedObjectsChunked("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", 80259567616L, "[\"content-length-range\", 0, 100]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str15 = restS3Service10.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod16 = null;
        restS3Service10.authorizeHttpRequest(httpMethod16);
        boolean boolean18 = restS3Service10.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider8, jets3tProperties19, hostConfiguration20);
        s3SegmentPusher5.s3Client = restS3Service21;
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service26.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager28);
        java.lang.String str30 = restS3Service26.getEndpoint();
        java.lang.String str33 = restS3Service26.createTorrentUrl("", "");
        java.lang.String str34 = restS3Service26.getRestMetadataPrefix();
        boolean boolean35 = restS3Service26.isShutdown();
        java.util.Date date36 = restS3Service26.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = restS3Service21.createSignedGetUrl("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", date36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jets3tProperties19);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "s3.amazonaws.com" + "'", str30, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str33, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "x-amz-meta-" + "'", str34, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Thu Nov 04 08:20:04 BRT 2021");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory7 = objectMapper5.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper3.reader(jsonNodeFactory7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray12 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper9.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper3.enable(featureArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper0.enable(featureArray12);
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper15.writer();
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper15.setSerializerFactory(serializerFactory17);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonNodeFactory7);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        java.lang.String str8 = restS3Service4.getEndpoint();
        java.lang.String str11 = restS3Service4.createTorrentUrl("", "");
        java.lang.String str12 = restS3Service4.getRestMetadataPrefix();
        java.util.Date date13 = restS3Service4.getCurrentTimeWithOffset();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str20 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str28 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray27);
        java.lang.String str29 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = org.jets3t.service.S3Service.buildPostForm("{\"\": \"s3.amazonaws.com\"}/hi!", "x-amz-", providerCredentials2, date13, strArray19, strArray27, "x-amz-meta-", false, true, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str11, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "x-amz-meta-" + "'", str12, "x-amz-meta-");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 04 08:20:04 BRT 2021");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str20, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str28, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str29, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str17 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str18 = restS3Service1.getDevPayProductToken();
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        java.lang.String str27 = restS3Service23.getEndpoint();
        java.lang.String str30 = restS3Service23.createTorrentUrl("", "");
        java.lang.String str31 = restS3Service23.getRestMetadataPrefix();
        boolean boolean32 = restS3Service23.isShutdown();
        java.util.Date date33 = restS3Service23.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = restS3Service1.createSignedHeadUrl("x-amz-", "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]", providerCredentials21, date33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "s3.amazonaws.com" + "'", str27, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str30, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "x-amz-meta-" + "'", str31, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 04 08:20:04 BRT 2021");
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        java.io.File file4 = file1.getAbsoluteFile();
        boolean boolean7 = file1.setWritable(false, true);
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service8.getProviderCredentials();
        boolean boolean11 = restS3Service8.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service8.getProviderCredentials();
        java.lang.String str15 = restS3Service8.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean16 = restS3Service8.isShutdown();
        java.util.Date date17 = restS3Service8.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service3.createSignedGetUrl("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", providerCredentials6, date17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str15, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:20:05 BRT 2021");
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service4.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient10 = null;
        restS3Service4.setHttpClient(httpClient10);
        org.jets3t.service.Jets3tProperties jets3tProperties12 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"\"}", credentialsProvider2, jets3tProperties12);
        org.jets3t.service.model.S3Bucket s3Bucket14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray18 = restS3Service13.listObjects(s3Bucket14, "[\"content-length-range\", -226, -226]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", 80259506176L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jets3tProperties12);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        int int14 = restS3Service3.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.deleteBucketPolicy("[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]/&policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2, jets3tProperties8);
        boolean boolean10 = restS3Service9.isAuthenticatedConnection();
        java.lang.Class<?> wildcardClass11 = restS3Service9.getClass();
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = restS3Service12.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager14 = null;
        restS3Service12.setHttpConnectionManager(httpConnectionManager14);
        java.util.Date date16 = restS3Service12.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = restS3Service1.createSignedHeadUrl("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "/", date16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertNull(providerCredentials13);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 04 08:20:06 BRT 2021");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "null", credentialsProvider20);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service23.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service21.renameMetadataKeys(strMap24);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        com.metamx.druid.client.DataSegment.Builder builder28 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder30 = builder28.size(0L);
        com.metamx.druid.client.DataSegment.Builder builder31 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials32 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service33 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials32);
        org.jets3t.service.security.ProviderCredentials providerCredentials34 = restS3Service33.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager35 = null;
        restS3Service33.setHttpConnectionManager(httpConnectionManager35);
        java.util.List<java.lang.String> strList37 = restS3Service33.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder38 = builder31.dimensions(strList37);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder30.dimensions(strList37);
        com.metamx.druid.client.DataSegment.Builder builder41 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.metamx.druid.client.DataSegment.Builder builder46 = builder41.dimensions((java.util.List<java.lang.String>) strList44);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder46.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder50 = builder48.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder51 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder51.dimensions((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder50.metrics((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.client.DataSegment.Builder builder58 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.metamx.druid.client.DataSegment.Builder builder63 = builder58.dimensions((java.util.List<java.lang.String>) strList61);
        com.metamx.druid.client.DataSegment.Builder builder64 = builder57.metrics((java.util.List<java.lang.String>) strList61);
        java.lang.String str65 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.util.List<java.lang.String>) strList61);
        com.metamx.druid.shard.ShardSpec shardSpec66 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment68 = new com.metamx.druid.client.DataSegment("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", interval1, "x-amz-", strMap26, strList37, (java.util.List<java.lang.String>) strList61, shardSpec66, 80259571712L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(providerCredentials34);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\": \"\"}" + "'", str65, "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\": \"\"}");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.metamx.druid.client.DataSegment.Builder builder8 = builder3.dimensions((java.util.List<java.lang.String>) strList6);
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder8.shardSpec(shardSpec11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder8.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder16 = builder8.dataSource("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        com.metamx.druid.client.DataSegment.Builder builder18 = builder16.dataSource("");
        com.metamx.druid.client.DataSegment.Builder builder20 = builder18.dataSource("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = restS3Service22.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager24);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager26);
        boolean boolean28 = restS3Service22.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder29 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.size(0L);
        org.joda.time.Interval interval32 = null;
        com.metamx.druid.client.DataSegment.Builder builder33 = builder31.interval(interval32);
        java.lang.String[] strArray37 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder31.metrics((java.util.List<java.lang.String>) strList38);
        org.jets3t.service.security.ProviderCredentials providerCredentials41 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials41, "null", credentialsProvider43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service46 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = restS3Service46.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service44.renameMetadataKeys(strMap47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder31.loadSpec(strMap49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = restS3Service22.renameMetadataKeys(strMap49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder18.loadSpec(strMap51);
        com.metamx.druid.client.DataSegment.Builder builder53 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder55 = builder53.size(0L);
        org.joda.time.Interval interval56 = null;
        com.metamx.druid.client.DataSegment.Builder builder57 = builder55.interval(interval56);
        java.lang.String[] strArray61 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.metamx.druid.client.DataSegment.Builder builder64 = builder55.metrics((java.util.List<java.lang.String>) strList62);
        com.metamx.druid.client.DataSegment.Builder builder65 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder67 = builder65.size(0L);
        org.joda.time.Interval interval68 = null;
        com.metamx.druid.client.DataSegment.Builder builder69 = builder67.interval(interval68);
        java.lang.String[] strArray73 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.metamx.druid.client.DataSegment.Builder builder76 = builder67.metrics((java.util.List<java.lang.String>) strList74);
        com.metamx.druid.shard.ShardSpec shardSpec77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment79 = new com.metamx.druid.client.DataSegment("", interval1, "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]", strMap51, (java.util.List<java.lang.String>) strList62, (java.util.List<java.lang.String>) strList74, shardSpec77, 80259567616L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(providerCredentials23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties10 = restS3Service1.getJetS3tProperties();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig11 = null;
        org.codehaus.jackson.JsonFactory jsonFactory12 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig15 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider13, deserializerProvider14, serializationConfig15, deserializationConfig16);
        org.codehaus.jackson.map.ObjectWriter objectWriter18 = objectMapper17.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper17.setSerializationInclusion(inclusion19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig11, objectMapper20);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.JsonFactory jsonFactory23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider27 = objectMapper24.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory23, serializerProvider27, deserializerProvider28);
        org.codehaus.jackson.map.SerializerFactory serializerFactory30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.setSerializerFactory(serializerFactory30);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper31.setAnnotationIntrospector(annotationIntrospector32);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher34 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig22, objectMapper31);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jets3tProperties10);
        org.junit.Assert.assertNotNull(objectWriter18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(serializerProvider27);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper33);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        java.util.Date date28 = restS3Service24.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = restS3Service19.createSignedDeleteUrl("s3.amazonaws.com", "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]", providerCredentials22, date28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Thu Nov 04 08:20:06 BRT 2021");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval1 = null;
        com.metamx.druid.client.DataSegment.Builder builder2 = builder0.interval(interval1);
        com.metamx.druid.client.DataSegment.Builder builder3 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.metamx.druid.client.DataSegment.Builder builder8 = builder3.dimensions((java.util.List<java.lang.String>) strList6);
        com.metamx.druid.client.DataSegment.Builder builder10 = builder8.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec11 = null;
        com.metamx.druid.client.DataSegment.Builder builder12 = builder8.shardSpec(shardSpec11);
        com.metamx.druid.client.DataSegment.Builder builder14 = builder8.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder15.dimensions((java.util.List<java.lang.String>) strList18);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder20.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder24 = builder22.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder24.metrics((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder32 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.metamx.druid.client.DataSegment.Builder builder37 = builder32.dimensions((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder31.metrics((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder8.metrics((java.util.List<java.lang.String>) strList35);
        com.metamx.druid.client.DataSegment.Builder builder40 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.metamx.druid.client.DataSegment.Builder builder45 = builder40.dimensions((java.util.List<java.lang.String>) strList43);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder45.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder49 = builder47.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder50 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder50.dimensions((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder49.metrics((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder8.dimensions((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder0.metrics((java.util.List<java.lang.String>) strList53);
        org.jets3t.service.security.ProviderCredentials providerCredentials59 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service60 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials59);
        org.jets3t.service.security.ProviderCredentials providerCredentials61 = restS3Service60.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager62 = null;
        restS3Service60.setHttpConnectionManager(httpConnectionManager62);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager64 = null;
        restS3Service60.setHttpConnectionManager(httpConnectionManager64);
        boolean boolean66 = restS3Service60.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder67 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder69 = builder67.size(0L);
        org.joda.time.Interval interval70 = null;
        com.metamx.druid.client.DataSegment.Builder builder71 = builder69.interval(interval70);
        java.lang.String[] strArray75 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.metamx.druid.client.DataSegment.Builder builder78 = builder69.metrics((java.util.List<java.lang.String>) strList76);
        org.jets3t.service.security.ProviderCredentials providerCredentials79 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider81 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service82 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials79, "null", credentialsProvider81);
        org.jets3t.service.security.ProviderCredentials providerCredentials83 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service84 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials83);
        java.util.Map<java.lang.String, java.lang.Object> strMap85 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap86 = restS3Service84.renameMetadataKeys(strMap85);
        java.util.Map<java.lang.String, java.lang.Object> strMap87 = restS3Service82.renameMetadataKeys(strMap85);
        com.metamx.druid.client.DataSegment.Builder builder88 = builder69.loadSpec(strMap87);
        java.util.Map<java.lang.String, java.lang.Object> strMap89 = restS3Service60.renameMetadataKeys(strMap87);
        com.metamx.druid.client.DataSegment.Builder builder90 = builder0.loadSpec(strMap89);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(providerCredentials61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        java.lang.Object obj11 = null;
        java.lang.String str12 = objectMapper8.writeValueAsString(obj11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper8.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver15 = objectMapper14.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper14.setSerializationInclusion(inclusion16);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker18 = objectMapper17.getVisibilityChecker();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig7, objectMapper17);
        org.jets3t.service.Jets3tProperties jets3tProperties20 = restS3Service1.getJetS3tProperties();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = restS3Service1.getBucketLocation("<form action=\"https://<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"x-amz-\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/&location': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null" + "'", str12, "null");
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(subtypeResolver15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker18);
        org.junit.Assert.assertNotNull(jets3tProperties20);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.io.File file2 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "hi!");
        java.lang.String str3 = file2.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{\"\": \"s3.amazonaws.com\"}/hi!" + "'", str3, "{\"\": \"s3.amazonaws.com\"}/hi!");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.enableBucketVersioning("[\"content-length-range\", 100, 4]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(httpConnectionManager7);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        java.io.Reader reader7 = null;
        org.codehaus.jackson.type.TypeReference typeReference8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper5.readValue(reader7, typeReference8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter6);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration18);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service19.deleteBucket(s3Bucket20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.io.File file1 = new java.io.File(":");
        boolean boolean2 = file1.mkdir();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), ":");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getRestMetadataPrefix();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "x-amz-meta-" + "'", str3, "x-amz-meta-");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service20.renameMetadataKeys(strMap21);
        boolean boolean23 = restS3Service20.isRequesterPaysEnabled();
        s3SegmentPusher17.s3Client = restS3Service20;
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider29 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider32 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider35 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials36 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service37 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials36);
        org.jets3t.service.security.ProviderCredentials providerCredentials38 = restS3Service37.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager39 = null;
        restS3Service37.setHttpConnectionManager(httpConnectionManager39);
        org.jets3t.service.Jets3tProperties jets3tProperties41 = restS3Service37.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration42 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service43 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials33, "", credentialsProvider35, jets3tProperties41, hostConfiguration42);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials30, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider32, jets3tProperties41);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider29, jets3tProperties41);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service47 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46);
        org.jets3t.service.security.ProviderCredentials providerCredentials48 = restS3Service47.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager49 = null;
        restS3Service47.setHttpConnectionManager(httpConnectionManager49);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager51 = null;
        restS3Service47.setHttpConnectionManager(httpConnectionManager51);
        boolean boolean53 = restS3Service47.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder56 = builder54.size(0L);
        org.joda.time.Interval interval57 = null;
        com.metamx.druid.client.DataSegment.Builder builder58 = builder56.interval(interval57);
        java.lang.String[] strArray62 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.metamx.druid.client.DataSegment.Builder builder65 = builder56.metrics((java.util.List<java.lang.String>) strList63);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider68 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service69 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66, "null", credentialsProvider68);
        org.jets3t.service.security.ProviderCredentials providerCredentials70 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service71 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials70);
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = restS3Service71.renameMetadataKeys(strMap72);
        java.util.Map<java.lang.String, java.lang.Object> strMap74 = restS3Service69.renameMetadataKeys(strMap72);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder56.loadSpec(strMap74);
        java.util.Map<java.lang.String, java.lang.Object> strMap76 = restS3Service47.renameMetadataKeys(strMap74);
        java.util.Map<java.lang.String, java.lang.Object> strMap77 = restS3Service45.renameMetadataKeys(strMap74);
        org.jets3t.service.security.ProviderCredentials providerCredentials78 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials79 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service80 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials79);
        org.jets3t.service.security.ProviderCredentials providerCredentials81 = restS3Service80.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager82 = null;
        restS3Service80.setHttpConnectionManager(httpConnectionManager82);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager84 = null;
        restS3Service80.setHttpConnectionManager(httpConnectionManager84);
        java.lang.String str88 = restS3Service80.createTorrentUrl("", "hi!");
        boolean boolean90 = restS3Service80.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date91 = restS3Service80.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = restS3Service20.createSignedPutUrl("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", strMap74, providerCredentials78, date91, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(providerCredentials38);
        org.junit.Assert.assertNotNull(jets3tProperties41);
        org.junit.Assert.assertNull(providerCredentials48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNull(providerCredentials81);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str88, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(date91);
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Thu Nov 04 08:20:07 BRT 2021");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        boolean boolean9 = restS3Service1.isShutdown();
        int int10 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = restS3Service1.isRequesterPaysBucket("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"[\"content-length-range\", 58, 1]\"]/&requestPayment': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service11.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = null;
        restS3Service11.setHttpConnectionManager(httpConnectionManager13);
        java.lang.String str15 = restS3Service11.getEndpoint();
        java.lang.String str18 = restS3Service11.createTorrentUrl("", "");
        java.lang.String str19 = restS3Service11.getRestMetadataPrefix();
        boolean boolean20 = restS3Service11.isShutdown();
        java.util.Date date21 = restS3Service11.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = restS3Service1.createSignedHeadUrl("", "null", date21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "s3.amazonaws.com" + "'", str15, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str18, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "x-amz-meta-" + "'", str19, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Nov 04 08:20:08 BRT 2021");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = file1.canRead();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        boolean boolean7 = file1.renameTo(file4);
        boolean boolean8 = file4.canExecute();
        long long9 = file4.lastModified();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1636024803000L + "'", long9 == 1636024803000L);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        restS3Service1.setCredentialsProvider(credentialsProvider9);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray14 = restS3Service1.listVersionedObjects("[\"content-length-range\", 58, 1]/null", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/null/?max-keys=1000&versions&prefix=%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D&delimiter=%3Cform%20action%3D%22https%3A%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.model.StorageBucket storageBucket6 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket(storageBucket6);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = file1.exists();
        boolean boolean3 = file1.isAbsolute();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode6 = objectMapper4.readTree(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        org.jets3t.service.model.StorageObject storageObject8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectMaybeAsMultipart("{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", storageObject8, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = objectMapper8.canDeserialize(javaType19);
        java.text.DateFormat dateFormat21 = null;
        objectMapper8.setDateFormat(dateFormat21);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        org.apache.commons.httpclient.HttpMethod httpMethod9 = null;
        restS3Service1.authorizeHttpRequest(httpMethod9);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object14 = restS3Service1.getVersionedObjectDetails("[\"content-length-range\", 97, 100]", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}/?versionId=%5B%22content-length-range%22%2C%2097%2C%20100%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object18 = restS3Service1.getVersionedObject("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", "[\"content-length-range\", 1, 0]", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 1, 0]/?versionId=http%3A%2F%2Fs3.amazonaws.com%2F%255B%2522starts-with%2522%252C%2520%2522%2524%255B%2522starts-with%2522%252C%2520%2522%2524%252Fhome%252FCIN%252Flmps2%252Fsemantic-conflict-study%252FSMAT%252Foutput-test-dest%252Fdruid%252F05168808c278c080c59c19e858d9471b316cd1f5%252Frandoop-modified_4%252Fhi%2521%2522%252C%2520%2522%2522%255D%2522%252C%2520%2522%2522%255D%2Fhttp%253A%2F%2Fs3.amazonaws.com%2Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%2Fhi%252521%253Ftorrent%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.SerializationConfig serializationConfig9 = objectMapper8.getSerializationConfig();
        java.io.File file12 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode14 = objectMapper13.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema15 = null;
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper13.schemaBasedReader(formatSchema15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode18 = objectMapper17.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema19 = null;
        org.codehaus.jackson.map.ObjectReader objectReader20 = objectMapper17.schemaBasedReader(formatSchema19);
        byte[] byteArray22 = objectMapper17.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode23 = objectMapper13.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper13.setSerializationInclusion(inclusion24);
        org.codehaus.jackson.JsonFactory jsonFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider30 = objectMapper27.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory26, serializerProvider30, deserializerProvider31);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider38);
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode41 = objectMapper40.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema42 = null;
        org.codehaus.jackson.map.ObjectReader objectReader43 = objectMapper40.schemaBasedReader(formatSchema42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode45 = objectMapper44.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema46 = null;
        org.codehaus.jackson.map.ObjectReader objectReader47 = objectMapper44.schemaBasedReader(formatSchema46);
        byte[] byteArray49 = objectMapper44.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode50 = objectMapper40.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser51 = objectMapper39.treeAsTokens(jsonNode50);
        org.codehaus.jackson.JsonNode jsonNode52 = objectMapper32.readTree(jsonParser51);
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper53.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper53.disableDefaultTyping();
        java.io.File file57 = new java.io.File("hi!");
        java.io.File file59 = new java.io.File(file57, "");
        java.lang.Class<?> wildcardClass60 = file57.getClass();
        org.codehaus.jackson.type.JavaType javaType61 = objectMapper55.constructType((java.lang.reflect.Type) wildcardClass60);
        org.codehaus.jackson.map.MappingIterator<java.util.Collection<java.lang.String>> strCollectionItor62 = objectMapper13.readValues(jsonParser51, javaType61);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectReader objectReader63 = objectMapper8.readValue(file12, javaType61);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: {\"\": \"s3.amazonaws.com\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializationConfig9);
        org.junit.Assert.assertEquals(file12.getParent(), "{\"\": \"s3.amazonaws.com\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file12.toString(), "{\"\": \"s3.amazonaws.com\"}/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertNotNull(objectNode14);
        org.junit.Assert.assertNotNull(objectReader16);
        org.junit.Assert.assertNotNull(objectNode18);
        org.junit.Assert.assertNotNull(objectReader20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(serializerProvider30);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(objectNode41);
        org.junit.Assert.assertNotNull(objectReader43);
        org.junit.Assert.assertNotNull(objectNode45);
        org.junit.Assert.assertNotNull(objectReader47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode50);
        org.junit.Assert.assertNotNull(jsonParser51);
        org.junit.Assert.assertNotNull(jsonNode52);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNull("file57.getParent() == null", file57.getParent());
        org.junit.Assert.assertEquals(file57.toString(), "hi!");
        org.junit.Assert.assertNull("file59.getParent() == null", file59.getParent());
        org.junit.Assert.assertEquals(file59.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(javaType61);
        org.junit.Assert.assertNotNull(strCollectionItor62);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "{\"\": \"s3.amazonaws.com\"}/hi!");
        long long8 = file7.getUsableSpace();
        java.io.File file10 = new java.io.File(file7, "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]");
        boolean boolean11 = file10.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertEquals(file10.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!/[\"starts-with\", \"$s3.amazonaws.com\", \"\"]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory23 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider24 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider25 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig26 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory23, serializerProvider24, deserializerProvider25, serializationConfig26, deserializationConfig27);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = objectMapper28.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.JsonFactory jsonFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider35 = objectMapper32.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory31, serializerProvider35, deserializerProvider36);
        org.codehaus.jackson.map.SerializerFactory serializerFactory38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper37.setSerializerFactory(serializerFactory38);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig40 = objectMapper37.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider29, serializationConfig30, deserializationConfig40);
        org.codehaus.jackson.JsonFactory jsonFactory42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider46 = objectMapper43.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory47 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider48 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider49 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig50 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory47, serializerProvider48, deserializerProvider49, serializationConfig50, deserializationConfig51);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = objectMapper52.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig54 = null;
        org.codehaus.jackson.JsonFactory jsonFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper56.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper56.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider59 = objectMapper56.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory55, serializerProvider59, deserializerProvider60);
        org.codehaus.jackson.map.SerializerFactory serializerFactory62 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = objectMapper61.setSerializerFactory(serializerFactory62);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig64 = objectMapper61.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory42, serializerProvider46, deserializerProvider53, serializationConfig54, deserializationConfig64);
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider22, deserializerProvider53);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig67 = objectMapper66.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = objectMapper12.setDeserializationConfig(deserializationConfig67);
        org.codehaus.jackson.JsonGenerator.Feature feature69 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = objectMapper68.isEnabled(feature69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(deserializerProvider29);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(serializerProvider35);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(deserializationConfig40);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(serializerProvider46);
        org.junit.Assert.assertNotNull(deserializerProvider53);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(serializerProvider59);
        org.junit.Assert.assertNotNull(objectMapper63);
        org.junit.Assert.assertNotNull(deserializationConfig64);
        org.junit.Assert.assertNotNull(deserializationConfig67);
        org.junit.Assert.assertNotNull(objectMapper68);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        restS3Service1.shutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList12 = restS3Service1.getObjectAcl("[\"content-length-range\", 58, 1]/null", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"content-length-range\", 58, 1]/null/?acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger2 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode8 = objectMapper7.createObjectNode();
        java.lang.Object[] objArray9 = new java.lang.Object[] { providerCredentials5, objectMapper7 };
        emittingLogger2.info(throwable3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        java.io.File file15 = new java.io.File("hi!");
        java.io.File file17 = new java.io.File(file15, "");
        java.lang.Class<?> wildcardClass18 = file15.getClass();
        org.codehaus.jackson.type.JavaType javaType19 = objectMapper13.constructType((java.lang.reflect.Type) wildcardClass18);
        com.metamx.emitter.EmittingLogger emittingLogger21 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig30 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider28, deserializerProvider29, serializationConfig30, deserializationConfig31);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = objectMapper32.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        java.lang.Object obj37 = null;
        java.lang.String str38 = objectMapper34.writeValueAsString(obj37);
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder39.dimensions((java.util.List<java.lang.String>) strList42);
        com.metamx.emitter.EmittingLogger emittingLogger46 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray48 = new java.lang.Object[] { objectMapper24, deserializerProvider33, objectMapper34, strList42, emittingLogger46, (byte) 1 };
        emittingLogger21.error(throwable22, "{\"\": \"s3.amazonaws.com\"}", objArray48);
        java.lang.Throwable throwable50 = null;
        java.io.File file53 = new java.io.File("hi!");
        java.io.File file55 = new java.io.File(file53, "");
        java.io.File file56 = file53.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode58 = objectMapper57.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider64 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider64);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service67 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66);
        org.jets3t.service.security.ProviderCredentials providerCredentials68 = restS3Service67.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager69 = null;
        restS3Service67.setHttpConnectionManager(httpConnectionManager69);
        java.lang.Object[] objArray73 = new java.lang.Object[] { file56, objectMapper57, objectMapper65, restS3Service67, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger21.info(throwable50, "", objArray73);
        java.lang.String str75 = joiner0.join((java.lang.Object) emittingLogger2, (java.lang.Object) javaType19, objArray73);
        com.google.common.base.Joiner joiner77 = null; // flaky: joiner0.useForNull("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector79 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper78.setAnnotationIntrospector(annotationIntrospector79);
        org.codehaus.jackson.node.ArrayNode arrayNode81 = objectMapper80.createArrayNode();
        java.lang.String str82 = null; // flaky: joiner77.join((java.lang.Iterable<org.codehaus.jackson.JsonNode>) arrayNode81);
        java.lang.StringBuilder stringBuilder83 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper84 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode85 = objectMapper84.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema86 = null;
        org.codehaus.jackson.map.ObjectReader objectReader87 = objectMapper84.schemaBasedReader(formatSchema86);
        byte[] byteArray89 = objectMapper84.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray90 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper91 = objectMapper84.disable(featureArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder92 = joiner77.appendTo(stringBuilder83, (java.lang.Object[]) featureArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(objectNode8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "hi!");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(javaType19);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "null" + "'", str38, "null");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNull("file53.getParent() == null", file53.getParent());
        org.junit.Assert.assertEquals(file53.toString(), "hi!");
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "hi!");
        org.junit.Assert.assertNotNull(file56);
// flaky:         org.junit.Assert.assertEquals(file56.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode58);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNull(providerCredentials68);
        org.junit.Assert.assertNotNull(objArray73);
// flaky:         org.junit.Assert.assertNotNull(joiner77);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(arrayNode81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(objectNode85);
        org.junit.Assert.assertNotNull(objectReader87);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray90);
        org.junit.Assert.assertNotNull(objectMapper91);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        int int7 = restS3Service1.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object9 = restS3Service1.getObjectWithSignedUrl("{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        boolean boolean11 = restS3Service1.isBucketAccessible("http://s3.amazonaws.com//?torrent");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket13 = restS3Service1.getBucket("{\"\": \"s3.amazonaws.com\"}/hi!");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        restS3Service3.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket7 = restS3Service3.getBucket("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}");
        org.junit.Assert.assertNotNull(joiner1);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory16 = objectMapper14.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper12.reader(jsonNodeFactory16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray21 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper18.enable(featureArray21);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper12.enable(featureArray21);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper9.enable(featureArray21);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper0.disable(featureArray21);
        java.io.File file28 = new java.io.File("http://s3.amazonaws.com//?torrent", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        java.io.File file29 = file28.getCanonicalFile();
        org.codehaus.jackson.type.TypeReference typeReference30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL31 = objectMapper0.readValue(file29, typeReference30);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"] (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(deserializerProvider8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(jsonNodeFactory16);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertEquals(file28.getParent(), "http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
        org.junit.Assert.assertEquals(file28.toString(), "http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
        org.junit.Assert.assertNotNull(file29);
// flaky:         org.junit.Assert.assertEquals(file29.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com//?torrent", "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com/?torrent/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/?torrent/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        java.lang.String str5 = restS3Service4.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = objectMapper11.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider14, deserializerProvider15);
        org.codehaus.jackson.map.SerializerFactory serializerFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.setSerializerFactory(serializerFactory17);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service8, s3SegmentPusherConfig9, objectMapper16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper16);
        int int21 = restS3Service4.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials22 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials22);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service23.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager25 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager25);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager27 = null;
        restS3Service23.setHttpConnectionManager(httpConnectionManager27);
        boolean boolean29 = restS3Service23.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder30 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.size(0L);
        org.joda.time.Interval interval33 = null;
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.interval(interval33);
        java.lang.String[] strArray38 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder32.metrics((java.util.List<java.lang.String>) strList39);
        org.jets3t.service.security.ProviderCredentials providerCredentials42 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider44 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service45 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials42, "null", credentialsProvider44);
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service47 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service47.renameMetadataKeys(strMap48);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service45.renameMetadataKeys(strMap48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder32.loadSpec(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = restS3Service23.renameMetadataKeys(strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service4.renameMetadataKeys(strMap52);
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder54.dimensions((java.util.List<java.lang.String>) strList57);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder59.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder63 = builder61.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder64 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.metamx.druid.client.DataSegment.Builder builder69 = builder64.dimensions((java.util.List<java.lang.String>) strList67);
        com.metamx.druid.client.DataSegment.Builder builder70 = builder63.metrics((java.util.List<java.lang.String>) strList67);
        org.jets3t.service.security.ProviderCredentials providerCredentials71 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service72 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials71);
        java.lang.String str73 = restS3Service72.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig74 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials75 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service76 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials75);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig77 = null;
        org.codehaus.jackson.JsonFactory jsonFactory78 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper79.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = objectMapper79.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider82 = objectMapper79.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider83 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper84 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory78, serializerProvider82, deserializerProvider83);
        org.codehaus.jackson.map.SerializerFactory serializerFactory85 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = objectMapper84.setSerializerFactory(serializerFactory85);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher87 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service76, s3SegmentPusherConfig77, objectMapper84);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher88 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service72, s3SegmentPusherConfig74, objectMapper84);
        int int89 = restS3Service72.getInternalErrorRetryMax();
        java.util.List<java.lang.String> strList90 = restS3Service72.getResourceParameterNames();
        com.metamx.druid.shard.ShardSpec shardSpec91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment93 = new com.metamx.druid.client.DataSegment("{\"\": \"s3.amazonaws.com\"}/hi!", interval1, "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", strMap52, (java.util.List<java.lang.String>) strList67, strList90, shardSpec91, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(serializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(objectMapper81);
        org.junit.Assert.assertNotNull(serializerProvider82);
        org.junit.Assert.assertNotNull(objectMapper86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"content-length-range\", 10, 47]");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.JsonFactory jsonFactory1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider5 = objectMapper2.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory1, serializerProvider5, deserializerProvider6);
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider13 = objectMapper10.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory14 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider16 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig17 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory14, serializerProvider15, deserializerProvider16, serializationConfig17, deserializationConfig18);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = objectMapper19.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig31 = objectMapper28.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider13, deserializerProvider20, serializationConfig21, deserializationConfig31);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory38 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig41 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig42 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory38, serializerProvider39, deserializerProvider40, serializationConfig41, deserializationConfig42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper43.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig45 = null;
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.codehaus.jackson.map.SerializerFactory serializerFactory53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.setSerializerFactory(serializerFactory53);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig55 = objectMapper52.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider44, serializationConfig45, deserializationConfig55);
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider13, deserializerProvider44);
        org.codehaus.jackson.map.SerializationConfig serializationConfig58 = null;
        org.codehaus.jackson.JsonFactory jsonFactory59 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = objectMapper60.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider63 = objectMapper60.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory64 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider65 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider66 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig67 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig68 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory64, serializerProvider65, deserializerProvider66, serializationConfig67, deserializationConfig68);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider70 = objectMapper69.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig71 = null;
        org.codehaus.jackson.JsonFactory jsonFactory72 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper75 = objectMapper73.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider76 = objectMapper73.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider77 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory72, serializerProvider76, deserializerProvider77);
        org.codehaus.jackson.map.SerializerFactory serializerFactory79 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper78.setSerializerFactory(serializerFactory79);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig81 = objectMapper78.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory59, serializerProvider63, deserializerProvider70, serializationConfig71, deserializationConfig81);
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider5, deserializerProvider44, serializationConfig58, deserializationConfig81);
        org.codehaus.jackson.JsonFactory jsonFactory84 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory84);
        org.codehaus.jackson.map.ObjectMapper objectMapper86 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper87 = objectMapper86.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper88 = objectMapper86.disableDefaultTyping();
        java.io.File file90 = new java.io.File("hi!");
        java.io.File file92 = new java.io.File(file90, "");
        java.lang.Class<?> wildcardClass93 = file90.getClass();
        org.codehaus.jackson.type.JavaType javaType94 = objectMapper88.constructType((java.lang.reflect.Type) wildcardClass93);
        org.codehaus.jackson.map.ObjectWriter objectWriter95 = objectMapper85.writerWithType(javaType94);
        org.codehaus.jackson.map.ObjectWriter objectWriter96 = objectMapper83.writerWithType(javaType94);
        org.codehaus.jackson.JsonFactory jsonFactory97 = objectMapper83.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper98 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory97);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(serializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(serializerProvider13);
        org.junit.Assert.assertNotNull(deserializerProvider20);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(deserializationConfig31);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(deserializationConfig55);
        org.junit.Assert.assertNotNull(objectMapper61);
        org.junit.Assert.assertNotNull(objectMapper62);
        org.junit.Assert.assertNotNull(serializerProvider63);
        org.junit.Assert.assertNotNull(deserializerProvider70);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(objectMapper75);
        org.junit.Assert.assertNotNull(serializerProvider76);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(deserializationConfig81);
        org.junit.Assert.assertNotNull(objectMapper87);
        org.junit.Assert.assertNotNull(objectMapper88);
        org.junit.Assert.assertNull("file90.getParent() == null", file90.getParent());
        org.junit.Assert.assertEquals(file90.toString(), "hi!");
        org.junit.Assert.assertNull("file92.getParent() == null", file92.getParent());
        org.junit.Assert.assertEquals(file92.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(javaType94);
        org.junit.Assert.assertNotNull(objectWriter95);
        org.junit.Assert.assertNotNull(objectWriter96);
        org.junit.Assert.assertNotNull(jsonFactory97);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties14, hostConfiguration17);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 58, 1]", credentialsProvider2, jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        java.lang.String str6 = restS3Service4.getInvokingApplicationDescription();
        java.lang.String str9 = restS3Service4.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service4.renameMetadataKeys(strMap13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        java.lang.String str17 = restS3Service16.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig18 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig21 = null;
        org.codehaus.jackson.JsonFactory jsonFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider26 = objectMapper23.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory22, serializerProvider26, deserializerProvider27);
        org.codehaus.jackson.map.SerializerFactory serializerFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setSerializerFactory(serializerFactory29);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher31 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service20, s3SegmentPusherConfig21, objectMapper28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service16, s3SegmentPusherConfig18, objectMapper28);
        int int33 = restS3Service16.getInternalErrorRetryMax();
        java.util.List<java.lang.String> strList34 = restS3Service16.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder35.dimensions((java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder42 = builder40.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder44 = builder42.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder45 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder45.dimensions((java.util.List<java.lang.String>) strList48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder44.metrics((java.util.List<java.lang.String>) strList48);
        com.metamx.druid.client.DataSegment.Builder builder52 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder52.dimensions((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder51.metrics((java.util.List<java.lang.String>) strList55);
        com.metamx.druid.shard.ShardSpec shardSpec59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment61 = new com.metamx.druid.client.DataSegment("[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]", interval1, "{\"\": \"\"}", strMap14, strList34, (java.util.List<java.lang.String>) strList55, shardSpec59, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(serializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        boolean boolean8 = restS3Service5.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service5.getProviderCredentials();
        restS3Service5.setRequesterPaysEnabled(false);
        boolean boolean12 = restS3Service5.isShutdown();
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient16 = restS3Service14.getHttpClient();
        restS3Service5.setHttpClient(httpClient16);
        restS3Service3.setHttpClient(httpClient16);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(providerCredentials9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(httpClient16);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isHttpsOnly();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        java.lang.String str6 = restS3Service1.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient7 = null;
        restS3Service1.setHttpClient(httpClient7);
        org.jets3t.service.Jets3tProperties jets3tProperties9 = restS3Service1.getJetS3tProperties();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setRequesterPaysBucket("{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/&requestPayment': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jets3tProperties9);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        boolean boolean4 = file1.canWrite();
        boolean boolean5 = file1.isHidden();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode7 = objectMapper6.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper6.schemaBasedReader(formatSchema8);
        byte[] byteArray11 = objectMapper6.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper6.reader(formatSchema12);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher14 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper6);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory17 = objectMapper15.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory22 = objectMapper20.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper18.reader(jsonNodeFactory22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray27 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper24.enable(featureArray27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper18.enable(featureArray27);
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper15.enable(featureArray27);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory31 = objectMapper15.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper6.setNodeFactory(jsonNodeFactory31);
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider36 = objectMapper33.getSerializerProvider();
        java.text.DateFormat dateFormat37 = null;
        objectMapper33.setDateFormat(dateFormat37);
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider44 = objectMapper41.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider44, deserializerProvider45);
        org.codehaus.jackson.map.SerializerFactory serializerFactory47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper46.setSerializerFactory(serializerFactory47);
        org.codehaus.jackson.PrettyPrinter prettyPrinter49 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter50 = objectMapper48.prettyPrintingWriter(prettyPrinter49);
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper51.disableDefaultTyping();
        java.io.File file55 = new java.io.File("hi!");
        java.io.File file57 = new java.io.File(file55, "");
        java.lang.Class<?> wildcardClass58 = file55.getClass();
        org.codehaus.jackson.type.JavaType javaType59 = objectMapper53.constructType((java.lang.reflect.Type) wildcardClass58);
        boolean boolean60 = objectMapper48.canDeserialize(javaType59);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService61 = objectMapper33.readValue("null", javaType59);
        org.codehaus.jackson.node.ArrayNode arrayNode62 = objectMapper33.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode64 = objectMapper63.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema65 = null;
        org.codehaus.jackson.map.ObjectReader objectReader66 = objectMapper63.schemaBasedReader(formatSchema65);
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode68 = objectMapper67.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema69 = null;
        org.codehaus.jackson.map.ObjectReader objectReader70 = objectMapper67.schemaBasedReader(formatSchema69);
        byte[] byteArray72 = objectMapper67.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode73 = objectMapper63.valueToTree((java.lang.Object) 10L);
        byte[] byteArray74 = objectMapper33.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode75 = objectMapper32.readTree(byteArray74);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objectNode7);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(jsonNodeFactory17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(jsonNodeFactory22);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(jsonNodeFactory31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(serializerProvider36);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(serializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectWriter50);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "hi!");
        org.junit.Assert.assertNull("file57.getParent() == null", file57.getParent());
        org.junit.Assert.assertEquals(file57.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(javaType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(restStorageService61);
        org.junit.Assert.assertNotNull(arrayNode62);
        org.junit.Assert.assertNotNull(objectNode64);
        org.junit.Assert.assertNotNull(objectReader66);
        org.junit.Assert.assertNotNull(objectNode68);
        org.junit.Assert.assertNotNull(objectReader70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode75);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.model.S3Bucket s3Bucket2 = null;
        org.jets3t.service.model.S3Object s3Object3 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl(s3Bucket2, s3Object3);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        boolean boolean7 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpClient httpClient8 = restS3Service1.getHttpClient();
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager17 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager17);
        java.lang.String str21 = restS3Service13.createTorrentUrl("", "hi!");
        boolean boolean23 = restS3Service13.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date24 = restS3Service13.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = restS3Service1.createSignedDeleteUrl("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "x-amz-meta-", providerCredentials11, date24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(httpClient8);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str21, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Thu Nov 04 08:20:12 BRT 2021");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        boolean boolean6 = file1.delete();
        boolean boolean8 = file1.setExecutable(false);
        boolean boolean9 = file1.canWrite();
        boolean boolean11 = file1.setExecutable(true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = restS3Service22.getProviderCredentials();
        boolean boolean25 = restS3Service22.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = restS3Service22.getProviderCredentials();
        java.lang.String str29 = restS3Service22.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean30 = restS3Service22.isShutdown();
        java.util.Date date31 = restS3Service22.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = restS3Service17.createSignedGetUrl("", "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", providerCredentials20, date31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(providerCredentials26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str29, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 04 08:20:13 BRT 2021");
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        int int20 = restS3Service18.getInternalErrorRetryMax();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object24 = restS3Service18.getVersionedObjectDetails("[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "{\"\": \"s3.amazonaws.com\"}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}/%7B%22%22%3A%20%22s3.amazonaws.com%22%7D?versionId=%5B%22%5B%22content-length-range%22%2C%2010%2C%2047%5D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D%22%2C%20%22%5B%22starts-with%22%2C%20%22%24%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D%22%2C%20%22%22%5D%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        java.lang.String str8 = restS3Service1.getEndpoint();
        java.lang.String str9 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig14 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider12, deserializerProvider13, serializationConfig14, deserializationConfig15);
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper16.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter18 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter19 = objectMapper16.writer(prettyPrinter18);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher20 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig10, objectMapper16);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager26 = null;
        restS3Service24.setHttpConnectionManager(httpConnectionManager26);
        java.util.Date date28 = restS3Service24.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = restS3Service1.createSignedDeleteUrl("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "s3.amazonaws.com", date28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "s3.amazonaws.com" + "'", str8, "s3.amazonaws.com");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectWriter19);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Thu Nov 04 08:20:14 BRT 2021");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.io.File file2 = new java.io.File("[\"content-length-range\", 58, 1]", "null");
        boolean boolean5 = file2.setReadable(true, false);
        java.lang.String str6 = file2.getCanonicalPath();
        java.lang.String str7 = file2.getPath();
        long long8 = file2.length();
        org.junit.Assert.assertEquals(file2.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file2.toString(), "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null" + "'", str6, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[\"content-length-range\", 58, 1]/null" + "'", str7, "[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials1 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service2 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials1);
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = restS3Service2.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service2.setHttpConnectionManager(httpConnectionManager4);
        java.util.List<java.lang.String> strList6 = restS3Service2.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.dimensions(strList6);
        org.joda.time.Interval interval8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder0.interval(interval8);
        com.metamx.druid.client.DataSegment.Builder builder11 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder12 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval13 = null;
        com.metamx.druid.client.DataSegment.Builder builder14 = builder12.interval(interval13);
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.metamx.druid.client.DataSegment.Builder builder20 = builder15.dimensions((java.util.List<java.lang.String>) strList18);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder20.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder24 = builder22.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder24.metrics((java.util.List<java.lang.String>) strList28);
        org.joda.time.Interval interval32 = null;
        com.metamx.druid.client.DataSegment.Builder builder33 = builder24.interval(interval32);
        org.joda.time.Interval interval34 = null;
        com.metamx.druid.client.DataSegment.Builder builder35 = builder24.interval(interval34);
        com.metamx.druid.client.DataSegment.Builder builder36 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder38 = builder36.size(0L);
        org.joda.time.Interval interval39 = null;
        com.metamx.druid.client.DataSegment.Builder builder40 = builder38.interval(interval39);
        java.lang.String[] strArray44 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder38.metrics((java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder35.metrics((java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder49 = builder12.metrics((java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder11.dimensions((java.util.List<java.lang.String>) strList45);
        java.lang.String str51 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", (java.util.List<java.lang.String>) strList45);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder0.metrics((java.util.List<java.lang.String>) strList45);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(providerCredentials3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\": \"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,http://s3.amazonaws.com//?torrent\"}" + "'", str51, "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\": \"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,http://s3.amazonaws.com//?torrent\"}");
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        java.lang.String str19 = restS3Service1.createTorrentUrl("", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service1.getObject("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str19, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "{\"\": \"s3.amazonaws.com\"}/hi!");
        boolean boolean9 = file7.setExecutable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory11 = objectMapper9.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader12 = objectMapper7.reader(jsonNodeFactory11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray16 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enable(featureArray16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper7.enable(featureArray16);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        org.jets3t.service.model.StorageObject storageObject23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap25 = restS3Service1.moveObject("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", "x-amz-meta-", storageObject23, false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(jsonNodeFactory11);
        org.junit.Assert.assertNotNull(objectReader12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        restS3Service18.shutdown();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray22 = restS3Service18.getObjectVersions("null", "{\"\": \"s3.amazonaws.com\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Request Error: java.lang.IllegalStateException: Connection factory has been shutdown.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.lang.String str3 = org.jets3t.service.S3Service.generatePostPolicyCondition("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"content-length-range\", 100, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[\"[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"[\"content-length-range\", 100, 4]\"]" + "'", str3, "[\"[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"[\"content-length-range\", 100, 4]\"]");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean2 = emittingLogger1.isInfoEnabled();
        boolean boolean3 = emittingLogger1.isInfoEnabled();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk15 = restS3Service1.listVersionedObjectsChunked("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", "", "[\"content-length-range\", 100, 4]", 0L, "s3.amazonaws.com", "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\": \"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,http://s3.amazonaws.com//?torrent\"}", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]/&versions&prefix&delimiter=%5B%22content-length-range%22%2C%20100%2C%204%5D&version-id-marker=%7B%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%3A%20%22%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%2C%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%2Chttp%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent%22%7D&key-marker=s3.amazonaws.com': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig19 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider17, deserializerProvider18, serializationConfig19, deserializationConfig20);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig23 = null;
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.SerializerFactory serializerFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.setSerializerFactory(serializerFactory31);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig33 = objectMapper30.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider22, serializationConfig23, deserializationConfig33);
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider42 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig43 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider41, deserializerProvider42, serializationConfig43, deserializationConfig44);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = objectMapper45.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig47 = null;
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper49.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider52, deserializerProvider53);
        org.codehaus.jackson.map.SerializerFactory serializerFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.setSerializerFactory(serializerFactory55);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig57 = objectMapper54.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider46, serializationConfig47, deserializationConfig57);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider15, deserializerProvider46);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider15, deserializerProvider60);
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper61.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        java.lang.Object obj66 = null;
        java.lang.String str67 = objectMapper63.writeValueAsString(obj66);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider68 = objectMapper63.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider62, deserializerProvider68);
        org.codehaus.jackson.JsonFactory jsonFactory70 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper72 = objectMapper71.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = objectMapper71.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider74 = objectMapper71.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider75 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory70, serializerProvider74, deserializerProvider75);
        org.codehaus.jackson.map.SerializerFactory serializerFactory77 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper78 = objectMapper76.setSerializerFactory(serializerFactory77);
        org.codehaus.jackson.PrettyPrinter prettyPrinter79 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter80 = objectMapper78.prettyPrintingWriter(prettyPrinter79);
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper82 = objectMapper81.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = objectMapper81.disableDefaultTyping();
        java.io.File file85 = new java.io.File("hi!");
        java.io.File file87 = new java.io.File(file85, "");
        java.lang.Class<?> wildcardClass88 = file85.getClass();
        org.codehaus.jackson.type.JavaType javaType89 = objectMapper83.constructType((java.lang.reflect.Type) wildcardClass88);
        boolean boolean90 = objectMapper78.canDeserialize(javaType89);
        org.codehaus.jackson.map.ObjectReader objectReader91 = objectMapper69.reader(javaType89);
        org.codehaus.jackson.map.ObjectMapper objectMapper92 = objectMapper69.disableDefaultTyping();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(deserializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializationConfig33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(deserializerProvider46);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(serializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(deserializationConfig57);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "null" + "'", str67, "null");
        org.junit.Assert.assertNotNull(deserializerProvider68);
        org.junit.Assert.assertNotNull(objectMapper72);
        org.junit.Assert.assertNotNull(objectMapper73);
        org.junit.Assert.assertNotNull(serializerProvider74);
        org.junit.Assert.assertNotNull(objectMapper78);
        org.junit.Assert.assertNotNull(objectWriter80);
        org.junit.Assert.assertNotNull(objectMapper82);
        org.junit.Assert.assertNotNull(objectMapper83);
        org.junit.Assert.assertNull("file85.getParent() == null", file85.getParent());
        org.junit.Assert.assertEquals(file85.toString(), "hi!");
        org.junit.Assert.assertNull("file87.getParent() == null", file87.getParent());
        org.junit.Assert.assertEquals(file87.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(javaType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objectReader91);
        org.junit.Assert.assertNotNull(objectMapper92);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.io.File file1 = new java.io.File("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean2 = file1.mkdir();
        long long3 = file1.getUsableSpace();
        java.lang.String str4 = file1.getPath();
        boolean boolean7 = file1.setReadable(true, true);
        java.net.URI uRI8 = file1.toURI();
        org.junit.Assert.assertEquals(file1.getParent(), "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file1.toString(), "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 80259506176L + "'", long3 == 80259506176L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str4, "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(uRI8);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema9 = null;
        org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper8.reader(formatSchema9);
        org.codehaus.jackson.JsonFactory jsonFactory11 = objectMapper8.getJsonFactory();
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectReader10);
        org.junit.Assert.assertNotNull(jsonFactory11);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray8 = restS3Service3.listObjects("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", "[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/?max-keys=97&prefix=%7B%22%5B%22content-length-range%22%2C%2010%2C%2047%5D%22%3A%20%22x-amz-meta-%22%7D&delimiter=%5B%22starts-with%22%2C%20%22%24%7B%22%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D%22%3A%20%22%22%7D%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode7 = objectMapper6.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper6.schemaBasedReader(formatSchema8);
        byte[] byteArray11 = objectMapper6.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper6.reader(formatSchema12);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher14 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper6);
        restS3Service1.setDevPayProductToken("{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
        org.jets3t.service.model.S3Bucket s3Bucket17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object19 = restS3Service1.getObjectDetails(s3Bucket17, "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action getObjectDetails cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objectNode7);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader13);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        java.io.File file6 = new java.io.File(uRI4);
        java.io.File file8 = new java.io.File(file6, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        java.io.File file9 = file8.getParentFile();
        boolean boolean10 = file8.exists();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(uRI4);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "{\"\": \"s3.amazonaws.com\"}/hi!");
        boolean boolean8 = file7.canExecute();
        boolean boolean9 = file7.exists();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        long long3 = file2.getUsableSpace();
        java.io.File file4 = file2.getCanonicalFile();
        java.io.File file6 = new java.io.File(file4, "s3.amazonaws.com");
        java.lang.String str7 = file6.toString();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/s3.amazonaws.com" + "'", str7, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/s3.amazonaws.com");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15);
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = restS3Service16.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager18 = null;
        restS3Service16.setHttpConnectionManager(httpConnectionManager18);
        org.jets3t.service.Jets3tProperties jets3tProperties20 = restS3Service16.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "", credentialsProvider14, jets3tProperties20, hostConfiguration21);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider11, jets3tProperties20);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, ":", credentialsProvider8, jets3tProperties20, hostConfiguration24);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//?torrent", credentialsProvider5, jets3tProperties20);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", credentialsProvider2, jets3tProperties20, hostConfiguration27);
        org.junit.Assert.assertNull(providerCredentials17);
        org.junit.Assert.assertNotNull(jets3tProperties20);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str7 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig8 = null;
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig12 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider10, deserializerProvider11, serializationConfig12, deserializationConfig13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher15 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig8, objectMapper14);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = restS3Service1.getHttpConnectionManager();
        org.jets3t.service.model.StorageObject storageObject20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap22 = restS3Service1.copyObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "/", "{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", storageObject20, true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "x-amz-meta-" + "'", str7, "x-amz-meta-");
        org.junit.Assert.assertNull(httpConnectionManager16);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2, jets3tProperties14);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object20 = restS3Service18.getObjectWithSignedUrl("[\"content-length-range\", 97, 100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"content-length-range\", 97, 100]': incorrect path");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        org.jets3t.service.model.S3Bucket s3Bucket15 = null;
        java.util.Calendar calendar17 = null;
        java.util.Calendar calendar18 = null;
        java.lang.String[] strArray22 = new java.lang.String[] { "http://s3.amazonaws.com/%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D?torrent", "<form action=\"https://{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" };
        java.lang.String[] strArray29 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str30 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray29);
        java.lang.String str31 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object32 = restS3Service1.getObjectDetails(s3Bucket15, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", calendar17, calendar18, strArray22, strArray29);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Object Details cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str30, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str31, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.joda.time.DateTime dateTime1 = null;
        org.joda.time.DateTime dateTime2 = null;
        com.metamx.druid.shard.ShardSpec shardSpec4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = com.metamx.druid.client.DataSegment.makeDataSegmentIdentifier("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", dateTime1, dateTime2, "/", shardSpec4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        java.lang.String str9 = restS3Service7.getInvokingApplicationDescription();
        java.lang.String str12 = restS3Service7.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        java.lang.Object obj17 = null;
        java.lang.String str18 = objectMapper14.writeValueAsString(obj17);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = objectMapper14.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver21 = objectMapper20.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper20.setSerializationInclusion(inclusion22);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker24 = objectMapper23.getVisibilityChecker();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher25 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service7, s3SegmentPusherConfig13, objectMapper23);
        org.jets3t.service.Jets3tProperties jets3tProperties26 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", credentialsProvider5, jets3tProperties26, hostConfiguration27);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", credentialsProvider2, jets3tProperties26);
        org.jets3t.service.model.StorageObject storageObject33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap35 = restS3Service29.moveObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", storageObject33, false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str12, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "null" + "'", str18, "null");
        org.junit.Assert.assertNotNull(deserializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(subtypeResolver21);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker24);
        org.junit.Assert.assertNotNull(jets3tProperties26);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = restS3Service1.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object11 = restS3Service1.getObjectWithSignedUrl("[\"content-length-range\", -226, -226]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"content-length-range\", -226, -226]': incorrect path");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(providerCredentials9);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.io.File file2 = new java.io.File("{\"\": \"s3.amazonaws.com\"}", "hi!");
        long long3 = file2.getUsableSpace();
        boolean boolean4 = file2.createNewFile();
        org.junit.Assert.assertEquals(file2.getParent(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"\": \"s3.amazonaws.com\"}/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 80259502080L + "'", long3 == 80259502080L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        boolean boolean4 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket8 = restS3Service1.createBucket("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "", accessControlList7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service4.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient10 = null;
        restS3Service4.setHttpClient(httpClient10);
        org.jets3t.service.Jets3tProperties jets3tProperties12 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"\"}", credentialsProvider2, jets3tProperties12);
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16, "null", credentialsProvider18);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = restS3Service21.renameMetadataKeys(strMap22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = restS3Service19.renameMetadataKeys(strMap22);
        org.jets3t.service.acl.AccessControlList accessControlList25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload27 = restS3Service13.multipartStartUpload("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "", strMap22, accessControlList25, "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]/&uploads': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jets3tProperties12);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.io.File file1 = new java.io.File("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        long long2 = file1.getFreeSpace();
        long long3 = file1.getFreeSpace();
        org.junit.Assert.assertEquals(file1.getParent(), "{\"http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager22 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager22);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service20.setHttpConnectionManager(httpConnectionManager24);
        boolean boolean26 = restS3Service20.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.size(0L);
        org.joda.time.Interval interval30 = null;
        com.metamx.druid.client.DataSegment.Builder builder31 = builder29.interval(interval30);
        java.lang.String[] strArray35 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder29.metrics((java.util.List<java.lang.String>) strList36);
        org.jets3t.service.security.ProviderCredentials providerCredentials39 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider41 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service42 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials39, "null", credentialsProvider41);
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = restS3Service44.renameMetadataKeys(strMap45);
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = restS3Service42.renameMetadataKeys(strMap45);
        com.metamx.druid.client.DataSegment.Builder builder48 = builder29.loadSpec(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = restS3Service20.renameMetadataKeys(strMap47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = restS3Service18.renameMetadataKeys(strMap47);
        org.jets3t.service.acl.AccessControlList accessControlList53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket54 = restS3Service18.createBucket("{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}", "[\"content-length-range\", 97, 100]", accessControlList53);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder9 = builder7.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder10.dimensions((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder9.metrics((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder17 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder17.dimensions((java.util.List<java.lang.String>) strList20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder16.metrics((java.util.List<java.lang.String>) strList20);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        org.jets3t.service.security.ProviderCredentials providerCredentials26 = restS3Service25.getProviderCredentials();
        java.lang.String str27 = restS3Service25.getInvokingApplicationDescription();
        java.lang.String str30 = restS3Service25.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service32 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = restS3Service32.renameMetadataKeys(strMap33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = restS3Service25.renameMetadataKeys(strMap34);
        com.metamx.druid.client.DataSegment.Builder builder36 = builder16.loadSpec(strMap34);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(providerCredentials26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str30, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", credentialsProvider2, jets3tProperties11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = restS3Service14.createUnsignedObjectUrl("{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", "[\"content-length-range\", 97, 100]", false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file5 = new java.io.File(file3, "");
        long long6 = file5.getTotalSpace();
        java.lang.String str7 = file5.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>" + "'", str7, "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.setReadOnly();
        boolean boolean3 = file1.mkdirs();
        java.io.File file5 = new java.io.File(file1, "/");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/");
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        java.lang.String str6 = restS3Service4.getInvokingApplicationDescription();
        java.lang.String str9 = restS3Service4.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service4.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder16 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.metamx.druid.client.DataSegment.Builder builder21 = builder16.dimensions((java.util.List<java.lang.String>) strList19);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder21.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder25 = builder23.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder26 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.metamx.druid.client.DataSegment.Builder builder31 = builder26.dimensions((java.util.List<java.lang.String>) strList29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder25.metrics((java.util.List<java.lang.String>) strList29);
        java.lang.String str33 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList29);
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder36 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder36.dimensions((java.util.List<java.lang.String>) strList39);
        java.lang.String str42 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList39);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder34.dimensions((java.util.List<java.lang.String>) strList39);
        com.metamx.druid.shard.ShardSpec shardSpec44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment46 = new com.metamx.druid.client.DataSegment("{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", interval1, "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", strMap14, (java.util.List<java.lang.String>) strList29, (java.util.List<java.lang.String>) strList39, shardSpec44, 129486516224L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str33, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str42, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig10, objectMapper11);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider2);
        restS3Service3.setDevPayUserToken("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        java.lang.String str14 = restS3Service10.getEndpoint();
        java.lang.String str17 = restS3Service10.createTorrentUrl("", "");
        java.lang.String str18 = restS3Service10.getRestMetadataPrefix();
        boolean boolean19 = restS3Service10.isShutdown();
        java.util.Date date20 = restS3Service10.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = restS3Service3.createSignedDeleteUrl("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "x-amz-meta-", providerCredentials8, date20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "s3.amazonaws.com" + "'", str14, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str17, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "x-amz-meta-" + "'", str18, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Nov 04 08:20:17 BRT 2021");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        java.util.Date date17 = restS3Service13.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = restS3Service1.createSignedHeadUrl("{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}", "http://s3.amazonaws.com/%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D?torrent", date17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 04 08:20:17 BRT 2021");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.lang.String str2 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"\"}", "{\"\": \"\"}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{\"{\"\": \"\"}\": \"{\"\": \"\"}\"}" + "'", str2, "{\"{\"\": \"\"}\": \"{\"\": \"\"}\"}");
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties11, hostConfiguration14);
        org.jets3t.service.model.MultipartUpload multipartUpload16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartCompleted multipartCompleted17 = restS3Service15.multipartCompleteUpload(multipartUpload16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.FormatSchema formatSchema3 = null;
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper0.reader(formatSchema3);
        java.lang.Class<?> wildcardClass5 = objectReader4.getClass();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectReader4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema7 = null;
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper5.schemaBasedReader(formatSchema7);
        byte[] byteArray10 = objectMapper5.writeValueAsBytes((java.lang.Object) 10L);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher11 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig4, objectMapper5);
        int int12 = restS3Service1.getInternalErrorRetryMax();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, 48]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.metamx.druid.loading.S3SegmentPusher.JOINER = joiner1;
        com.google.common.base.Joiner.MapJoiner mapJoiner4 = joiner1.withKeyValueSeparator("http://s3.amazonaws.com//hi%21?torrent");
        com.google.common.base.Joiner joiner5 = joiner1.skipNulls();
        java.lang.StringBuilder stringBuilder6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper12.getDeserializerProvider();
        org.codehaus.jackson.node.ArrayNode arrayNode14 = objectMapper12.createArrayNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder15 = joiner5.appendTo(stringBuilder6, (java.lang.Iterable<org.codehaus.jackson.JsonNode>) arrayNode14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(mapJoiner4);
        org.junit.Assert.assertNotNull(joiner5);
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(arrayNode14);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "null", credentialsProvider2);
        java.lang.String str4 = restS3Service3.getRestHeaderPrefix();
        int int5 = restS3Service3.getInternalErrorRetryMax();
        org.jets3t.service.model.S3Object s3Object7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.MultipartUpload multipartUpload8 = restS3Service3.multipartStartUpload("http:/s3.amazonaws.com/hi%21?torrent", s3Object7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-" + "'", str4, "x-amz-");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.setPropertyNamingStrategy(propertyNamingStrategy13);
        org.codehaus.jackson.JsonParser.Feature feature15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = objectMapper8.isEnabled(feature15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\": \"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,http://s3.amazonaws.com//?torrent\"}", credentialsProvider2);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2);
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper3.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.node.ArrayNode arrayNode7 = objectMapper5.createArrayNode();
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper9.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider12, deserializerProvider13);
        org.codehaus.jackson.map.SerializerFactory serializerFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.setSerializerFactory(serializerFactory15);
        org.codehaus.jackson.PrettyPrinter prettyPrinter17 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter18 = objectMapper16.prettyPrintingWriter(prettyPrinter17);
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        java.io.File file23 = new java.io.File("hi!");
        java.io.File file25 = new java.io.File(file23, "");
        java.lang.Class<?> wildcardClass26 = file23.getClass();
        org.codehaus.jackson.type.JavaType javaType27 = objectMapper21.constructType((java.lang.reflect.Type) wildcardClass26);
        boolean boolean28 = objectMapper16.canDeserialize(javaType27);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ClassIntrospector.MixInResolver mixInResolver29 = objectMapper3.readValue((org.codehaus.jackson.JsonNode) arrayNode7, javaType27);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Can not deserialize instance of java.io.File out of START_ARRAY token? at [Source: N/A; line: -1, column: -1]");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectReader4);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(arrayNode7);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectWriter18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "hi!");
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(javaType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.io.File file1 = new java.io.File("[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.junit.Assert.assertEquals(file1.getParent(), "[\"starts-with\", \"$<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file1.toString(), "[\"starts-with\", \"$<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.enableDefaultTyping(defaultTyping6);
        org.codehaus.jackson.JsonParser.Feature feature8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = objectMapper0.isEnabled(feature8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectMapper7);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory9 = objectMapper7.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper5.setNodeFactory(jsonNodeFactory9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        java.lang.Object obj16 = null;
        java.lang.String str17 = objectMapper13.writeValueAsString(obj16);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = objectMapper13.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider23 = objectMapper20.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory19, serializerProvider23, deserializerProvider24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper13.setSerializerProvider(serializerProvider23);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig27 = objectMapper13.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper11.setDeserializationConfig(deserializationConfig27);
        org.codehaus.jackson.map.type.TypeFactory typeFactory29 = objectMapper28.getTypeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper5.setTypeFactory(typeFactory29);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider31 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter32 = objectMapper30.writer(filterProvider31);
        org.codehaus.jackson.JsonFactory jsonFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider37 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory33, serializerProvider37, deserializerProvider38);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector40 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.setAnnotationIntrospector(annotationIntrospector40);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig42 = objectMapper39.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper43.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory47 = objectMapper45.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader48 = objectMapper43.reader(jsonNodeFactory47);
        org.codehaus.jackson.map.ObjectReader objectReader49 = objectMapper39.reader(jsonNodeFactory47);
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode51 = objectMapper50.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema52 = null;
        org.codehaus.jackson.map.ObjectReader objectReader53 = objectMapper50.schemaBasedReader(formatSchema52);
        byte[] byteArray55 = objectMapper50.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema56 = null;
        org.codehaus.jackson.map.ObjectReader objectReader57 = objectMapper50.reader(formatSchema56);
        java.text.DateFormat dateFormat58 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter59 = objectMapper50.writer(dateFormat58);
        com.metamx.emitter.EmittingLogger emittingLogger61 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean62 = emittingLogger61.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper64.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter66 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter67 = objectMapper64.writer(prettyPrinter66);
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = objectMapper64.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader69 = objectMapper64.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper71 = objectMapper70.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter72 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter73 = objectMapper70.writer(prettyPrinter72);
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper70.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray75 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper76 = objectMapper70.enable(featureArray75);
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = objectMapper64.disable(featureArray75);
        emittingLogger61.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray75);
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = objectMapper50.enable(featureArray75);
        org.codehaus.jackson.map.ObjectMapper objectMapper80 = objectMapper39.enable(featureArray75);
        org.codehaus.jackson.map.ObjectMapper objectMapper81 = objectMapper30.enable(featureArray75);
        org.codehaus.jackson.map.SerializerFactory serializerFactory82 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = objectMapper30.setSerializerFactory(serializerFactory82);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(jsonNodeFactory9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null" + "'", str17, "null");
        org.junit.Assert.assertNotNull(deserializerProvider18);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(serializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(deserializationConfig27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(typeFactory29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectWriter32);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(serializerProvider37);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(deserializationConfig42);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(jsonNodeFactory47);
        org.junit.Assert.assertNotNull(objectReader48);
        org.junit.Assert.assertNotNull(objectReader49);
        org.junit.Assert.assertNotNull(objectNode51);
        org.junit.Assert.assertNotNull(objectReader53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader57);
        org.junit.Assert.assertNotNull(objectWriter59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(objectWriter67);
        org.junit.Assert.assertNotNull(objectMapper68);
        org.junit.Assert.assertNotNull(objectReader69);
        org.junit.Assert.assertNotNull(objectMapper71);
        org.junit.Assert.assertNotNull(objectWriter73);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(objectMapper76);
        org.junit.Assert.assertNotNull(objectMapper77);
        org.junit.Assert.assertNotNull(objectMapper79);
        org.junit.Assert.assertNotNull(objectMapper80);
        org.junit.Assert.assertNotNull(objectMapper81);
        org.junit.Assert.assertNotNull(objectMapper83);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        java.lang.String str8 = restS3Service1.createTorrentUrl("s3.amazonaws.com", "");
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isHttpsOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket12 = restS3Service1.getBucket("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Get Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com.s3.amazonaws.com/?torrent" + "'", str8, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.List<java.lang.String> strList5 = restS3Service1.getResourceParameterNames();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        restS3Service1.setHttpConnectionManager(httpConnectionManager13);
        org.jets3t.service.model.StorageBucket storageBucket15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageBucket storageBucket16 = restS3Service1.createBucket(storageBucket15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher11 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service7, s3SegmentPusherConfig9, objectMapper10);
        java.lang.String str12 = restS3Service7.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient13 = null;
        restS3Service7.setHttpClient(httpClient13);
        org.jets3t.service.Jets3tProperties jets3tProperties15 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", credentialsProvider5, jets3tProperties15, hostConfiguration16);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", credentialsProvider2, jets3tProperties15, hostConfiguration18);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray21 = restS3Service19.listObjects(s3Bucket20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action listObjects cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(jets3tProperties15);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        java.lang.Object obj38 = null;
        java.lang.String str39 = objectMapper35.writeValueAsString(obj38);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper35.setSerializerProvider(serializerProvider45);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig49 = objectMapper35.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper33.setDeserializationConfig(deserializationConfig49);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher51 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig32, objectMapper50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = restS3Service1.createUnsignedObjectUrl("http://s3.amazonaws.com//?torrent", "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\": \"\"}", true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null" + "'", str39, "null");
        org.junit.Assert.assertNotNull(deserializerProvider40);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(deserializationConfig49);
        org.junit.Assert.assertNotNull(objectMapper50);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.jets3t.service.Jets3tProperties jets3tProperties5 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.acl.AccessControlList accessControlList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl("x-amz-meta-", accessControlList7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The bucket 'x-amz-meta-' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(jets3tProperties5);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.SerializerFactory serializerFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.setSerializerFactory(serializerFactory35);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = objectMapper34.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper27.setDeserializationConfig(deserializationConfig37);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper27.setSerializationInclusion(inclusion39);
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.PrettyPrinter prettyPrinter42 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter43 = objectMapper41.prettyPrintingWriter(prettyPrinter42);
        org.codehaus.jackson.FormatSchema formatSchema44 = null;
        org.codehaus.jackson.map.ObjectReader objectReader45 = objectMapper41.schemaBasedReader(formatSchema44);
        org.codehaus.jackson.JsonFactory jsonFactory46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper47.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = objectMapper47.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory46, serializerProvider50, deserializerProvider51);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.setAnnotationIntrospector(annotationIntrospector53);
        org.codehaus.jackson.FormatSchema formatSchema55 = null;
        org.codehaus.jackson.map.ObjectReader objectReader56 = objectMapper52.schemaBasedReader(formatSchema55);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory57 = objectMapper52.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = objectMapper41.setNodeFactory(jsonNodeFactory57);
        org.codehaus.jackson.map.ObjectReader objectReader59 = objectMapper40.reader(jsonNodeFactory57);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializationConfig37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(objectWriter43);
        org.junit.Assert.assertNotNull(objectReader45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(serializerProvider50);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNotNull(objectReader56);
        org.junit.Assert.assertNotNull(jsonNodeFactory57);
        org.junit.Assert.assertNotNull(objectMapper58);
        org.junit.Assert.assertNotNull(objectReader59);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service0 = null;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher3 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service0, s3SegmentPusherConfig1, objectMapper2);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = s3SegmentPusher3.config;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        s3SegmentPusher3.config = s3SegmentPusherConfig5;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = s3SegmentPusher3.jsonMapper;
        java.io.File file9 = new java.io.File("hi!");
        java.io.File file11 = new java.io.File(file9, "");
        boolean boolean13 = file9.setWritable(false);
        boolean boolean14 = file9.delete();
        boolean boolean17 = file9.setWritable(true, false);
        boolean boolean18 = file9.canExecute();
        com.metamx.druid.client.DataSegment dataSegment19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment20 = s3SegmentPusher3.push(file9, dataSegment19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(s3SegmentPusherConfig4);
        org.junit.Assert.assertNull(objectMapper7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        java.lang.String str5 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean7 = restS3Service1.isBucketAccessible("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object10 = restS3Service1.getObject("{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}", "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}\": \"[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\"}/%5B%22%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D%22%2C%20%22%24http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%2C%20%22%5B%22%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D%22%2C%20%22%24%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D%22%2C%20%22%5B%22content-length-range%22%2C%2058%2C%201%5D%22%5D%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "", credentialsProvider11, jets3tProperties17, hostConfiguration18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, ":", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//?torrent", credentialsProvider2, jets3tProperties17);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service23.suspendBucketVersioningWithMFA("", "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "http:/s3.amazonaws.com/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", 100, 4]", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = restS3Service22.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager24);
        java.util.Date date26 = restS3Service22.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = restS3Service17.createSignedDeleteUrl("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", "", providerCredentials20, date26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials23);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Nov 04 08:20:20 BRT 2021");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable2 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str10 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.error(throwable2, "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]", (java.lang.Object[]) strArray9);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = 'F'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str10, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        java.lang.String str9 = restS3Service1.getDevPayUserToken();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObject("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service1.renameMetadataKeys(strMap10);
        boolean boolean12 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider13 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager20 = null;
        restS3Service18.setHttpConnectionManager(httpConnectionManager20);
        java.lang.String str22 = restS3Service18.getEndpoint();
        java.lang.String str25 = restS3Service18.createTorrentUrl("", "");
        java.lang.String str26 = restS3Service18.getRestMetadataPrefix();
        boolean boolean27 = restS3Service18.isShutdown();
        java.util.Date date28 = restS3Service18.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = restS3Service1.createSignedDeleteUrl("", "hi!", providerCredentials16, date28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(credentialsProvider13);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "s3.amazonaws.com" + "'", str22, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str25, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "x-amz-meta-" + "'", str26, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Thu Nov 04 08:20:20 BRT 2021");
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date12 = restS3Service1.getCurrentTimeWithOffset();
        org.jets3t.service.model.MultipartUpload multipartUpload13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.multipartAbortUpload(multipartUpload13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 04 08:20:21 BRT 2021");
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper5.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = objectMapper5.getSerializerProvider();
        java.text.DateFormat dateFormat9 = null;
        objectMapper5.setDateFormat(dateFormat9);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper5.enableDefaultTyping(defaultTyping11);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher13 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig4, objectMapper12);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = restS3Service1.getCredentialsProvider();
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(serializerProvider8);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNull(credentialsProvider14);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider3 = objectMapper0.getSerializerProvider();
        java.text.DateFormat dateFormat4 = null;
        objectMapper0.setDateFormat(dateFormat4);
        org.codehaus.jackson.node.ArrayNode arrayNode6 = objectMapper0.createArrayNode();
        com.metamx.emitter.EmittingLogger emittingLogger8 = new com.metamx.emitter.EmittingLogger("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable13 = null;
        com.metamx.emitter.EmittingLogger emittingLogger16 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray22 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper19.enable(featureArray22);
        emittingLogger16.warn(throwable17, "", (java.lang.Object[]) featureArray22);
        emittingLogger12.trace(throwable13, "/", (java.lang.Object[]) featureArray22);
        emittingLogger8.trace(throwable9, "x-amz-meta-", (java.lang.Object[]) featureArray22);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper0.enable(featureArray22);
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.SerializerFactory serializerFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper34.setSerializerFactory(serializerFactory35);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig37 = objectMapper34.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper27.setDeserializationConfig(deserializationConfig37);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = objectMapper27.getDeserializerProvider();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(serializerProvider3);
        org.junit.Assert.assertNotNull(arrayNode6);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializationConfig37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(deserializerProvider39);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file5 = new java.io.File(file3, "");
        boolean boolean6 = file3.canExecute();
        long long7 = file3.getFreeSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = restS3Service3.getAWSCredentials();
        org.jets3t.service.model.S3Bucket s3Bucket5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList6 = restS3Service3.getBucketAcl(s3Bucket5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials4);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.io.File file1 = new java.io.File("{\"\": \"s3.amazonaws.com\"}");
        boolean boolean2 = file1.setReadOnly();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean7 = file4.delete();
        int int8 = file1.compareTo(file4);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertEquals(file6.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file6.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker11 = objectMapper8.getVisibilityChecker();
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper8.getSerializerProvider();
        java.text.DateFormat dateFormat13 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter14 = objectMapper8.writer(dateFormat13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper15.setAnnotationIntrospector(annotationIntrospector16);
        java.lang.Object obj18 = null;
        byte[] byteArray19 = objectMapper17.writeValueAsBytes(obj18);
        org.codehaus.jackson.JsonNode jsonNode20 = objectMapper8.readTree(byteArray19);
        org.codehaus.jackson.annotate.JsonMethod jsonMethod21 = null;
        org.codehaus.jackson.annotate.JsonAutoDetect.Visibility visibility22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper8.setVisibility(jsonMethod21, visibility22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertNotNull(objectWriter14);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[110, 117, 108, 108]");
        org.junit.Assert.assertNotNull(jsonNode20);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager14 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager14);
        java.lang.String str18 = restS3Service10.createTorrentUrl("", "hi!");
        boolean boolean20 = restS3Service10.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date21 = restS3Service10.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = restS3Service1.createSignedHeadUrl("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\": \"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!,http://s3.amazonaws.com//?torrent\"}", date21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str18, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Nov 04 08:20:21 BRT 2021");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager4);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object7 = restS3Service1.getObjectDetailsWithSignedUrl("[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"[\"content-length-range\", 58, 1]\"]': incorrect path");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk15 = restS3Service1.listVersionedObjectsChunked("http:/s3.amazonaws.com/hi%21?torrent", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "{\"http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\": \"\"}", 1636024766000L, "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on(':');
        java.lang.StringBuilder stringBuilder2 = null;
        com.google.common.base.Joiner joiner3 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.metamx.emitter.EmittingLogger emittingLogger5 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Throwable throwable6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode11 = objectMapper10.createObjectNode();
        java.lang.Object[] objArray12 = new java.lang.Object[] { providerCredentials8, objectMapper10 };
        emittingLogger5.info(throwable6, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", objArray12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        java.io.File file18 = new java.io.File("hi!");
        java.io.File file20 = new java.io.File(file18, "");
        java.lang.Class<?> wildcardClass21 = file18.getClass();
        org.codehaus.jackson.type.JavaType javaType22 = objectMapper16.constructType((java.lang.reflect.Type) wildcardClass21);
        com.metamx.emitter.EmittingLogger emittingLogger24 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig33 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider31, deserializerProvider32, serializationConfig33, deserializationConfig34);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper37.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper37.disableDefaultTyping();
        java.lang.Object obj40 = null;
        java.lang.String str41 = objectMapper37.writeValueAsString(obj40);
        com.metamx.druid.client.DataSegment.Builder builder42 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.metamx.druid.client.DataSegment.Builder builder47 = builder42.dimensions((java.util.List<java.lang.String>) strList45);
        com.metamx.emitter.EmittingLogger emittingLogger49 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray51 = new java.lang.Object[] { objectMapper27, deserializerProvider36, objectMapper37, strList45, emittingLogger49, (byte) 1 };
        emittingLogger24.error(throwable25, "{\"\": \"s3.amazonaws.com\"}", objArray51);
        java.lang.Throwable throwable53 = null;
        java.io.File file56 = new java.io.File("hi!");
        java.io.File file58 = new java.io.File(file56, "");
        java.io.File file59 = file56.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode61 = objectMapper60.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory62 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider66 = objectMapper63.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider67 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper68 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory62, serializerProvider66, deserializerProvider67);
        org.jets3t.service.security.ProviderCredentials providerCredentials69 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service70 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials69);
        org.jets3t.service.security.ProviderCredentials providerCredentials71 = restS3Service70.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager72 = null;
        restS3Service70.setHttpConnectionManager(httpConnectionManager72);
        java.lang.Object[] objArray76 = new java.lang.Object[] { file59, objectMapper60, objectMapper68, restS3Service70, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger24.info(throwable53, "", objArray76);
        java.lang.String str78 = joiner3.join((java.lang.Object) emittingLogger5, (java.lang.Object) javaType22, objArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder79 = joiner1.appendTo(stringBuilder2, objArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(joiner3);
        org.junit.Assert.assertNotNull(objectNode11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "hi!");
        org.junit.Assert.assertNull("file20.getParent() == null", file20.getParent());
        org.junit.Assert.assertEquals(file20.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(javaType22);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(deserializerProvider36);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "null" + "'", str41, "null");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "hi!");
        org.junit.Assert.assertNull("file58.getParent() == null", file58.getParent());
        org.junit.Assert.assertEquals(file58.toString(), "hi!");
        org.junit.Assert.assertNotNull(file59);
// flaky:         org.junit.Assert.assertEquals(file59.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file59.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode61);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(serializerProvider66);
        org.junit.Assert.assertNull(providerCredentials71);
        org.junit.Assert.assertNotNull(objArray76);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        restS3Service18.setDevPayUserToken("[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.jets3t.service.model.S3Bucket s3Bucket21 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.deleteObject(s3Bucket21, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action deleteObject cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties8);
        boolean boolean10 = restS3Service9.isRequesterPaysEnabled();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service9.enableBucketVersioning("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Failed to PUT request containing an XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        java.io.File file1 = new java.io.File("x-amz-meta-");
        java.io.File file3 = new java.io.File(file1, "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        boolean boolean5 = file1.setReadable(true);
        long long6 = file1.lastModified();
        java.io.File file8 = new java.io.File(file1, "[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "x-amz-meta-");
        org.junit.Assert.assertEquals(file3.getParent(), "x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file3.toString(), "x-amz-meta-/{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals(file8.getParent(), "x-amz-meta-/[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file8.toString(), "x-amz-meta-/[\"starts-with\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"\"]");
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider11, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17, hostConfiguration19);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service23 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, ":", credentialsProvider2, jets3tProperties17);
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        restS3Service1.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper15.prettyPrintingWriter(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.io.File file22 = new java.io.File("hi!");
        java.io.File file24 = new java.io.File(file22, "");
        java.lang.Class<?> wildcardClass25 = file22.getClass();
        org.codehaus.jackson.type.JavaType javaType26 = objectMapper20.constructType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean27 = objectMapper15.canDeserialize(javaType26);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider28 = null;
        objectMapper15.setFilters(filterProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper15);
        java.lang.String str31 = restS3Service1.getInvokingApplicationDescription();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper33.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        java.lang.Object obj38 = null;
        java.lang.String str39 = objectMapper35.writeValueAsString(obj38);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper35.setSerializerProvider(serializerProvider45);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig49 = objectMapper35.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper33.setDeserializationConfig(deserializationConfig49);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher51 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig32, objectMapper50);
        restS3Service1.setRequesterPaysEnabled(true);
        org.jets3t.service.Jets3tProperties jets3tProperties54 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.model.StorageObject storageObject58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap60 = restS3Service1.moveObject("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", storageObject58, true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "hi!");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(javaType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null" + "'", str39, "null");
        org.junit.Assert.assertNotNull(deserializerProvider40);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(deserializationConfig49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(jets3tProperties54);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        java.io.File file1 = new java.io.File("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        java.net.URI uRI2 = file1.toURI();
        java.io.File file3 = new java.io.File(uRI2);
        java.io.File file5 = new java.io.File("hi!");
        java.io.File file7 = new java.io.File(file5, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean8 = file5.setReadOnly();
        java.lang.String str9 = file5.getPath();
        int int10 = file3.compareTo(file5);
        org.junit.Assert.assertEquals(file1.getParent(), "{\"http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(uRI2);
// flaky:         org.junit.Assert.assertEquals(file3.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-57) + "'", int10 == (-57));
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"[\"content-length-range\", 10, 47]\": \"x-amz-meta-\"}");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        org.jets3t.service.model.StorageObject storageObject16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service1.renameObject("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "[\"content-length-range\", 58, 1]", storageObject16);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.setSerializationInclusion(inclusion5);
        org.codehaus.jackson.node.ArrayNode arrayNode7 = objectMapper6.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode9 = objectMapper8.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema10 = null;
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper8.schemaBasedReader(formatSchema10);
        byte[] byteArray13 = objectMapper8.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema14 = null;
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper8.reader(formatSchema14);
        java.text.DateFormat dateFormat16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper8.writer(dateFormat16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory20 = objectMapper18.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper8.setNodeFactory(jsonNodeFactory20);
        org.codehaus.jackson.map.ObjectReader objectReader22 = objectMapper6.readerForUpdating((java.lang.Object) objectMapper21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service24.getProviderCredentials();
        java.lang.String str26 = restS3Service24.getInvokingApplicationDescription();
        restS3Service24.setRequesterPaysEnabled(false);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig29 = null;
        org.codehaus.jackson.JsonFactory jsonFactory30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper31.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider34 = objectMapper31.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory30, serializerProvider34, deserializerProvider35);
        org.codehaus.jackson.map.SerializerFactory serializerFactory37 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.setSerializerFactory(serializerFactory37);
        org.codehaus.jackson.PrettyPrinter prettyPrinter39 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter40 = objectMapper38.prettyPrintingWriter(prettyPrinter39);
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper41.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper41.disableDefaultTyping();
        java.io.File file45 = new java.io.File("hi!");
        java.io.File file47 = new java.io.File(file45, "");
        java.lang.Class<?> wildcardClass48 = file45.getClass();
        org.codehaus.jackson.type.JavaType javaType49 = objectMapper43.constructType((java.lang.reflect.Type) wildcardClass48);
        boolean boolean50 = objectMapper38.canDeserialize(javaType49);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider51 = null;
        objectMapper38.setFilters(filterProvider51);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher53 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service24, s3SegmentPusherConfig29, objectMapper38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = objectMapper6.writeValueAsString((java.lang.Object) s3SegmentPusher53);
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.map.JsonMappingException; message: Host must be set to create a host URL (through reference chain: com.metamx.druid.loading.S3SegmentPusher[\"s3Client\"]->org.jets3t.service.impl.rest.httpclient.RestS3Service[\"httpClient\"]->org.apache.commons.httpclient.HttpClient[\"hostConfiguration\"]->org.apache.commons.httpclient.HostConfiguration[\"hostURL\"])");
        } catch (org.codehaus.jackson.map.JsonMappingException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(arrayNode7);
        org.junit.Assert.assertNotNull(objectNode9);
        org.junit.Assert.assertNotNull(objectReader11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(jsonNodeFactory20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectReader22);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(serializerProvider34);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectWriter40);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNull("file45.getParent() == null", file45.getParent());
        org.junit.Assert.assertEquals(file45.toString(), "hi!");
        org.junit.Assert.assertNull("file47.getParent() == null", file47.getParent());
        org.junit.Assert.assertEquals(file47.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(javaType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        restS3Service18.setRequesterPaysEnabled(true);
        java.lang.String str22 = restS3Service18.getInvokingApplicationDescription();
        org.jets3t.service.model.StorageBucket storageBucket23 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service18.putBucketAcl(storageBucket23);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "http://s3.amazonaws.com//?torrent");
        file1.deleteOnExit();
        boolean boolean9 = file1.createNewFile();
        boolean boolean12 = file1.setWritable(true, false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service5.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient7 = restS3Service5.getHttpClient();
        org.apache.commons.httpclient.HttpMethod httpMethod8 = null;
        restS3Service5.authorizeHttpRequest(httpMethod8);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider10 = null;
        restS3Service5.setCredentialsProvider(credentialsProvider10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "[\"content-length-range\", -226, -226]", credentialsProvider14);
        boolean boolean16 = restS3Service15.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials17);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getProviderCredentials();
        boolean boolean21 = restS3Service18.isBucketAccessible("");
        java.lang.String str22 = restS3Service18.getRestMetadataPrefix();
        java.lang.String str23 = restS3Service18.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24);
        java.lang.String str26 = restS3Service25.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig27 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig30 = null;
        org.codehaus.jackson.JsonFactory jsonFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider35 = objectMapper32.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory31, serializerProvider35, deserializerProvider36);
        org.codehaus.jackson.map.SerializerFactory serializerFactory38 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper37.setSerializerFactory(serializerFactory38);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher40 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service29, s3SegmentPusherConfig30, objectMapper37);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher41 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service25, s3SegmentPusherConfig27, objectMapper37);
        int int42 = restS3Service25.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials43 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service44 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials43);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = restS3Service44.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager46 = null;
        restS3Service44.setHttpConnectionManager(httpConnectionManager46);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager48 = null;
        restS3Service44.setHttpConnectionManager(httpConnectionManager48);
        boolean boolean50 = restS3Service44.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder51 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder53 = builder51.size(0L);
        org.joda.time.Interval interval54 = null;
        com.metamx.druid.client.DataSegment.Builder builder55 = builder53.interval(interval54);
        java.lang.String[] strArray59 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder53.metrics((java.util.List<java.lang.String>) strList60);
        org.jets3t.service.security.ProviderCredentials providerCredentials63 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider65 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service66 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials63, "null", credentialsProvider65);
        org.jets3t.service.security.ProviderCredentials providerCredentials67 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service68 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials67);
        java.util.Map<java.lang.String, java.lang.Object> strMap69 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap70 = restS3Service68.renameMetadataKeys(strMap69);
        java.util.Map<java.lang.String, java.lang.Object> strMap71 = restS3Service66.renameMetadataKeys(strMap69);
        com.metamx.druid.client.DataSegment.Builder builder72 = builder53.loadSpec(strMap71);
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = restS3Service44.renameMetadataKeys(strMap71);
        java.util.Map<java.lang.String, java.lang.Object> strMap74 = restS3Service25.renameMetadataKeys(strMap73);
        java.util.Map<java.lang.String, java.lang.Object> strMap75 = restS3Service18.renameMetadataKeys(strMap73);
        java.util.Map<java.lang.String, java.lang.Object> strMap76 = restS3Service15.renameMetadataKeys(strMap73);
        java.util.Map<java.lang.String, java.lang.Object> strMap77 = restS3Service5.renameMetadataKeys(strMap76);
        org.jets3t.service.security.ProviderCredentials providerCredentials78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = org.jets3t.service.S3Service.createSignedUrl("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", ":", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", strMap77, providerCredentials78, (long) (byte) 0, true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNotNull(httpClient7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "x-amz-meta-" + "'", str22, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "x-amz-meta-" + "'", str23, "x-amz-meta-");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(serializerProvider35);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNull(providerCredentials45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        java.lang.Object obj12 = null;
        java.lang.String str13 = objectMapper9.writeValueAsString(obj12);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider14 = objectMapper9.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider19, deserializerProvider20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper9.setSerializerProvider(serializerProvider19);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory25 = objectMapper23.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory30 = objectMapper28.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader31 = objectMapper26.reader(jsonNodeFactory30);
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray35 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper32.enable(featureArray35);
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper26.enable(featureArray35);
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper23.enable(featureArray35);
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper9.enable(featureArray35);
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper0.disable(featureArray35);
        org.codehaus.jackson.JsonFactory jsonFactory41 = objectMapper40.getJsonFactory();
        org.codehaus.jackson.FormatSchema formatSchema42 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter43 = objectMapper40.schemaBasedWriter(formatSchema42);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null" + "'", str13, "null");
        org.junit.Assert.assertNotNull(deserializerProvider14);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(jsonNodeFactory25);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(jsonNodeFactory30);
        org.junit.Assert.assertNotNull(objectReader31);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertNotNull(objectWriter43);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider20 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials21);
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = restS3Service22.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager24 = null;
        restS3Service22.setHttpConnectionManager(httpConnectionManager24);
        org.jets3t.service.Jets3tProperties jets3tProperties26 = restS3Service22.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18, "", credentialsProvider20, jets3tProperties26, hostConfiguration27);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider17, jets3tProperties26);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider14, jets3tProperties26);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration31 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service32 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider11, jets3tProperties26, hostConfiguration31);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "<form action=\"https://http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider8, jets3tProperties26, hostConfiguration33);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration35 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service36 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider5, jets3tProperties26, hostConfiguration35);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration37 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service38 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider2, jets3tProperties26, hostConfiguration37);
        org.junit.Assert.assertNull(providerCredentials23);
        org.junit.Assert.assertNotNull(jets3tProperties26);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties8, hostConfiguration9);
        boolean boolean11 = restS3Service10.isAuthenticatedConnection();
        java.lang.String str12 = restS3Service10.getDevPayUserToken();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray15 = restS3Service10.getObjectVersions("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/?max-keys=1000&versions&prefix': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper9.getDeserializerProvider();
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(deserializerProvider13);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable2 = null;
        com.metamx.emitter.EmittingLogger emittingLogger5 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray11 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.enable(featureArray11);
        emittingLogger5.warn(throwable6, "", (java.lang.Object[]) featureArray11);
        emittingLogger1.trace(throwable2, "/", (java.lang.Object[]) featureArray11);
        boolean boolean15 = emittingLogger1.isDebugEnabled();
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode15 = objectMapper14.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema16 = null;
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper14.schemaBasedReader(formatSchema16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode19 = objectMapper18.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema20 = null;
        org.codehaus.jackson.map.ObjectReader objectReader21 = objectMapper18.schemaBasedReader(formatSchema20);
        byte[] byteArray23 = objectMapper18.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode24 = objectMapper14.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser25 = objectMapper13.treeAsTokens(jsonNode24);
        org.codehaus.jackson.JsonNode jsonNode26 = objectMapper6.readTree(jsonParser25);
        org.codehaus.jackson.JsonFactory jsonFactory27 = objectMapper6.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27);
        org.codehaus.jackson.map.InjectableValues injectableValues29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.setInjectableValues(injectableValues29);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectNode15);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(objectNode19);
        org.junit.Assert.assertNotNull(objectReader21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode24);
        org.junit.Assert.assertNotNull(jsonParser25);
        org.junit.Assert.assertNotNull(jsonNode26);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(objectMapper30);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        int int20 = restS3Service18.getInternalErrorRetryMax();
        java.lang.String str21 = restS3Service18.getInvokingApplicationDescription();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object24 = restS3Service18.getObject("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"content-length-range\", 58, 1]");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service0 = null;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher3 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service0, s3SegmentPusherConfig1, objectMapper2);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = s3SegmentPusher3.config;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        org.jets3t.service.Jets3tProperties jets3tProperties13 = restS3Service9.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider7, jets3tProperties13);
        s3SegmentPusher3.s3Client = restS3Service14;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = s3SegmentPusher3.jsonMapper;
        java.io.File file18 = new java.io.File("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        java.net.URI uRI19 = file18.toURI();
        com.metamx.druid.client.DataSegment dataSegment20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment21 = s3SegmentPusher3.push(file18, dataSegment20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(s3SegmentPusherConfig4);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertNotNull(jets3tProperties13);
        org.junit.Assert.assertNull(objectMapper16);
        org.junit.Assert.assertEquals(file18.getParent(), "{\"http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file18.toString(), "{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(uRI19);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper0.reader(formatSchema6);
        java.text.DateFormat dateFormat8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper0.writer(dateFormat8);
        com.metamx.emitter.EmittingLogger emittingLogger11 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean12 = emittingLogger11.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper14.writer(prettyPrinter16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader19 = objectMapper14.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter22 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter23 = objectMapper20.writer(prettyPrinter22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper20.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray25 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper20.enable(featureArray25);
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper14.disable(featureArray25);
        emittingLogger11.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray25);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper0.enable(featureArray25);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.setSerializationInclusion(inclusion30);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectReader19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectWriter23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper31);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider10 = restS3Service1.getCredentialsProvider();
        java.util.List<java.lang.String> strList11 = restS3Service1.getResourceParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.unsetNotificationConfig("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]/&notification': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertNull(credentialsProvider10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        org.jets3t.service.Jets3tProperties jets3tProperties10 = restS3Service1.getJetS3tProperties();
        org.jets3t.service.model.StorageObject storageObject14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap16 = restS3Service1.copyObject("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", storageObject14, false);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyObject");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jets3tProperties10);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on('/');
        com.google.common.base.Joiner joiner3 = joiner1.useForNull("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        com.google.common.base.Joiner joiner5 = com.google.common.base.Joiner.on('/');
        com.google.common.base.Joiner joiner7 = joiner5.useForNull("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode9 = objectMapper8.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema10 = null;
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper8.schemaBasedReader(formatSchema10);
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode13 = objectMapper12.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema14 = null;
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper12.schemaBasedReader(formatSchema14);
        byte[] byteArray17 = objectMapper12.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode18 = objectMapper8.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper8.setSerializationInclusion(inclusion19);
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper22.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider25 = objectMapper22.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider25, deserializerProvider26);
        org.codehaus.jackson.JsonFactory jsonFactory28 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider32 = objectMapper29.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory28, serializerProvider32, deserializerProvider33);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode36 = objectMapper35.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema37 = null;
        org.codehaus.jackson.map.ObjectReader objectReader38 = objectMapper35.schemaBasedReader(formatSchema37);
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode40 = objectMapper39.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema41 = null;
        org.codehaus.jackson.map.ObjectReader objectReader42 = objectMapper39.schemaBasedReader(formatSchema41);
        byte[] byteArray44 = objectMapper39.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode45 = objectMapper35.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser46 = objectMapper34.treeAsTokens(jsonNode45);
        org.codehaus.jackson.JsonNode jsonNode47 = objectMapper27.readTree(jsonParser46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper48.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper48.disableDefaultTyping();
        java.io.File file52 = new java.io.File("hi!");
        java.io.File file54 = new java.io.File(file52, "");
        java.lang.Class<?> wildcardClass55 = file52.getClass();
        org.codehaus.jackson.type.JavaType javaType56 = objectMapper50.constructType((java.lang.reflect.Type) wildcardClass55);
        org.codehaus.jackson.map.MappingIterator<java.util.Collection<java.lang.String>> strCollectionItor57 = objectMapper8.readValues(jsonParser46, javaType56);
        java.lang.String str58 = joiner5.join((java.util.Iterator<java.util.Collection<java.lang.String>>) strCollectionItor57);
        java.lang.String str59 = joiner1.join((java.util.Iterator<java.util.Collection<java.lang.String>>) strCollectionItor57);
        com.google.common.base.Joiner joiner61 = joiner1.useForNull("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(joiner3);
        org.junit.Assert.assertNotNull(joiner5);
        org.junit.Assert.assertNotNull(joiner7);
        org.junit.Assert.assertNotNull(objectNode9);
        org.junit.Assert.assertNotNull(objectReader11);
        org.junit.Assert.assertNotNull(objectNode13);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode18);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(serializerProvider25);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(serializerProvider32);
        org.junit.Assert.assertNotNull(objectNode36);
        org.junit.Assert.assertNotNull(objectReader38);
        org.junit.Assert.assertNotNull(objectNode40);
        org.junit.Assert.assertNotNull(objectReader42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode45);
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertNotNull(jsonNode47);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "hi!");
        org.junit.Assert.assertNull("file54.getParent() == null", file54.getParent());
        org.junit.Assert.assertEquals(file54.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(javaType56);
        org.junit.Assert.assertNotNull(strCollectionItor57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(joiner61);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str8 = restS3Service1.createTorrentUrl("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.apache.commons.httpclient.HttpClient httpClient9 = restS3Service1.getHttpClient();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" + "'", str8, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent");
        org.junit.Assert.assertNotNull(httpClient9);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory2 = objectMapper0.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping();
        java.io.File file6 = new java.io.File("hi!");
        java.io.File file8 = new java.io.File(file6, "");
        java.lang.String str9 = file8.getName();
        java.net.URL uRL10 = file8.toURL();
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode11 = objectMapper3.readTree(uRL10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(jsonNodeFactory2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        boolean boolean7 = restS3Service1.isAuthenticatedConnection();
        org.jets3t.service.model.S3Object s3Object12 = null;
        java.util.Calendar calendar14 = null;
        java.util.Calendar calendar15 = null;
        java.lang.String[] strArray22 = new java.lang.String[] { "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", "[\"content-length-range\", -226, -226]" };
        java.lang.String[] strArray24 = new java.lang.String[] {};
        java.lang.String str25 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service1.copyVersionedObject("/", "[\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"[\"content-length-range\", 58, 1]\"]", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "http://s3.amazonaws.com//?torrent", s3Object12, true, calendar14, calendar15, strArray22, strArray24);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: copyVersionedObject");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\"\": \"\"}" + "'", str25, "{\"\": \"\"}");
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray17 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper14.enable(featureArray17);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider19 = null;
        objectMapper18.setFilters(filterProvider19);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher21 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig13, objectMapper18);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper23.disableDefaultTyping();
        java.lang.Object obj26 = null;
        java.lang.String str27 = objectMapper23.writeValueAsString(obj26);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider28 = objectMapper23.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper23.setSerializerProvider(serializerProvider33);
        org.codehaus.jackson.JsonFactory jsonFactory37 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider38 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig40 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory37, serializerProvider38, deserializerProvider39, serializationConfig40, deserializationConfig41);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider43 = objectMapper42.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper36.setDeserializerProvider(deserializerProvider43);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher45 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig22, objectMapper36);
        org.codehaus.jackson.type.TypeReference typeReference47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.Version version48 = objectMapper36.readValue("{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\": \"\"}", typeReference47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "null" + "'", str27, "null");
        org.junit.Assert.assertNotNull(deserializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(deserializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper44);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        int int8 = restS3Service1.checkBucketStatus("x-amz-meta-");
        boolean boolean9 = restS3Service1.isHttpsOnly();
        boolean boolean10 = restS3Service1.isHttpsOnly();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service7.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", credentialsProvider5, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider2, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.acl.AccessControlList accessControlList20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket21 = restS3Service17.createBucket("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent?torrent", "http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", accessControlList20);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: createBucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"content-length-range\", -226, -226]", credentialsProvider2);
        boolean boolean4 = restS3Service3.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = restS3Service6.getProviderCredentials();
        boolean boolean9 = restS3Service6.isBucketAccessible("");
        java.lang.String str10 = restS3Service6.getRestMetadataPrefix();
        java.lang.String str11 = restS3Service6.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        java.lang.String str14 = restS3Service13.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig15 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig18 = null;
        org.codehaus.jackson.JsonFactory jsonFactory19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider23 = objectMapper20.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory19, serializerProvider23, deserializerProvider24);
        org.codehaus.jackson.map.SerializerFactory serializerFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.setSerializerFactory(serializerFactory26);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher28 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service17, s3SegmentPusherConfig18, objectMapper25);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher29 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service13, s3SegmentPusherConfig15, objectMapper25);
        int int30 = restS3Service13.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service32 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials31);
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = restS3Service32.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager34 = null;
        restS3Service32.setHttpConnectionManager(httpConnectionManager34);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager36 = null;
        restS3Service32.setHttpConnectionManager(httpConnectionManager36);
        boolean boolean38 = restS3Service32.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder39 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.size(0L);
        org.joda.time.Interval interval42 = null;
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.interval(interval42);
        java.lang.String[] strArray47 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder41.metrics((java.util.List<java.lang.String>) strList48);
        org.jets3t.service.security.ProviderCredentials providerCredentials51 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider53 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service54 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials51, "null", credentialsProvider53);
        org.jets3t.service.security.ProviderCredentials providerCredentials55 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service56 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials55);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = restS3Service56.renameMetadataKeys(strMap57);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = restS3Service54.renameMetadataKeys(strMap57);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder41.loadSpec(strMap59);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = restS3Service32.renameMetadataKeys(strMap59);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = restS3Service13.renameMetadataKeys(strMap61);
        java.util.Map<java.lang.String, java.lang.Object> strMap63 = restS3Service6.renameMetadataKeys(strMap61);
        java.util.Map<java.lang.String, java.lang.Object> strMap64 = restS3Service3.renameMetadataKeys(strMap61);
        org.jets3t.service.acl.AccessControlList accessControlList67 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putObjectAcl("[\"content-length-range\", 97, 100]", "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", accessControlList67);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The object '[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]' does not include ACL information");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "x-amz-meta-" + "'", str10, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(serializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNull(providerCredentials33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = restS3Service3.getAWSCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.BaseVersionOrDeleteMarker[] baseVersionOrDeleteMarkerArray7 = restS3Service3.getObjectVersions("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "http:/s3.amazonaws.com/hi%21?torrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}/&max-keys=1000&versions&prefix=http%3A%2Fs3.amazonaws.com%2Fhi%2521%3Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials4);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str6 = restS3Service1.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        java.lang.Object obj11 = null;
        java.lang.String str12 = objectMapper8.writeValueAsString(obj11);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = objectMapper8.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver15 = objectMapper14.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper14.setSerializationInclusion(inclusion16);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker18 = objectMapper17.getVisibilityChecker();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher19 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig7, objectMapper17);
        org.jets3t.service.model.S3Object s3Object21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service1.putObjectWithSignedUrl("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", s3Object21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null" + "'", str12, "null");
        org.junit.Assert.assertNotNull(deserializerProvider13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(subtypeResolver15);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker18);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        boolean boolean5 = restS3Service1.isRequesterPaysEnabled();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider8, jets3tProperties14);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider5, jets3tProperties14, hostConfiguration16);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.Jets3tProperties jets3tProperties19 = restS3Service18.getJetS3tProperties();
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(jets3tProperties19);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service33 = s3SegmentPusher32.s3Client;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray38 = restS3Service33.listObjects("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", 80259510272L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}/?max-keys=80259510272&prefix=%5B%22starts-with%22%2C%20%22%24%3Cform%20action%3D%22https%3A%2F%2F.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E%22%2C%20%22%22%5D&delimiter=%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A%2F%2Fs3.amazonaws.com%2F%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D%2F%253Cform%2520action%253D%2522https%253A%2F%2F.s3.amazonaws.com%2F%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart%2Fform-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C%2Fform%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(restS3Service33);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
        org.junit.Assert.assertNotNull(joiner1);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "s3.amazonaws.com", credentialsProvider2);
        org.apache.commons.httpclient.HttpMethod httpMethod4 = null;
        restS3Service3.authorizeHttpRequest(httpMethod4);
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        org.apache.commons.httpclient.HttpClient httpClient12 = restS3Service7.getHttpClient();
        restS3Service3.setHttpClient(httpClient12);
        int int14 = restS3Service3.getInternalErrorRetryMax();
        org.jets3t.service.model.NotificationConfig notificationConfig16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.setNotificationConfig("[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", notificationConfig16);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: Unable to build NotificationConfig XML document");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertNotNull(httpClient12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        java.net.URI uRI4 = file1.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        java.io.File file6 = new java.io.File(uRI4);
        java.io.File file8 = new java.io.File(file6, "http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        java.io.File file9 = file8.getParentFile();
        long long10 = file8.getTotalSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRI4);
// flaky:         org.junit.Assert.assertEquals(file5.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com/?torrent");
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        java.lang.String str4 = restS3Service1.getDevPayProductToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode7 = objectMapper6.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper6.schemaBasedReader(formatSchema8);
        byte[] byteArray11 = objectMapper6.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper6.reader(formatSchema12);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher14 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig5, objectMapper6);
        java.util.Calendar calendar17 = null;
        java.util.Calendar calendar18 = null;
        java.lang.String[] strArray25 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str26 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray25);
        java.lang.String str27 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"content-length-range\", 97, 100]", strArray25);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.lang.String str34 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality(":", strArray33);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject35 = restS3Service1.getObjectDetails("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "{\"\": \"\"}", calendar17, calendar18, strArray25, strArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/%7B%22%22%3A%20%22%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objectNode7);
        org.junit.Assert.assertNotNull(objectReader9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str26, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str27, "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}" + "'", str34, "{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}");
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.io.File file2 = new java.io.File("<form action=\"https://<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "");
        org.junit.Assert.assertEquals(file2.getParent(), "<form action=\"https:/<form action=\"https:/{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file2.toString(), "<form action=\"https:/<form action=\"https:/{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        int int8 = restS3Service1.checkBucketStatus("x-amz-meta-");
        boolean boolean9 = restS3Service1.isHttpsOnly();
        restS3Service1.shutdown();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.io.File file1 = new java.io.File("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
        boolean boolean3 = file1.setExecutable(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = file1.setLastModified((long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative time");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(file1.getParent(), "[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        boolean boolean12 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList15 = restS3Service1.getObjectAcl(s3Bucket13, "http://s3.amazonaws.com//?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Get Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.PrettyPrinter prettyPrinter1 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper0.prettyPrintingWriter(prettyPrinter1);
        org.codehaus.jackson.FormatSchema formatSchema3 = null;
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper0.schemaBasedReader(formatSchema3);
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode6 = objectMapper0.readTree(reader5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: No content to map to Object due to end of input");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectReader4);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = objectMapper0.getDeserializationConfig();
        org.codehaus.jackson.map.SerializerFactory serializerFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper0.setSerializerFactory(serializerFactory15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature feature18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper17.configure(feature18, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializationConfig14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper17);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.joda.time.Interval interval1 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = null;
        com.metamx.druid.client.DataSegment.Builder builder4 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.metamx.druid.client.DataSegment.Builder builder9 = builder4.dimensions((java.util.List<java.lang.String>) strList7);
        com.metamx.druid.client.DataSegment.Builder builder11 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.metamx.druid.client.DataSegment.Builder builder16 = builder11.dimensions((java.util.List<java.lang.String>) strList14);
        java.lang.String str17 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList14);
        com.metamx.druid.shard.ShardSpec shardSpec18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment20 = new com.metamx.druid.client.DataSegment("{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}", interval1, "[\"content-length-range\", 1, 0]", strMap3, (java.util.List<java.lang.String>) strList7, (java.util.List<java.lang.String>) strList14, shardSpec18, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str17, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        restS3Service18.setDevPayUserToken("[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = restS3Service26.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager28 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager28);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager30 = null;
        restS3Service26.setHttpConnectionManager(httpConnectionManager30);
        boolean boolean32 = restS3Service26.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder33 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder35 = builder33.size(0L);
        org.joda.time.Interval interval36 = null;
        com.metamx.druid.client.DataSegment.Builder builder37 = builder35.interval(interval36);
        java.lang.String[] strArray41 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.metamx.druid.client.DataSegment.Builder builder44 = builder35.metrics((java.util.List<java.lang.String>) strList42);
        org.jets3t.service.security.ProviderCredentials providerCredentials45 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider47 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service48 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials45, "null", credentialsProvider47);
        org.jets3t.service.security.ProviderCredentials providerCredentials49 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service50 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = restS3Service50.renameMetadataKeys(strMap51);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = restS3Service48.renameMetadataKeys(strMap51);
        com.metamx.druid.client.DataSegment.Builder builder54 = builder35.loadSpec(strMap53);
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = restS3Service26.renameMetadataKeys(strMap53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = restS3Service18.createSignedUrl("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", "<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", strMap53, (long) 10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.lang.String str4 = file3.getName();
        java.net.URL uRL5 = file3.toURL();
        boolean boolean6 = file3.mkdir();
        java.nio.file.Path path7 = file3.toPath();
        boolean boolean8 = file3.canExecute();
        java.lang.String str9 = file3.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucketPolicy("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443//home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory15 = objectMapper13.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper11.reader(jsonNodeFactory15);
        org.codehaus.jackson.map.ObjectReader objectReader17 = objectMapper8.reader(jsonNodeFactory15);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        org.codehaus.jackson.JsonFactory jsonFactory32 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig35 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig36 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory32, serializerProvider33, deserializerProvider34, serializationConfig35, deserializationConfig36);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider38 = objectMapper37.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = objectMapper31.setDeserializerProvider(deserializerProvider38);
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider43 = objectMapper40.getSerializerProvider();
        java.text.DateFormat dateFormat44 = null;
        objectMapper40.setDateFormat(dateFormat44);
        org.codehaus.jackson.JsonFactory jsonFactory47 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = objectMapper48.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper48.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider51 = objectMapper48.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider52 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory47, serializerProvider51, deserializerProvider52);
        org.codehaus.jackson.map.SerializerFactory serializerFactory54 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper53.setSerializerFactory(serializerFactory54);
        org.codehaus.jackson.PrettyPrinter prettyPrinter56 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter57 = objectMapper55.prettyPrintingWriter(prettyPrinter56);
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = objectMapper58.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper58.disableDefaultTyping();
        java.io.File file62 = new java.io.File("hi!");
        java.io.File file64 = new java.io.File(file62, "");
        java.lang.Class<?> wildcardClass65 = file62.getClass();
        org.codehaus.jackson.type.JavaType javaType66 = objectMapper60.constructType((java.lang.reflect.Type) wildcardClass65);
        boolean boolean67 = objectMapper55.canDeserialize(javaType66);
        org.jets3t.service.impl.rest.httpclient.RestStorageService restStorageService68 = objectMapper40.readValue("null", javaType66);
        org.codehaus.jackson.node.ArrayNode arrayNode69 = objectMapper40.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode71 = objectMapper70.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema72 = null;
        org.codehaus.jackson.map.ObjectReader objectReader73 = objectMapper70.schemaBasedReader(formatSchema72);
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode75 = objectMapper74.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema76 = null;
        org.codehaus.jackson.map.ObjectReader objectReader77 = objectMapper74.schemaBasedReader(formatSchema76);
        byte[] byteArray79 = objectMapper74.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode80 = objectMapper70.valueToTree((java.lang.Object) 10L);
        byte[] byteArray81 = objectMapper40.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode82 = objectMapper39.readTree(byteArray81);
        org.codehaus.jackson.JsonNode jsonNode83 = objectMapper8.readTree(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode85 = objectMapper8.readTree("s3.amazonaws.com");
            org.junit.Assert.fail("Expected exception of type org.codehaus.jackson.JsonParseException; message: Unexpected character ('s' (code 115)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')? at [Source: java.io.StringReader@5cdbc7cf; line: 1, column: 2]");
        } catch (org.codehaus.jackson.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(jsonNodeFactory15);
        org.junit.Assert.assertNotNull(objectReader16);
        org.junit.Assert.assertNotNull(objectReader17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(deserializerProvider38);
        org.junit.Assert.assertNotNull(objectMapper39);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertNotNull(serializerProvider43);
        org.junit.Assert.assertNotNull(objectMapper49);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(serializerProvider51);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNotNull(objectWriter57);
        org.junit.Assert.assertNotNull(objectMapper59);
        org.junit.Assert.assertNotNull(objectMapper60);
        org.junit.Assert.assertNull("file62.getParent() == null", file62.getParent());
        org.junit.Assert.assertEquals(file62.toString(), "hi!");
        org.junit.Assert.assertNull("file64.getParent() == null", file64.getParent());
        org.junit.Assert.assertEquals(file64.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(javaType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(restStorageService68);
        org.junit.Assert.assertNotNull(arrayNode69);
        org.junit.Assert.assertNotNull(objectNode71);
        org.junit.Assert.assertNotNull(objectReader73);
        org.junit.Assert.assertNotNull(objectNode75);
        org.junit.Assert.assertNotNull(objectReader77);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode82);
        org.junit.Assert.assertNotNull(jsonNode83);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        int int7 = restS3Service1.getInternalErrorRetryMax();
        org.jets3t.service.acl.AccessControlList accessControlList9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAclWithSignedUrl("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent", accessControlList9);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", credentialsProvider2);
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider4 = restS3Service3.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        java.lang.String str13 = restS3Service9.getEndpoint();
        java.lang.String str16 = restS3Service9.createTorrentUrl("", "");
        java.lang.String str17 = restS3Service9.getRestMetadataPrefix();
        boolean boolean18 = restS3Service9.isShutdown();
        java.util.Date date19 = restS3Service9.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = restS3Service3.createSignedHeadUrl("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\": \"\"}", providerCredentials7, date19, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(credentialsProvider4);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "s3.amazonaws.com" + "'", str13, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str16, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 04 08:20:29 BRT 2021");
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy9);
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper0.reader();
        org.codehaus.jackson.FormatSchema formatSchema12 = null;
        org.codehaus.jackson.map.ObjectReader objectReader13 = objectMapper0.schemaBasedReader(formatSchema12);
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper14.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper14.disableDefaultTyping();
        java.lang.Object obj17 = null;
        java.lang.String str18 = objectMapper14.writeValueAsString(obj17);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = objectMapper14.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray23 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper20.enable(featureArray23);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider25 = null;
        objectMapper24.setFilters(filterProvider25);
        org.codehaus.jackson.JsonFactory jsonFactory27 = objectMapper24.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27);
        org.codehaus.jackson.JsonFactory jsonFactory29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider33 = objectMapper30.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory29, serializerProvider33, deserializerProvider34);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode37 = objectMapper36.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema38 = null;
        org.codehaus.jackson.map.ObjectReader objectReader39 = objectMapper36.schemaBasedReader(formatSchema38);
        byte[] byteArray41 = objectMapper36.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray42 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper36.disable(featureArray42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper36.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper45.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory47 = objectMapper45.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper45.enableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig49 = objectMapper48.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper50.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper53 = objectMapper52.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = objectMapper52.disableDefaultTyping();
        java.io.File file56 = new java.io.File("hi!");
        java.io.File file58 = new java.io.File(file56, "");
        java.lang.Class<?> wildcardClass59 = file56.getClass();
        org.codehaus.jackson.type.JavaType javaType60 = objectMapper54.constructType((java.lang.reflect.Type) wildcardClass59);
        com.metamx.emitter.EmittingLogger emittingLogger61 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass59);
        org.codehaus.jackson.type.JavaType javaType62 = objectMapper50.constructType((java.lang.reflect.Type) wildcardClass59);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig63 = objectMapper50.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider33, deserializerProvider44, serializationConfig49, deserializationConfig63);
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper14.setSerializationConfig(serializationConfig49);
        org.codehaus.jackson.map.ObjectMapper objectMapper66 = objectMapper0.setSerializationConfig(serializationConfig49);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectReader11);
        org.junit.Assert.assertNotNull(objectReader13);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "null" + "'", str18, "null");
        org.junit.Assert.assertNotNull(deserializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(serializerProvider33);
        org.junit.Assert.assertNotNull(objectNode37);
        org.junit.Assert.assertNotNull(objectReader39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNotNull(jsonNodeFactory47);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(serializationConfig49);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(objectMapper53);
        org.junit.Assert.assertNotNull(objectMapper54);
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "hi!");
        org.junit.Assert.assertNull("file58.getParent() == null", file58.getParent());
        org.junit.Assert.assertEquals(file58.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(javaType60);
        org.junit.Assert.assertNotNull(javaType62);
        org.junit.Assert.assertNotNull(deserializationConfig63);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(objectMapper66);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher14 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service10, s3SegmentPusherConfig12, objectMapper13);
        java.lang.String str15 = restS3Service10.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient16 = null;
        restS3Service10.setHttpClient(httpClient16);
        org.jets3t.service.Jets3tProperties jets3tProperties18 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", credentialsProvider8, jets3tProperties18, hostConfiguration19);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]", credentialsProvider5, jets3tProperties18, hostConfiguration21);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties18, hostConfiguration23);
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(jets3tProperties18);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        java.lang.String str6 = restS3Service1.getRestMetadataPrefix();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteObject("{\"\": \"s3.amazonaws.com\"}/hi!", "[\"starts-with\", \"$s3.amazonaws.com\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"\": \"s3.amazonaws.com\"}/hi!/%5B%22starts-with%22%2C%20%22%24s3.amazonaws.com%22%2C%20%22%22%5D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "x-amz-meta-" + "'", str6, "x-amz-meta-");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service0 = null;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher3 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service0, s3SegmentPusherConfig1, objectMapper2);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = s3SegmentPusher3.config;
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider7 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        org.jets3t.service.Jets3tProperties jets3tProperties13 = restS3Service9.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials5, "{\"\": \"s3.amazonaws.com\"}", credentialsProvider7, jets3tProperties13);
        s3SegmentPusher3.s3Client = restS3Service14;
        java.io.File file16 = null;
        java.io.File file18 = new java.io.File(file16, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        boolean boolean21 = file18.setExecutable(false, false);
        com.metamx.druid.client.DataSegment dataSegment22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment23 = s3SegmentPusher3.push(file18, dataSegment22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(s3SegmentPusherConfig4);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertNotNull(jets3tProperties13);
        org.junit.Assert.assertEquals(file18.getParent(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
        org.junit.Assert.assertEquals(file18.toString(), "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.io.File file1 = new java.io.File("{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        java.net.URI uRI2 = file1.toURI();
        boolean boolean3 = file1.canWrite();
        org.junit.Assert.assertEquals(file1.getParent(), "{\"http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "{\"http:/s3.amazonaws.com/hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(uRI2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/form>\", \"\"]8309335702549357250{\"[\"content-length-range\", 97, 100]\": \"http:/s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        org.codehaus.jackson.FormatSchema formatSchema17 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter18 = objectMapper12.schemaBasedWriter(formatSchema17);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectWriter18);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucketPolicy("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]/?policy': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNull(providerCredentials6);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy9 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials11);
        java.lang.String str13 = restS3Service12.getDevPayUserToken();
        org.apache.commons.httpclient.HttpClient httpClient14 = restS3Service12.getHttpClient();
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper10.readerForUpdating((java.lang.Object) restS3Service12);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList17 = restS3Service12.getBucketAcl("http://s3.amazonaws.com/%2F/x-amz-meta-?torrent");
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(httpClient14);
        org.junit.Assert.assertNotNull(objectReader15);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        byte[] byteArray5 = objectMapper0.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray6 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.disable(featureArray6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema9 = null;
        org.codehaus.jackson.map.ObjectReader objectReader10 = objectMapper8.reader(formatSchema9);
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper8.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig12 = objectMapper8.getDeserializationConfig();
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectReader10);
        org.junit.Assert.assertNotNull(objectWriter11);
        org.junit.Assert.assertNotNull(deserializationConfig12);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.codehaus.jackson.map.SerializerFactory serializerFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory0);
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper1.prettyPrintingWriter(prettyPrinter2);
        org.codehaus.jackson.map.SerializerFactory serializerFactory4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper1.setSerializerFactory(serializerFactory4);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider6 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter7 = objectMapper5.filteredWriter(filterProvider6);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectWriter7);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        java.io.File file5 = new java.io.File(file3, "");
        file5.deleteOnExit();
        boolean boolean7 = file5.canExecute();
        java.io.File file9 = new java.io.File(file5, ":");
        java.net.URI uRI10 = file5.toURI();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file5.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals(file9.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>/:");
        org.junit.Assert.assertNotNull(uRI10);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        boolean boolean5 = file1.setWritable(false);
        java.io.File file7 = new java.io.File(file1, "{\"\": \"s3.amazonaws.com\"}/hi!");
        java.lang.String str8 = file7.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!/{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file7.toString(), "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!/{\"\": \"s3.amazonaws.com\"}/hi!" + "'", str8, "hi!/{\"\": \"s3.amazonaws.com\"}/hi!");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode5 = objectMapper4.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper4.schemaBasedReader(formatSchema6);
        byte[] byteArray9 = objectMapper4.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode10 = objectMapper0.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper0.enableDefaultTyping(defaultTyping11);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectNode5);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode10);
        org.junit.Assert.assertNotNull(objectMapper12);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.codehaus.jackson.map.SerializerFactory serializerFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory0);
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper1.prettyPrintingWriter(prettyPrinter2);
        org.codehaus.jackson.map.SerializerFactory serializerFactory4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper1.setSerializerFactory(serializerFactory4);
        java.text.DateFormat dateFormat6 = null;
        objectMapper1.setDateFormat(dateFormat6);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper5);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.setReadOnly();
        java.lang.String str5 = file1.getPath();
        boolean boolean6 = file1.canWrite();
        boolean boolean7 = file1.mkdirs();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.io.File file1 = new java.io.File("[\"content-length-range\", 58, 1]");
        boolean boolean2 = file1.mkdir();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "[\"content-length-range\", 58, 1]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.PrettyPrinter prettyPrinter7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper5.writer(prettyPrinter7);
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper11.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory15 = objectMapper13.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader16 = objectMapper11.reader(jsonNodeFactory15);
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray20 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper17.enable(featureArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper11.enable(featureArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper9.enable(featureArray20);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper5.disable(featureArray20);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider25 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter26 = objectMapper5.writer(filterProvider25);
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider29 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials30 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider32 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials33 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service34 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials33);
        org.jets3t.service.security.ProviderCredentials providerCredentials35 = restS3Service34.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager36 = null;
        restS3Service34.setHttpConnectionManager(httpConnectionManager36);
        org.jets3t.service.Jets3tProperties jets3tProperties38 = restS3Service34.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration39 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service40 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials30, "", credentialsProvider32, jets3tProperties38, hostConfiguration39);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service41 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27, "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", credentialsProvider29, jets3tProperties38);
        java.lang.String str42 = objectMapper5.writeValueAsString((java.lang.Object) jets3tProperties38);
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(jsonNodeFactory15);
        org.junit.Assert.assertNotNull(objectReader16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectWriter26);
        org.junit.Assert.assertNull(providerCredentials35);
        org.junit.Assert.assertNotNull(jets3tProperties38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{\"properties\":{},\"loaded\":false}" + "'", str42, "{\"properties\":{},\"loaded\":false}");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        org.apache.commons.httpclient.HttpMethod httpMethod7 = null;
        restS3Service1.authorizeHttpRequest(httpMethod7);
        boolean boolean9 = restS3Service1.isShutdown();
        boolean boolean10 = restS3Service1.isShutdown();
        java.util.Calendar calendar13 = null;
        java.util.Calendar calendar14 = null;
        java.lang.String[] strArray16 = new java.lang.String[] {};
        java.lang.String str17 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object21 = restS3Service1.getObject("/", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", calendar13, calendar14, strArray16, strArray18, (java.lang.Long) 4096L, (java.lang.Long) 0L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\"\": \"\"}" + "'", str17, "{\"\": \"\"}");
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.mkdirs();
        java.io.File file4 = new java.io.File(file1, "[\"content-length-range\", 1, 0]");
        java.io.File file6 = new java.io.File(file4, "<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean8 = file6.setLastModified((long) 100);
        long long9 = file6.getUsableSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!/[\"content-length-range\", 1, 0]");
        org.junit.Assert.assertEquals(file6.getParent(), "hi!/[\"content-length-range\", 1, 0]/<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file6.toString(), "hi!/[\"content-length-range\", 1, 0]/<form action=\"https:/http:/s3.amazonaws.com/hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service4, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service4.getDevPayProductToken();
        org.apache.commons.httpclient.HttpClient httpClient10 = null;
        restS3Service4.setHttpClient(httpClient10);
        org.jets3t.service.Jets3tProperties jets3tProperties12 = restS3Service4.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", credentialsProvider2, jets3tProperties12, hostConfiguration13);
        org.apache.commons.httpclient.HttpMethod httpMethod15 = null;
        restS3Service14.authorizeHttpRequest(httpMethod15);
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        boolean boolean23 = restS3Service20.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = restS3Service20.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials25 = restS3Service20.getProviderCredentials();
        boolean boolean26 = restS3Service20.isShutdown();
        org.jets3t.service.security.ProviderCredentials providerCredentials27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials27);
        java.lang.String str29 = restS3Service28.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig30 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials31 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service32 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials31);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig33 = null;
        org.codehaus.jackson.JsonFactory jsonFactory34 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider38 = objectMapper35.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider39 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory34, serializerProvider38, deserializerProvider39);
        org.codehaus.jackson.map.SerializerFactory serializerFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = objectMapper40.setSerializerFactory(serializerFactory41);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher43 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service32, s3SegmentPusherConfig33, objectMapper40);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher44 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service28, s3SegmentPusherConfig30, objectMapper40);
        int int45 = restS3Service28.getInternalErrorRetryMax();
        org.jets3t.service.security.ProviderCredentials providerCredentials46 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service47 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials46);
        org.jets3t.service.security.ProviderCredentials providerCredentials48 = restS3Service47.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager49 = null;
        restS3Service47.setHttpConnectionManager(httpConnectionManager49);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager51 = null;
        restS3Service47.setHttpConnectionManager(httpConnectionManager51);
        boolean boolean53 = restS3Service47.isRequesterPaysEnabled();
        com.metamx.druid.client.DataSegment.Builder builder54 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder56 = builder54.size(0L);
        org.joda.time.Interval interval57 = null;
        com.metamx.druid.client.DataSegment.Builder builder58 = builder56.interval(interval57);
        java.lang.String[] strArray62 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.metamx.druid.client.DataSegment.Builder builder65 = builder56.metrics((java.util.List<java.lang.String>) strList63);
        org.jets3t.service.security.ProviderCredentials providerCredentials66 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider68 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service69 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials66, "null", credentialsProvider68);
        org.jets3t.service.security.ProviderCredentials providerCredentials70 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service71 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials70);
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = restS3Service71.renameMetadataKeys(strMap72);
        java.util.Map<java.lang.String, java.lang.Object> strMap74 = restS3Service69.renameMetadataKeys(strMap72);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder56.loadSpec(strMap74);
        java.util.Map<java.lang.String, java.lang.Object> strMap76 = restS3Service47.renameMetadataKeys(strMap74);
        java.util.Map<java.lang.String, java.lang.Object> strMap77 = restS3Service28.renameMetadataKeys(strMap76);
        java.util.Map<java.lang.String, java.lang.Object> strMap78 = restS3Service20.renameMetadataKeys(strMap77);
        org.jets3t.service.security.ProviderCredentials providerCredentials79 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials80 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service81 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials80);
        org.jets3t.service.security.ProviderCredentials providerCredentials82 = restS3Service81.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager83 = null;
        restS3Service81.setHttpConnectionManager(httpConnectionManager83);
        java.util.Date date85 = restS3Service81.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = restS3Service14.createSignedPutUrl("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", strMap77, providerCredentials79, date85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jets3tProperties12);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(providerCredentials24);
        org.junit.Assert.assertNull(providerCredentials25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(serializerProvider38);
        org.junit.Assert.assertNotNull(objectMapper42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNull(providerCredentials48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNull(providerCredentials82);
        org.junit.Assert.assertNotNull(date85);
// flaky:         org.junit.Assert.assertEquals(date85.toString(), "Thu Nov 04 08:20:32 BRT 2021");
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        boolean boolean7 = restS3Service1.isShutdown();
        org.jets3t.service.model.S3Bucket s3Bucket8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object[] s3ObjectArray12 = restS3Service1.listObjects(s3Bucket8, "[\"content-length-range\", -226, -226]", "x-amz-", 80259559424L);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action List objects in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider2, jets3tProperties8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = restS3Service9.isObjectInBucket("{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\":\": \",{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"},[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"],http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\"}/http%3A%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.lang.String[] strArray7 = new java.lang.String[] { "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 10, 47]", "[\"content-length-range\", 1, 0]" };
        java.lang.String str8 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("{\"\": \"s3.amazonaws.com\"}", strArray7);
        java.lang.String str9 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray7);
        java.lang.String str10 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("x-amz-meta-", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str8, "{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str9, "{\"\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{\"x-amz-meta-\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}" + "'", str10, "{\"x-amz-meta-\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}");
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.io.File file1 = new java.io.File("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        long long2 = file1.getTotalSpace();
        boolean boolean3 = file1.delete();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.PrettyPrinter prettyPrinter9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper8.prettyPrintingWriter(prettyPrinter9);
        org.codehaus.jackson.map.type.TypeFactory typeFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper8.setTypeFactory(typeFactory11);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper8.setPropertyNamingStrategy(propertyNamingStrategy13);
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper8.getSerializerProvider();
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration17 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "[\"content-length-range\", 58, 1]/null", credentialsProvider5, jets3tProperties14, hostConfiguration17);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "hi!", credentialsProvider2, jets3tProperties14);
        org.jets3t.service.model.S3Bucket s3Bucket20 = null;
        org.jets3t.service.model.S3Object s3Object21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object22 = restS3Service19.putObject(s3Bucket20, s3Object21);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Create Object in bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.mkdirs();
        boolean boolean3 = file1.canRead();
        java.lang.String str4 = file1.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteVersionedObjectWithMFA("<form action=\"https://<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"[\"content-length-range\", 100, 4]\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "[\"content-length-range\", 0, 100]", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", "http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]/http%3A%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent&versionId=%3Cform%20action%3D%22https%3A%2F%2F%3Cform%20action%3D%22https%3A%2F%2F%7B%22http%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent%22%3A%20%22%22%7D.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22x-amz-%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%5B%22content-length-range%22%2C%20100%2C%204%5D%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        boolean boolean4 = file1.setReadOnly();
        java.lang.String str5 = file1.getPath();
        long long6 = file1.lastModified();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1636024822000L + "'", long6 == 1636024822000L);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver7 = objectMapper6.getSubtypeResolver();
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper6.setSerializationInclusion(inclusion8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", credentialsProvider12);
        java.lang.String str14 = objectMapper6.writeValueAsString((java.lang.Object) credentialsProvider12);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper6.filteredWriter(filterProvider15);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(subtypeResolver7);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null" + "'", str14, "null");
        org.junit.Assert.assertNotNull(objectWriter16);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service6 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "null", credentialsProvider5);
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service8 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = restS3Service8.renameMetadataKeys(strMap9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = restS3Service6.renameMetadataKeys(strMap9);
        com.metamx.druid.client.DataSegment.Builder builder12 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder14 = builder12.size(0L);
        org.joda.time.Interval interval15 = null;
        com.metamx.druid.client.DataSegment.Builder builder16 = builder14.interval(interval15);
        java.lang.String[] strArray20 = new java.lang.String[] { "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!", "http://s3.amazonaws.com//?torrent" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.metamx.druid.client.DataSegment.Builder builder23 = builder14.metrics((java.util.List<java.lang.String>) strList21);
        org.jets3t.service.security.ProviderCredentials providerCredentials24 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider26 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service27 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials24, "null", credentialsProvider26);
        org.jets3t.service.security.ProviderCredentials providerCredentials28 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = restS3Service29.renameMetadataKeys(strMap30);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = restS3Service27.renameMetadataKeys(strMap30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder14.loadSpec(strMap32);
        java.lang.String[] strArray52 = new java.lang.String[] { "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "[\"content-length-range\", 1, 0]", "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "[\"content-length-range\", 1, 0]", "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", "", "x-amz-meta-", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", "[\"content-length-range\", 58, 1]/null", "", "", "[\"content-length-range\", -226, -226]", "<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/", "/", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.metamx.druid.client.DataSegment.Builder builder55 = builder14.metrics((java.util.List<java.lang.String>) strList53);
        com.metamx.druid.client.DataSegment.Builder builder57 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.metamx.druid.client.DataSegment.Builder builder62 = builder57.dimensions((java.util.List<java.lang.String>) strList60);
        com.metamx.druid.client.DataSegment.Builder builder64 = builder62.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder66 = builder64.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder67 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.metamx.druid.client.DataSegment.Builder builder72 = builder67.dimensions((java.util.List<java.lang.String>) strList70);
        com.metamx.druid.client.DataSegment.Builder builder73 = builder66.metrics((java.util.List<java.lang.String>) strList70);
        java.lang.String str74 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList70);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder14.dimensions((java.util.List<java.lang.String>) strList70);
        com.metamx.druid.client.DataSegment.Builder builder76 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder78 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        com.metamx.druid.client.DataSegment.Builder builder83 = builder78.dimensions((java.util.List<java.lang.String>) strList81);
        java.lang.String str84 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList81);
        com.metamx.druid.client.DataSegment.Builder builder85 = builder76.dimensions((java.util.List<java.lang.String>) strList81);
        com.metamx.druid.shard.ShardSpec shardSpec86 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment88 = new com.metamx.druid.client.DataSegment("{\"\": \"\"}", interval1, "http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", strMap11, (java.util.List<java.lang.String>) strList70, (java.util.List<java.lang.String>) strList81, shardSpec86, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str74, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str84, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        java.io.File file4 = file2.getAbsoluteFile();
        java.net.URI uRI5 = file4.toURI();
        java.io.File file6 = new java.io.File(uRI5);
        boolean boolean7 = file6.canRead();
        java.io.File file9 = new java.io.File(file6, "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNotNull(uRI5);
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setAnnotationIntrospector(annotationIntrospector7);
        java.text.DateFormat dateFormat9 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter10 = objectMapper6.writer(dateFormat9);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = objectMapper6.getDeserializationConfig();
        org.codehaus.jackson.JsonFactory jsonFactory12 = objectMapper6.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray16 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper13.enable(featureArray16);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider18 = null;
        objectMapper17.setFilters(filterProvider18);
        org.codehaus.jackson.JsonFactory jsonFactory20 = objectMapper17.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.disableDefaultTyping();
        java.lang.Object obj24 = null;
        java.lang.String str25 = objectMapper21.writeValueAsString(obj24);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider26 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider31 = objectMapper28.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory27, serializerProvider31, deserializerProvider32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper21.setSerializerProvider(serializerProvider31);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper35.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper35.disableDefaultTyping();
        java.lang.Object obj38 = null;
        java.lang.String str39 = objectMapper35.writeValueAsString(obj38);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider40 = objectMapper35.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory41 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper42 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = objectMapper42.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider45 = objectMapper42.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory41, serializerProvider45, deserializerProvider46);
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper35.setSerializerProvider(serializerProvider45);
        org.codehaus.jackson.JsonFactory jsonFactory49 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider50 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider51 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig52 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory49, serializerProvider50, deserializerProvider51, serializationConfig52, deserializationConfig53);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider55 = objectMapper54.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper48.setDeserializerProvider(deserializerProvider55);
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory20, serializerProvider31, deserializerProvider55);
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode59 = objectMapper58.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema60 = null;
        org.codehaus.jackson.map.ObjectReader objectReader61 = objectMapper58.schemaBasedReader(formatSchema60);
        byte[] byteArray63 = objectMapper58.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray64 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper58.disable(featureArray64);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider66 = objectMapper58.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper67 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory12, serializerProvider31, deserializerProvider66);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectWriter10);
        org.junit.Assert.assertNotNull(deserializationConfig11);
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "null" + "'", str25, "null");
        org.junit.Assert.assertNotNull(deserializerProvider26);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(serializerProvider31);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "null" + "'", str39, "null");
        org.junit.Assert.assertNotNull(deserializerProvider40);
        org.junit.Assert.assertNotNull(objectMapper43);
        org.junit.Assert.assertNotNull(objectMapper44);
        org.junit.Assert.assertNotNull(serializerProvider45);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(deserializerProvider55);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(objectNode59);
        org.junit.Assert.assertNotNull(objectReader61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[49, 48]");
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertNotNull(deserializerProvider66);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider14 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider17 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials18);
        org.jets3t.service.security.ProviderCredentials providerCredentials20 = restS3Service19.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager21 = null;
        restS3Service19.setHttpConnectionManager(httpConnectionManager21);
        org.jets3t.service.Jets3tProperties jets3tProperties23 = restS3Service19.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration24 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service25 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials15, "", credentialsProvider17, jets3tProperties23, hostConfiguration24);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service26 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider14, jets3tProperties23);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration27 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service28 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, ":", credentialsProvider11, jets3tProperties23, hostConfiguration27);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service29 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//?torrent", credentialsProvider8, jets3tProperties23);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service30 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider5, jets3tProperties23);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service31 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"{\"\": \"\"}\": \"{\"\": \"\"}\"}", credentialsProvider2, jets3tProperties23);
        org.junit.Assert.assertNull(providerCredentials20);
        org.junit.Assert.assertNotNull(jets3tProperties23);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        boolean boolean7 = restS3Service4.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = restS3Service4.getCredentialsProvider();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service12 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "null", credentialsProvider11);
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = restS3Service14.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = restS3Service12.renameMetadataKeys(strMap15);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service4.renameMetadataKeys(strMap17);
        com.metamx.druid.client.DataSegment.Builder builder19 = new com.metamx.druid.client.DataSegment.Builder();
        org.joda.time.Interval interval20 = null;
        com.metamx.druid.client.DataSegment.Builder builder21 = builder19.interval(interval20);
        com.metamx.druid.client.DataSegment.Builder builder22 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.metamx.druid.client.DataSegment.Builder builder27 = builder22.dimensions((java.util.List<java.lang.String>) strList25);
        com.metamx.druid.client.DataSegment.Builder builder29 = builder27.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec30 = null;
        com.metamx.druid.client.DataSegment.Builder builder31 = builder27.shardSpec(shardSpec30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder27.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder34 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.metamx.druid.client.DataSegment.Builder builder39 = builder34.dimensions((java.util.List<java.lang.String>) strList37);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder39.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder44 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.metamx.druid.client.DataSegment.Builder builder49 = builder44.dimensions((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder50 = builder43.metrics((java.util.List<java.lang.String>) strList47);
        com.metamx.druid.client.DataSegment.Builder builder51 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.metamx.druid.client.DataSegment.Builder builder56 = builder51.dimensions((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.client.DataSegment.Builder builder57 = builder50.metrics((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder27.metrics((java.util.List<java.lang.String>) strList54);
        com.metamx.druid.client.DataSegment.Builder builder59 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.metamx.druid.client.DataSegment.Builder builder64 = builder59.dimensions((java.util.List<java.lang.String>) strList62);
        com.metamx.druid.client.DataSegment.Builder builder66 = builder64.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder68 = builder66.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder69 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.metamx.druid.client.DataSegment.Builder builder74 = builder69.dimensions((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.client.DataSegment.Builder builder75 = builder68.metrics((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.client.DataSegment.Builder builder76 = builder27.dimensions((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.client.DataSegment.Builder builder77 = builder19.metrics((java.util.List<java.lang.String>) strList72);
        com.metamx.druid.client.DataSegment.Builder builder79 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.metamx.druid.client.DataSegment.Builder builder84 = builder79.dimensions((java.util.List<java.lang.String>) strList82);
        java.lang.String str85 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", (java.util.List<java.lang.String>) strList82);
        com.metamx.druid.shard.ShardSpec shardSpec86 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment88 = new com.metamx.druid.client.DataSegment("x-amz-", interval1, "http://s3.amazonaws.com/%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D?torrent", strMap18, (java.util.List<java.lang.String>) strList72, (java.util.List<java.lang.String>) strList82, shardSpec86, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(credentialsProvider8);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}" + "'", str85, "{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}");
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        org.jets3t.service.model.StorageBucket storageBucket4 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putBucketAcl(storageBucket4);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Bucket Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider2, jets3tProperties11);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList16 = restS3Service14.getObjectAclWithSignedUrl("[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$<form action=\"https://http://s3.amazonaws.com//hi%21?torrent.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider1 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider2 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig3 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider1, deserializerProvider2, serializationConfig3, deserializationConfig4);
        org.codehaus.jackson.map.ObjectWriter objectWriter6 = objectMapper5.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider7 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter8 = objectMapper5.writer(filterProvider7);
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper5.getSerializerProvider();
        org.junit.Assert.assertNotNull(objectWriter6);
        org.junit.Assert.assertNotNull(objectWriter8);
        org.junit.Assert.assertNotNull(serializerProvider9);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object8 = restS3Service1.getObjectWithSignedUrl("[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri '[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>\", \"\"]': incorrect scheme");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNull(providerCredentials6);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.JsonFactory jsonFactory3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider7 = objectMapper4.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory3, serializerProvider7, deserializerProvider8);
        org.codehaus.jackson.map.SerializerFactory serializerFactory10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.setSerializerFactory(serializerFactory10);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher12 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper9);
        java.util.Calendar calendar15 = null;
        java.util.Calendar calendar16 = null;
        java.lang.String[] strArray18 = new java.lang.String[] {};
        java.lang.String str19 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("", strArray22);
        java.lang.String str24 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]", strArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Object s3Object27 = restS3Service1.getObject("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}", calendar15, calendar16, strArray18, strArray22, (java.lang.Long) 80259559424L, (java.lang.Long) 1636024796000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}/%7B%22%7B%22%5B%22content-length-range%22%2C%20-226%2C%20-226%5D%22%3A%20%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%2Fhi%21%22%7D%22%3A%20%22x-amz-meta-%22%7D': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(serializerProvider7);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\"\": \"\"}" + "'", str19, "{\"\": \"\"}");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"\": \"\"}" + "'", str23, "{\"\": \"\"}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}" + "'", str24, "{\"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\": \"\"}");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory4 = objectMapper2.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader(jsonNodeFactory4);
        org.codehaus.jackson.map.InjectableValues injectableValues6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper0.setInjectableValues(injectableValues6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter10 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter11 = objectMapper8.writer(prettyPrinter10);
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper7.setSerializerProvider(serializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(jsonNodeFactory4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectWriter11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertNotNull(objectMapper13);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        org.jets3t.service.model.StorageObject storageObject7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.StorageObject storageObject8 = restS3Service1.putObject("http://s3.amazonaws.com.s3.amazonaws.com/?torrent", storageObject7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Create Object in bucket http://s3.amazonaws.com.s3.amazonaws.com/?torrent cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        boolean boolean9 = restS3Service1.isRequesterPaysEnabled();
        restS3Service1.setDevPayProductToken("<form action=\"https://[\"content-length-range\", 100, 4].s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        restS3Service1.setDevPayProductToken("[\"content-length-range\", 1, 0]");
        org.jets3t.service.model.S3Bucket s3Bucket14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket s3Bucket15 = restS3Service1.createBucket(s3Bucket14);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: Create Bucket");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "");
        java.lang.String str4 = file3.getName();
        java.io.File file6 = new java.io.File(file3, "[\"content-length-range\", 10, 47]");
        java.net.URI uRI7 = file3.toURI();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!/[\"content-length-range\", 10, 47]");
        org.junit.Assert.assertNotNull(uRI7);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service11.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = null;
        restS3Service11.setHttpConnectionManager(httpConnectionManager13);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service11.setHttpConnectionManager(httpConnectionManager15);
        java.lang.String str19 = restS3Service11.createTorrentUrl("", "hi!");
        boolean boolean21 = restS3Service11.isBucketAccessible("s3.amazonaws.com");
        java.util.Date date22 = restS3Service11.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = restS3Service1.createSignedDeleteUrl("{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", "[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]", providerCredentials9, date22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str19, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Nov 04 08:20:35 BRT 2021");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.metamx.emitter.EmittingLogger emittingLogger1 = new com.metamx.emitter.EmittingLogger("{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("{\"\": \"s3.amazonaws.com\"}");
        boolean boolean5 = emittingLogger4.isDebugEnabled();
        com.metamx.druid.loading.S3SegmentPusher.log = emittingLogger4;
        org.codehaus.jackson.JsonFactory jsonFactory8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper9.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider12 = objectMapper9.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory8, serializerProvider12, deserializerProvider13);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver15 = null;
        objectMapper14.setSubtypeResolver(subtypeResolver15);
        com.metamx.emitter.EmittingLogger emittingLogger18 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean19 = emittingLogger18.isInfoEnabled();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper21.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter23 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter24 = objectMapper21.writer(prettyPrinter23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper21.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader26 = objectMapper21.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter29 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter30 = objectMapper27.writer(prettyPrinter29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper27.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray32 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper27.enable(featureArray32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper21.disable(featureArray32);
        emittingLogger18.error("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-", (java.lang.Object[]) featureArray32);
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = objectMapper14.disable(featureArray32);
        emittingLogger4.info("[\"content-length-range\", 1, 0]", (java.lang.Object[]) featureArray32);
        // The following exception was thrown during execution in test generation
        try {
            emittingLogger1.info("[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]", (java.lang.Object[]) featureArray32);
            org.junit.Assert.fail("Expected exception of type java.util.UnknownFormatConversionException; message: Conversion = 'F'");
        } catch (java.util.UnknownFormatConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(serializerProvider12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(objectWriter24);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectReader26);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectWriter30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper36);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.joda.time.DateTime dateTime1 = null;
        org.joda.time.DateTime dateTime2 = null;
        com.metamx.druid.shard.ShardSpec shardSpec4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = com.metamx.druid.client.DataSegment.makeDataSegmentIdentifier("{\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}", dateTime1, dateTime2, "[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]", shardSpec4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher5 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher8 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper7);
        java.lang.String str9 = restS3Service1.getRestMetadataPrefix();
        boolean boolean11 = restS3Service1.isBucketAccessible("http://s3.amazonaws.com//?torrent");
        org.jets3t.service.security.ProviderCredentials providerCredentials16 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials16);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = restS3Service17.getProviderCredentials();
        java.lang.String str19 = restS3Service17.getInvokingApplicationDescription();
        java.lang.String str22 = restS3Service17.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials23);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = restS3Service24.renameMetadataKeys(strMap25);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = restS3Service17.renameMetadataKeys(strMap26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = restS3Service1.createSignedUrl("hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-/s3.amazonaws.com", "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", strMap27, (-1L), true, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-amz-meta-" + "'", str9, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(providerCredentials18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str22, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager6 = null;
        restS3Service4.setHttpConnectionManager(httpConnectionManager6);
        org.jets3t.service.Jets3tProperties jets3tProperties8 = restS3Service4.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}", credentialsProvider2, jets3tProperties8);
        boolean boolean10 = restS3Service9.isRequesterPaysEnabled();
        org.jets3t.service.model.S3Bucket s3Bucket12 = null;
        org.jets3t.service.model.S3Object s3Object13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service9.putVersionedObjectAcl("http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", s3Bucket12, s3Object13);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Versioned Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNotNull(jets3tProperties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper0.getJsonFactory();
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(jsonFactory7);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode1 = objectMapper0.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema2 = null;
        org.codehaus.jackson.map.ObjectReader objectReader3 = objectMapper0.schemaBasedReader(formatSchema2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode5 = objectMapper4.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper4.schemaBasedReader(formatSchema6);
        byte[] byteArray9 = objectMapper4.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode10 = objectMapper0.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper0.setSerializationInclusion(inclusion11);
        org.codehaus.jackson.map.SerializerFactory serializerFactory13 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper0.setSerializerFactory(serializerFactory13);
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory17 = objectMapper15.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper15.enableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig serializationConfig19 = objectMapper18.getSerializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper14.setSerializationConfig(serializationConfig19);
        org.codehaus.jackson.map.ObjectWriter objectWriter21 = objectMapper14.defaultPrettyPrintingWriter();
        org.codehaus.jackson.FormatSchema formatSchema22 = null;
        org.codehaus.jackson.map.ObjectReader objectReader23 = objectMapper14.reader(formatSchema22);
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper24.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter26 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter27 = objectMapper24.writer(prettyPrinter26);
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper24.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray29 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper24.enable(featureArray29);
        org.codehaus.jackson.FormatSchema formatSchema31 = null;
        org.codehaus.jackson.map.ObjectReader objectReader32 = objectMapper24.schemaBasedReader(formatSchema31);
        org.codehaus.jackson.map.ObjectReader objectReader33 = objectMapper14.readerForUpdating((java.lang.Object) objectReader32);
        org.junit.Assert.assertNotNull(objectNode1);
        org.junit.Assert.assertNotNull(objectReader3);
        org.junit.Assert.assertNotNull(objectNode5);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode10);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(jsonNodeFactory17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializationConfig19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectWriter21);
        org.junit.Assert.assertNotNull(objectReader23);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(objectWriter27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectReader32);
        org.junit.Assert.assertNotNull(objectReader33);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.PrettyPrinter prettyPrinter1 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter2 = objectMapper0.prettyPrintingWriter(prettyPrinter1);
        org.codehaus.jackson.FormatSchema formatSchema3 = null;
        org.codehaus.jackson.map.ObjectReader objectReader4 = objectMapper0.schemaBasedReader(formatSchema3);
        org.codehaus.jackson.JsonFactory jsonFactory5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider9 = objectMapper6.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider10 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory5, serializerProvider9, deserializerProvider10);
        org.codehaus.jackson.map.AnnotationIntrospector annotationIntrospector12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper11.setAnnotationIntrospector(annotationIntrospector12);
        org.codehaus.jackson.FormatSchema formatSchema14 = null;
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper11.schemaBasedReader(formatSchema14);
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory16 = objectMapper11.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper0.setNodeFactory(jsonNodeFactory16);
        java.io.File file19 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean21 = file19.setLastModified((long) (short) 10);
        java.io.File file22 = file19.getAbsoluteFile();
        java.net.URL uRL23 = file19.toURL();
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.JsonNode jsonNode24 = objectMapper17.readTree(uRL23);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21 (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectWriter2);
        org.junit.Assert.assertNotNull(objectReader4);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(serializerProvider9);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(jsonNodeFactory16);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertEquals(file19.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file19.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertNotNull(uRL23);
// flaky:         org.junit.Assert.assertEquals(uRL23.toString(), "file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/hi%21?torrent");
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.util.Date date5 = restS3Service1.getCurrentTimeWithOffset();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(serializerFactory7);
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper8.writer();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        java.lang.Object obj15 = null;
        java.lang.String str16 = objectMapper12.writeValueAsString(obj15);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider17 = objectMapper12.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory18 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper19.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = objectMapper19.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory18, serializerProvider22, deserializerProvider23);
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = objectMapper12.setSerializerProvider(serializerProvider22);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig26 = objectMapper12.getDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper10.setDeserializationConfig(deserializationConfig26);
        org.codehaus.jackson.map.type.TypeFactory typeFactory28 = objectMapper27.getTypeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper8.setTypeFactory(typeFactory28);
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping30 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper8.enableDefaultTypingAsProperty(defaultTyping30, "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]");
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher33 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper32);
        org.codehaus.jackson.PrettyPrinter prettyPrinter34 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter35 = objectMapper32.prettyPrintingWriter(prettyPrinter34);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 04 08:20:35 BRT 2021");
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null" + "'", str16, "null");
        org.junit.Assert.assertNotNull(deserializerProvider17);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(serializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper25);
        org.junit.Assert.assertNotNull(deserializationConfig26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(typeFactory28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(objectWriter35);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        java.io.File file4 = new java.io.File("hi!");
        java.io.File file6 = new java.io.File(file4, "");
        boolean boolean7 = file1.renameTo(file6);
        long long8 = file6.getUsableSpace();
        long long9 = file6.getTotalSpace();
        boolean boolean10 = file6.canWrite();
        long long11 = file6.getFreeSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 80259506176L + "'", long8 == 80259506176L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 967682662400L + "'", long9 == 967682662400L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 129486479360L + "'", long11 == 129486479360L);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service10 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9);
        org.jets3t.service.security.ProviderCredentials providerCredentials11 = restS3Service10.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager12 = null;
        restS3Service10.setHttpConnectionManager(httpConnectionManager12);
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service10.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "", credentialsProvider8, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}", credentialsProvider5, jets3tProperties14);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}", credentialsProvider2, jets3tProperties14);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig19 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory22 = objectMapper20.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory27 = objectMapper25.getNodeFactory();
        org.codehaus.jackson.map.ObjectReader objectReader28 = objectMapper23.reader(jsonNodeFactory27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper29.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray32 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper29.enable(featureArray32);
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper23.enable(featureArray32);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = objectMapper20.enable(featureArray32);
        org.codehaus.jackson.map.SerializationConfig serializationConfig36 = objectMapper35.getSerializationConfig();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher37 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service18, s3SegmentPusherConfig19, objectMapper35);
        org.codehaus.jackson.map.jsontype.SubtypeResolver subtypeResolver38 = objectMapper35.getSubtypeResolver();
        org.junit.Assert.assertNull(providerCredentials11);
        org.junit.Assert.assertNotNull(jets3tProperties14);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(jsonNodeFactory22);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(jsonNodeFactory27);
        org.junit.Assert.assertNotNull(objectReader28);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectMapper35);
        org.junit.Assert.assertNotNull(serializationConfig36);
        org.junit.Assert.assertNotNull(subtypeResolver38);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter2 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter3 = objectMapper0.writer(prettyPrinter2);
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectReader objectReader5 = objectMapper0.reader();
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = objectMapper6.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter8 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter9 = objectMapper6.writer(prettyPrinter8);
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper6.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray11 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper6.enable(featureArray11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.disable(featureArray11);
        org.codehaus.jackson.map.ObjectWriter objectWriter14 = objectMapper13.writer();
        org.codehaus.jackson.JsonFactory jsonFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper16.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider19 = objectMapper16.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory15, serializerProvider19, deserializerProvider20);
        org.codehaus.jackson.map.SerializerFactory serializerFactory22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = objectMapper21.setSerializerFactory(serializerFactory22);
        org.codehaus.jackson.PrettyPrinter prettyPrinter24 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter25 = objectMapper23.prettyPrintingWriter(prettyPrinter24);
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper26.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper26.disableDefaultTyping();
        java.io.File file30 = new java.io.File("hi!");
        java.io.File file32 = new java.io.File(file30, "");
        java.lang.Class<?> wildcardClass33 = file30.getClass();
        org.codehaus.jackson.type.JavaType javaType34 = objectMapper28.constructType((java.lang.reflect.Type) wildcardClass33);
        boolean boolean35 = objectMapper23.canDeserialize(javaType34);
        boolean boolean36 = objectMapper13.canDeserialize(javaType34);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectWriter3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectReader5);
        org.junit.Assert.assertNotNull(objectMapper7);
        org.junit.Assert.assertNotNull(objectWriter9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectWriter14);
        org.junit.Assert.assertNotNull(objectMapper17);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(serializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper23);
        org.junit.Assert.assertNotNull(objectWriter25);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "hi!");
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(javaType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.lang.String str3 = org.jets3t.service.S3Service.generatePostPolicyCondition("", "[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]", "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[\"\", \"$[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]\", \"hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\"]" + "'", str3, "[\"\", \"$[\"[\"content-length-range\", 10, 47]\", \"${\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"[\"starts-with\", \"$[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\", \"\"]\"]\", \"hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\"]");
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        java.io.File file1 = new java.io.File("hi!");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.mkdirs();
        boolean boolean6 = file1.setExecutable(false, true);
        boolean boolean8 = file1.setExecutable(true);
        boolean boolean9 = file1.canExecute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        java.lang.Class<?> wildcardClass7 = restS3Service1.getClass();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = restS3Service1.getCredentialsProvider();
        org.jets3t.service.model.StorageObject storageObject7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.putObjectAcl("{\"{\"\": \"s3.amazonaws.com\"}\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", storageObject7);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid object: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(credentialsProvider5);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str8 = restS3Service1.createTorrentUrl("", "");
        org.apache.commons.httpclient.HttpMethod httpMethod9 = null;
        restS3Service1.authorizeHttpRequest(httpMethod9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = restS3Service1.isBucketAccessible("<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str8, "http://s3.amazonaws.com//?torrent");
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "x-amz-meta-");
        boolean boolean3 = file2.setReadOnly();
        java.io.File file4 = file2.getAbsoluteFile();
        boolean boolean7 = file4.setExecutable(true, true);
        long long8 = file4.getUsableSpace();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.google.common.base.Joiner joiner0 = com.metamx.druid.loading.S3SegmentPusher.JOINER;
        com.google.common.base.Joiner joiner2 = joiner0.useForNull("[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]");
        com.metamx.emitter.EmittingLogger emittingLogger4 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        boolean boolean5 = emittingLogger4.isInfoEnabled();
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        emittingLogger4.debug("http://s3.amazonaws.com//hi%21?torrent", objArray7);
        java.lang.Throwable throwable9 = null;
        com.metamx.emitter.EmittingLogger emittingLogger12 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        com.metamx.emitter.EmittingLogger emittingLogger15 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable16 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory21 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider22 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig24 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig25 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory21, serializerProvider22, deserializerProvider23, serializationConfig24, deserializationConfig25);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider27 = objectMapper26.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper28.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = objectMapper28.disableDefaultTyping();
        java.lang.Object obj31 = null;
        java.lang.String str32 = objectMapper28.writeValueAsString(obj31);
        com.metamx.druid.client.DataSegment.Builder builder33 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.metamx.druid.client.DataSegment.Builder builder38 = builder33.dimensions((java.util.List<java.lang.String>) strList36);
        com.metamx.emitter.EmittingLogger emittingLogger40 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray42 = new java.lang.Object[] { objectMapper18, deserializerProvider27, objectMapper28, strList36, emittingLogger40, (byte) 1 };
        emittingLogger15.error(throwable16, "{\"\": \"s3.amazonaws.com\"}", objArray42);
        emittingLogger12.debug("http://s3.amazonaws.com//hi%21?torrent", objArray42);
        emittingLogger4.trace(throwable9, "[\"content-length-range\", 100, 4]", objArray42);
        java.lang.Throwable throwable46 = null;
        com.metamx.emitter.EmittingLogger emittingLogger49 = new com.metamx.emitter.EmittingLogger("[\"content-length-range\", -226, -226]");
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper51.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter53 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter54 = objectMapper51.writer(prettyPrinter53);
        org.codehaus.jackson.map.ObjectMapper objectMapper55 = objectMapper51.enableDefaultTyping();
        org.codehaus.jackson.map.DeserializationConfig.Feature[] featureArray56 = new org.codehaus.jackson.map.DeserializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper57 = objectMapper51.enable(featureArray56);
        emittingLogger49.info("{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", (java.lang.Object[]) featureArray56);
        emittingLogger4.trace(throwable46, "http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent", (java.lang.Object[]) featureArray56);
        java.lang.String str60 = joiner2.join((java.lang.Object[]) featureArray56);
        org.junit.Assert.assertNotNull(joiner0);
        org.junit.Assert.assertNotNull(joiner2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(deserializerProvider27);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectMapper30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "null" + "'", str32, "null");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(objectWriter54);
        org.junit.Assert.assertNotNull(objectMapper55);
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(objectMapper57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig2 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode4 = objectMapper3.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema5 = null;
        org.codehaus.jackson.map.ObjectReader objectReader6 = objectMapper3.schemaBasedReader(formatSchema5);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher7 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig2, objectMapper3);
        org.codehaus.jackson.FormatSchema formatSchema8 = null;
        org.codehaus.jackson.map.ObjectReader objectReader9 = objectMapper3.schemaBasedReader(formatSchema8);
        org.junit.Assert.assertNotNull(objectNode4);
        org.junit.Assert.assertNotNull(objectReader6);
        org.junit.Assert.assertNotNull(objectReader9);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        java.lang.Object obj3 = null;
        java.lang.String str4 = objectMapper0.writeValueAsString(obj3);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = objectMapper0.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory6 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper7 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper7.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider10 = objectMapper7.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory6, serializerProvider10, deserializerProvider11);
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper0.setSerializerProvider(serializerProvider10);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig14 = objectMapper0.getDeserializationConfig();
        org.codehaus.jackson.map.SerializerFactory serializerFactory15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper0.setSerializerFactory(serializerFactory15);
        java.io.OutputStream outputStream17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray21 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper18.enable(featureArray21);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider23 = null;
        objectMapper22.setFilters(filterProvider23);
        org.codehaus.jackson.JsonFactory jsonFactory25 = objectMapper22.getJsonFactory();
        org.codehaus.jackson.JsonFactory jsonFactory26 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper28 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper27.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider30 = objectMapper27.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory26, serializerProvider30, deserializerProvider31);
        org.codehaus.jackson.map.SerializerFactory serializerFactory33 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = objectMapper32.setSerializerFactory(serializerFactory33);
        org.codehaus.jackson.PrettyPrinter prettyPrinter35 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter36 = objectMapper34.prettyPrintingWriter(prettyPrinter35);
        org.codehaus.jackson.map.introspect.VisibilityChecker<?> wildcardVisibilityChecker37 = objectMapper34.getVisibilityChecker();
        org.codehaus.jackson.map.SerializerProvider serializerProvider38 = objectMapper34.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper39 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper40 = objectMapper39.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper41 = objectMapper39.disableDefaultTyping();
        java.lang.Object obj42 = null;
        java.lang.String str43 = objectMapper39.writeValueAsString(obj42);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider44 = objectMapper39.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider49 = objectMapper46.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory45, serializerProvider49, deserializerProvider50);
        org.codehaus.jackson.map.ObjectMapper objectMapper52 = objectMapper39.setSerializerProvider(serializerProvider49);
        org.codehaus.jackson.JsonFactory jsonFactory53 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider54 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider55 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig56 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig57 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory53, serializerProvider54, deserializerProvider55, serializationConfig56, deserializationConfig57);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider59 = objectMapper58.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper60 = objectMapper52.setDeserializerProvider(deserializerProvider59);
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory25, serializerProvider38, deserializerProvider59);
        // The following exception was thrown during execution in test generation
        try {
            objectMapper0.writeValue(outputStream17, (java.lang.Object) deserializerProvider59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not pass null serializerFactory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "null" + "'", str4, "null");
        org.junit.Assert.assertNotNull(deserializerProvider5);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(serializerProvider10);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(deserializationConfig14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertNotNull(objectMapper28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(serializerProvider30);
        org.junit.Assert.assertNotNull(objectMapper34);
        org.junit.Assert.assertNotNull(objectWriter36);
        org.junit.Assert.assertNotNull(wildcardVisibilityChecker37);
        org.junit.Assert.assertNotNull(serializerProvider38);
        org.junit.Assert.assertNotNull(objectMapper40);
        org.junit.Assert.assertNotNull(objectMapper41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null" + "'", str43, "null");
        org.junit.Assert.assertNotNull(deserializerProvider44);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(serializerProvider49);
        org.junit.Assert.assertNotNull(objectMapper52);
        org.junit.Assert.assertNotNull(deserializerProvider59);
        org.junit.Assert.assertNotNull(objectMapper60);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpClient httpClient3 = restS3Service1.getHttpClient();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig4 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper5 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode6 = objectMapper5.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema7 = null;
        org.codehaus.jackson.map.ObjectReader objectReader8 = objectMapper5.schemaBasedReader(formatSchema7);
        byte[] byteArray10 = objectMapper5.writeValueAsBytes((java.lang.Object) 10L);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher11 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig4, objectMapper5);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider12 = null;
        objectMapper5.setFilters(filterProvider12);
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNotNull(httpClient3);
        org.junit.Assert.assertNotNull(objectNode6);
        org.junit.Assert.assertNotNull(objectReader8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, 48]");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        java.lang.String str3 = restS3Service1.getInvokingApplicationDescription();
        boolean boolean4 = restS3Service1.isShutdown();
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service9 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials8);
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = restS3Service9.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager11 = null;
        restS3Service9.setHttpConnectionManager(httpConnectionManager11);
        java.lang.String str13 = restS3Service9.getEndpoint();
        java.lang.String str16 = restS3Service9.createTorrentUrl("", "");
        java.lang.String str17 = restS3Service9.getRestMetadataPrefix();
        boolean boolean18 = restS3Service9.isShutdown();
        java.util.Date date19 = restS3Service9.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = restS3Service1.createSignedGetUrl("{\"[\"content-length-range\", 97, 100]\": \"http://s3.amazonaws.com/%7B%22http%3A%2F%2Fs3.amazonaws.com%2Fhttp%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent%2Fhi%2521%3Ftorrent%22%3A%20%22x-amz-meta-%22%7D/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent,[\"content-length-range\", 10, 47],[\"content-length-range\", 10, 47],[\"content-length-range\", 1, 0]\"}", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", providerCredentials7, date19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "s3.amazonaws.com" + "'", str13, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://s3.amazonaws.com//?torrent" + "'", str16, "http://s3.amazonaws.com//?torrent");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-amz-meta-" + "'", str17, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 04 08:20:37 BRT 2021");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        restS3Service1.setDevPayUserToken("{\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}");
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = restS3Service1.getProviderCredentials();
        boolean boolean13 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        org.jets3t.service.model.StorageObject storageObject17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap18 = restS3Service1.updateObjectMetadata("[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]", storageObject17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertNull(providerCredentials12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider8 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials9 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider11 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials12);
        org.jets3t.service.security.ProviderCredentials providerCredentials14 = restS3Service13.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager15 = null;
        restS3Service13.setHttpConnectionManager(httpConnectionManager15);
        org.jets3t.service.Jets3tProperties jets3tProperties17 = restS3Service13.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider11, jets3tProperties17);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider8, jets3tProperties17, hostConfiguration19);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration21 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>", credentialsProvider5, jets3tProperties17, hostConfiguration21);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration23 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service24 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "[\"{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}\", \"$http://s3.amazonaws.com//hi%21?torrent\", \"[\"{\"{\"\": \"s3.amazonaws.com\"}\": \"acl,policy,torrent,logging,location,requestPayment,versions,versioning,versionId,uploads,uploadId,partNumber,website,notification\"}\", \"${\"http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\": \"x-amz-meta-\"}\", \"[\"content-length-range\", 58, 1]\"]\"]", credentialsProvider2, jets3tProperties17, hostConfiguration23);
        org.apache.commons.httpclient.HttpClient httpClient25 = restS3Service24.getHttpClient();
        org.junit.Assert.assertNull(providerCredentials14);
        org.junit.Assert.assertNotNull(jets3tProperties17);
        org.junit.Assert.assertNotNull(httpClient25);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider8 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider9 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig10 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider8, deserializerProvider9, serializationConfig10, deserializationConfig11);
        org.codehaus.jackson.map.ObjectWriter objectWriter13 = objectMapper12.defaultPrettyPrintingWriter();
        org.codehaus.jackson.map.ser.FilterProvider filterProvider14 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter15 = objectMapper12.writer(filterProvider14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig6, objectMapper12);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        java.lang.Object obj21 = null;
        java.lang.String str22 = objectMapper18.writeValueAsString(obj21);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider23 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = objectMapper18.setSerializerProvider(serializerProvider28);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher32 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig17, objectMapper18);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service33 = s3SegmentPusher32.s3Client;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3BucketVersioningStatus s3BucketVersioningStatus35 = restS3Service33.getBucketVersioningStatus("[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]/&versioning': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertNotNull(objectWriter13);
        org.junit.Assert.assertNotNull(objectWriter15);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null" + "'", str22, "null");
        org.junit.Assert.assertNotNull(deserializerProvider23);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper31);
        org.junit.Assert.assertNotNull(restS3Service33);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.Jets3tProperties jets3tProperties3 = null;
        org.apache.commons.httpclient.HostConfiguration hostConfiguration4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "{\"/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-\": \"\"}", credentialsProvider2, jets3tProperties3, hostConfiguration4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        restS3Service1.setRequesterPaysEnabled(false);
        boolean boolean8 = restS3Service1.isShutdown();
        org.jets3t.service.model.StorageBucket storageBucket9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.deleteBucket(storageBucket9);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.ServiceException; message: The action Delete bucket cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertNotNull(joiner1);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.metamx.druid.client.DataSegment.Builder builder0 = com.metamx.druid.client.DataSegment.builder();
        org.jets3t.service.security.ProviderCredentials providerCredentials1 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service2 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials1);
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = restS3Service2.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager4 = null;
        restS3Service2.setHttpConnectionManager(httpConnectionManager4);
        java.util.List<java.lang.String> strList6 = restS3Service2.getResourceParameterNames();
        com.metamx.druid.client.DataSegment.Builder builder7 = builder0.dimensions(strList6);
        org.joda.time.Interval interval8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder0.interval(interval8);
        com.metamx.druid.client.DataSegment.Builder builder10 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.metamx.druid.client.DataSegment.Builder builder15 = builder10.dimensions((java.util.List<java.lang.String>) strList13);
        com.metamx.druid.client.DataSegment.Builder builder17 = builder15.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder19 = builder17.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder20 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.metamx.druid.client.DataSegment.Builder builder25 = builder20.dimensions((java.util.List<java.lang.String>) strList23);
        com.metamx.druid.client.DataSegment.Builder builder26 = builder19.metrics((java.util.List<java.lang.String>) strList23);
        com.metamx.druid.client.DataSegment.Builder builder27 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder27.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder33 = builder26.metrics((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder34 = builder9.dimensions((java.util.List<java.lang.String>) strList30);
        com.metamx.druid.client.DataSegment.Builder builder35 = com.metamx.druid.client.DataSegment.builder();
        com.metamx.druid.client.DataSegment.Builder builder36 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder36.dimensions((java.util.List<java.lang.String>) strList39);
        com.metamx.druid.client.DataSegment.Builder builder43 = builder41.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder45 = builder43.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder46 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.metamx.druid.client.DataSegment.Builder builder51 = builder46.dimensions((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder52 = builder45.metrics((java.util.List<java.lang.String>) strList49);
        com.metamx.druid.client.DataSegment.Builder builder53 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.metamx.druid.client.DataSegment.Builder builder58 = builder53.dimensions((java.util.List<java.lang.String>) strList56);
        com.metamx.druid.client.DataSegment.Builder builder59 = builder52.metrics((java.util.List<java.lang.String>) strList56);
        com.metamx.druid.client.DataSegment.Builder builder60 = builder35.metrics((java.util.List<java.lang.String>) strList56);
        com.metamx.druid.client.DataSegment.Builder builder61 = builder9.dimensions((java.util.List<java.lang.String>) strList56);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(providerCredentials3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service0 = null;
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig1 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = null;
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher3 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service0, s3SegmentPusherConfig1, objectMapper2);
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider6 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials7 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider9 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider12 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials13 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service14 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials13);
        org.jets3t.service.security.ProviderCredentials providerCredentials15 = restS3Service14.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager16 = null;
        restS3Service14.setHttpConnectionManager(httpConnectionManager16);
        org.jets3t.service.Jets3tProperties jets3tProperties18 = restS3Service14.getJetS3tProperties();
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service19 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent", credentialsProvider12, jets3tProperties18);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration20 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service21 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials7, "http://s3.amazonaws.com//hi%21?torrent", credentialsProvider9, jets3tProperties18, hostConfiguration20);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service22 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider6, jets3tProperties18);
        s3SegmentPusher3.s3Client = restS3Service22;
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.acl.AccessControlList accessControlList25 = restS3Service22.getBucketAcl("<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"x-amz-\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid uri 'https://s3.amazonaws.com:443/<form action=\"https://{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"x-amz-\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form>/&acl': escaped absolute path not valid");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials15);
        org.junit.Assert.assertNotNull(jets3tProperties18);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.metamx.druid.client.DataSegment.Builder builder0 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.metamx.druid.client.DataSegment.Builder builder5 = builder0.dimensions((java.util.List<java.lang.String>) strList3);
        com.metamx.druid.client.DataSegment.Builder builder7 = builder5.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.shard.ShardSpec shardSpec8 = null;
        com.metamx.druid.client.DataSegment.Builder builder9 = builder5.shardSpec(shardSpec8);
        com.metamx.druid.client.DataSegment.Builder builder11 = builder5.version("[\"\", \"$http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent\", \"null\"]");
        com.metamx.druid.client.DataSegment.Builder builder13 = builder5.dataSource("http://s3.amazonaws.com.s3.amazonaws.com/?torrent");
        com.metamx.druid.client.DataSegment.Builder builder15 = builder13.dataSource("");
        com.metamx.druid.client.DataSegment.Builder builder17 = builder15.dataSource("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service3 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22http%3A//s3.amazonaws.com/%257B%2522http%253A%252F%252Fs3.amazonaws.com%252Fhttp%25253A%25252F%25252Fs3.amazonaws.com%25252F%25252F%25253Ftorrent%252Fhi%252521%253Ftorrent%2522%253A%2520%2522x-amz-meta-%2522%257D/%253Cform%2520action%253D%2522https%253A//.s3.amazonaws.com/%2522%2520method%253D%2522post%2522%2520enctype%253D%2522multipart/form-data%2522%253E%250A%253Cinput%2520type%253D%2522hidden%2522%2520name%253D%2522key%2522%2520value%253D%2522hi%2521%2522%253E%250A%253Cinput%2520name%253D%2522file%2522%2520type%253D%2522file%2522%253E%250A%253Cbr%253E%250A%253Cinput%2520type%253D%2522submit%2522%2520value%253D%2522Upload%2520to%2520Amazon%2520S3%2522%253E%250A%253C/form%253E%3Ftorrent%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%2010%2C%2047%5D%2C%5B%22content-length-range%22%2C%201%2C%200%5D%22%7D?torrent", credentialsProvider2);
        org.jets3t.service.model.S3Bucket s3Bucket4 = null;
        org.jets3t.service.model.S3Object s3Object5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service3.putObjectAcl(s3Bucket4, s3Object5);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The action Put Object Access Control List cannot be performed with an invalid bucket: null");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service1.getProviderCredentials();
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = restS3Service1.getProviderCredentials();
        java.lang.String str7 = restS3Service1.getDevPayUserToken();
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service1.getAWSCredentials();
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(providerCredentials6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(providerCredentials8);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        java.lang.String str5 = restS3Service1.getEndpoint();
        java.lang.String str6 = restS3Service1.getEndpoint();
        boolean boolean7 = restS3Service1.isAuthenticatedConnection();
        boolean boolean8 = restS3Service1.isRequesterPaysEnabled();
        org.jets3t.service.model.S3BucketLoggingStatus s3BucketLoggingStatus10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restS3Service1.setBucketLoggingStatus("[\"starts-with\", \"${\"[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]\": \"\"}\", \"\"]", s3BucketLoggingStatus10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "s3.amazonaws.com" + "'", str5, "s3.amazonaws.com");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "s3.amazonaws.com" + "'", str6, "s3.amazonaws.com");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager3 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager3);
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager5 = null;
        restS3Service1.setHttpConnectionManager(httpConnectionManager5);
        java.lang.String str9 = restS3Service1.createTorrentUrl("", "hi!");
        boolean boolean11 = restS3Service1.isBucketAccessible("s3.amazonaws.com");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper13.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter15 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter16 = objectMapper13.writer(prettyPrinter15);
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = objectMapper13.getSerializerProvider();
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher18 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig12, objectMapper13);
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.VersionOrDeleteMarkersChunk versionOrDeleteMarkersChunk26 = restS3Service1.listVersionedObjectsChunked("http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", "[\"starts-with\", \"$<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>\", \"\"]", "{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}", (long) 11, "http://s3.amazonaws.com/%5B%22starts-with%22%2C%20%22%24%5B%22starts-with%22%2C%20%22%24%2Fhome%2FCIN%2Flmps2%2Fsemantic-conflict-study%2FSMAT%2Foutput-test-dest%2Fdruid%2F05168808c278c080c59c19e858d9471b316cd1f5%2Frandoop-modified_4%2Fhi%21%22%2C%20%22%22%5D%22%2C%20%22%22%5D/http%3A//s3.amazonaws.com/http%253A%252F%252Fs3.amazonaws.com%252F%252F%253Ftorrent/hi%2521%3Ftorrent?torrent", "[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", true);
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: S3 Error Message.");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com//hi%21?torrent" + "'", str9, "http://s3.amazonaws.com//hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(serializerProvider17);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.io.File file2 = new java.io.File("http://s3.amazonaws.com//?torrent", "s3.amazonaws.com");
        java.net.URI uRI3 = file2.toURI();
        java.lang.String str4 = file2.getAbsolutePath();
        org.junit.Assert.assertEquals(file2.getParent(), "http:/s3.amazonaws.com/?torrent");
        org.junit.Assert.assertEquals(file2.toString(), "http:/s3.amazonaws.com/?torrent/s3.amazonaws.com");
        org.junit.Assert.assertNotNull(uRI3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/s3.amazonaws.com" + "'", str4, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/http:/s3.amazonaws.com/?torrent/s3.amazonaws.com");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        restS3Service18.setRequesterPaysEnabled(true);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory25 = objectMapper23.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper23.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper23.enableDefaultTypingAsProperty(defaultTyping27, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service18, s3SegmentPusherConfig22, objectMapper23);
        java.io.File file31 = null;
        java.io.File file33 = new java.io.File(file31, "x-amz-meta-");
        boolean boolean34 = file33.setReadOnly();
        java.io.File file35 = file33.getAbsoluteFile();
        java.net.URI uRI36 = file35.toURI();
        com.metamx.druid.client.DataSegment dataSegment37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment38 = s3SegmentPusher30.push(file35, dataSegment37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(jsonNodeFactory25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNull("file33.getParent() == null", file33.getParent());
        org.junit.Assert.assertEquals(file33.toString(), "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(file35);
// flaky:         org.junit.Assert.assertEquals(file35.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file35.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/x-amz-meta-");
        org.junit.Assert.assertNotNull(uRI36);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.lang.String str2 = restS3Service1.getDevPayUserToken();
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig3 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials4 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service5 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials4);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig6 = null;
        org.codehaus.jackson.JsonFactory jsonFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper9 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = objectMapper8.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider11 = objectMapper8.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider12 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider11, deserializerProvider12);
        org.codehaus.jackson.map.SerializerFactory serializerFactory14 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = objectMapper13.setSerializerFactory(serializerFactory14);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher16 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service5, s3SegmentPusherConfig6, objectMapper13);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher17 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service1, s3SegmentPusherConfig3, objectMapper13);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service18 = s3SegmentPusher17.s3Client;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = restS3Service18.getAWSCredentials();
        restS3Service18.setRequesterPaysEnabled(true);
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper24 = objectMapper23.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory25 = objectMapper23.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper23.enableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper.DefaultTyping defaultTyping27 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper23.enableDefaultTypingAsProperty(defaultTyping27, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher30 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service18, s3SegmentPusherConfig22, objectMapper23);
        java.lang.String str31 = restS3Service18.getEndpoint();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objectMapper9);
        org.junit.Assert.assertNotNull(objectMapper10);
        org.junit.Assert.assertNotNull(serializerProvider11);
        org.junit.Assert.assertNotNull(objectMapper15);
        org.junit.Assert.assertNotNull(restS3Service18);
        org.junit.Assert.assertNull(providerCredentials19);
        org.junit.Assert.assertNotNull(objectMapper24);
        org.junit.Assert.assertNotNull(jsonNodeFactory25);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "s3.amazonaws.com" + "'", str31, "s3.amazonaws.com");
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.metamx.druid.loading.S3SegmentPusher.JOINER = joiner1;
        com.google.common.base.Joiner.MapJoiner mapJoiner4 = joiner1.withKeyValueSeparator("http://s3.amazonaws.com//hi%21?torrent");
        java.lang.StringBuilder stringBuilder5 = null;
        com.metamx.emitter.EmittingLogger emittingLogger7 = new com.metamx.emitter.EmittingLogger("hi!");
        java.lang.Throwable throwable8 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper10 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper11 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = objectMapper10.disableDefaultTyping();
        org.codehaus.jackson.JsonFactory jsonFactory13 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider14 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider15 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig16 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory13, serializerProvider14, deserializerProvider15, serializationConfig16, deserializationConfig17);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider19 = objectMapper18.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper20.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper22 = objectMapper20.disableDefaultTyping();
        java.lang.Object obj23 = null;
        java.lang.String str24 = objectMapper20.writeValueAsString(obj23);
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.emitter.EmittingLogger emittingLogger32 = new com.metamx.emitter.EmittingLogger("s3.amazonaws.com");
        java.lang.Object[] objArray34 = new java.lang.Object[] { objectMapper10, deserializerProvider19, objectMapper20, strList28, emittingLogger32, (byte) 1 };
        emittingLogger7.error(throwable8, "{\"\": \"s3.amazonaws.com\"}", objArray34);
        java.lang.Throwable throwable36 = null;
        java.io.File file39 = new java.io.File("hi!");
        java.io.File file41 = new java.io.File(file39, "");
        java.io.File file42 = file39.getAbsoluteFile();
        org.codehaus.jackson.map.ObjectMapper objectMapper43 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode44 = objectMapper43.createObjectNode();
        org.codehaus.jackson.JsonFactory jsonFactory45 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper47 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper48 = objectMapper46.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider49 = objectMapper46.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider50 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory45, serializerProvider49, deserializerProvider50);
        org.jets3t.service.security.ProviderCredentials providerCredentials52 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service53 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials52);
        org.jets3t.service.security.ProviderCredentials providerCredentials54 = restS3Service53.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager55 = null;
        restS3Service53.setHttpConnectionManager(httpConnectionManager55);
        java.lang.Object[] objArray59 = new java.lang.Object[] { file42, objectMapper43, objectMapper51, restS3Service53, 100.0f, "{\"\": \"s3.amazonaws.com\"}" };
        emittingLogger7.info(throwable36, "", objArray59);
        org.codehaus.jackson.map.ObjectMapper objectMapper62 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = objectMapper62.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper62.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider65 = objectMapper62.getSerializerProvider();
        java.text.DateFormat dateFormat66 = null;
        objectMapper62.setDateFormat(dateFormat66);
        org.codehaus.jackson.node.ArrayNode arrayNode68 = objectMapper62.createArrayNode();
        com.metamx.druid.client.DataSegment.Builder builder69 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder71 = builder69.size(0L);
        java.lang.Object[] objArray72 = new java.lang.Object[] { objectMapper62, builder69 };
        emittingLogger7.trace("null", objArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder74 = joiner1.appendTo(stringBuilder5, objArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(mapJoiner4);
        org.junit.Assert.assertNotNull(objectMapper11);
        org.junit.Assert.assertNotNull(objectMapper12);
        org.junit.Assert.assertNotNull(deserializerProvider19);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectMapper22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "null" + "'", str24, "null");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "hi!");
        org.junit.Assert.assertNull("file41.getParent() == null", file41.getParent());
        org.junit.Assert.assertEquals(file41.toString(), "hi!");
        org.junit.Assert.assertNotNull(file42);
// flaky:         org.junit.Assert.assertEquals(file42.getParent(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4");
// flaky:         org.junit.Assert.assertEquals(file42.toString(), "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!");
        org.junit.Assert.assertNotNull(objectNode44);
        org.junit.Assert.assertNotNull(objectMapper47);
        org.junit.Assert.assertNotNull(objectMapper48);
        org.junit.Assert.assertNotNull(serializerProvider49);
        org.junit.Assert.assertNull(providerCredentials54);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(objectMapper63);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(serializerProvider65);
        org.junit.Assert.assertNotNull(arrayNode68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(objArray72);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        java.io.File file1 = new java.io.File("[\"content-length-range\", 58, 1]/null");
        org.junit.Assert.assertEquals(file1.getParent(), "[\"content-length-range\", 58, 1]");
        org.junit.Assert.assertEquals(file1.toString(), "[\"content-length-range\", 58, 1]/null");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.ser.FilterProvider filterProvider5 = null;
        objectMapper4.setFilters(filterProvider5);
        org.codehaus.jackson.JsonFactory jsonFactory7 = objectMapper4.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonFactory jsonFactory9 = null;
        org.codehaus.jackson.JsonFactory jsonFactory10 = null;
        org.codehaus.jackson.JsonFactory jsonFactory11 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper12 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper13 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper14 = objectMapper12.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider15 = objectMapper12.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory16 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider17 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider18 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig19 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig20 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory16, serializerProvider17, deserializerProvider18, serializationConfig19, deserializationConfig20);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = objectMapper21.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig23 = null;
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.SerializerFactory serializerFactory31 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper32 = objectMapper30.setSerializerFactory(serializerFactory31);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig33 = objectMapper30.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper34 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory11, serializerProvider15, deserializerProvider22, serializationConfig23, deserializationConfig33);
        org.codehaus.jackson.JsonFactory jsonFactory35 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper36 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper37 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper38 = objectMapper36.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider39 = objectMapper36.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory40 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider41 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider42 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig43 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig44 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory40, serializerProvider41, deserializerProvider42, serializationConfig43, deserializationConfig44);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider46 = objectMapper45.getDeserializerProvider();
        org.codehaus.jackson.map.SerializationConfig serializationConfig47 = null;
        org.codehaus.jackson.JsonFactory jsonFactory48 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper49 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper50 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper51 = objectMapper49.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider52 = objectMapper49.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider53 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper54 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory48, serializerProvider52, deserializerProvider53);
        org.codehaus.jackson.map.SerializerFactory serializerFactory55 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper56 = objectMapper54.setSerializerFactory(serializerFactory55);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig57 = objectMapper54.copyDeserializationConfig();
        org.codehaus.jackson.map.ObjectMapper objectMapper58 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory35, serializerProvider39, deserializerProvider46, serializationConfig47, deserializationConfig57);
        org.codehaus.jackson.map.ObjectMapper objectMapper59 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory10, serializerProvider15, deserializerProvider46);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider60 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper61 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory9, serializerProvider15, deserializerProvider60);
        org.codehaus.jackson.map.SerializerProvider serializerProvider62 = objectMapper61.getSerializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper63 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper64 = objectMapper63.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper65 = objectMapper63.disableDefaultTyping();
        java.lang.Object obj66 = null;
        java.lang.String str67 = objectMapper63.writeValueAsString(obj66);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider68 = objectMapper63.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper69 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider62, deserializerProvider68);
        org.codehaus.jackson.map.ObjectMapper objectMapper70 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7);
        org.codehaus.jackson.JsonFactory jsonFactory71 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper72 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper73 = objectMapper72.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper74 = objectMapper72.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider75 = objectMapper72.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider76 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper77 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory71, serializerProvider75, deserializerProvider76);
        org.codehaus.jackson.map.SerializerFactory serializerFactory78 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper79 = objectMapper77.setSerializerFactory(serializerFactory78);
        org.codehaus.jackson.PrettyPrinter prettyPrinter80 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter81 = objectMapper79.prettyPrintingWriter(prettyPrinter80);
        org.codehaus.jackson.JsonFactory jsonFactory82 = objectMapper79.getJsonFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper83 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper84 = objectMapper83.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper85 = objectMapper83.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider86 = objectMapper83.getSerializerProvider();
        org.codehaus.jackson.JsonFactory jsonFactory87 = null;
        org.codehaus.jackson.map.SerializerProvider serializerProvider88 = null;
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider89 = null;
        org.codehaus.jackson.map.SerializationConfig serializationConfig90 = null;
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig91 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper92 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory87, serializerProvider88, deserializerProvider89, serializationConfig90, deserializationConfig91);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider93 = objectMapper92.getDeserializerProvider();
        org.codehaus.jackson.map.ObjectMapper objectMapper94 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory82, serializerProvider86, deserializerProvider93);
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider95 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper96 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory7, serializerProvider86, deserializerProvider95);
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertNotNull(objectMapper13);
        org.junit.Assert.assertNotNull(objectMapper14);
        org.junit.Assert.assertNotNull(serializerProvider15);
        org.junit.Assert.assertNotNull(deserializerProvider22);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectMapper32);
        org.junit.Assert.assertNotNull(deserializationConfig33);
        org.junit.Assert.assertNotNull(objectMapper37);
        org.junit.Assert.assertNotNull(objectMapper38);
        org.junit.Assert.assertNotNull(serializerProvider39);
        org.junit.Assert.assertNotNull(deserializerProvider46);
        org.junit.Assert.assertNotNull(objectMapper50);
        org.junit.Assert.assertNotNull(objectMapper51);
        org.junit.Assert.assertNotNull(serializerProvider52);
        org.junit.Assert.assertNotNull(objectMapper56);
        org.junit.Assert.assertNotNull(deserializationConfig57);
        org.junit.Assert.assertNotNull(serializerProvider62);
        org.junit.Assert.assertNotNull(objectMapper64);
        org.junit.Assert.assertNotNull(objectMapper65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "null" + "'", str67, "null");
        org.junit.Assert.assertNotNull(deserializerProvider68);
        org.junit.Assert.assertNotNull(objectMapper73);
        org.junit.Assert.assertNotNull(objectMapper74);
        org.junit.Assert.assertNotNull(serializerProvider75);
        org.junit.Assert.assertNotNull(objectMapper79);
        org.junit.Assert.assertNotNull(objectWriter81);
        org.junit.Assert.assertNotNull(jsonFactory82);
        org.junit.Assert.assertNotNull(objectMapper84);
        org.junit.Assert.assertNotNull(objectMapper85);
        org.junit.Assert.assertNotNull(serializerProvider86);
        org.junit.Assert.assertNotNull(deserializerProvider93);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.joda.time.Interval interval1 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service4 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3);
        org.jets3t.service.security.ProviderCredentials providerCredentials5 = restS3Service4.getProviderCredentials();
        java.lang.String str6 = restS3Service4.getInvokingApplicationDescription();
        java.lang.String str9 = restS3Service4.createTorrentUrl("http://s3.amazonaws.com//?torrent", "hi!");
        org.jets3t.service.security.ProviderCredentials providerCredentials10 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service11 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = restS3Service11.renameMetadataKeys(strMap12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = restS3Service4.renameMetadataKeys(strMap13);
        com.metamx.druid.client.DataSegment.Builder builder15 = new com.metamx.druid.client.DataSegment.Builder();
        com.metamx.druid.client.DataSegment.Builder builder17 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.metamx.druid.client.DataSegment.Builder builder22 = builder17.dimensions((java.util.List<java.lang.String>) strList20);
        java.lang.String str23 = org.jets3t.service.S3Service.generatePostPolicyCondition_Equality("http://s3.amazonaws.com//hi%21?torrent", (java.util.List<java.lang.String>) strList20);
        com.metamx.druid.client.DataSegment.Builder builder24 = builder15.dimensions((java.util.List<java.lang.String>) strList20);
        com.metamx.druid.client.DataSegment.Builder builder25 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.metamx.druid.client.DataSegment.Builder builder30 = builder25.dimensions((java.util.List<java.lang.String>) strList28);
        com.metamx.druid.client.DataSegment.Builder builder32 = builder30.version("http://s3.amazonaws.com//?torrent");
        com.metamx.druid.client.DataSegment.Builder builder34 = builder32.dataSource("hi!");
        com.metamx.druid.client.DataSegment.Builder builder35 = new com.metamx.druid.client.DataSegment.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.metamx.druid.client.DataSegment.Builder builder40 = builder35.dimensions((java.util.List<java.lang.String>) strList38);
        com.metamx.druid.client.DataSegment.Builder builder41 = builder34.metrics((java.util.List<java.lang.String>) strList38);
        com.metamx.druid.shard.ShardSpec shardSpec42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.metamx.druid.client.DataSegment dataSegment44 = new com.metamx.druid.client.DataSegment("[\"starts-with\", \"$s3.amazonaws.com\", \"\"]", interval1, "http://s3.amazonaws.com/%3Cform%20action%3D%22https%3A%2F%2Fhttp%3A%2F%2Fs3.amazonaws.com%2F%2Fhi%2521%3Ftorrent.s3.amazonaws.com%2F%22%20method%3D%22post%22%20enctype%3D%22multipart%2Fform-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C%2Fform%3E/%7B%22%7B%22%22%3A%20%22s3.amazonaws.com%22%7D%22%3A%20%22acl%2Cpolicy%2Ctorrent%2Clogging%2Clocation%2CrequestPayment%2Cversions%2Cversioning%2CversionId%2Cuploads%2CuploadId%2CpartNumber%2Cwebsite%2Cnotification%22%7D?torrent", strMap14, (java.util.List<java.lang.String>) strList20, (java.util.List<java.lang.String>) strList38, shardSpec42, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent" + "'", str9, "http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}" + "'", str23, "{\"http://s3.amazonaws.com//hi%21?torrent\": \"\"}");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.io.File file1 = new java.io.File("[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]");
        org.junit.Assert.assertEquals(file1.getParent(), "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "[\"[\"starts-with\", \"$[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]\", \"\"]\", \"$http:/s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent\", \"[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]\"]");
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        boolean boolean10 = restS3Service7.isBucketAccessible("");
        java.lang.String str11 = restS3Service7.getRestMetadataPrefix();
        boolean boolean12 = restS3Service7.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager13 = restS3Service7.getHttpConnectionManager();
        org.jets3t.service.Jets3tProperties jets3tProperties14 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration15 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service16 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "{\"\": \"s3.amazonaws.com\"}/hi!", credentialsProvider5, jets3tProperties14, hostConfiguration15);
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service17 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/[\"content-length-range\", 58, 1]/null", credentialsProvider2, jets3tProperties14);
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "x-amz-meta-" + "'", str11, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager13);
        org.junit.Assert.assertNotNull(jets3tProperties14);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.io.File file1 = new java.io.File("http://s3.amazonaws.com//hi%21?torrent");
        boolean boolean3 = file1.setLastModified((long) (short) 10);
        boolean boolean4 = file1.canRead();
        org.junit.Assert.assertEquals(file1.getParent(), "http:/s3.amazonaws.com");
        org.junit.Assert.assertEquals(file1.toString(), "http:/s3.amazonaws.com/hi%21?torrent");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.codehaus.jackson.map.ObjectMapper objectMapper0 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
        org.codehaus.jackson.map.SerializationConfig.Feature[] featureArray3 = new org.codehaus.jackson.map.SerializationConfig.Feature[] {};
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = objectMapper0.enable(featureArray3);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = objectMapper4.setSerializationInclusion(inclusion5);
        org.codehaus.jackson.node.ArrayNode arrayNode7 = objectMapper6.createArrayNode();
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode9 = objectMapper8.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema10 = null;
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper8.schemaBasedReader(formatSchema10);
        byte[] byteArray13 = objectMapper8.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.FormatSchema formatSchema14 = null;
        org.codehaus.jackson.map.ObjectReader objectReader15 = objectMapper8.reader(formatSchema14);
        java.text.DateFormat dateFormat16 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter17 = objectMapper8.writer(dateFormat16);
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.node.JsonNodeFactory jsonNodeFactory20 = objectMapper18.getNodeFactory();
        org.codehaus.jackson.map.ObjectMapper objectMapper21 = objectMapper8.setNodeFactory(jsonNodeFactory20);
        org.codehaus.jackson.map.ObjectReader objectReader22 = objectMapper6.readerForUpdating((java.lang.Object) objectMapper21);
        org.codehaus.jackson.type.TypeReference typeReference24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.codehaus.jackson.node.ArrayNode arrayNode25 = objectMapper6.readValue("[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", typeReference24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper1);
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(objectMapper4);
        org.junit.Assert.assertNotNull(objectMapper6);
        org.junit.Assert.assertNotNull(arrayNode7);
        org.junit.Assert.assertNotNull(objectNode9);
        org.junit.Assert.assertNotNull(objectReader11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[49, 48]");
        org.junit.Assert.assertNotNull(objectReader15);
        org.junit.Assert.assertNotNull(objectWriter17);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(jsonNodeFactory20);
        org.junit.Assert.assertNotNull(objectMapper21);
        org.junit.Assert.assertNotNull(objectReader22);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.io.File file1 = new java.io.File("hi!");
        java.io.File file3 = new java.io.File(file1, "[\"starts-with\", \"$http://s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
        boolean boolean4 = file3.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertEquals(file3.getParent(), "hi!/[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com");
        org.junit.Assert.assertEquals(file3.toString(), "hi!/[\"starts-with\", \"$http:/s3.amazonaws.com.s3.amazonaws.com/?torrent\", \"\"]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider2 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials3 = null;
        org.apache.commons.httpclient.auth.CredentialsProvider credentialsProvider5 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials6 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service7 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials6);
        org.jets3t.service.security.ProviderCredentials providerCredentials8 = restS3Service7.getProviderCredentials();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager9 = null;
        restS3Service7.setHttpConnectionManager(httpConnectionManager9);
        org.jets3t.service.Jets3tProperties jets3tProperties11 = restS3Service7.getJetS3tProperties();
        org.apache.commons.httpclient.HostConfiguration hostConfiguration12 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service13 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials3, "", credentialsProvider5, jets3tProperties11, hostConfiguration12);
        org.apache.commons.httpclient.HostConfiguration hostConfiguration14 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service15 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0, "", credentialsProvider2, jets3tProperties11, hostConfiguration14);
        org.jets3t.service.security.ProviderCredentials providerCredentials18 = null;
        org.jets3t.service.security.ProviderCredentials providerCredentials19 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service20 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials19);
        org.jets3t.service.security.ProviderCredentials providerCredentials21 = restS3Service20.getProviderCredentials();
        boolean boolean23 = restS3Service20.isBucketAccessible("");
        com.metamx.druid.loading.S3SegmentPusherConfig s3SegmentPusherConfig24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.PrettyPrinter prettyPrinter27 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter28 = objectMapper25.writer(prettyPrinter27);
        org.codehaus.jackson.map.ObjectMapper objectMapper29 = objectMapper25.enableDefaultTyping();
        org.codehaus.jackson.FormatSchema formatSchema30 = null;
        org.codehaus.jackson.map.ObjectWriter objectWriter31 = objectMapper29.schemaBasedWriter(formatSchema30);
        org.codehaus.jackson.map.PropertyNamingStrategy propertyNamingStrategy32 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper33 = objectMapper29.setPropertyNamingStrategy(propertyNamingStrategy32);
        com.metamx.druid.loading.S3SegmentPusher s3SegmentPusher34 = new com.metamx.druid.loading.S3SegmentPusher(restS3Service20, s3SegmentPusherConfig24, objectMapper33);
        java.util.Date date35 = restS3Service20.getCurrentTimeWithOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = restS3Service15.createSignedGetUrl("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!/[\"starts-with\", \"$/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/randoop-modified_4/hi!\", \"\"]", "[\"content-length-range\", 100, 4]", providerCredentials18, date35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials8);
        org.junit.Assert.assertNotNull(jets3tProperties11);
        org.junit.Assert.assertNull(providerCredentials21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectWriter28);
        org.junit.Assert.assertNotNull(objectMapper29);
        org.junit.Assert.assertNotNull(objectWriter31);
        org.junit.Assert.assertNotNull(objectMapper33);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 04 08:20:40 BRT 2021");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        com.google.common.base.Joiner joiner1 = com.google.common.base.Joiner.on("http://s3.amazonaws.com/http%3A%2F%2Fs3.amazonaws.com%2F%2F%3Ftorrent/hi%21?torrent");
        com.google.common.base.Joiner joiner2 = joiner1.skipNulls();
        java.lang.StringBuilder stringBuilder3 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper4 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode5 = objectMapper4.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema6 = null;
        org.codehaus.jackson.map.ObjectReader objectReader7 = objectMapper4.schemaBasedReader(formatSchema6);
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode9 = objectMapper8.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema10 = null;
        org.codehaus.jackson.map.ObjectReader objectReader11 = objectMapper8.schemaBasedReader(formatSchema10);
        byte[] byteArray13 = objectMapper8.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode14 = objectMapper4.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion inclusion15 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper4.setSerializationInclusion(inclusion15);
        org.codehaus.jackson.JsonFactory jsonFactory17 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper20 = objectMapper18.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider21 = objectMapper18.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider22 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper23 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory17, serializerProvider21, deserializerProvider22);
        org.codehaus.jackson.JsonFactory jsonFactory24 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper25 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper26 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper27 = objectMapper25.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider28 = objectMapper25.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider29 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper30 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory24, serializerProvider28, deserializerProvider29);
        org.codehaus.jackson.map.ObjectMapper objectMapper31 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode32 = objectMapper31.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema33 = null;
        org.codehaus.jackson.map.ObjectReader objectReader34 = objectMapper31.schemaBasedReader(formatSchema33);
        org.codehaus.jackson.map.ObjectMapper objectMapper35 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.node.ObjectNode objectNode36 = objectMapper35.createObjectNode();
        org.codehaus.jackson.FormatSchema formatSchema37 = null;
        org.codehaus.jackson.map.ObjectReader objectReader38 = objectMapper35.schemaBasedReader(formatSchema37);
        byte[] byteArray40 = objectMapper35.writeValueAsBytes((java.lang.Object) 10L);
        org.codehaus.jackson.JsonNode jsonNode41 = objectMapper31.valueToTree((java.lang.Object) 10L);
        org.codehaus.jackson.JsonParser jsonParser42 = objectMapper30.treeAsTokens(jsonNode41);
        org.codehaus.jackson.JsonNode jsonNode43 = objectMapper23.readTree(jsonParser42);
        org.codehaus.jackson.map.ObjectMapper objectMapper44 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper45 = objectMapper44.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper46 = objectMapper44.disableDefaultTyping();
        java.io.File file48 = new java.io.File("hi!");
        java.io.File file50 = new java.io.File(file48, "");
        java.lang.Class<?> wildcardClass51 = file48.getClass();
        org.codehaus.jackson.type.JavaType javaType52 = objectMapper46.constructType((java.lang.reflect.Type) wildcardClass51);
        org.codehaus.jackson.map.MappingIterator<java.util.Collection<java.lang.String>> strCollectionItor53 = objectMapper4.readValues(jsonParser42, javaType52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuilder stringBuilder54 = joiner2.appendTo(stringBuilder3, (java.util.Iterator<java.util.Collection<java.lang.String>>) strCollectionItor53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(joiner1);
        org.junit.Assert.assertNotNull(joiner2);
        org.junit.Assert.assertNotNull(objectNode5);
        org.junit.Assert.assertNotNull(objectReader7);
        org.junit.Assert.assertNotNull(objectNode9);
        org.junit.Assert.assertNotNull(objectReader11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode14);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNotNull(objectMapper20);
        org.junit.Assert.assertNotNull(serializerProvider21);
        org.junit.Assert.assertNotNull(objectMapper26);
        org.junit.Assert.assertNotNull(objectMapper27);
        org.junit.Assert.assertNotNull(serializerProvider28);
        org.junit.Assert.assertNotNull(objectNode32);
        org.junit.Assert.assertNotNull(objectReader34);
        org.junit.Assert.assertNotNull(objectNode36);
        org.junit.Assert.assertNotNull(objectReader38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[49, 48]");
        org.junit.Assert.assertNotNull(jsonNode41);
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertNotNull(jsonNode43);
        org.junit.Assert.assertNotNull(objectMapper45);
        org.junit.Assert.assertNotNull(objectMapper46);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "hi!");
        org.junit.Assert.assertNull("file50.getParent() == null", file50.getParent());
        org.junit.Assert.assertEquals(file50.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(javaType52);
        org.junit.Assert.assertNotNull(strCollectionItor53);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = restS3Service1.renameMetadataKeys(strMap2);
        java.lang.String str4 = restS3Service1.getRestMetadataPrefix();
        boolean boolean5 = restS3Service1.isShutdown();
        restS3Service1.setRequesterPaysEnabled(false);
        java.lang.String str8 = restS3Service1.getDevPayProductToken();
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-amz-meta-" + "'", str4, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.codehaus.jackson.JsonFactory jsonFactory0 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper1 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper3 = objectMapper1.disableDefaultTyping();
        org.codehaus.jackson.map.SerializerProvider serializerProvider4 = objectMapper1.getSerializerProvider();
        org.codehaus.jackson.map.DeserializerProvider deserializerProvider5 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper6 = new org.codehaus.jackson.map.ObjectMapper(jsonFactory0, serializerProvider4, deserializerProvider5);
        org.codehaus.jackson.map.SerializerFactory serializerFactory7 = null;
        org.codehaus.jackson.map.ObjectMapper objectMapper8 = objectMapper6.setSerializerFactory(serializerFactory7);
        org.codehaus.jackson.map.DeserializationConfig deserializationConfig9 = objectMapper6.copyDeserializationConfig();
        java.io.File file11 = new java.io.File("hi!");
        java.io.File file13 = new java.io.File(file11, "<form action=\"https://.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        long long14 = file13.getFreeSpace();
        org.codehaus.jackson.map.ObjectMapper objectMapper15 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper16 = objectMapper15.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper17 = new org.codehaus.jackson.map.ObjectMapper();
        org.codehaus.jackson.map.ObjectMapper objectMapper18 = objectMapper17.disableDefaultTyping();
        org.codehaus.jackson.map.ObjectMapper objectMapper19 = objectMapper17.disableDefaultTyping();
        java.io.File file21 = new java.io.File("hi!");
        java.io.File file23 = new java.io.File(file21, "");
        java.lang.Class<?> wildcardClass24 = file21.getClass();
        org.codehaus.jackson.type.JavaType javaType25 = objectMapper19.constructType((java.lang.reflect.Type) wildcardClass24);
        com.metamx.emitter.EmittingLogger emittingLogger26 = new com.metamx.emitter.EmittingLogger((java.lang.Class) wildcardClass24);
        org.codehaus.jackson.type.JavaType javaType27 = objectMapper15.constructType((java.lang.reflect.Type) wildcardClass24);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Watchable watchable28 = objectMapper6.readValue(file13, javaType27);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">?<input type=\"hidden\" name=\"key\" value=\"hi!\">?<input name=\"file\" type=\"file\">?<br>?<input type=\"submit\" value=\"Upload to Amazon S3\">?</form> (Not a directory)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectMapper2);
        org.junit.Assert.assertNotNull(objectMapper3);
        org.junit.Assert.assertNotNull(serializerProvider4);
        org.junit.Assert.assertNotNull(objectMapper8);
        org.junit.Assert.assertNotNull(deserializationConfig9);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n<");
        org.junit.Assert.assertEquals(file13.toString(), "hi!/<form action=\"https:/.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"key\" value=\"hi!\">\n<input name=\"file\" type=\"file\">\n<br>\n<input type=\"submit\" value=\"Upload to Amazon S3\">\n</form>");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(objectMapper16);
        org.junit.Assert.assertNotNull(objectMapper18);
        org.junit.Assert.assertNotNull(objectMapper19);
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "hi!");
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "hi!");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(javaType25);
        org.junit.Assert.assertNotNull(javaType27);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.jets3t.service.security.ProviderCredentials providerCredentials0 = null;
        org.jets3t.service.impl.rest.httpclient.RestS3Service restS3Service1 = new org.jets3t.service.impl.rest.httpclient.RestS3Service(providerCredentials0);
        org.jets3t.service.security.ProviderCredentials providerCredentials2 = restS3Service1.getProviderCredentials();
        boolean boolean4 = restS3Service1.isBucketAccessible("");
        java.lang.String str5 = restS3Service1.getRestMetadataPrefix();
        boolean boolean6 = restS3Service1.isRequesterPaysEnabled();
        org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager7 = restS3Service1.getHttpConnectionManager();
        // The following exception was thrown during execution in test generation
        try {
            org.jets3t.service.model.S3Bucket[] s3BucketArray8 = restS3Service1.listAllBuckets();
            org.junit.Assert.fail("Expected exception of type org.jets3t.service.S3ServiceException; message: The requested action cannot be performed with a non-authenticated service: List all buckets");
        } catch (org.jets3t.service.S3ServiceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(providerCredentials2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-amz-meta-" + "'", str5, "x-amz-meta-");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(httpConnectionManager7);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.io.File file2 = new java.io.File("{\"http://s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A//.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\": \"\"}", "{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
        org.junit.Assert.assertEquals(file2.getParent(), "{\"http:/s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\": \"\"}/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}");
        org.junit.Assert.assertEquals(file2.toString(), "{\"http:/s3.amazonaws.com.s3.amazonaws.com/%3Cform%20action%3D%22https%3A/.s3.amazonaws.com/%22%20method%3D%22post%22%20enctype%3D%22multipart/form-data%22%3E%0A%3Cinput%20type%3D%22hidden%22%20name%3D%22key%22%20value%3D%22hi%21%22%3E%0A%3Cinput%20name%3D%22file%22%20type%3D%22file%22%3E%0A%3Cbr%3E%0A%3Cinput%20type%3D%22submit%22%20value%3D%22Upload%20to%20Amazon%20S3%22%3E%0A%3C/form%3E?torrent\": \"\"}/{\"{\"[\"content-length-range\", -226, -226]\": \"{\"\": \"s3.amazonaws.com\"}/hi!\"}\": \"x-amz-meta-\"}");
    }
}
