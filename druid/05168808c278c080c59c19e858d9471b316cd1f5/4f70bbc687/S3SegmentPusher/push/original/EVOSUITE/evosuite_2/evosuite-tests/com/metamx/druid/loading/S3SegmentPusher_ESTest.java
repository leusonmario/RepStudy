/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 09:58:53 GMT 2021
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.SingleDimensionShardSpec;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.apache.commons.httpclient.HostConfiguration;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.auth.CredentialsProvider;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.RawLocalFileSystem;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.JsonToken;
import org.codehaus.jackson.annotate.JsonAutoDetect;
import org.codehaus.jackson.annotate.JsonMethod;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.PropertyNamingStrategy;
import org.codehaus.jackson.node.BigIntegerNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hyperic.sigar.Sigar;
import org.jets3t.service.Jets3tProperties;
import org.jets3t.service.StorageService;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.security.AWSDevPayCredentials;
import org.jets3t.service.security.GSCredentials;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Interval;
import org.joda.time.MutableDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "|\"V|a.DLZZ M(2vzq";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertNotNull(gSCredentials0);
      
      CredentialsProvider credentialsProvider0 = null;
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string0);
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      
      HostConfiguration hostConfiguration0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNotNull(restS3Service0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNotNull(s3SegmentPusher0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      Days days0 = Days.THREE;
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertNotNull(days0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Interval interval0 = new Interval(days0, mutableDateTime0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392150081320L, interval0.getStartMillis());
      assertNotNull(interval0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Map<String, Object> map0 = null;
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/|\"V|a.DLZZ M(2vzq", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/|\"V|a.DLZZ M(2vzq/|\"V|a.DLZZ M(2vzq", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("|\"V|a.DLZZ M(2vzq", mockFile0.getName());
      
      List<String> list0 = null;
      List<String> list1 = restS3Service0.getResourceParameterNames();
      assertEquals(14, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNotNull(list1);
      assertFalse(list1.contains(string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec(string0, string0, string0, mutableDateTime0.ROUND_CEILING);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertEquals("|\"V|a.DLZZ M(2vzq", singleDimensionShardSpec0.getStart());
      assertEquals(2, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("|\"V|a.DLZZ M(2vzq", singleDimensionShardSpec0.getDimension());
      assertEquals("|\"V|a.DLZZ M(2vzq", singleDimensionShardSpec0.getEnd());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(singleDimensionShardSpec0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DataSegment dataSegment0 = new DataSegment(string0, interval0, string0, map0, list1, list0, singleDimensionShardSpec0, restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(14, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getSecretKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getAccessKey());
      assertEquals("|\"V|a.DLZZ M(2vzq", gSCredentials0.getFriendlyName());
      assertEquals("|\"V|a.DLZZ M(2vzq", singleDimensionShardSpec0.getStart());
      assertEquals(2, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("|\"V|a.DLZZ M(2vzq", singleDimensionShardSpec0.getDimension());
      assertEquals("|\"V|a.DLZZ M(2vzq", singleDimensionShardSpec0.getEnd());
      assertEquals("|\"V|a.DLZZ M(2vzq", dataSegment0.getVersion());
      assertEquals("|\"v|a.dlzz m(2vzq", dataSegment0.getDataSource());
      assertEquals("|\"v|a.dlzz m(2vzq_2014-02-11T22:21:21.320+02:00_2014-02-14T22:21:21.320+02:00_|\"V|a.DLZZ M(2vzq_2", dataSegment0.getIdentifier());
      assertEquals(1L, dataSegment0.getSize());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("|\"V|a.DLZZ M(2vzq", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(1, days0.size());
      assertEquals(3, days0.getDays());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392150081320L, interval0.getStartMillis());
      assertNotNull(dataSegment0);
      assertFalse(list1.contains(string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000089\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "t>:b%u*d^t|e";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertNotNull(gSCredentials0);
      
      CredentialsProvider credentialsProvider0 = null;
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      
      HostConfiguration hostConfiguration0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNotNull(restS3Service0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string1 = "[";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string2 = "";
      MockFile mockFile0 = new MockFile(string2, string2);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Interval interval0 = new Interval(days0, mutableDateTime0);
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals((-185541194693942680L), interval0.getStartMillis());
      assertNotNull(interval0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Map<String, Object> map0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string1));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNotNull(singleDimensionShardSpec0);
      
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string0, map0, linkedList0, linkedList0, singleDimensionShardSpec0, restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals(1L, dataSegment0.getSize());
      assertEquals("[_-5877597-08-07T17:21:21.320-02:19:36_2014-02-14T17:21:21.320-03:00_t>:b%u*d^t|e_-1", dataSegment0.getIdentifier());
      assertEquals("[", dataSegment0.getDataSource());
      assertEquals("t>:b%u*d^t|e", dataSegment0.getVersion());
      assertFalse(jets3tProperties0.isLoaded());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals((-185541194693942680L), interval0.getStartMillis());
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedList0.contains(string1));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "t>:b%*d^t|e";
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = null;
      MockFile mockFile0 = new MockFile(string1, string1);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string0));
      
      Map<String, Object> map0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNotNull(singleDimensionShardSpec0);
      
      RestS3Service restS3Service0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      assertFalse(string1.equals((Object)string0));
      
      Interval interval0 = new Interval(map0);
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      long long0 = 1613L;
      DataSegment dataSegment0 = new DataSegment(string0, interval0, string1, map0, linkedList0, linkedList0, singleDimensionShardSpec0, long0);
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals("t>:b%*d^t|e", dataSegment0.getDataSource());
      assertEquals(1613L, dataSegment0.getSize());
      assertEquals("", dataSegment0.getVersion());
      assertEquals("t>:b%*d^t|e_2014-02-14T17:21:21.320-03:00_2014-02-14T17:21:21.320-03:00__-1", dataSegment0.getIdentifier());
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedList0.contains(string0));
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestS3Service restS3Service0 = null;
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = (PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy)PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES;
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      JsonMethod jsonMethod0 = JsonMethod.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(jsonMethod0, jsonAutoDetect_Visibility0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(s3SegmentPusher0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestS3Service restS3Service0 = null;
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      
      String string0 = null;
      Sigar sigar0 = new Sigar();
      assertNotNull(sigar0);
      assertEquals((-1L), Sigar.FIELD_NOTIMPL);
      
      File file0 = sigar0.getNativeLibrary();
      assertNull(file0);
      assertEquals((-1L), Sigar.FIELD_NOTIMPL);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string0, string0, string0);
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertNotNull(aWSDevPayCredentials0);
      
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      String string1 = "nD@{%R=HEYji&";
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string1);
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      HttpClient httpClient0 = new HttpClient();
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNotNull(httpClient0);
      
      HostConfiguration hostConfiguration0 = httpClient0.getHostConfiguration();
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertNull(hostConfiguration0.getVirtualHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNotNull(hostConfiguration0);
      
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertNull(hostConfiguration0.getVirtualHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertEquals((-1), hostConfiguration0.getPort());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("", restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("", restS3Service0.getDevPayUserToken());
      assertNotNull(restS3Service0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper2);
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertNull(hostConfiguration0.getVirtualHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertEquals((-1), hostConfiguration0.getPort());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("", restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("", restS3Service0.getDevPayUserToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertNotNull(rawLocalFileSystem0);
      
      String string2 = "')";
      String string3 = "jPxpsr!Lx.I})]?{&i1";
      Path path0 = new Path(string2, string3);
      assertNotNull(path0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      Path path1 = new Path(jsonFactory0.FORMAT_NAME_JSON, path0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(path1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(path1.equals((Object)path0));
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      String string4 = "s3_zip";
      Path path2 = new Path(path1, string4);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(path2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      Path path3 = rawLocalFileSystem0.makeQualified(path2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertNotNull(path3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path3.equals((Object)path0));
      assertFalse(path3.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(path0, path2);
      assertNotSame(path0, path3);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertNotSame(path1, path3);
      assertNotSame(path1, path2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path3);
      assertNotSame(path3, path0);
      assertNotSame(path3, path1);
      assertNotSame(path3, path2);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      File file0 = rawLocalFileSystem0.pathToFile(path3);
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/JSON/')/jPxpsr!Lx.I})]?{&i1", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.exists());
      assertEquals("s3_zip", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/JSON/')/jPxpsr!Lx.I})]?{&i1/s3_zip", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertNotNull(file0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path3));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path3));
      assertFalse(path1.equals((Object)path2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path2.equals((Object)path3));
      assertFalse(path3.equals((Object)path0));
      assertFalse(path3.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(path0, path2);
      assertNotSame(path0, path3);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertNotSame(path1, path3);
      assertNotSame(path1, path2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path3);
      assertNotSame(path3, path0);
      assertNotSame(path3, path1);
      assertNotSame(path3, path2);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string0, string0, string0);
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertNotNull(aWSDevPayCredentials0);
      
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      String string1 = "nD@{%R=HEYji&";
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string1);
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      HttpClient httpClient0 = new HttpClient();
      assertFalse(httpClient0.isStrictMode());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertNotNull(httpClient0);
      
      HostConfiguration hostConfiguration0 = httpClient0.getHostConfiguration();
      assertFalse(httpClient0.isStrictMode());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getProxyHost());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(hostConfiguration0.getHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertNotNull(hostConfiguration0);
      
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertFalse(jets3tProperties0.isLoaded());
      assertFalse(httpClient0.isStrictMode());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getProxyHost());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(hostConfiguration0.getHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals("", restS3Service0.getDevPayUserToken());
      assertEquals("", restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNotNull(restS3Service0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper2);
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertFalse(jets3tProperties0.isLoaded());
      assertFalse(httpClient0.isStrictMode());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getProxyHost());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(hostConfiguration0.getHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals("", restS3Service0.getDevPayUserToken());
      assertEquals("", restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertNotNull(rawLocalFileSystem0);
      
      String string2 = "')";
      String string3 = "jPxpsr!Lx.I})]?{&i1";
      Path path0 = new Path(string2, string3);
      assertNotNull(path0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      Path path1 = new Path(jsonFactory0.FORMAT_NAME_JSON, path0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(path1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(path1.equals((Object)path0));
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      String string4 = "s3_zip";
      Path path2 = new Path(path1, string4);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(path2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      Path path3 = rawLocalFileSystem0.makeQualified(path2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertNotNull(path3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path1.equals((Object)path2));
      assertFalse(path1.equals((Object)path0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path3.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(path0, path1);
      assertNotSame(path0, path3);
      assertNotSame(path0, path2);
      assertNotSame(path1, path2);
      assertNotSame(path1, path3);
      assertNotSame(path1, path0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path3);
      assertNotSame(path3, path1);
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      File file0 = rawLocalFileSystem0.pathToFile(path3);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("s3_zip", file0.getName());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/JSON/')/jPxpsr!Lx.I})]?{&i1", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/JSON/')/jPxpsr!Lx.I})]?{&i1/s3_zip", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertNotNull(file0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path3));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path1.equals((Object)path2));
      assertFalse(path1.equals((Object)path3));
      assertFalse(path1.equals((Object)path0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path2.equals((Object)path3));
      assertFalse(path3.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(path0, path1);
      assertNotSame(path0, path3);
      assertNotSame(path0, path2);
      assertNotSame(path1, path2);
      assertNotSame(path1, path3);
      assertNotSame(path1, path0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path3);
      assertNotSame(path3, path1);
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "t>:b%u*d^t|e";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertNotNull(gSCredentials0);
      
      CredentialsProvider credentialsProvider0 = null;
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      
      HostConfiguration hostConfiguration0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNotNull(restS3Service0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string2 = "";
      String string3 = "";
      MockFile mockFile0 = new MockFile(string2, string3);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertNotNull(days0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(hostConfiguration0, dateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Interval interval0 = new Interval(days0, mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(interval0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Map<String, Object> map0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isBinary());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isDouble());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNotNull(bigIntegerNode0);
      
      String string4 = ">eU'(w*.{3he/T)*";
      File file0 = MockFile.createTempFile(string4, string0);
      assertEquals("T)*0t>:b%u*d^t|e", file0.getName());
      assertEquals("/tmp/>eU'(w*.{3he/T)*0t>:b%u*d^t|e", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/>eU'(w*.{3he", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(file0, mockFile0);
      
      String string5 = "b'nE>\"&t1ujv_'oh";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string1));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNotNull(singleDimensionShardSpec0);
      
      DataSegment dataSegment0 = new DataSegment(string2, interval0, string5, map0, linkedList0, linkedList0, singleDimensionShardSpec0, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertEquals("_-5877597-08-07T20:21:21.320Z_2014-02-14T20:21:21.320Z_b'nE>\"&t1ujv_'oh_-1", dataSegment0.getIdentifier());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("", dataSegment0.getDataSource());
      assertEquals("b'nE>\"&t1ujv_'oh", dataSegment0.getVersion());
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(linkedList0.contains(string1));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string0, string0, string0);
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertNotNull(aWSDevPayCredentials0);
      
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      String string1 = "nD@{%R=HEYji&";
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string1);
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      HttpClient httpClient0 = new HttpClient();
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNotNull(httpClient0);
      
      HostConfiguration hostConfiguration0 = httpClient0.getHostConfiguration();
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertNotNull(hostConfiguration0);
      
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("", restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("", restS3Service0.getDevPayUserToken());
      assertNotNull(restS3Service0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper2);
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getUserToken());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("", aWSDevPayCredentials0.getProductToken());
      assertEquals("", aWSDevPayCredentials0.getSecretKey());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getHost());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("", restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("", restS3Service0.getDevPayUserToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertNotNull(rawLocalFileSystem0);
      
      String string2 = "')";
      String string3 = "jPxpsr!Lx.I})]?{&i1";
      Path path0 = new Path(string2, string3);
      assertNotNull(path0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      Path path1 = new Path(jsonFactory0.FORMAT_NAME_JSON, path0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(path1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(path1.equals((Object)path0));
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      String string4 = "s3_zip";
      Path path2 = new Path(path1, string4);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(path2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      Path path3 = rawLocalFileSystem0.makeQualified(path2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertNotNull(path3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path0));
      assertFalse(path3.equals((Object)path1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(path0, path1);
      assertNotSame(path0, path2);
      assertNotSame(path0, path3);
      assertNotSame(path1, path0);
      assertNotSame(path1, path3);
      assertNotSame(path1, path2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(path2, path3);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertNotSame(path3, path1);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      File file0 = rawLocalFileSystem0.pathToFile(path3);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("s3_zip", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/JSON/')/jPxpsr!Lx.I})]?{&i1", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/JSON/')/jPxpsr!Lx.I})]?{&i1/s3_zip", file0.toString());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertNotNull(file0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path3));
      assertFalse(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path3));
      assertFalse(path1.equals((Object)path2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(path2.equals((Object)path3));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path0));
      assertFalse(path3.equals((Object)path1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(path0, path1);
      assertNotSame(path0, path2);
      assertNotSame(path0, path3);
      assertNotSame(path1, path0);
      assertNotSame(path1, path3);
      assertNotSame(path1, path2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(path2, path3);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertNotSame(path3, path1);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "t>:b%u*d^t|e";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertNotNull(gSCredentials0);
      
      CredentialsProvider credentialsProvider0 = null;
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      
      HostConfiguration hostConfiguration0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isHttpsOnly());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNotNull(restS3Service0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isHttpsOnly());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string2 = "";
      String string3 = "";
      MockFile mockFile0 = new MockFile(string2, string3);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(hostConfiguration0, dateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(mutableDateTime0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Interval interval0 = new Interval(days0, mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(interval0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Map<String, Object> map0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isBinary());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNull());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNotNull(bigIntegerNode0);
      
      String string4 = ">eU'(w*.{3he/T)*";
      File file0 = MockFile.createTempFile(string4, string0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/>eU'(w*.{3he", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/>eU'(w*.{3he/T)*0t>:b%u*d^t|e", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("T)*0t>:b%u*d^t|e", file0.getName());
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(mockFile0.equals((Object)file0));
      assertSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(mockFile0, file0);
      
      String string5 = "b'nE>\"&t1ujv_'oh";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string1));
      
      List<String> list0 = null;
      List<String> list1 = bigIntegerNode0.findValuesAsText(string0, list0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isBinary());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNull());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(list1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNotNull(singleDimensionShardSpec0);
      
      DataSegment dataSegment0 = new DataSegment(string3, interval0, string0, map0, list1, list0, singleDimensionShardSpec0, restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jets3tProperties0.isLoaded());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isBinary());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNull());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isHttpsOnly());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals(1L, dataSegment0.getSize());
      assertEquals("", dataSegment0.getDataSource());
      assertEquals("_-5877597-08-07T20:21:21.320Z_2014-02-14T20:21:21.320Z_t>:b%u*d^t|e_-1", dataSegment0.getIdentifier());
      assertEquals("t>:b%u*d^t|e", dataSegment0.getVersion());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "t>:b%u*d^t|e";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertNotNull(gSCredentials0);
      
      CredentialsProvider credentialsProvider0 = null;
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      
      HostConfiguration hostConfiguration0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNotNull(restS3Service0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn((String) null).when(s3SegmentPusherConfig0).getBucket();
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string2 = "8";
      String string3 = "";
      MockFile mockFile0 = new MockFile(string2, string3);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(hostConfiguration0, dateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Interval interval0 = new Interval(days0, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(interval0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Map<String, Object> map0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isNull());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNotNull(bigIntegerNode0);
      
      String string4 = ">eU'(w*.{3he/T)*";
      File file0 = MockFile.createTempFile(string4, string0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/>eU'(w*.{3he", file0.getParent());
      assertEquals("/tmp/>eU'(w*.{3he/T)*0t>:b%u*d^t|e", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("T)*0t>:b%u*d^t|e", file0.getName());
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("8", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/8", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(mockFile0, file0);
      
      String string5 = "b'nE>\"&t1ujv_'oh";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string2));
      
      File file1 = mockFile0.getCanonicalFile();
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2", file1.getParent());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertFalse(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("8", file1.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/8", file1.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("8", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/8", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.equals((Object)mockFile0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      
      List<String> list0 = null;
      List<String> list1 = bigIntegerNode0.findValuesAsText(string0, list0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isNull());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(list1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNotNull(singleDimensionShardSpec0);
      
      DataSegment dataSegment0 = new DataSegment(string3, interval0, string0, map0, list1, list0, singleDimensionShardSpec0, restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(jets3tProperties0.isLoaded());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isNull());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1L, dataSegment0.getSize());
      assertEquals("_-5877597-08-07T20:21:21.320Z_2014-02-14T20:21:21.320Z_t>:b%u*d^t|e_-1", dataSegment0.getIdentifier());
      assertEquals("", dataSegment0.getDataSource());
      assertEquals("t>:b%u*d^t|e", dataSegment0.getVersion());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000095\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "t>:b%u*d^t|e";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertNotNull(gSCredentials0);
      
      CredentialsProvider credentialsProvider0 = null;
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      
      HostConfiguration hostConfiguration0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNotNull(restS3Service0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertFalse(jets3tProperties0.isLoaded());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string2 = "";
      String string3 = "";
      MockFile mockFile0 = new MockFile(string2, string3);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertNotNull(days0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(hostConfiguration0, dateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(mutableDateTime0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Interval interval0 = new Interval(days0, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(interval0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Map<String, Object> map0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.getTextValue());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isPojo());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isTextual());
      assertTrue(bigIntegerNode0.isNumber());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertNotNull(bigIntegerNode0);
      
      String string4 = ">eU'(w*.{3he/T)*";
      File file0 = MockFile.createTempFile(string4, string0);
      assertEquals("T)*0t>:b%u*d^t|e", file0.getName());
      assertEquals("/tmp/>eU'(w*.{3he/T)*0t>:b%u*d^t|e", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/>eU'(w*.{3he", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(mockFile0.equals((Object)file0));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertNotSame(mockFile0, file0);
      
      long long0 = bigIntegerNode0.asLong();
      assertEquals(0L, long0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.getTextValue());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isPojo());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isTextual());
      assertTrue(bigIntegerNode0.isNumber());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      
      String string5 = "b'nE>\"&t1ujv_'oh";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string2));
      
      List<String> list0 = null;
      List<String> list1 = bigIntegerNode0.findValuesAsText(string0, list0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.getTextValue());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isPojo());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isTextual());
      assertTrue(bigIntegerNode0.isNumber());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertNull(list1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNotNull(singleDimensionShardSpec0);
      
      DataSegment dataSegment0 = new DataSegment(string3, interval0, string0, map0, list1, list0, singleDimensionShardSpec0, restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jets3tProperties0.isLoaded());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.getTextValue());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isPojo());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isTextual());
      assertTrue(bigIntegerNode0.isNumber());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals(1, days0.size());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals("", dataSegment0.getDataSource());
      assertEquals("_-5877597-08-07T20:21:21.320Z_2014-02-14T20:21:21.320Z_t>:b%u*d^t|e_-1", dataSegment0.getIdentifier());
      assertEquals(1L, dataSegment0.getSize());
      assertEquals("t>:b%u*d^t|e", dataSegment0.getVersion());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "t>:b%u*d^t|e";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertNotNull(gSCredentials0);
      
      CredentialsProvider credentialsProvider0 = null;
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertFalse(jets3tProperties0.isLoaded());
      assertNotNull(jets3tProperties0);
      
      HostConfiguration hostConfiguration0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNotNull(restS3Service0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string1 = "org.joda.time.YearMonthDay";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string1).when(s3SegmentPusherConfig0).getBucket();
      ObjectMapper objectMapper0 = null;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      String string2 = "bucket";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Interval interval0 = new Interval(days0, mutableDateTime0);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(interval0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Map<String, Object> map0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isNull());
      assertTrue(bigIntegerNode0.isNumber());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isBinary());
      assertNotNull(bigIntegerNode0);
      
      File file0 = MockFile.createTempFile(string0, string0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/t>:b%u*d^t|e0t>:b%u*d^t|e", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("t>:b%u*d^t|e0t>:b%u*d^t|e", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("t>:b%u*d^t|e", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("t>:b%u*d^t|e", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      
      String string3 = "b'nE>\"&t1ujv_'oh";
      File file1 = MockFile.createTempFile(string3, string0, (File) mockFile0);
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/t>:b%u*d^t|e", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertEquals("b'nE>\"&t1ujv_'oh1t>:b%u*d^t|e", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_2/t>:b%u*d^t|e/b'nE>\"&t1ujv_'oh1t>:b%u*d^t|e", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("t>:b%u*d^t|e", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("t>:b%u*d^t|e", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNotNull(file1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      
      List<String> list0 = null;
      List<String> list1 = bigIntegerNode0.findValuesAsText(string0, list0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isNull());
      assertTrue(bigIntegerNode0.isNumber());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isBinary());
      assertNull(list1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNotNull(singleDimensionShardSpec0);
      
      DataSegment dataSegment0 = new DataSegment(string2, interval0, string0, map0, list1, list0, singleDimensionShardSpec0, restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals((-185541194691518680L), interval0.getStartMillis());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getAccessKey());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getFriendlyName());
      assertEquals("t>:b%u*d^t|e", gSCredentials0.getSecretKey());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isNull());
      assertTrue(bigIntegerNode0.isNumber());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isBoolean());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("t>:b%u*d^t|e", restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals("bucket", dataSegment0.getDataSource());
      assertEquals("t>:b%u*d^t|e", dataSegment0.getVersion());
      assertEquals(1L, dataSegment0.getSize());
      assertEquals("bucket_-5877597-08-07T20:21:21.320Z_2014-02-14T20:21:21.320Z_t>:b%u*d^t|e_-1", dataSegment0.getIdentifier());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000088\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
